//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ACHDetails
	{
		
		/// <summary>
		/// The last few digits of the bank account number.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_number_suffix")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Account_number_suffix { get; set; }
		
		/// <summary>
		/// The type of the bank account performing the transfer. The account type can be `CHECKING`,
		///`SAVINGS`, or `UNKNOWN`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Account_type { get; set; }
		
		/// <summary>
		/// The routing number for the bank account.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Routing_number { get; set; }
	}
	
	/// <summary>
	/// Defines the request parameters for the `AcceptDispute` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptDisputeRequest
	{
	}
	
	/// <summary>
	/// Defines the fields in an `AcceptDispute` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptDisputeResponse
	{
		
		/// <summary>
		/// Represents a dispute a cardholder initiated with their bank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dispute")]
		public Dispute Dispute { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Represents a dispute a cardholder initiated with their bank.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dispute
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// The ID of the dispute in the card brand system, generated by the card brand.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand_dispute_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Brand_dispute_id { get; set; }
		
		/// <summary>
		/// The card brand used in the disputed payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_brand")]
		public string Card_brand { get; set; }
		
		/// <summary>
		/// The timestamp when the dispute was created, in RFC 3339 format.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The unique ID for this `Dispute`, generated by Square.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dispute_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Dispute_id { get; set; }
		
		/// <summary>
		/// The payment the cardholder disputed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disputed_payment")]
		public DisputedPayment Disputed_payment { get; set; }
		
		/// <summary>
		/// The time when the next action is due, in RFC 3339 format.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_at")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Due_at { get; set; }
		
		/// <summary>
		/// The IDs of the evidence associated with the dispute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence_ids")]
		public string[] Evidence_ids { get; set; }
		
		/// <summary>
		/// The unique ID for this `Dispute`, generated by Square.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the location where the dispute originated.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The dispute reason why the cardholder initiated the dispute with their bank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The timestamp when the dispute was reported, in RFC 3339 format.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reported_at")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Reported_at { get; set; }
		
		/// <summary>
		/// The timestamp when the dispute was reported, in RFC 3339 format.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reported_date")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Reported_date { get; set; }
		
		/// <summary>
		/// The current state of this dispute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The timestamp when the dispute was last updated, in RFC 3339 format.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// The current version of the `Dispute`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Represents an amount of money. `Money` fields can be signed or unsigned.
	///Fields that do not explicitly define whether they are signed or unsigned are
	///considered unsigned and can only hold positive amounts. For signed fields, the
	///sign of the value indicates the purpose of the money transfer. See
	///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	///for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Money
	{
		
		/// <summary>
		/// The amount of money, in the smallest denomination of the currency
		///indicated by `currency`. For example, when `currency` is `USD`, `amount` is
		///in cents. Monetary amounts can be positive or negative. See the specific
		///field description to determine the meaning of the sign in a particular case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// The type of currency, in __ISO 4217 format__. For example, the currency
		///code for US dollars is `USD`.
		///
		///See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// The payment the cardholder disputed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisputedPayment
	{
		
		/// <summary>
		/// Square-generated unique ID of the payment being disputed.
		/// Min length: 1
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Payment_id { get; set; }
	}
	
	/// <summary>
	/// Represents an error encountered during a request to the Connect API.
	///
	///See [Handling errors](https://developer.squareup.com/docs/build-basics/handling-errors) for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// The high-level category for the error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The specific code of the error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A human-readable description of the error for debugging purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The name of the field provided in the original request (if any) that
		///the error pertains to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
	}
	
	/// <summary>
	/// A request to accumulate points for a purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccumulateLoyaltyPointsRequest
	{
		
		/// <summary>
		/// Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accumulate_points")]
		public LoyaltyEventAccumulatePoints Accumulate_points { get; set; }
		
		/// <summary>
		/// A unique string that identifies the `AccumulateLoyaltyPoints` request. 
		///Keys can be any valid string but must be unique for every request.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the purchase was made.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
	}
	
	/// <summary>
	/// Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventAccumulatePoints
	{
		
		/// <summary>
		/// The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loyalty_program_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Loyalty_program_id { get; set; }
		
		/// <summary>
		/// The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the buyer accumulated the points.
		///This field is returned only if the Orders API is used to process orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The number of points accumulated by the event.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="points")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Points { get; set; }
	}
	
	/// <summary>
	/// A response containing the resulting loyalty event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccumulateLoyaltyPointsResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Provides information about a loyalty event. 
		///For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public LoyaltyEvent Event { get; set; }
	}
	
	/// <summary>
	/// Provides information about a loyalty event. 
	///For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEvent
	{
		
		/// <summary>
		/// Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accumulate_points")]
		public LoyaltyEventAccumulatePoints Accumulate_points { get; set; }
		
		/// <summary>
		/// Provides metadata when the event `type` is `ADJUST_POINTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjust_points")]
		public LoyaltyEventAdjustPoints Adjust_points { get; set; }
		
		/// <summary>
		/// Provides metadata when the event `type` is `CREATE_REWARD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="create_reward")]
		public LoyaltyEventCreateReward Create_reward { get; set; }
		
		/// <summary>
		/// The timestamp when the event was created, in RFC 3339 format.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Provides metadata when the event `type` is `DELETE_REWARD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delete_reward")]
		public LoyaltyEventDeleteReward Delete_reward { get; set; }
		
		/// <summary>
		/// Provides metadata when the event `type` is `EXPIRE_POINTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expire_points")]
		public LoyaltyEventExpirePoints Expire_points { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the loyalty event.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which the event occurred.
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loyalty_account_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Loyalty_account_id { get; set; }
		
		/// <summary>
		/// Provides metadata when the event `type` is `OTHER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_event")]
		public LoyaltyEventOther Other_event { get; set; }
		
		/// <summary>
		/// Provides metadata when the event `type` is `REDEEM_REWARD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redeem_reward")]
		public LoyaltyEventRedeemReward Redeem_reward { get; set; }
		
		/// <summary>
		/// Defines whether the event was generated by the Square Point of Sale.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The type of the loyalty event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Provides metadata when the event `type` is `ADJUST_POINTS`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventAdjustPoints
	{
		
		/// <summary>
		/// The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loyalty_program_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Loyalty_program_id { get; set; }
		
		/// <summary>
		/// The number of points added or removed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="points")]
		public int Points { get; set; }
		
		/// <summary>
		/// The reason for the adjustment of points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Provides metadata when the event `type` is `CREATE_REWARD`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventCreateReward
	{
		
		/// <summary>
		/// The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loyalty_program_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Loyalty_program_id { get; set; }
		
		/// <summary>
		/// The loyalty points used to create the reward.
		/// Required
		/// Maximum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="points")]
		[System.ComponentModel.DataAnnotations.Range(System.Int32.MinValue, 0)]
		public int Points { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the created [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
		///This field is returned only if the event source is `LOYALTY_API`.
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reward_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Reward_id { get; set; }
	}
	
	/// <summary>
	/// Provides metadata when the event `type` is `DELETE_REWARD`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventDeleteReward
	{
		
		/// <summary>
		/// The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loyalty_program_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Loyalty_program_id { get; set; }
		
		/// <summary>
		/// The number of points returned to the loyalty account.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="points")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Points { get; set; }
		
		/// <summary>
		/// The ID of the deleted [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
		///This field is returned only if the event source is `LOYALTY_API`.
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reward_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Reward_id { get; set; }
	}
	
	/// <summary>
	/// Provides metadata when the event `type` is `EXPIRE_POINTS`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventExpirePoints
	{
		
		/// <summary>
		/// The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loyalty_program_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Loyalty_program_id { get; set; }
		
		/// <summary>
		/// The number of points expired.
		/// Required
		/// Maximum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="points")]
		[System.ComponentModel.DataAnnotations.Range(System.Int32.MinValue, 0)]
		public int Points { get; set; }
	}
	
	/// <summary>
	/// Provides metadata when the event `type` is `OTHER`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventOther
	{
		
		/// <summary>
		/// The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loyalty_program_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Loyalty_program_id { get; set; }
		
		/// <summary>
		/// The number of points added or removed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="points")]
		public int Points { get; set; }
	}
	
	/// <summary>
	/// Provides metadata when the event `type` is `REDEEM_REWARD`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventRedeemReward
	{
		
		/// <summary>
		/// The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loyalty_program_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Loyalty_program_id { get; set; }
		
		/// <summary>
		/// The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that redeemed the reward.
		///This field is returned only if the Orders API is used to process orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The ID of the redeemed [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
		///This field is returned only if the event source is `LOYALTY_API`.
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reward_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Reward_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActionCancelReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUYER_CANCELED")]
		BUYER_CANCELED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SELLER_CANCELED")]
		SELLER_CANCELED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIMED_OUT")]
		TIMED_OUT = 2,
	}
	
	/// <summary>
	/// Defines the fields that are included in the request body of
	///a request to the [AddGroupToCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/add-group-to-customer) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddGroupToCustomerRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [AddGroupToCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/add-group-to-customer) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddGroupToCustomerResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Represents an additional recipient (other than the merchant) receiving a portion of this tender.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdditionalRecipient
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// The description of the additional recipient.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Description { get; set; }
		
		/// <summary>
		/// The location ID for a recipient (other than the merchant) receiving a portion of this tender.
		/// Required
		/// Min length: 1
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The unique ID for this [AdditionalRecipientReceivable](https://developer.squareup.com/reference/square_2021-08-18/objects/AdditionalRecipientReceivable), assigned by the server.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receivable_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Receivable_id { get; set; }
	}
	
	/// <summary>
	/// Represents a postal address in a country. The address format is based 
	///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
	///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
	///This format has dedicated fields for four address components: postal code, 
	///locality (city), administrative district (state, prefecture, or province), and 
	///sublocality (town or village). These components have dedicated fields in the 
	///`Address` object because software sometimes behaves differently based on them. 
	///For example, sales tax software may charge different amounts of sales tax 
	///based on the postal code, and some software is only available in 
	///certain states due to compliance reasons.
	///
	///For the remaining address components, the `Address` type provides the 
	///`address_line_1` and `address_line_2` fields for free-form data entry. 
	///These fields are free-form because the remaining address components have 
	///too many variations around the world and typical software does not parse 
	///these components. These fields enable users to enter anything they want. 
	///
	///Note that, in the current implementation, all other `Address` type fields are blank. 
	///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
	///`administrative_district_level_2`, `administrative_district_level_3`, 
	///`first_name`, `last_name`, and `organization`. 
	///
	///When it comes to localization, the seller's language preferences 
	///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
	///are ignored for addresses. Even though Square products (such as Square Point of Sale 
	///and the Seller Dashboard) mostly use a seller's language preference in 
	///communication, when it comes to addresses, they will use English for a US address, 
	///Japanese for an address in Japan, and so on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Address
	{
		
		/// <summary>
		/// The first line of the address.
		///
		///Fields that start with `address_line` provide the address's most specific
		///details, like street number, street name, and building name. They do *not*
		///provide less specific details like city, state/province, or country (these
		///details are provided in other fields).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line_1")]
		public string Address_line_1 { get; set; }
		
		/// <summary>
		/// The second line of the address, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line_2")]
		public string Address_line_2 { get; set; }
		
		/// <summary>
		/// The third line of the address, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line_3")]
		public string Address_line_3 { get; set; }
		
		/// <summary>
		/// A civil entity within the address's country. In the US, this
		///is the state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrative_district_level_1")]
		public string Administrative_district_level_1 { get; set; }
		
		/// <summary>
		/// A civil entity within the address's `administrative_district_level_1`.
		///In the US, this is the county.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrative_district_level_2")]
		public string Administrative_district_level_2 { get; set; }
		
		/// <summary>
		/// A civil entity within the address's `administrative_district_level_2`,
		///if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrative_district_level_3")]
		public string Administrative_district_level_3 { get; set; }
		
		/// <summary>
		/// The address's country, in ISO 3166-1-alpha-2 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Optional first name when it's representing recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Optional last name when it's representing recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// The city or town of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Optional organization name when it's representing recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// The address's postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// A civil region within the address's `locality`, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sublocality")]
		public string Sublocality { get; set; }
		
		/// <summary>
		/// A civil region within the address's `sublocality`, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sublocality_2")]
		public string Sublocality_2 { get; set; }
		
		/// <summary>
		/// A civil region within the address's `sublocality_2`, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sublocality_3")]
		public string Sublocality_3 { get; set; }
	}
	
	/// <summary>
	/// A request to adjust (add or subtract) points manually.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdjustLoyaltyPointsRequest
	{
		
		/// <summary>
		/// Provides metadata when the event `type` is `ADJUST_POINTS`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adjust_points")]
		public LoyaltyEventAdjustPoints Adjust_points { get; set; }
		
		/// <summary>
		/// A unique string that identifies this `AdjustLoyaltyPoints` request. 
		///Keys can be any valid string, but must be unique for every request.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
	}
	
	/// <summary>
	/// A response that includes the loyalty event that 
	///resulted from the successful API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdjustLoyaltyPointsResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Provides information about a loyalty event. 
		///For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public LoyaltyEvent Event { get; set; }
	}
	
	/// <summary>
	/// Defines an appointment segment of a booking.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentSegment
	{
		
		/// <summary>
		/// The time span in minutes of an appointment segment.
		/// Required
		/// Minimum: 0
		/// Maximum: 1500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration_minutes")]
		[System.ComponentModel.DataAnnotations.Range(0, 1500)]
		public int Duration_minutes { get; set; }
		
		/// <summary>
		/// The ID of the [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) object representing the service booked in this segment.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service_variation_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Service_variation_id { get; set; }
		
		/// <summary>
		/// The current version of the item variation representing the service booked in this segment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service_variation_version")]
		public long Service_variation_version { get; set; }
		
		/// <summary>
		/// The ID of the [TeamMember](https://developer.squareup.com/reference/square_2021-08-18/objects/TeamMember) object representing the team member booked in this segment.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="team_member_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Team_member_id { get; set; }
	}
	
	/// <summary>
	/// Describes a slot available for booking, encapsulating appointment segments, the location and starting time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Availability
	{
		
		/// <summary>
		/// The list of appointment segments available for booking
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appointment_segments")]
		public AppointmentSegment[] Appointment_segments { get; set; }
		
		/// <summary>
		/// The ID of the location available for booking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The RFC 3339 timestamp specifying the beginning time of the slot available for booking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_at")]
		public string Start_at { get; set; }
	}
	
	/// <summary>
	/// Represents a bank account. For more information about 
	///linking a bank account to a Square account, see 
	///[Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BankAccount
	{
		
		/// <summary>
		/// The last few digits of the account number.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number_suffix")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Account_number_suffix { get; set; }
		
		/// <summary>
		/// The financial purpose of the associated bank account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_type")]
		public string Account_type { get; set; }
		
		/// <summary>
		/// Read only. Name of actual financial institution. 
		///For example "Bank of America".
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Bank_name { get; set; }
		
		/// <summary>
		/// The ISO 3166 Alpha-2 country code where the bank account is based.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Indicates whether it is possible for Square to send money to this bank account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditable")]
		public bool Creditable { get; set; }
		
		/// <summary>
		/// The 3-character ISO 4217 currency code indicating the operating
		///currency of the bank account. For example, the currency code for US dollars
		///is `USD`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Reference identifier that will be displayed to UK bank account owners
		///when collecting direct debit authorization. Only required for UK bank accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debit_mandate_reference_id")]
		public string Debit_mandate_reference_id { get; set; }
		
		/// <summary>
		/// Indicates whether it is possible for Square to take money from this 
		///bank account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debitable")]
		public bool Debitable { get; set; }
		
		/// <summary>
		/// A Square-assigned, unique identifier for the bank account based on the
		///account information. The account fingerprint can be used to compare account
		///entries and determine if the they represent the same real-world bank account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Name of the account holder. This name must match the name 
		///on the targeted bank account record.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="holder_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Holder_name { get; set; }
		
		/// <summary>
		/// The unique, Square-issued identifier for the bank account.
		/// Required
		/// Min length: 1
		/// Max length: 30
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Id { get; set; }
		
		/// <summary>
		/// The location to which the bank account belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// Primary identifier for the bank. For more information, see 
		///[Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
		/// Required
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="primary_bank_identification_number")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Primary_bank_identification_number { get; set; }
		
		/// <summary>
		/// Client-provided identifier for linking the banking account to an entity
		///in a third-party system (for example, a bank account number or a user identifier).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Secondary identifier for the bank. For more information, see 
		///[Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondary_bank_identification_number")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Secondary_bank_identification_number { get; set; }
		
		/// <summary>
		/// Read-only. The current verification status of this BankAccount object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The current version of the `BankAccount`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Additional details about BANK_ACCOUNT type payments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BankAccountPaymentDetails
	{
		
		/// <summary>
		/// The ownership type of the bank account performing the transfer.
		///The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_ownership_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Account_ownership_type { get; set; }
		
		/// <summary>
		/// ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ach_details")]
		public ACHDetails Ach_details { get; set; }
		
		/// <summary>
		/// The name of the bank associated with the bank account.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Bank_name { get; set; }
		
		/// <summary>
		/// The two-letter ISO code representing the country the bank account is located in.
		/// Min length: 2
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Country { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Uniquely identifies the bank account for this seller and can be used
		///to determine if payments are from the same bank account.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// The statement description as sent to the bank.
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statement_description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Statement_description { get; set; }
		
		/// <summary>
		/// The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Transfer_type { get; set; }
	}
	
	/// <summary>
	/// Indicates the current verification status of a `BankAccount` object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BankAccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERIFICATION_IN_PROGRESS")]
		VERIFICATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERIFIED")]
		VERIFIED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 2,
	}
	
	/// <summary>
	/// Indicates the financial purpose of the bank account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BankAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHECKING")]
		CHECKING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAVINGS")]
		SAVINGS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVESTMENT")]
		INVESTMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUSINESS_CHECKING")]
		BUSINESS_CHECKING = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchChangeInventoryRequest
	{
		
		/// <summary>
		/// The set of physical counts and inventory adjustments to be made.
		///Changes are applied based on the client-supplied timestamp and may be sent
		///out of order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changes")]
		public InventoryChange[] Changes { get; set; }
		
		/// <summary>
		/// A client-supplied, universally unique identifier (UUID) for the
		///request.
		///
		///See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the
		///[API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more
		///information.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// Indicates whether the current physical count should be ignored if
		///the quantity is unchanged since the last physical count. Default: `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignore_unchanged_counts")]
		public System.Nullable<System.Boolean> Ignore_unchanged_counts { get; set; }
	}
	
	/// <summary>
	/// Represents a single physical count, inventory, adjustment, or transfer
	///that is part of the history of inventory changes for a particular
	///[CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InventoryChange
	{
		
		/// <summary>
		/// Represents a change in state or quantity of product inventory at a
		///particular time and location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjustment")]
		public InventoryAdjustment Adjustment { get; set; }
		
		/// <summary>
		/// Represents the unit used to measure a `CatalogItemVariation` and
		///specifies the precision for decimal quantities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurement_unit")]
		public CatalogMeasurementUnit Measurement_unit { get; set; }
		
		/// <summary>
		/// The ID of the [CatalogMeasurementUnit](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogMeasurementUnit) object representing the catalog measurement unit associated with the inventory change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurement_unit_id")]
		public string Measurement_unit_id { get; set; }
		
		/// <summary>
		/// Represents the quantity of an item variation that is physically present
		///at a specific location, verified by a seller or a seller's employee. For example,
		///a physical count might come from an employee counting the item variations on
		///hand or from syncing with an external system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physical_count")]
		public InventoryPhysicalCount Physical_count { get; set; }
		
		/// <summary>
		/// Represents the transfer of a quantity of product inventory at a
		///particular time from one location to another.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer")]
		public InventoryTransfer Transfer { get; set; }
		
		/// <summary>
		/// Indicates how the inventory change is applied. See
		///[InventoryChangeType](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryChangeType) for all possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents a change in state or quantity of product inventory at a
	///particular time and location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InventoryAdjustment
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustment_group")]
		public InventoryAdjustmentGroup Adjustment_group { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the
		///[CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		///[CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
		///supported for the `ITEM_VARIATION` type.
		/// Max length: 14
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Catalog_object_type { get; set; }
		
		/// <summary>
		/// An RFC 3339-formatted timestamp that indicates when the inventory adjustment is received.
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
		///inventory adjustment.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) of the related quantity
		///of items before the adjustment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from_state")]
		public string From_state { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the goods receipt that caused the
		///adjustment. Only relevant for state transitions from the Square for Retail
		///app.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goods_receipt_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Goods_receipt_id { get; set; }
		
		/// <summary>
		/// A unique ID generated by Square for the
		///`InventoryAdjustment`.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Id { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		///quantity of items is being tracked.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// A client-generated RFC 3339-formatted timestamp that indicates when
		///the inventory adjustment took place. For inventory adjustment updates, the `occurred_at`
		///timestamp cannot be older than 24 hours or in the future relative to the
		///time of the request.
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurred_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string Occurred_at { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the purchase order that caused the
		///adjustment. Only relevant for state transitions from the Square for Retail
		///app.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchase_order_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Purchase_order_id { get; set; }
		
		/// <summary>
		/// The number of items affected by the adjustment as a decimal string.
		///Can support up to 5 digits after the decimal point.
		/// Max length: 26
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		[System.ComponentModel.DataAnnotations.MaxLength(26)]
		public string Quantity { get; set; }
		
		/// <summary>
		/// An optional ID provided by the application to tie the
		///`InventoryAdjustment` to an external
		///system.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the [Refund][#type-refund] that
		///caused the adjustment. Only relevant for refund-related state
		///transitions.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Refund_id { get; set; }
		
		/// <summary>
		/// Provides information about the application used to generate a change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public SourceApplication Source { get; set; }
		
		/// <summary>
		/// The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) of the related quantity
		///of items after the adjustment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to_state")]
		public string To_state { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_price_money")]
		public Money Total_price_money { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the [Transaction][#type-transaction] that
		///caused the adjustment. Only relevant for payment-related state
		///transitions.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InventoryAdjustmentGroup
	{
		
		/// <summary>
		/// Representative `from_state` for adjustments within the group. For example, for a group adjustment from `IN_STOCK` to `SOLD`,
		///there can be two component adjustments in the group: one from `IN_STOCK`to `COMPOSED` and the other one from `COMPOSED` to `SOLD`.
		///Here, the representative `from_state` for the `InventoryAdjustmentGroup` is `IN_STOCK`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from_state")]
		public string From_state { get; set; }
		
		/// <summary>
		/// A unique ID generated by Square for the
		///`InventoryAdjustmentGroup`.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Id { get; set; }
		
		/// <summary>
		/// The inventory adjustment of the composed variation.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="root_adjustment_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Root_adjustment_id { get; set; }
		
		/// <summary>
		/// Representative `to_state` for adjustments within group. For example, for a group adjustment from `IN_STOCK` to `SOLD`,
		///the two component adjustments in the group can be from `IN_STOCK` to `COMPOSED` and from `COMPOSED` to `SOLD`. 
		///Here, the representative `to_state` of the `InventoryAdjustmentGroup` is `SOLD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to_state")]
		public string To_state { get; set; }
	}
	
	/// <summary>
	/// Provides information about the application used to generate a change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceApplication
	{
		
		/// <summary>
		/// Read-only Square ID assigned to the application. Only used for
		///[Product](https://developer.squareup.com/reference/square_2021-08-18/enums/Product) type `EXTERNAL_API`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="application_id")]
		public string Application_id { get; set; }
		
		/// <summary>
		/// Read-only display name assigned to the application
		///(e.g. `"Custom Application"`, `"Square POS 4.74 for Android"`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Read-only [Product](https://developer.squareup.com/reference/square_2021-08-18/enums/Product) type for the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
	}
	
	/// <summary>
	/// Represents the unit used to measure a `CatalogItemVariation` and
	///specifies the precision for decimal quantities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogMeasurementUnit
	{
		
		/// <summary>
		/// Represents a unit of measurement to use with a quantity, such as ounces
		///or inches. Exactly one of the following fields are required: `custom_unit`,
		///`area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurement_unit")]
		public MeasurementUnit Measurement_unit { get; set; }
		
		/// <summary>
		/// An integer between 0 and 5 that represents the maximum number of
		///positions allowed after the decimal in quantities measured with this unit.
		///For example:
		///
		///- if the precision is 0, the quantity can be 1, 2, 3, etc.
		///- if the precision is 1, the quantity can be 0.1, 0.2, etc.
		///- if the precision is 2, the quantity can be 0.01, 0.12, etc.
		///
		///Default: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Int32> Precision { get; set; }
	}
	
	/// <summary>
	/// Represents a unit of measurement to use with a quantity, such as ounces
	///or inches. Exactly one of the following fields are required: `custom_unit`,
	///`area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MeasurementUnit
	{
		
		/// <summary>
		/// Represents a standard area unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="area_unit")]
		public string Area_unit { get; set; }
		
		/// <summary>
		/// The information needed to define a custom unit, provided by the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_unit")]
		public MeasurementUnitCustom Custom_unit { get; set; }
		
		/// <summary>
		/// Reserved for API integrations that lack the ability to specify a real measurement unit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generic_unit")]
		public string Generic_unit { get; set; }
		
		/// <summary>
		/// Represents a standard length unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length_unit")]
		public string Length_unit { get; set; }
		
		/// <summary>
		/// Represents a standard unit of time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_unit")]
		public string Time_unit { get; set; }
		
		/// <summary>
		/// Represents the type of the measurement unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Represents a standard volume unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume_unit")]
		public string Volume_unit { get; set; }
		
		/// <summary>
		/// Represents a standard unit of weight or mass.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight_unit")]
		public string Weight_unit { get; set; }
	}
	
	/// <summary>
	/// The information needed to define a custom unit, provided by the seller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MeasurementUnitCustom
	{
		
		/// <summary>
		/// The abbreviation of the custom unit, such as "bsh" (bushel). This appears
		///in the cart for the Point of Sale app, and in reports.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// The name of the custom unit, for example "bushel".
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents the quantity of an item variation that is physically present
	///at a specific location, verified by a seller or a seller's employee. For example,
	///a physical count might come from an employee counting the item variations on
	///hand or from syncing with an external system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InventoryPhysicalCount
	{
		
		/// <summary>
		/// The Square-generated ID of the
		///[CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		///[CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
		///supported for the `ITEM_VARIATION` type.
		/// Max length: 14
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Catalog_object_type { get; set; }
		
		/// <summary>
		/// An RFC 3339-formatted timestamp that indicates when the physical count is received.
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
		///physical count.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// A unique Square-generated ID for the
		///[InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount).
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Id { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		///quantity of items is being tracked.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// A client-generated RFC 3339-formatted timestamp that indicates when
		///the physical count was examined. For physical count updates, the `occurred_at`
		///timestamp cannot be older than 24 hours or in the future relative to the
		///time of the request.
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurred_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string Occurred_at { get; set; }
		
		/// <summary>
		/// The number of items affected by the physical count as a decimal string.
		///The number can support up to 5 digits after the decimal point.
		/// Max length: 26
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		[System.ComponentModel.DataAnnotations.MaxLength(26)]
		public string Quantity { get; set; }
		
		/// <summary>
		/// An optional ID provided by the application to tie the
		///[InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to an external
		///system.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Provides information about the application used to generate a change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public SourceApplication Source { get; set; }
		
		/// <summary>
		/// The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related
		///quantity of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// Represents the transfer of a quantity of product inventory at a
	///particular time from one location to another.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InventoryTransfer
	{
		
		/// <summary>
		/// The Square-generated ID of the
		///[CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		///[CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.Tracking is only
		///supported for the `ITEM_VARIATION` type.
		/// Max length: 14
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Catalog_object_type { get; set; }
		
		/// <summary>
		/// An RFC 3339-formatted timestamp that indicates when Square
		///received the transfer request.
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
		///inventory transfer.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		///quantity of items was tracked before the transfer.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from_location_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string From_location_id { get; set; }
		
		/// <summary>
		/// A unique ID generated by Square for the
		///`InventoryTransfer`.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Id { get; set; }
		
		/// <summary>
		/// A client-generated RFC 3339-formatted timestamp that indicates when
		///the transfer took place. For write actions, the `occurred_at` timestamp
		///cannot be older than 24 hours or in the future relative to the time of the
		///request.
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurred_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string Occurred_at { get; set; }
		
		/// <summary>
		/// The number of items affected by the transfer as a decimal string.
		///Can support up to 5 digits after the decimal point.
		/// Max length: 26
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		[System.ComponentModel.DataAnnotations.MaxLength(26)]
		public string Quantity { get; set; }
		
		/// <summary>
		/// An optional ID provided by the application to tie the
		///`InventoryTransfer` to an external system.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Provides information about the application used to generate a change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public SourceApplication Source { get; set; }
		
		/// <summary>
		/// The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the quantity of
		///items being transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		///quantity of items was tracked after the transfer.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to_location_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string To_location_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchChangeInventoryResponse
	{
		
		/// <summary>
		/// Changes created for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changes")]
		public InventoryChange[] Changes { get; set; }
		
		/// <summary>
		/// The current counts for all objects referenced in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public InventoryCount[] Counts { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Represents Square-estimated quantity of items in a particular state at a
	///particular seller location based on the known history of physical counts and
	///inventory adjustments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InventoryCount
	{
		
		/// <summary>
		/// An RFC 3339-formatted timestamp that indicates when the most recent physical count or adjustment affecting
		///the estimated count is received.
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculated_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string Calculated_at { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the
		///[CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		///[CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
		///supported for the `ITEM_VARIATION` type.
		/// Max length: 14
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Catalog_object_type { get; set; }
		
		/// <summary>
		/// Whether the inventory count is for composed variation (TRUE) or not (FALSE). If true, the inventory count will not be present in the response of
		///any of these endpoints: [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory), 
		///[BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes), 
		///[BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts), and 
		///[RetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-changes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_estimated")]
		public System.Nullable<System.Boolean> Is_estimated { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		///quantity of items is being tracked.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The number of items affected by the estimated count as a decimal string.
		///Can support up to 5 digits after the decimal point.
		/// Max length: 26
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		[System.ComponentModel.DataAnnotations.MaxLength(26)]
		public string Quantity { get; set; }
		
		/// <summary>
		/// The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related
		///quantity of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteCatalogObjectsRequest
	{
		
		/// <summary>
		/// The IDs of the CatalogObjects to be deleted. When an object is deleted, other objects
		///in the graph that depend on that object will be deleted as well (for example, deleting a
		///CatalogItem will delete its CatalogItemVariation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_ids")]
		public string[] Object_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteCatalogObjectsResponse
	{
		
		/// <summary>
		/// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this deletion in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted_at")]
		public string Deleted_at { get; set; }
		
		/// <summary>
		/// The IDs of all CatalogObjects deleted by this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted_object_ids")]
		public string[] Deleted_object_ids { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRetrieveCatalogObjectsRequest
	{
		
		/// <summary>
		/// The specific version of the catalog objects to be included in the response. 
		///This allows you to retrieve historical versions of objects. The specified version value is matched against
		///the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s' `version` attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// If `true`, the response will include additional objects that are related to the
		///requested objects, as follows:
		///
		///If the `objects` field of the response contains a CatalogItem, its associated
		///CatalogCategory objects, CatalogTax objects, CatalogImage objects and
		///CatalogModifierLists will be returned in the `related_objects` field of the
		///response. If the `objects` field of the response contains a CatalogItemVariation,
		///its parent CatalogItem will be returned in the `related_objects` field of
		///the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_related_objects")]
		public System.Nullable<System.Boolean> Include_related_objects { get; set; }
		
		/// <summary>
		/// The IDs of the CatalogObjects to be retrieved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object_ids")]
		public string[] Object_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRetrieveCatalogObjectsResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A list of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public CatalogObject[] Objects { get; set; }
		
		/// <summary>
		/// A list of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s referenced by the object in the `objects` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related_objects")]
		public CatalogObject[] Related_objects { get; set; }
	}
	
	/// <summary>
	/// The wrapper object for the Catalog entries of a given object type.
	///
	///The type of a particular `CatalogObject` is determined by the value of the
	///`type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
	///For example, the following list shows some instances of `CatalogObject` of a given `type` and
	///their corresponding data attribute that can be set:
	///- For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
	///- For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
	///- For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
	///- For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
	///- For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
	///- For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
	///- For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
	///- For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
	///- For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
	///- For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
	///- For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
	///- For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
	///- For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
	///
	///
	///For a more detailed discussion of the Catalog data model, please see the
	///[Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogObject
	{
		
		/// <summary>
		/// A list of locations where the object is not present, even if `present_at_all_locations` is `true`.
		///This can include locations that are deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absent_at_location_ids")]
		public string[] Absent_at_location_ids { get; set; }
		
		/// <summary>
		/// The Connect v1 IDs for this object at each location where it is present, where they
		///differ from the object's Connect V2 ID. The field will only be present for objects that
		///have been created or modified by legacy APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_v1_ids")]
		public CatalogV1Id[] Catalog_v1_ids { get; set; }
		
		/// <summary>
		/// A category to which a `CatalogItem` instance belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_data")]
		public CatalogCategory Category_data { get; set; }
		
		/// <summary>
		/// Contains information defining a custom attribute. Custom attributes are
		///intended to store additional information about a catalog object or to associate a
		///catalog object with an entity in another system. Do not use custom attributes
		///to store any sensitive information (personally identifiable information, card details, etc.).
		///[Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_attribute_definition_data")]
		public CatalogCustomAttributeDefinition Custom_attribute_definition_data { get; set; }
		
		/// <summary>
		/// A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair
		///is a [CatalogCustomAttributeValue](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeValue) object. The key is the `key` attribute
		///value defined in the associated [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition)
		///object defined by the application making the request.
		///
		///If the `CatalogCustomAttributeDefinition` object is
		///defined by another application, the `CatalogCustomAttributeDefinition`'s key attribute value is prefixed by
		///the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of
		///`"cocoa_brand"` and the defining application ID is `"abcd1234"`, the key in the map is `"abcd1234:cocoa_brand"`
		///if the application making the request is different from the application defining the custom attribute definition.
		///Otherwise, the key used in the map is simply `"cocoa_brand"`.
		///
		///Application-defined custom attributes that are set at a global (location-independent) level.
		///Custom attribute values are intended to store additional information about a catalog object
		///or associations with an entity in another system. Do not use custom attributes
		///to store any sensitive information (personally identifiable information, card details, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_attribute_values")]
		public System.Collections.Generic.Dictionary<string, CatalogCustomAttributeValue> Custom_attribute_values { get; set; }
		
		/// <summary>
		/// A discount applicable to items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_data")]
		public CatalogDiscount Discount_data { get; set; }
		
		/// <summary>
		/// An identifier to reference this object in the catalog. When a new `CatalogObject`
		///is inserted, the client should set the id to a temporary identifier starting with
		///a "`#`" character. Other objects being inserted or updated within the same request
		///may use this identifier to refer to the new object.
		///
		///When the server receives the new object, it will supply a unique identifier that
		///replaces the temporary identifier for all future references.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Id { get; set; }
		
		/// <summary>
		/// An image file to use in Square catalogs. It can be associated with catalog
		///items, item variations, and categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_data")]
		public CatalogImage Image_data { get; set; }
		
		/// <summary>
		/// Identifies the `CatalogImage` attached to this `CatalogObject`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_id")]
		public string Image_id { get; set; }
		
		/// <summary>
		/// If `true`, the object has been deleted from the database. Must be `false` for new objects
		///being inserted. When deleted, the `updated_at` field will equal the deletion time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_deleted")]
		public System.Nullable<System.Boolean> Is_deleted { get; set; }
		
		/// <summary>
		/// A [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_data")]
		public CatalogItem Item_data { get; set; }
		
		/// <summary>
		/// A group of variations for a `CatalogItem`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_option_data")]
		public CatalogItemOption Item_option_data { get; set; }
		
		/// <summary>
		/// An enumerated value that can link a
		///`CatalogItemVariation` to an item option as one of
		///its item option values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_option_value_data")]
		public CatalogItemOptionValue Item_option_value_data { get; set; }
		
		/// <summary>
		/// An item variation (i.e., product) in the Catalog object model. Each item
		///may have a maximum of 250 item variations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_variation_data")]
		public CatalogItemVariation Item_variation_data { get; set; }
		
		/// <summary>
		/// Represents the unit used to measure a `CatalogItemVariation` and
		///specifies the precision for decimal quantities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurement_unit_data")]
		public CatalogMeasurementUnit Measurement_unit_data { get; set; }
		
		/// <summary>
		/// A modifier applicable to items at the time of sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_data")]
		public CatalogModifier Modifier_data { get; set; }
		
		/// <summary>
		/// A list of modifiers applicable to items at the time of sale.
		///
		///For example, a "Condiments" modifier list applicable to a "Hot Dog" item
		///may contain "Ketchup", "Mustard", and "Relish" modifiers.
		///Use the `selection_type` field to specify whether or not multiple selections from
		///the modifier list are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_list_data")]
		public CatalogModifierList Modifier_list_data { get; set; }
		
		/// <summary>
		/// If `true`, this object is present at all locations (including future locations), except where specified in
		///the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations),
		///except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="present_at_all_locations")]
		public System.Nullable<System.Boolean> Present_at_all_locations { get; set; }
		
		/// <summary>
		/// A list of locations where the object is present, even if `present_at_all_locations` is `false`.
		///This can include locations that are deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="present_at_location_ids")]
		public string[] Present_at_location_ids { get; set; }
		
		/// <summary>
		/// Defines how discounts are automatically applied to a set of items that match the pricing rule
		///during the active time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricing_rule_data")]
		public CatalogPricingRule Pricing_rule_data { get; set; }
		
		/// <summary>
		/// Represents a collection of catalog objects for the purpose of applying a
		///`PricingRule`. Including a catalog object will include all of its subtypes.
		///For example, including a category in a product set will include all of its
		///items and associated item variations in the product set. Including an item in
		///a product set will also include its item variations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_set_data")]
		public CatalogProductSet Product_set_data { get; set; }
		
		/// <summary>
		/// A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quick_amounts_settings_data")]
		public CatalogQuickAmountsSettings Quick_amounts_settings_data { get; set; }
		
		/// <summary>
		/// Describes a subscription plan. For more information, see
		///[Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription_plan_data")]
		public CatalogSubscriptionPlan Subscription_plan_data { get; set; }
		
		/// <summary>
		/// A tax applicable to an item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_data")]
		public CatalogTax Tax_data { get; set; }
		
		/// <summary>
		/// Represents a time period - either a single period or a repeating period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_period_data")]
		public CatalogTimePeriod Time_period_data { get; set; }
		
		/// <summary>
		/// The type of this object. Each object type has expected
		///properties expressed in a structured format within its corresponding `*_data` field below.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `"2016-08-15T23:59:33.123Z"`
		///would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// The version of the object. When updating an object, the version supplied
		///must match the version in the database, otherwise the write will be rejected as conflicting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	/// <summary>
	/// A Square API V1 identifier of an item, including the object ID and its associated location ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogV1Id
	{
		
		/// <summary>
		/// The ID for an object used in the Square API V1, if the object ID differs from the Square API V2 object ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_v1_id")]
		public string Catalog_v1_id { get; set; }
		
		/// <summary>
		/// The ID of the `Location` this Connect V1 ID is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
	}
	
	/// <summary>
	/// A category to which a `CatalogItem` instance belongs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogCategory
	{
		
		/// <summary>
		/// The category name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains information defining a custom attribute. Custom attributes are
	///intended to store additional information about a catalog object or to associate a
	///catalog object with an entity in another system. Do not use custom attributes
	///to store any sensitive information (personally identifiable information, card details, etc.).
	///[Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogCustomAttributeDefinition
	{
		
		/// <summary>
		/// The set of Catalog Object Types that this Custom Attribute may be applied to.
		///Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowed_object_types")]
		public string[] Allowed_object_types { get; set; }
		
		/// <summary>
		/// The visibility of a custom attribute to applications other than the application
		///that created the attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="app_visibility")]
		public string App_visibility { get; set; }
		
		/// <summary>
		/// __Read-only.__ The number of custom attributes that reference this
		///custom attribute definition. Set by the server in response to a ListCatalog
		///request with `include_counts` set to `true`.  If the actual count is greater
		///than 100, `custom_attribute_usage_count` will be set to `100`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_attribute_usage_count")]
		public System.Nullable<System.Int32> Custom_attribute_usage_count { get; set; }
		
		/// <summary>
		/// Seller-oriented description of the meaning of this Custom Attribute,
		///any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the desired custom attribute key that can be used to access
		///the custom attribute value on catalog objects. Cannot be modified after the
		///custom attribute definition has been created.
		///Must be between 1 and 60 characters, and may only contain the characters `[a-zA-Z0-9_-]`.
		/// Min length: 1
		/// Max length: 60
		/// Pattern: ^[a-zA-Z0-9_-]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9_-]*$")]
		public string Key { get; set; }
		
		/// <summary>
		///  The name of this definition for API and seller-facing UI purposes.
		///The name must be unique within the (merchant, application) pair. Required.
		///May not be empty and may not exceed 255 characters. Can be modified after creation.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number_config")]
		public CatalogCustomAttributeDefinitionNumberConfig Number_config { get; set; }
		
		/// <summary>
		/// Configuration associated with `SELECTION`-type custom attribute definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selection_config")]
		public CatalogCustomAttributeDefinitionSelectionConfig Selection_config { get; set; }
		
		/// <summary>
		/// The visibility of a custom attribute in seller-facing UIs (including Square Point
		///of Sale applications and Square Dashboard). May be modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller_visibility")]
		public string Seller_visibility { get; set; }
		
		/// <summary>
		/// Provides information about the application used to generate a change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_application")]
		public SourceApplication Source_application { get; set; }
		
		/// <summary>
		/// Configuration associated with Custom Attribute Definitions of type `STRING`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="string_config")]
		public CatalogCustomAttributeDefinitionStringConfig String_config { get; set; }
		
		/// <summary>
		/// The type of this custom attribute. Cannot be modified after creation.
		///Required.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogCustomAttributeDefinitionNumberConfig
	{
		
		/// <summary>
		/// An integer between 0 and 5 that represents the maximum number of
		///positions allowed after the decimal in number custom attribute values
		///For example:
		///
		///- if the precision is 0, the quantity can be 1, 2, 3, etc.
		///- if the precision is 1, the quantity can be 0.1, 0.2, etc.
		///- if the precision is 2, the quantity can be 0.01, 0.12, etc.
		///
		///Default: 5
		/// Minimum: 0
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		[System.ComponentModel.DataAnnotations.Range(0, 5)]
		public System.Nullable<System.Int32> Precision { get; set; }
	}
	
	/// <summary>
	/// Configuration associated with `SELECTION`-type custom attribute definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogCustomAttributeDefinitionSelectionConfig
	{
		
		/// <summary>
		/// The set of valid `CatalogCustomAttributeSelections`. Up to a maximum of 100
		///selections can be defined. Can be modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowed_selections")]
		public CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection[] Allowed_selections { get; set; }
		
		/// <summary>
		/// The maximum number of selections that can be set. The maximum value for this
		///attribute is 100. The default value is 1. The value can be modified, but changing the value will not
		///affect existing custom attribute values on objects. Clients need to
		///handle custom attributes with more selected values than allowed by this limit.
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_allowed_selections")]
		[System.ComponentModel.DataAnnotations.Range(System.Int32.MinValue, 100)]
		public System.Nullable<System.Int32> Max_allowed_selections { get; set; }
	}
	
	/// <summary>
	/// A named selection for this `SELECTION`-type custom attribute definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection
	{
		
		/// <summary>
		/// Selection name, unique within `allowed_selections`.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique ID set by Square.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Configuration associated with Custom Attribute Definitions of type `STRING`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogCustomAttributeDefinitionStringConfig
	{
		
		/// <summary>
		/// If true, each Custom Attribute instance associated with this Custom Attribute
		///Definition must have a unique value within the seller's catalog. For
		///example, this may be used for a value like a SKU that should not be
		///duplicated within a seller's catalog. May not be modified after the
		///definition has been created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enforce_uniqueness")]
		public System.Nullable<System.Boolean> Enforce_uniqueness { get; set; }
	}
	
	/// <summary>
	/// An instance of a custom attribute. Custom attributes can be defined and
	///added to `ITEM` and `ITEM_VARIATION` type catalog objects.
	///[Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogCustomAttributeValue
	{
		
		/// <summary>
		/// A `true` or `false` value. Populated if `type` = `BOOLEAN`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolean_value")]
		public System.Nullable<System.Boolean> Boolean_value { get; set; }
		
		/// <summary>
		/// __Read-only.__ The id of the [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) this value belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_attribute_definition_id")]
		public string Custom_attribute_definition_id { get; set; }
		
		/// <summary>
		/// __Read-only.__ A copy of key from the associated `CatalogCustomAttributeDefinition`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The name of the custom attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Populated if `type` = `NUMBER`. Contains a string
		///representation of a decimal number, using a `.` as the decimal separator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number_value")]
		public string Number_value { get; set; }
		
		/// <summary>
		/// One or more choices from `allowed_selections`. Populated if `type` = `SELECTION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selection_uid_values")]
		public string[] Selection_uid_values { get; set; }
		
		/// <summary>
		/// The string value of the custom attribute.  Populated if `type` = `STRING`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="string_value")]
		public string String_value { get; set; }
		
		/// <summary>
		/// __Read-only.__ A copy of type from the associated `CatalogCustomAttributeDefinition`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A discount applicable to items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogDiscount
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_type")]
		public string Discount_type { get; set; }
		
		/// <summary>
		/// The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label_color")]
		public string Label_color { get; set; }
		
		/// <summary>
		/// Indicates whether this discount should reduce the price used to calculate tax.
		///
		///Most discounts should use `MODIFY_TAX_BASIS`. However, in some circumstances taxes must
		///be calculated based on an item's price, ignoring a particular discount. For example,
		///in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a
		///customer pays but does not reduce the sale price used to calculate how much sales tax is
		///due. In this case, the discount representing that manufacturer coupon should have
		///`DO_NOT_MODIFY_TAX_BASIS` for this field.
		///
		///If you are unsure whether you need to use this field, consult your tax professional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modify_tax_basis")]
		public string Modify_tax_basis { get; set; }
		
		/// <summary>
		/// The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal
		///separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type`
		///is `VARIABLE_PERCENTAGE`.
		///
		///Do not use this field for amount-based or variable discounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
		
		/// <summary>
		/// Indicates whether a mobile staff member needs to enter their PIN to apply the
		///discount to a payment in the Square Point of Sale app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pin_required")]
		public System.Nullable<System.Boolean> Pin_required { get; set; }
	}
	
	/// <summary>
	/// An image file to use in Square catalogs. It can be associated with catalog
	///items, item variations, and categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogImage
	{
		
		/// <summary>
		/// A caption that describes what is shown in the image. Displayed in the
		///Square Online Store. This is a searchable attribute for use in applicable query filters
		///using the [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// The internal name to identify this image in calls to the Square API.
		///This is a searchable attribute for use in applicable query filters
		///using the [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
		///It is not unique and should not be shown in a buyer facing context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of this image, generated by Square after an image is uploaded
		///using the [CreateCatalogImage](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/create-catalog-image) endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogItem
	{
		
		/// <summary>
		/// The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.
		///This attribute is searchable, and its value length is of Unicode code points.
		/// Max length: 24
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		[System.ComponentModel.DataAnnotations.MaxLength(24)]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// If `true`, the item can be added to electronically fulfilled orders from the merchant's online store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_electronically")]
		public System.Nullable<System.Boolean> Available_electronically { get; set; }
		
		/// <summary>
		/// If `true`, the item can be added to pickup orders from the merchant's online store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_for_pickup")]
		public System.Nullable<System.Boolean> Available_for_pickup { get; set; }
		
		/// <summary>
		/// If `true`, the item can be added to shipping orders from the merchant's online store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_online")]
		public System.Nullable<System.Boolean> Available_online { get; set; }
		
		/// <summary>
		/// The ID of the item's category, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public string Category_id { get; set; }
		
		/// <summary>
		/// The item's description. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string Description { get; set; }
		
		/// <summary>
		/// List of item options IDs for this item. Used to manage and group item
		///variations in a specified order.
		///
		///Maximum: 6 item options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_options")]
		public CatalogItemOptionForItem[] Item_options { get; set; }
		
		/// <summary>
		/// The color of the item's display label in the Square Point of Sale app. This must be a valid hex color code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label_color")]
		public string Label_color { get; set; }
		
		/// <summary>
		/// A set of `CatalogItemModifierListInfo` objects
		///representing the modifier lists that apply to this item, along with the overrides and min
		///and max limits that are specific to this item. Modifier lists
		///may also be added to or deleted from an item using `UpdateItemModifierLists`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_list_info")]
		public CatalogItemModifierListInfo[] Modifier_list_info { get; set; }
		
		/// <summary>
		/// The item's name. This is a searchable attribute for use in applicable query filters, its value must not be empty, and the length is of Unicode code points.
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string Name { get; set; }
		
		/// <summary>
		/// The product type of the item. May not be changed once an item has been created.
		///
		///Only items of product type `REGULAR` or `APPOINTMENTS_SERVICE` may be created by this API; items with other product
		///types are read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_type")]
		public string Product_type { get; set; }
		
		/// <summary>
		/// If `false`, the Square Point of Sale app will present the `CatalogItem`'s
		///details screen immediately, allowing the merchant to choose `CatalogModifier`s
		///before adding the item to the cart.  This is the default behavior.
		///
		///If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected
		///modifiers, and merchants can edit modifiers by drilling down onto the item's details.
		///
		///Third-party clients are encouraged to implement similar behaviors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skip_modifier_screen")]
		public System.Nullable<System.Boolean> Skip_modifier_screen { get; set; }
		
		/// <summary>
		/// A name to sort the item by. If this name is unspecified, namely, the `sort_name` field is absent, the regular `name` field is used for sorting.
		///
		///It is currently supported for sellers of the Japanese locale only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_name")]
		public string Sort_name { get; set; }
		
		/// <summary>
		/// A set of IDs indicating the taxes enabled for
		///this item. When updating an item, any taxes listed here will be added to the item.
		///Taxes may also be added to or deleted from an item using `UpdateItemTaxes`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_ids")]
		public string[] Tax_ids { get; set; }
		
		/// <summary>
		/// A list of [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) objects for this item. An item must have
		///at least one variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public CatalogObject[] Variations { get; set; }
	}
	
	/// <summary>
	///  An option that can be assigned to an item.
	///For example, a t-shirt item may offer a color option or a size option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogItemOptionForItem
	{
		
		/// <summary>
		/// The unique id of the item option, used to form the dimensions of the item option matrix in a specified order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_option_id")]
		public string Item_option_id { get; set; }
	}
	
	/// <summary>
	/// Options to control the properties of a `CatalogModifierList` applied to a `CatalogItem` instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogItemModifierListInfo
	{
		
		/// <summary>
		/// If `true`, enable this `CatalogModifierList`. The default value is `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// If 0 or larger, the largest number of `CatalogModifier`s that can be selected from this `CatalogModifierList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_selected_modifiers")]
		public System.Nullable<System.Int32> Max_selected_modifiers { get; set; }
		
		/// <summary>
		/// If 0 or larger, the smallest number of `CatalogModifier`s that must be selected from this `CatalogModifierList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min_selected_modifiers")]
		public System.Nullable<System.Int32> Min_selected_modifiers { get; set; }
		
		/// <summary>
		/// The ID of the `CatalogModifierList` controlled by this `CatalogModifierListInfo`.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modifier_list_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Modifier_list_id { get; set; }
		
		/// <summary>
		/// A set of `CatalogModifierOverride` objects that override whether a given `CatalogModifier` is enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_overrides")]
		public CatalogModifierOverride[] Modifier_overrides { get; set; }
	}
	
	/// <summary>
	/// Options to control how to override the default behavior of the specified modifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogModifierOverride
	{
		
		/// <summary>
		/// The ID of the `CatalogModifier` whose default behavior is being overridden.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modifier_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Modifier_id { get; set; }
		
		/// <summary>
		/// If `true`, this `CatalogModifier` should be selected by default for this `CatalogItem`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="on_by_default")]
		public System.Nullable<System.Boolean> On_by_default { get; set; }
	}
	
	/// <summary>
	/// A group of variations for a `CatalogItem`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogItemOption
	{
		
		/// <summary>
		/// The item option's human-readable description. Displayed in the Square
		///Point of Sale app for the seller and in the Online Store or on receipts for
		///the buyer. This is a searchable attribute for use in applicable query filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The item option's display name for the customer. This is a searchable attribute for use in applicable query filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// The item option's display name for the seller. Must be unique across
		///all item options. This is a searchable attribute for use in applicable query filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If true, display colors for entries in `values` when present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="show_colors")]
		public System.Nullable<System.Boolean> Show_colors { get; set; }
		
		/// <summary>
		/// A list of CatalogObjects containing the
		///`CatalogItemOptionValue`s for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public CatalogObject[] Values { get; set; }
	}
	
	/// <summary>
	/// An enumerated value that can link a
	///`CatalogItemVariation` to an item option as one of
	///its item option values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogItemOptionValue
	{
		
		/// <summary>
		/// The HTML-supported hex color for the item option (e.g., "#ff8d4e85").
		///Only displayed if `show_colors` is enabled on the parent `ItemOption`. When
		///left unset, `color` defaults to white ("#ffffff") when `show_colors` is
		///enabled on the parent `ItemOption`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// A human-readable description for the option value. This is a searchable attribute for use in applicable query filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Unique ID of the associated item option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_option_id")]
		public string Item_option_id { get; set; }
		
		/// <summary>
		/// Name of this item option value. This is a searchable attribute for use in applicable query filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Determines where this option value appears in a list of option values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordinal")]
		public System.Nullable<System.Int32> Ordinal { get; set; }
	}
	
	/// <summary>
	/// An item variation (i.e., product) in the Catalog object model. Each item
	///may have a maximum of 250 item variations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogItemVariation
	{
		
		/// <summary>
		/// If the `CatalogItem` that owns this item variation is of type
		///`APPOINTMENTS_SERVICE`, a bool representing whether this service is available for booking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_for_booking")]
		public System.Nullable<System.Boolean> Available_for_booking { get; set; }
		
		/// <summary>
		/// If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
		///is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
		///
		///This value is always an integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory_alert_threshold")]
		public System.Nullable<System.Int64> Inventory_alert_threshold { get; set; }
		
		/// <summary>
		/// Indicates whether the item variation displays an alert when its inventory quantity is less than or equal
		///to its `inventory_alert_threshold`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory_alert_type")]
		public string Inventory_alert_type { get; set; }
		
		/// <summary>
		/// The ID of the `CatalogItem` associated with this item variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_id")]
		public string Item_id { get; set; }
		
		/// <summary>
		/// List of item option values associated with this item variation. Listed
		///in the same order as the item options of the parent item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_option_values")]
		public CatalogItemOptionValueForItemVariation[] Item_option_values { get; set; }
		
		/// <summary>
		/// Per-location price and inventory overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_overrides")]
		public ItemVariationLocationOverrides[] Location_overrides { get; set; }
		
		/// <summary>
		/// ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity
		///sold of this item variation. If left unset, the item will be sold in
		///whole quantities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurement_unit_id")]
		public string Measurement_unit_id { get; set; }
		
		/// <summary>
		/// The item variation's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal
		///for each item variation within a parent `CatalogItem` is set according to the item variations's
		///position. On reads, the value is not guaranteed to be sequential or unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordinal")]
		public System.Nullable<System.Int32> Ordinal { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_money")]
		public Money Price_money { get; set; }
		
		/// <summary>
		/// Indicates whether the item variation's price is fixed or determined at the time
		///of sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricing_type")]
		public string Pricing_type { get; set; }
		
		/// <summary>
		/// If the `CatalogItem` that owns this item variation is of type
		///`APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For
		///example, a 30 minute appointment would have the value `1800000`, which is equal to
		///30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_duration")]
		public System.Nullable<System.Int64> Service_duration { get; set; }
		
		/// <summary>
		/// The item variation's SKU, if any. This is a searchable attribute for use in applicable query filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Whether stock is counted directly on this variation (TRUE) or only on its components (FALSE).
		///For backward compatibility missing values will be interpreted as TRUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stockable")]
		public System.Nullable<System.Boolean> Stockable { get; set; }
		
		/// <summary>
		/// Represents the rule of conversion between a stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
		///and a non-stockable sell-by or receive-by `CatalogItemVariation` that
		///share the same underlying stock.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stockable_conversion")]
		public CatalogStockConversion Stockable_conversion { get; set; }
		
		/// <summary>
		/// Tokens of employees that can perform the service represented by this variation. Only valid for
		///variations of type `APPOINTMENTS_SERVICE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member_ids")]
		public string[] Team_member_ids { get; set; }
		
		/// <summary>
		/// If `true`, inventory tracking is active for the variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track_inventory")]
		public System.Nullable<System.Boolean> Track_inventory { get; set; }
		
		/// <summary>
		/// The universal product code (UPC) of the item variation, if any. This is a searchable attribute for use in applicable query filters.
		///
		///The value of this attribute should be a number of 12-14 digits long.  This restriction is enforced on the Square Seller Dashboard,
		///Square Point of Sale or Retail Point of Sale apps, where this attribute shows in the GTIN field. If a non-compliant UPC value is assigned
		///to this attribute using the API, the value is not editable on the Seller Dashboard, Square Point of Sale or Retail Point of Sale apps
		///unless it is updated to fit the expected format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upc")]
		public string Upc { get; set; }
		
		/// <summary>
		/// Arbitrary user metadata to associate with the item variation. This attribute value length is of Unicode code points.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_data")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string User_data { get; set; }
	}
	
	/// <summary>
	/// A `CatalogItemOptionValue` links an item variation to an item option as
	///an item option value. For example, a t-shirt item may offer a color option and
	///a size option. An item option value would represent each variation of t-shirt:
	///For example, "Color:Red, Size:Small" or "Color:Blue, Size:Medium".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogItemOptionValueForItemVariation
	{
		
		/// <summary>
		/// The unique id of an item option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_option_id")]
		public string Item_option_id { get; set; }
		
		/// <summary>
		/// The unique id of the selected value for the item option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_option_value_id")]
		public string Item_option_value_id { get; set; }
	}
	
	/// <summary>
	/// Price and inventory alerting overrides for a `CatalogItemVariation` at a specific `Location`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ItemVariationLocationOverrides
	{
		
		/// <summary>
		/// If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
		///is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
		///
		///This value is always an integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory_alert_threshold")]
		public System.Nullable<System.Int64> Inventory_alert_threshold { get; set; }
		
		/// <summary>
		/// Indicates whether the `CatalogItemVariation` displays an alert when its inventory
		///quantity is less than or equal to its `inventory_alert_threshold`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory_alert_type")]
		public string Inventory_alert_type { get; set; }
		
		/// <summary>
		/// The ID of the `Location`. This can include locations that are deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_money")]
		public Money Price_money { get; set; }
		
		/// <summary>
		/// The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricing_type")]
		public string Pricing_type { get; set; }
		
		/// <summary>
		/// If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track_inventory")]
		public System.Nullable<System.Boolean> Track_inventory { get; set; }
	}
	
	/// <summary>
	/// Represents the rule of conversion between a stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
	///and a non-stockable sell-by or receive-by `CatalogItemVariation` that
	///share the same underlying stock.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogStockConversion
	{
		
		/// <summary>
		/// The converted equivalent quantity of the non-stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) 
		///in its measurement unit. The `stockable_quantity` value and this `nonstockable_quantity` value together
		///define the conversion ratio between stockable item variation and the non-stockable item variation.
		///It accepts a decimal number in a string format that can take up to 10 digits before the decimal point
		///and up to 5 digits after the decimal point.
		/// Required
		/// Min length: 1
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nonstockable_quantity")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Nonstockable_quantity { get; set; }
		
		/// <summary>
		/// References to the stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
		///for this stock conversion. Selling, receiving or recounting the non-stockable `CatalogItemVariation` 
		///defined with a stock conversion results in adjustments of this stockable `CatalogItemVariation`.
		///This immutable field must reference a stockable `CatalogItemVariation`
		///that shares the parent [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) of the converted `CatalogItemVariation.`
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stockable_item_variation_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Stockable_item_variation_id { get; set; }
		
		/// <summary>
		/// The quantity of the stockable item variation (as identified by `stockable_item_variation_id`) 
		///equivalent to the non-stockable item variation quantity (as specified in `nonstockable_quantity`) 
		///as defined by this stock conversion.  It accepts a decimal number in a string format that can take
		///up to 10 digits before the decimal point and up to 5 digits after the decimal point.
		/// Required
		/// Min length: 1
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stockable_quantity")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Stockable_quantity { get; set; }
	}
	
	/// <summary>
	/// A modifier applicable to items at the time of sale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogModifier
	{
		
		/// <summary>
		/// The ID of the `CatalogModifierList` associated with this modifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_list_id")]
		public string Modifier_list_id { get; set; }
		
		/// <summary>
		/// The modifier name.  This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Determines where this `CatalogModifier` appears in the `CatalogModifierList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordinal")]
		public System.Nullable<System.Int32> Ordinal { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_money")]
		public Money Price_money { get; set; }
	}
	
	/// <summary>
	/// A list of modifiers applicable to items at the time of sale.
	///
	///For example, a "Condiments" modifier list applicable to a "Hot Dog" item
	///may contain "Ketchup", "Mustard", and "Relish" modifiers.
	///Use the `selection_type` field to specify whether or not multiple selections from
	///the modifier list are allowed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogModifierList
	{
		
		/// <summary>
		/// The options included in the `CatalogModifierList`.
		///You must include at least one `CatalogModifier`.
		///Each CatalogObject must have type `MODIFIER` and contain
		///`CatalogModifier` data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiers")]
		public CatalogObject[] Modifiers { get; set; }
		
		/// <summary>
		/// The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Determines where this modifier list appears in a list of `CatalogModifierList` values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordinal")]
		public System.Nullable<System.Int32> Ordinal { get; set; }
		
		/// <summary>
		/// Indicates whether multiple options from the modifier list
		///can be applied to a single `CatalogItem`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selection_type")]
		public string Selection_type { get; set; }
	}
	
	/// <summary>
	/// Defines how discounts are automatically applied to a set of items that match the pricing rule
	///during the active time period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogPricingRule
	{
		
		/// <summary>
		/// __Deprecated__: Please use the `exclude_products_id` field to apply
		///an exclude set instead. Exclude sets allow better control over quantity
		///ranges and offer more flexibility for which matched items receive a discount.
		///
		///`CatalogProductSet` to apply the pricing to.
		///An apply rule matches within the subset of the cart that fits the match rules (the match set).
		///An apply rule can only match once in the match set.
		///If not supplied, the pricing will be applied to all products in the match set.
		///Other products retain their base price, or a price generated by other rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apply_products_id")]
		public string Apply_products_id { get; set; }
		
		/// <summary>
		/// A list of IDs of customer groups, the members of which are eligible for discounts specified in this pricing rule.
		///Notice that a group ID is generated by the Customers API.
		///If this field is not set, the specified discount applies to matched products sold to anyone whether the buyer
		///has a customer profile created or not. If this `customer_group_ids_any` field is set, the specified discount
		///applies only to matched products sold to customers belonging to the specified customer groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_group_ids_any")]
		public string[] Customer_group_ids_any { get; set; }
		
		/// <summary>
		/// Unique ID for the `CatalogDiscount` to take off
		///the price of all matched items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_id")]
		public string Discount_id { get; set; }
		
		/// <summary>
		/// `CatalogProductSet` to exclude from the pricing rule.
		///An exclude rule matches within the subset of the cart that fits the match rules (the match set).
		///An exclude rule can only match once in the match set.
		///If not supplied, the pricing will be applied to all products in the match set.
		///Other products retain their base price, or a price generated by other rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclude_products_id")]
		public string Exclude_products_id { get; set; }
		
		/// <summary>
		/// If an `exclude_products_id` was given, controls which subset of matched
		///products is excluded from any discounts.
		///
		///Default value: `LEAST_EXPENSIVE`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclude_strategy")]
		public string Exclude_strategy { get; set; }
		
		/// <summary>
		/// Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule
		///matches within the entire cart, and can match multiple times. This field will always be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match_products_id")]
		public string Match_products_id { get; set; }
		
		/// <summary>
		/// User-defined name for the pricing rule. For example, "Buy one get one
		///free" or "10% off".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of unique IDs for the catalog time periods when
		///this pricing rule is in effect. If left unset, the pricing rule is always
		///in effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_period_ids")]
		public string[] Time_period_ids { get; set; }
		
		/// <summary>
		/// Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valid_from_date")]
		public string Valid_from_date { get; set; }
		
		/// <summary>
		/// Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format
		///(HH:MM:SS). Partial seconds will be truncated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valid_from_local_time")]
		public string Valid_from_local_time { get; set; }
		
		/// <summary>
		/// Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valid_until_date")]
		public string Valid_until_date { get; set; }
		
		/// <summary>
		/// Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format
		///(HH:MM:SS). Partial seconds will be truncated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valid_until_local_time")]
		public string Valid_until_local_time { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of catalog objects for the purpose of applying a
	///`PricingRule`. Including a catalog object will include all of its subtypes.
	///For example, including a category in a product set will include all of its
	///items and associated item variations in the product set. Including an item in
	///a product set will also include its item variations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogProductSet
	{
		
		/// <summary>
		/// If set to `true`, the product set will include every item in the catalog.
		///Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="all_products")]
		public System.Nullable<System.Boolean> All_products { get; set; }
		
		/// <summary>
		/// User-defined name for the product set. For example, "Clearance Items"
		///or "Winter Sale Items".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique IDs for any `CatalogObject` included in this product set.
		///All objects in this set must be included in an order for a pricing rule to apply.
		///
		///Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
		///
		///Max: 500 catalog object IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_ids_all")]
		public string[] Product_ids_all { get; set; }
		
		/// <summary>
		///  Unique IDs for any `CatalogObject` included in this product set. Any
		///number of these catalog objects can be in an order for a pricing rule to apply.
		///
		///This can be used with `product_ids_all` in a parent `CatalogProductSet` to
		///match groups of products for a bulk discount, such as a discount for an
		///entree and side combo.
		///
		///Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
		///
		///Max: 500 catalog object IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_ids_any")]
		public string[] Product_ids_any { get; set; }
		
		/// <summary>
		/// If set, there must be exactly this many items from `products_any` or `products_all`
		///in the cart for the discount to apply.
		///
		///Cannot be combined with either `quantity_min` or `quantity_max`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_exact")]
		public System.Nullable<System.Int64> Quantity_exact { get; set; }
		
		/// <summary>
		/// If set, the pricing rule will apply to a maximum of this many items from
		///`products_any` or `products_all`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_max")]
		public System.Nullable<System.Int64> Quantity_max { get; set; }
		
		/// <summary>
		/// If set, there must be at least this many items from `products_any` or `products_all`
		///in a cart for the discount to apply. See `quantity_exact`. Defaults to 0 if
		///`quantity_exact`, `quantity_min` and `quantity_max` are all unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_min")]
		public System.Nullable<System.Int64> Quantity_min { get; set; }
	}
	
	/// <summary>
	/// A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQuickAmountsSettings
	{
		
		/// <summary>
		/// Represents a set of Quick Amounts at this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amounts")]
		public CatalogQuickAmount[] Amounts { get; set; }
		
		/// <summary>
		/// Represents location's eligibility for auto amounts
		///The boolean should be consistent with whether there are AUTO amounts in the `amounts`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eligible_for_auto_amounts")]
		public System.Nullable<System.Boolean> Eligible_for_auto_amounts { get; set; }
		
		/// <summary>
		/// Represents the option seller currently uses on Quick Amounts.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="option")]
		public string Option { get; set; }
	}
	
	/// <summary>
	/// Represents a Quick Amount in the Catalog.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQuickAmount
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Money Amount { get; set; }
		
		/// <summary>
		/// The order in which this Quick Amount should be displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordinal")]
		public System.Nullable<System.Int64> Ordinal { get; set; }
		
		/// <summary>
		/// Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100].
		///MANUAL type amount will always have score = 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Int64> Score { get; set; }
		
		/// <summary>
		/// Represents the type of the Quick Amount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Describes a subscription plan. For more information, see
	///[Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogSubscriptionPlan
	{
		
		/// <summary>
		/// The name of the plan.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of SubscriptionPhase containing the [SubscriptionPhase](https://developer.squareup.com/reference/square_2021-08-18/objects/SubscriptionPhase) for this plan.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phases")]
		public SubscriptionPhase[] Phases { get; set; }
	}
	
	/// <summary>
	/// Describes a phase in a subscription plan. For more information, see
	///[Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionPhase
	{
		
		/// <summary>
		/// The billing cadence of the phase. For example, weekly or monthly. This field cannot be changed after a `SubscriptionPhase` is created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cadence")]
		public string Cadence { get; set; }
		
		/// <summary>
		/// The position this phase appears in the sequence of phases defined for the plan, indexed from 0. This field cannot be changed after a `SubscriptionPhase` is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordinal")]
		public System.Nullable<System.Int64> Ordinal { get; set; }
		
		/// <summary>
		/// The number of `cadence`s the phase lasts. If not set, the phase never ends. Only the last phase can be indefinite. This field cannot be changed after a `SubscriptionPhase` is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periods")]
		public System.Nullable<System.Int32> Periods { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recurring_price_money")]
		public Money Recurring_price_money { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the subscription phase. This field cannot be changed after a `SubscriptionPhase` is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// A tax applicable to an item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogTax
	{
		
		/// <summary>
		/// If `true`, the fee applies to custom amounts entered into the Square Point of Sale
		///app that are not associated with a particular `CatalogItem`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applies_to_custom_amounts")]
		public System.Nullable<System.Boolean> Applies_to_custom_amounts { get; set; }
		
		/// <summary>
		/// Whether the tax is calculated based on a payment's subtotal or total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculation_phase")]
		public string Calculation_phase { get; set; }
		
		/// <summary>
		/// A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Whether the tax is `ADDITIVE` or `INCLUSIVE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusion_type")]
		public string Inclusion_type { get; set; }
		
		/// <summary>
		/// The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign.
		///A value of `7.5` corresponds to 7.5%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
	}
	
	/// <summary>
	/// Represents a time period - either a single period or a repeating period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogTimePeriod
	{
		
		/// <summary>
		/// An iCalendar (RFC 5545) [event](https://tools.ietf.org/html/rfc5545#section-3.6.1), which
		///specifies the name, timing, duration and recurrence of this time period.
		///
		///Example:
		///
		///```
		///DTSTART:20190707T180000
		///DURATION:P2H
		///RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR
		///```
		///
		///Only `SUMMARY`, `DTSTART`, `DURATION` and `RRULE` fields are supported.
		///`DTSTART` must be in local (unzoned) time format. Note that while `BEGIN:VEVENT`
		///and `END:VEVENT` is not required in the request. The response will always
		///include them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public string Event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRetrieveInventoryChangesRequest
	{
		
		/// <summary>
		/// The filter to return results by `CatalogObject` ID.
		///The filter is only applicable when set. The default value is null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_ids")]
		public string[] Catalog_object_ids { get; set; }
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for the original query.
		///
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The filter to return results by `Location` ID. 
		///The filter is only applicable when set. The default value is null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string[] Location_ids { get; set; }
		
		/// <summary>
		/// The filter to return `ADJUSTMENT` query results by
		///`InventoryState`. This filter is only applied when set.
		///The default value is null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="states")]
		public string[] States { get; set; }
		
		/// <summary>
		/// The filter to return results by `InventoryChangeType` values other than `TRANSFER`.
		///The default value is `[PHYSICAL_COUNT, ADJUSTMENT]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
		
		/// <summary>
		/// The filter to return results with their `calculated_at` value  
		///after the given time as specified in an RFC 3339 timestamp. 
		///The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_after")]
		public string Updated_after { get; set; }
		
		/// <summary>
		/// The filter to return results with their `created_at` or `calculated_at` value  
		///strictly before the given time as specified in an RFC 3339 timestamp. 
		///The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_before")]
		public string Updated_before { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRetrieveInventoryChangesResponse
	{
		
		/// <summary>
		/// The current calculated inventory changes for the requested objects
		///and locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changes")]
		public InventoryChange[] Changes { get; set; }
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If unset,
		///this is the final response.
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRetrieveInventoryCountsRequest
	{
		
		/// <summary>
		/// The filter to return results by `CatalogObject` ID.
		///The filter is applicable only when set.  The default is null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_ids")]
		public string[] Catalog_object_ids { get; set; }
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for the original query.
		///
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The filter to return results by `Location` ID. 
		///This filter is applicable only when set. The default is null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string[] Location_ids { get; set; }
		
		/// <summary>
		/// The filter to return results by `InventoryState`. The filter is only applicable when set.
		///Ignored are untracked states of `NONE`, `SOLD`, and `UNLINKED_RETURN`.
		///The default is null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="states")]
		public string[] States { get; set; }
		
		/// <summary>
		/// The filter to return results with their `calculated_at` value 
		///after the given time as specified in an RFC 3339 timestamp. 
		///The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_after")]
		public string Updated_after { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRetrieveInventoryCountsResponse
	{
		
		/// <summary>
		/// The current calculated inventory counts for the requested objects
		///and locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public InventoryCount[] Counts { get; set; }
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If unset,
		///this is the final response.
		///
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in requests to the
	///`BatchRetrieveOrders` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRetrieveOrdersRequest
	{
		
		/// <summary>
		/// The ID of the location for these orders. This field is optional: omit it to retrieve
		///orders within the scope of the current authorization's merchant ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_ids")]
		public string[] Order_ids { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the `BatchRetrieveOrders` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRetrieveOrdersResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The requested orders. This will omit any requested orders that do not exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public Order[] Orders { get; set; }
	}
	
	/// <summary>
	/// Contains all information related to a single order to process with Square,
	///including line items that specify the products to purchase. `Order` objects also
	///include information about any associated tenders, refunds, and returns.
	///
	///All Connect V2 Transactions have all been converted to Orders including all associated
	///itemization data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Order
	{
		
		/// <summary>
		/// The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closed_at")]
		public string Closed_at { get; set; }
		
		/// <summary>
		/// The timestamp for when the order was created, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.
		///
		///__IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions
		///to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the 
		///`customer_id` assigned to any underlying `Payment` objects is ignored and might result in the 
		///creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// The list of all discounts associated with the order.
		///
		///Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`,
		///an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to.
		///For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount`
		///for every line item.
		///
		///__IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated
		///`line_items.discounts` field results in an error. Use `line_items.applied_discounts`
		///instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discounts")]
		public OrderLineItemDiscount[] Discounts { get; set; }
		
		/// <summary>
		/// Details about order fulfillment.
		///
		///Orders can only be created with at most one fulfillment. However, orders returned
		///by the API might contain multiple fulfillments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfillments")]
		public OrderFulfillment[] Fulfillments { get; set; }
		
		/// <summary>
		/// The order's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The line items included in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line_items")]
		public OrderLineItem[] Line_items { get; set; }
		
		/// <summary>
		/// The ID of the seller location that this order is associated with.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// Application-defined data attached to this order. Metadata fields are intended
		///to store descriptive references or associations with an entity in another system or store brief
		///information about the object. Square does not process this field; it only stores and returns it
		///in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		///identifiable information or card details).
		///
		///Keys written by applications must be 60 characters or less and must be in the character set
		///`[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		///with a namespace, separated from the key with a ':' character.
		///
		///Values have a maximum length of 255 characters.
		///
		///An application can have up to 10 entries per metadata field.
		///
		///Entries written by applications are private and can only be read or modified by the same
		///application.
		///
		///For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// A collection of various money amounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="net_amounts")]
		public OrderMoneyAmounts Net_amounts { get; set; }
		
		/// <summary>
		/// Pricing options for an order. The options affect how the order's price is calculated.
		///They can be used, for example, to apply automatic price adjustments that are based on preconfigured
		///[pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricing_options")]
		public OrderPricingOptions Pricing_options { get; set; }
		
		/// <summary>
		/// A client-specified ID to associate an entity in another system
		///with this order.
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// The refunds that are part of this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public Refund[] Refunds { get; set; }
		
		/// <summary>
		/// A collection of various money amounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="return_amounts")]
		public OrderMoneyAmounts Return_amounts { get; set; }
		
		/// <summary>
		/// A collection of items from sale orders being returned in this one. Normally part of an
		///itemized return or exchange. There is exactly one `Return` object per sale `Order` being
		///referenced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returns")]
		public OrderReturn[] Returns { get; set; }
		
		/// <summary>
		/// A set-like list of Rewards that have been added to the Order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewards")]
		public OrderReward[] Rewards { get; set; }
		
		/// <summary>
		/// A rounding adjustment of the money being returned. Commonly used to apply cash rounding
		///when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rounding_adjustment")]
		public OrderRoundingAdjustment Rounding_adjustment { get; set; }
		
		/// <summary>
		/// A list of service charges applied to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_charges")]
		public OrderServiceCharge[] Service_charges { get; set; }
		
		/// <summary>
		/// Represents the origination details of an order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public OrderSource Source { get; set; }
		
		/// <summary>
		/// The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The list of all taxes associated with the order.
		///
		///Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an
		///`OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes
		///with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.
		///
		///On reads, each tax in the list includes the total amount of that tax applied to the order.
		///
		///__IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated
		///`line_items.taxes` field results in an error. Use `line_items.applied_taxes`
		///instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public OrderLineItemTax[] Taxes { get; set; }
		
		/// <summary>
		/// The tenders that were used to pay for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenders")]
		public Tender[] Tenders { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_discount_money")]
		public Money Total_discount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public Money Total_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_service_charge_money")]
		public Money Total_service_charge_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tax_money")]
		public Money Total_tax_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tip_money")]
		public Money Total_tip_money { get; set; }
		
		/// <summary>
		/// The timestamp for when the order was last updated, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// The version number, which is incremented each time an update is committed to the order.
		///Orders not created through the API do not include a version number and
		///therefore cannot be updated.
		///
		///[Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Represents a discount that applies to one or more line items in an
	///order.
	///
	///Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals.
	///The amount distributed to each line item is relative to the
	///amount contributed by the item to the order subtotal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderLineItemDiscount
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public Money Applied_money { get; set; }
		
		/// <summary>
		/// The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The version of the catalog object that this discount references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// Application-defined data attached to this discount. Metadata fields are intended
		///to store descriptive references or associations with an entity in another system or store brief
		///information about the object. Square does not process this field; it only stores and returns it
		///in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		///identifiable information or card details).
		///
		///Keys written by applications must be 60 characters or less and must be in the character set
		///`[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		///with a namespace, separated from the key with a ':' character.
		///
		///Values have a maximum length of 255 characters.
		///
		///An application can have up to 10 entries per metadata field.
		///
		///Entries written by applications are private and can only be read or modified by the same
		///application.
		///
		///For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// The discount's name.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the discount, as a string representation of a decimal number.
		///A value of `7.25` corresponds to a percentage of 7.25%.
		///
		///`percentage` is not set for amount-based discounts.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Percentage { get; set; }
		
		/// <summary>
		/// The object ID of a [pricing rule](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule) to be applied 
		///automatically to this discount. The specification and application of the discounts, to 
		///which a `pricing_rule_id` is assigned, are completely controlled by the corresponding 
		///pricing rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricing_rule_id")]
		public string Pricing_rule_id { get; set; }
		
		/// <summary>
		/// The reward IDs corresponding to this discount. The application and
		///specification of discounts that have `reward_ids` are completely controlled by the backing
		///criteria corresponding to the reward tiers of the rewards that are added to the order
		///through the Loyalty API. To manually unapply discounts that are the result of added rewards,
		///the rewards must be removed from the order through the Loyalty API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reward_ids")]
		public string[] Reward_ids { get; set; }
		
		/// <summary>
		/// Indicates the level at which the discount applies. For `ORDER` scoped discounts,
		///Square generates references in `applied_discounts` on all order line items that do
		///not have them. For `LINE_ITEM` scoped discounts, the discount only applies to line items
		///with a discount reference in their `applied_discounts` field.
		///
		///This field is immutable. To change the scope of a discount, you must delete
		///the discount and re-add it as a new discount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// The type of the discount.
		///
		///Discounts that do not reference a catalog object ID must have a type of
		///`FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the discount only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Contains details about how to fulfill this order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderFulfillment
	{
		
		/// <summary>
		/// Application-defined data attached to this fulfillment. Metadata fields are intended
		///to store descriptive references or associations with an entity in another system or store brief
		///information about the object. Square does not process this field; it only stores and returns it
		///in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		///identifiable information or card details).
		///
		///Keys written by applications must be 60 characters or less and must be in the character set
		///`[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		///with a namespace, separated from the key with a ':' character.
		///
		///Values have a maximum length of 255 characters.
		///
		///An application can have up to 10 entries per metadata field.
		///
		///Entries written by applications are private and can only be read or modified by the same
		///application.
		///
		///For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Contains details necessary to fulfill a pickup order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickup_details")]
		public OrderFulfillmentPickupDetails Pickup_details { get; set; }
		
		/// <summary>
		/// Contains the details necessary to fulfill a shipment order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipment_details")]
		public OrderFulfillmentShipmentDetails Shipment_details { get; set; }
		
		/// <summary>
		/// The state of the fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The type of the fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the fulfillment only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Contains details necessary to fulfill a pickup order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderFulfillmentPickupDetails
	{
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) 
		///indicating when the fulfillment was accepted. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accepted_at")]
		public string Accepted_at { get; set; }
		
		/// <summary>
		/// The duration of time after which an open and accepted pickup fulfillment
		///is automatically moved to the `COMPLETED` state. The duration must be in RFC 3339
		///format (for example, "P1W3D").
		///
		///If not set, this pickup fulfillment remains accepted until it is canceled or completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_complete_duration")]
		public string Auto_complete_duration { get; set; }
		
		/// <summary>
		/// A description of why the pickup was canceled. The maximum length: 100 characters.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancel_reason")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Cancel_reason { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) 
		///indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceled_at")]
		public string Canceled_at { get; set; }
		
		/// <summary>
		/// Specific details for curbside pickup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="curbside_pickup_details")]
		public OrderFulfillmentPickupDetailsCurbsidePickupDetails Curbside_pickup_details { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		///indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expired_at")]
		public string Expired_at { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) 
		///indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
		///If `expires_at` is not set, this pickup fulfillment is automatically accepted when 
		///placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public string Expires_at { get; set; }
		
		/// <summary>
		/// If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_curbside_pickup")]
		public System.Nullable<System.Boolean> Is_curbside_pickup { get; set; }
		
		/// <summary>
		/// A note meant to provide additional instructions about the pickup
		///fulfillment displayed in the Square Point of Sale application and set by the API.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Note { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		///indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="picked_up_at")]
		public string Picked_up_at { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) 
		///that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., 
		///"2016-09-04T23:59:33.123Z".
		///
		///For fulfillments with the schedule type `ASAP`, this is automatically set
		///to the current time plus the expected duration to prepare the fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickup_at")]
		public string Pickup_at { get; set; }
		
		/// <summary>
		/// The window of time in which the order should be picked up after the `pickup_at` timestamp.
		///Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
		///informational guideline for merchants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickup_window_duration")]
		public string Pickup_window_duration { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) 
		///indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placed_at")]
		public string Placed_at { get; set; }
		
		/// <summary>
		/// The duration of time it takes to prepare this fulfillment.
		///The duration must be in RFC 3339 format (for example, "P1W3D").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prep_time_duration")]
		public string Prep_time_duration { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) 
		///indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ready_at")]
		public string Ready_at { get; set; }
		
		/// <summary>
		/// Contains information about the recipient of a fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient")]
		public OrderFulfillmentRecipient Recipient { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) 
		///indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejected_at")]
		public string Rejected_at { get; set; }
		
		/// <summary>
		/// The schedule type of the pickup fulfillment. Defaults to `SCHEDULED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule_type")]
		public string Schedule_type { get; set; }
	}
	
	/// <summary>
	/// Specific details for curbside pickup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderFulfillmentPickupDetailsCurbsidePickupDetails
	{
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) 
		///indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_arrived_at")]
		public string Buyer_arrived_at { get; set; }
		
		/// <summary>
		/// Specific details for curbside pickup, such as parking number and vehicle model.
		/// Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="curbside_details")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Curbside_details { get; set; }
	}
	
	/// <summary>
	/// Contains information about the recipient of a fulfillment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderFulfillmentRecipient
	{
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The customer ID of the customer associated with the fulfillment.
		///
		///If `customer_id` is provided, the fulfillment recipient's `display_name`,
		///`email_address`, and `phone_number` are automatically populated from the
		///targeted customer profile. If these fields are set in the request, the request
		///values overrides the information from the customer profile. If the
		///targeted customer profile does not contain the necessary information and
		///these fields are left unset, the request results in an error.
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// The display name of the fulfillment recipient.
		///
		///If provided, the display name overrides the value pulled from the customer profile indicated by `customer_id`.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Display_name { get; set; }
		
		/// <summary>
		/// The email address of the fulfillment recipient.
		///
		///If provided, the email address overrides the value pulled from the customer profile indicated by `customer_id`.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The phone number of the fulfillment recipient.
		///
		///If provided, the phone number overrides the value pulled from the customer profile indicated by `customer_id`.
		/// Max length: 17
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Phone_number { get; set; }
	}
	
	/// <summary>
	/// Contains the details necessary to fulfill a shipment order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderFulfillmentShipmentDetails
	{
		
		/// <summary>
		/// A description of why the shipment was canceled.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancel_reason")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Cancel_reason { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		///indicating the shipment was canceled.
		///The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceled_at")]
		public string Canceled_at { get; set; }
		
		/// <summary>
		/// The shipping carrier being used to ship this fulfillment (such as UPS, FedEx, or USPS).
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Carrier { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		///indicating when the shipment is expected to be delivered to the shipping carrier.
		///The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expected_shipped_at")]
		public string Expected_shipped_at { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		///indicating when the shipment failed to be completed. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failed_at")]
		public string Failed_at { get; set; }
		
		/// <summary>
		/// A description of why the shipment failed to be completed.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failure_reason")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Failure_reason { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		///indicating when this fulfillment was moved to the `RESERVED` state, which  indicates that preparation
		///of this shipment has begun. The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in_progress_at")]
		public string In_progress_at { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		///indicating when this fulfillment was moved to the `PREPARED` state, which indicates that the
		///fulfillment is packaged. The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packaged_at")]
		public string Packaged_at { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		///indicating when the shipment was requested. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placed_at")]
		public string Placed_at { get; set; }
		
		/// <summary>
		/// Contains information about the recipient of a fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient")]
		public OrderFulfillmentRecipient Recipient { get; set; }
		
		/// <summary>
		/// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		///indicating when this fulfillment was moved to the `COMPLETED` state, which indicates that
		///the fulfillment has been given to the shipping carrier. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipped_at")]
		public string Shipped_at { get; set; }
		
		/// <summary>
		/// A note with additional information for the shipping carrier.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_note")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Shipping_note { get; set; }
		
		/// <summary>
		/// A description of the type of shipping product purchased from the carrier
		///(such as First Class, Priority, or Express).
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Shipping_type { get; set; }
		
		/// <summary>
		/// The reference number provided by the carrier to track the shipment's progress.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_number")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Tracking_number { get; set; }
		
		/// <summary>
		/// A link to the tracking webpage on the carrier's website.
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_url")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string Tracking_url { get; set; }
	}
	
	/// <summary>
	/// Represents a line item in an order. Each line item describes a different
	///product to purchase, with its own quantity and price details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderLineItem
	{
		
		/// <summary>
		/// The list of references to discounts applied to this line item. Each
		///`OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
		///`OrderLineItemDiscounts` applied to the line item. On reads, the amount
		///applied is populated.
		///
		///An `OrderLineItemAppliedDiscount` is automatically created on every line item for all
		///`ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records
		///for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any
		///line items.
		///
		///To change the amount of a discount, modify the referenced top-level discount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_discounts")]
		public OrderLineItemAppliedDiscount[] Applied_discounts { get; set; }
		
		/// <summary>
		/// The list of references to taxes applied to this line item. Each
		///`OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
		///top-level `OrderLineItemTax` applied to the line item. On reads, the
		///amount applied is populated.
		///
		///An `OrderLineItemAppliedTax` is automatically created on every line
		///item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`
		///records for `LINE_ITEM` scoped taxes must be added in requests for the tax
		///to apply to any line items.
		///
		///To change the amount of a tax, modify the referenced top-level tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_taxes")]
		public OrderLineItemAppliedTax[] Applied_taxes { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base_price_money")]
		public Money Base_price_money { get; set; }
		
		/// <summary>
		/// The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this line item.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The version of the catalog object that this line item references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gross_sales_money")]
		public Money Gross_sales_money { get; set; }
		
		/// <summary>
		/// The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
		///activation or reloading of a gift card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_type")]
		public string Item_type { get; set; }
		
		/// <summary>
		/// Application-defined data attached to this line item. Metadata fields are intended
		///to store descriptive references or associations with an entity in another system or store brief
		///information about the object. Square does not process this field; it only stores and returns it
		///in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		///identifiable information or card details).
		///
		///Keys written by applications must be 60 characters or less and must be in the character set
		///`[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		///with a namespace, separated from the key with a ':' character.
		///
		///Values have a maximum length of 255 characters.
		///
		///An application can have up to 10 entries per metadata field.
		///
		///Entries written by applications are private and can only be read or modified by the same
		///application.
		///
		///For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiers")]
		public OrderLineItemModifier[] Modifiers { get; set; }
		
		/// <summary>
		/// The name of the line item.
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string Name { get; set; }
		
		/// <summary>
		/// The note of the line item.
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string Note { get; set; }
		
		/// <summary>
		/// Describes pricing adjustments that are blocked from manual and 
		///automatic application to a line item. For more information, see 
		///[Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricing_blocklists")]
		public OrderLineItemPricingBlocklists Pricing_blocklists { get; set; }
		
		/// <summary>
		/// The quantity purchased, formatted as a decimal number.
		///For example, `"3"`.
		///
		///Line items with a quantity of `"0"` are automatically removed
		///when paying for or otherwise completing the order.
		///
		///Line items with a `quantity_unit` can have non-integer quantities.
		///For example, `"1.70000"`.
		/// Required
		/// Min length: 1
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Contains the measurement unit for a quantity and a precision that
		///specifies the number of digits after the decimal point for decimal quantities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_unit")]
		public OrderQuantityUnit Quantity_unit { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_discount_money")]
		public Money Total_discount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public Money Total_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tax_money")]
		public Money Total_tax_money { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the line item only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
		
		/// <summary>
		/// The name of the variation applied to this line item.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variation_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Variation_name { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variation_total_price_money")]
		public Money Variation_total_price_money { get; set; }
	}
	
	/// <summary>
	/// Represents an applied portion of a discount to a line item in an order.
	///
	///Order scoped discounts have automatically applied discounts present for each line item.
	///Line-item scoped discounts must have applied discounts added manually for any applicable line
	///items. The corresponding applied money is automatically computed based on participating
	///line items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderLineItemAppliedDiscount
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public Money Applied_money { get; set; }
		
		/// <summary>
		/// The `uid` of the discount that the applied discount represents. It must
		///reference a discount present in the `order.discounts` field.
		///
		///This field is immutable. To change which discounts apply to a line item,
		///you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.
		/// Required
		/// Min length: 1
		/// Max length: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discount_uid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Discount_uid { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the applied discount only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Represents an applied portion of a tax to a line item in an order.
	///
	///Order-scoped taxes automatically include the applied taxes in each line item.
	///Line item taxes must be referenced from any applicable line items.
	///The corresponding applied money is automatically computed, based on the
	///set of participating line items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderLineItemAppliedTax
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public Money Applied_money { get; set; }
		
		/// <summary>
		/// The `uid` of the tax for which this applied tax represents. It must reference
		///a tax present in the `order.taxes` field.
		///
		///This field is immutable. To change which taxes apply to a line item, delete and add a new
		///`OrderLineItemAppliedTax`.
		/// Required
		/// Min length: 1
		/// Max length: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tax_uid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Tax_uid { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the applied tax only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// A [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderLineItemModifier
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base_price_money")]
		public Money Base_price_money { get; set; }
		
		/// <summary>
		/// The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The version of the catalog object that this modifier references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// The name of the item modifier.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_price_money")]
		public Money Total_price_money { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the modifier only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Describes pricing adjustments that are blocked from manual and 
	///automatic application to a line item. For more information, see 
	///[Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderLineItemPricingBlocklists
	{
		
		/// <summary>
		/// A list of discounts blocked from applying to the line item. 
		///Discounts can be blocked by the `discount_uid` (for ad hoc discounts) or 
		///the `discount_catalog_object_id` (for catalog discounts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blocked_discounts")]
		public OrderLineItemPricingBlocklistsBlockedDiscount[] Blocked_discounts { get; set; }
		
		/// <summary>
		/// A list of taxes blocked from applying to the line item. 
		///Taxes can be blocked by the `tax_uid` (for ad hoc taxes) or 
		///the `tax_catalog_object_id` (for catalog taxes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blocked_taxes")]
		public OrderLineItemPricingBlocklistsBlockedTax[] Blocked_taxes { get; set; }
	}
	
	/// <summary>
	/// A discount to block from applying to a line item. The discount must be 
	///identified by either `discount_uid` or `discount_catalog_object_id`, but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderLineItemPricingBlocklistsBlockedDiscount
	{
		
		/// <summary>
		/// The `catalog_object_id` of the discount that should be blocked. 
		///Use this field to block catalog discounts. For ad hoc discounts, use the 
		///`discount_uid` field.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Discount_catalog_object_id { get; set; }
		
		/// <summary>
		/// The `uid` of the discount that should be blocked. Use this field to block 
		///ad hoc discounts. For catalog discounts, use the `discount_catalog_object_id` field.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Discount_uid { get; set; }
		
		/// <summary>
		/// A unique ID of the `BlockedDiscount` within the order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// A tax to block from applying to a line item. The tax must be 
	///identified by either `tax_uid` or `tax_catalog_object_id`, but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderLineItemPricingBlocklistsBlockedTax
	{
		
		/// <summary>
		/// The `catalog_object_id` of the tax that should be blocked. 
		///Use this field to block catalog taxes. For ad hoc taxes, use the 
		///`tax_uid` field.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Tax_catalog_object_id { get; set; }
		
		/// <summary>
		/// The `uid` of the tax that should be blocked. Use this field to block 
		///ad hoc taxes. For catalog, taxes use the `tax_catalog_object_id` field.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Tax_uid { get; set; }
		
		/// <summary>
		/// A unique ID of the `BlockedTax` within the order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Contains the measurement unit for a quantity and a precision that
	///specifies the number of digits after the decimal point for decimal quantities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderQuantityUnit
	{
		
		/// <summary>
		/// The version of the catalog object that this measurement unit references.
		///
		///This field is set when this is a catalog-backed measurement unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// Represents a unit of measurement to use with a quantity, such as ounces
		///or inches. Exactly one of the following fields are required: `custom_unit`,
		///`area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurement_unit")]
		public MeasurementUnit Measurement_unit { get; set; }
		
		/// <summary>
		/// For non-integer quantities, represents the number of digits after the decimal point that are
		///recorded for this quantity.
		///
		///For example, a precision of 1 allows quantities such as `"1.0"` and `"1.1"`, but not `"1.01"`.
		///
		///Min: 0. Max: 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Int32> Precision { get; set; }
	}
	
	/// <summary>
	/// A collection of various money amounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderMoneyAmounts
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_money")]
		public Money Discount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_charge_money")]
		public Money Service_charge_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_money")]
		public Money Tax_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tip_money")]
		public Money Tip_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public Money Total_money { get; set; }
	}
	
	/// <summary>
	/// Pricing options for an order. The options affect how the order's price is calculated.
	///They can be used, for example, to apply automatic price adjustments that are based on preconfigured
	///[pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderPricingOptions
	{
		
		/// <summary>
		/// The option to determine whether pricing rule-based
		///discounts are automatically applied to an order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_apply_discounts")]
		public System.Nullable<System.Boolean> Auto_apply_discounts { get; set; }
		
		/// <summary>
		/// The option to determine whether rule-based taxes are automatically
		///applied to an order when the criteria of the corresponding rules are met.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_apply_taxes")]
		public System.Nullable<System.Boolean> Auto_apply_taxes { get; set; }
	}
	
	/// <summary>
	/// Represents a refund processed for a Square transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Refund
	{
		
		/// <summary>
		/// Additional recipients (other than the merchant) receiving a portion of this refund.
		///For example, fees assessed on a refund of a purchase by a third party integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_recipients")]
		public AdditionalRecipient[] Additional_recipients { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// The timestamp for when the refund was created, in RFC 3339 format.
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The refund's unique ID.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the refund's associated location.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processing_fee_money")]
		public Money Processing_fee_money { get; set; }
		
		/// <summary>
		/// The reason for the refund being issued.
		/// Required
		/// Max length: 192
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Reason { get; set; }
		
		/// <summary>
		/// The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`,
		///or `FAILED`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The ID of the refunded tender.
		/// Required
		/// Max length: 192
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tender_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Tender_id { get; set; }
		
		/// <summary>
		/// The ID of the transaction that the refunded tender is part of.
		/// Required
		/// Max length: 192
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Transaction_id { get; set; }
	}
	
	/// <summary>
	/// The set of line items, service charges, taxes, discounts, tips, and other items being returned in an order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderReturn
	{
		
		/// <summary>
		/// A collection of various money amounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="return_amounts")]
		public OrderMoneyAmounts Return_amounts { get; set; }
		
		/// <summary>
		/// A collection of references to discounts being returned for an order, including the total
		///applied discount amount to be returned. The discounts must reference a top-level discount ID
		///from the source order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="return_discounts")]
		public OrderReturnDiscount[] Return_discounts { get; set; }
		
		/// <summary>
		/// A collection of line items that are being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="return_line_items")]
		public OrderReturnLineItem[] Return_line_items { get; set; }
		
		/// <summary>
		/// A collection of service charges that are being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="return_service_charges")]
		public OrderReturnServiceCharge[] Return_service_charges { get; set; }
		
		/// <summary>
		/// A collection of references to taxes being returned for an order, including the total
		///applied tax amount to be returned. The taxes must reference a top-level tax ID from the source
		///order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="return_taxes")]
		public OrderReturnTax[] Return_taxes { get; set; }
		
		/// <summary>
		/// A rounding adjustment of the money being returned. Commonly used to apply cash rounding
		///when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rounding_adjustment")]
		public OrderRoundingAdjustment Rounding_adjustment { get; set; }
		
		/// <summary>
		/// An order that contains the original sale of these return line items. This is unset
		///for unlinked returns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_order_id")]
		public string Source_order_id { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the return only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Represents a discount being returned that applies to one or more return line items in an
	///order.
	///
	///Fixed-amount, order-scoped discounts are distributed across all non-zero return line item totals.
	///The amount distributed to each return line item is relative to that item’s contribution to the
	///order subtotal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderReturnDiscount
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public Money Applied_money { get; set; }
		
		/// <summary>
		/// The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The version of the catalog object that this discount references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// The discount's name.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the tax, as a string representation of a decimal number.
		///A value of `"7.25"` corresponds to a percentage of 7.25%.
		///
		///`percentage` is not set for amount-based discounts.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Percentage { get; set; }
		
		/// <summary>
		/// Indicates the level at which the `OrderReturnDiscount` applies. For `ORDER` scoped
		///discounts, the server generates references in `applied_discounts` on all
		///`OrderReturnLineItem`s. For `LINE_ITEM` scoped discounts, the discount is only applied to
		///`OrderReturnLineItem`s with references in their `applied_discounts` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// The discount `uid` from the order that contains the original application of this discount.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_discount_uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Source_discount_uid { get; set; }
		
		/// <summary>
		/// The type of the discount. If it is created by the API, it is `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
		///
		///Discounts that do not reference a catalog object ID must have a type of
		///`FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the returned discount only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// The line item being returned in an order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderReturnLineItem
	{
		
		/// <summary>
		/// The list of references to `OrderReturnDiscount` entities applied to the return line item. Each
		///`OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
		///`OrderReturnDiscount` applied to the return line item. On reads, the applied amount
		///is populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_discounts")]
		public OrderLineItemAppliedDiscount[] Applied_discounts { get; set; }
		
		/// <summary>
		/// The list of references to `OrderReturnTax` entities applied to the return line item. Each
		///`OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level
		///`OrderReturnTax` applied to the return line item. On reads, the applied amount
		///is populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_taxes")]
		public OrderLineItemAppliedTax[] Applied_taxes { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base_price_money")]
		public Money Base_price_money { get; set; }
		
		/// <summary>
		/// The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this return line item.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The version of the catalog object that this line item references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gross_return_money")]
		public Money Gross_return_money { get; set; }
		
		/// <summary>
		/// The type of line item: an itemized return, a non-itemized return (custom amount),
		///or the return of an unactivated gift card sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_type")]
		public string Item_type { get; set; }
		
		/// <summary>
		/// The name of the line item.
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string Name { get; set; }
		
		/// <summary>
		/// The note of the return line item.
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string Note { get; set; }
		
		/// <summary>
		/// The quantity returned, formatted as a decimal number.
		///For example, `"3"`.
		///
		///Line items with a `quantity_unit` can have non-integer quantities.
		///For example, `"1.70000"`.
		/// Required
		/// Min length: 1
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Contains the measurement unit for a quantity and a precision that
		///specifies the number of digits after the decimal point for decimal quantities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_unit")]
		public OrderQuantityUnit Quantity_unit { get; set; }
		
		/// <summary>
		/// The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="return_modifiers")]
		public OrderReturnLineItemModifier[] Return_modifiers { get; set; }
		
		/// <summary>
		/// The `uid` of the line item in the original sale order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_line_item_uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Source_line_item_uid { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_discount_money")]
		public Money Total_discount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public Money Total_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tax_money")]
		public Money Total_tax_money { get; set; }
		
		/// <summary>
		/// A unique ID for this return line-item entry.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
		
		/// <summary>
		/// The name of the variation applied to this return line item.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variation_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Variation_name { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variation_total_price_money")]
		public Money Variation_total_price_money { get; set; }
	}
	
	/// <summary>
	/// A line item modifier being returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderReturnLineItemModifier
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base_price_money")]
		public Money Base_price_money { get; set; }
		
		/// <summary>
		/// The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The version of the catalog object that this line item modifier references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// The name of the item modifier.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The modifier `uid` from the order's line item that contains the
		///original sale of this line item modifier.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_modifier_uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Source_modifier_uid { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_price_money")]
		public Money Total_price_money { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the return modifier only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Represents the service charge applied to the original order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderReturnServiceCharge
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public Money Applied_money { get; set; }
		
		/// <summary>
		/// The list of references to `OrderReturnTax` entities applied to the
		///`OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid`
		///that references the `uid` of a top-level `OrderReturnTax` that is being
		///applied to the `OrderReturnServiceCharge`. On reads, the applied amount is
		///populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_taxes")]
		public OrderLineItemAppliedTax[] Applied_taxes { get; set; }
		
		/// <summary>
		/// The calculation phase after which to apply the service charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculation_phase")]
		public string Calculation_phase { get; set; }
		
		/// <summary>
		/// The catalog object ID of the associated [OrderServiceCharge](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderServiceCharge).
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The version of the catalog object that this service charge references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// The name of the service charge.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the service charge, as a string representation of
		///a decimal number. For example, a value of `"7.25"` corresponds to a
		///percentage of 7.25%.
		///
		///Either `percentage` or `amount_money` should be set, but not both.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Percentage { get; set; }
		
		/// <summary>
		/// The service charge `uid` from the order containing the original
		///service charge. `source_service_charge_uid` is `null` for
		///unlinked returns.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_service_charge_uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Source_service_charge_uid { get; set; }
		
		/// <summary>
		/// Indicates whether the surcharge can be taxed. Service charges
		///calculated in the `TOTAL_PHASE` cannot be marked as taxable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxable")]
		public System.Nullable<System.Boolean> Taxable { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public Money Total_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tax_money")]
		public Money Total_tax_money { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the return service charge only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Represents a tax being returned that applies to one or more return line items in an order.
	///
	///Fixed-amount, order-scoped taxes are distributed across all non-zero return line item totals.
	///The amount distributed to each return line item is relative to that item’s contribution to the
	///order subtotal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderReturnTax
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public Money Applied_money { get; set; }
		
		/// <summary>
		/// The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The version of the catalog object that this tax references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// The tax's name.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the tax, as a string representation of a decimal number.
		///For example, a value of `"7.25"` corresponds to a percentage of 7.25%.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Percentage { get; set; }
		
		/// <summary>
		/// Indicates the level at which the `OrderReturnTax` applies. For `ORDER` scoped
		///taxes, Square generates references in `applied_taxes` on all
		///`OrderReturnLineItem`s. For `LINE_ITEM` scoped taxes, the tax is only applied to
		///`OrderReturnLineItem`s with references in their `applied_discounts` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// The tax `uid` from the order that contains the original tax charge.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_tax_uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Source_tax_uid { get; set; }
		
		/// <summary>
		/// Indicates the calculation method used to apply the tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the returned tax only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// A rounding adjustment of the money being returned. Commonly used to apply cash rounding
	///when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderRoundingAdjustment
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// The name of the rounding adjustment from the original sale order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the rounding adjustment only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Represents a reward that can be applied to an order if the necessary
	///reward tier criteria are met. Rewards are created through the Loyalty API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderReward
	{
		
		/// <summary>
		/// The identifier of the reward.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier of the reward tier corresponding to this reward.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reward_tier_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Reward_tier_id { get; set; }
	}
	
	/// <summary>
	/// Represents a service charge applied to an order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderServiceCharge
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public Money Applied_money { get; set; }
		
		/// <summary>
		/// The list of references to the taxes applied to this service charge. Each
		///`OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level
		///`OrderLineItemTax` that is being applied to this service charge. On reads, the amount applied
		///is populated.
		///
		///An `OrderLineItemAppliedTax` is automatically created on every taxable service charge
		///for all `ORDER` scoped taxes that are added to the order. `OrderLineItemAppliedTax` records
		///for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any taxable
		///service charge. Taxable service charges have the `taxable` field set to `true` and calculated
		///in the `SUBTOTAL_PHASE`.
		///
		///To change the amount of a tax, modify the referenced top-level tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_taxes")]
		public OrderLineItemAppliedTax[] Applied_taxes { get; set; }
		
		/// <summary>
		/// The calculation phase at which to apply the service charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculation_phase")]
		public string Calculation_phase { get; set; }
		
		/// <summary>
		/// The catalog object ID referencing the service charge [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject).
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The version of the catalog object that this service charge references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// Application-defined data attached to this service charge. Metadata fields are intended
		///to store descriptive references or associations with an entity in another system or store brief
		///information about the object. Square does not process this field; it only stores and returns it
		///in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		///identifiable information or card details).
		///
		///Keys written by applications must be 60 characters or less and must be in the character set
		///`[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		///with a namespace, separated from the key with a ':' character.
		///
		///Values have a maximum length of 255 characters.
		///
		///An application can have up to 10 entries per metadata field.
		///
		///Entries written by applications are private and can only be read or modified by the same
		///application.
		///
		///For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// The name of the service charge.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The service charge percentage as a string representation of a
		///decimal number. For example, `"7.25"` indicates a service charge of 7.25%.
		///
		///Exactly 1 of `percentage` or `amount_money` should be set.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Percentage { get; set; }
		
		/// <summary>
		/// Indicates whether the service charge can be taxed. If set to `true`,
		///order-level taxes automatically apply to the service charge. Note that
		///service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxable")]
		public System.Nullable<System.Boolean> Taxable { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public Money Total_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tax_money")]
		public Money Total_tax_money { get; set; }
		
		/// <summary>
		/// The type of the service charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the service charge only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Represents the origination details of an order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderSource
	{
		
		/// <summary>
		/// The name used to identify the place (physical or digital) that an order originates.
		///If unset, the name defaults to the name of the application that created the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a tax that applies to one or more line item in the order.
	///
	///Fixed-amount, order-scoped taxes are distributed across all non-zero line item totals.
	///The amount distributed to each line item is relative to the amount the item
	///contributes to the order subtotal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderLineItemTax
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public Money Applied_money { get; set; }
		
		/// <summary>
		/// Determines whether the tax was automatically applied to the order based on
		///the catalog configuration. For an example, see 
		///[Automatically Apply Taxes to an Order](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_applied")]
		public System.Nullable<System.Boolean> Auto_applied { get; set; }
		
		/// <summary>
		/// The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// The version of the catalog object that this tax references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// Application-defined data attached to this tax. Metadata fields are intended
		///to store descriptive references or associations with an entity in another system or store brief
		///information about the object. Square does not process this field; it only stores and returns it
		///in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		///identifiable information or card details).
		///
		///Keys written by applications must be 60 characters or less and must be in the character set
		///`[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		///with a namespace, separated from the key with a ':' character.
		///
		///Values have a maximum length of 255 characters.
		///
		///An application can have up to 10 entries per metadata field.
		///
		///Entries written by applications are private and can only be read or modified by the same
		///application.
		///
		///For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// The tax's name.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the tax, as a string representation of a decimal
		///number. For example, a value of `"7.25"` corresponds to a percentage of
		///7.25%.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Percentage { get; set; }
		
		/// <summary>
		/// Indicates the level at which the tax applies. For `ORDER` scoped taxes,
		///Square generates references in `applied_taxes` on all order line items that do
		///not have them. For `LINE_ITEM` scoped taxes, the tax only applies to line items
		///with references in their `applied_taxes` field.
		///
		///This field is immutable. To change the scope, you must delete the tax and
		///re-add it as a new tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// Indicates the calculation method used to apply the tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// A unique ID that identifies the tax only within this order.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Represents a tender (i.e., a method of payment) used in a Square transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tender
	{
		
		/// <summary>
		/// Additional recipients (other than the merchant) receiving a portion of this tender.
		///For example, fees assessed on the purchase by a third party integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_recipients")]
		public AdditionalRecipient[] Additional_recipients { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_details")]
		public TenderCardDetails Card_details { get; set; }
		
		/// <summary>
		/// Represents the details of a tender with `type` `CASH`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_details")]
		public TenderCashDetails Cash_details { get; set; }
		
		/// <summary>
		/// The timestamp for when the tender was created, in RFC 3339 format.
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Created_at { get; set; }
		
		/// <summary>
		/// If the tender is associated with a customer or represents a customer's card on file,
		///this is the ID of the associated customer.
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// The tender's unique ID.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the transaction's associated location.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// An optional note associated with the tender at the time of payment.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Note { get; set; }
		
		/// <summary>
		/// The ID of the [Payment](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) that corresponds to this tender.
		///This value is only present for payments created with the v2 Payments API.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processing_fee_money")]
		public Money Processing_fee_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tip_money")]
		public Money Tip_money { get; set; }
		
		/// <summary>
		/// The ID of the tender's associated transaction.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The type of tender, such as `CARD` or `CASH`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TenderCardDetails
	{
		
		/// <summary>
		/// Represents the payment details of a card to be used for payments. These
		///details are determined by the payment token generated by Web Payments SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public Card Card { get; set; }
		
		/// <summary>
		/// The method used to enter the card's details for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry_method")]
		public string Entry_method { get; set; }
		
		/// <summary>
		/// The credit card payment's current state (such as `AUTHORIZED` or
		///`CAPTURED`). See [TenderCardDetailsStatus](https://developer.squareup.com/reference/square_2021-08-18/objects/TenderCardDetailsStatus)
		///for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Represents the payment details of a card to be used for payments. These
	///details are determined by the payment token generated by Web Payments SDK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Card
	{
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
		///returns this field.
		/// Max length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bin")]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string Bin { get; set; }
		
		/// <summary>
		/// The card's brand.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_brand")]
		public string Card_brand { get; set; }
		
		/// <summary>
		/// The type of the card.
		///The Card object includes this field only in response to Payments API calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_type")]
		public string Card_type { get; set; }
		
		/// <summary>
		/// The name of the cardholder.
		/// Max length: 96
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardholder_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(96)]
		public string Cardholder_name { get; set; }
		
		/// <summary>
		/// The ID of a customer created using the Customers API to be associated with the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// Indicates whether or not a card can be used for payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The expiration month of the associated card as an integer between 1 and 12.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exp_month")]
		public System.Nullable<System.Int64> Exp_month { get; set; }
		
		/// <summary>
		/// The four-digit year of the card's expiration date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exp_year")]
		public System.Nullable<System.Int64> Exp_year { get; set; }
		
		/// <summary>
		/// __Not currently set.__ Intended as a Square-assigned identifier, based
		///on the card number, to identify the card across multiple locations within a
		///single application.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Unique ID for this card. Generated by Square.
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Id { get; set; }
		
		/// <summary>
		/// The last 4 digits of the card number.
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_4")]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Last_4 { get; set; }
		
		/// <summary>
		/// Indicates whether the Card is prepaid or not.
		///The Card object includes this field only in response to Payments API calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prepaid_type")]
		public string Prepaid_type { get; set; }
		
		/// <summary>
		/// An optional user-defined reference ID that associates this card with
		///another entity in an external system. For example, a customer ID from an
		///external customer management system.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Current version number of the card. Increments with each card update. Requests to update an
		///existing Card object will be rejected unless the version in the request matches the current
		///version for the Card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	/// <summary>
	/// Represents the details of a tender with `type` `CASH`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TenderCashDetails
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tendered_money")]
		public Money Buyer_tendered_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="change_back_money")]
		public Money Change_back_money { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchUpsertCatalogObjectsRequest
	{
		
		/// <summary>
		/// A batch of CatalogObjects to be inserted/updated atomically.
		///The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
		///attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
		///in one batch will not affect other batches within the same request.
		///
		///For each object, its `updated_at` field is ignored and replaced with a current [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), and its
		///`is_deleted` field must not be set to `true`.
		///
		///To modify an existing object, supply its ID. To create a new object, use an ID starting
		///with `#`. These IDs may be used to create relationships between an object and attributes of
		///other objects that reference it. For example, you can create a CatalogItem with
		///ID `#ABC` and a CatalogItemVariation with its `item_id` attribute set to
		///`#ABC` in order to associate the CatalogItemVariation with its parent
		///CatalogItem.
		///
		///Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.
		///
		///Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
		///may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
		///be inserted or updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batches")]
		public CatalogObjectBatch[] Batches { get; set; }
		
		/// <summary>
		/// A value you specify that uniquely identifies this
		///request among all your requests. A common way to create
		///a valid idempotency key is to use a Universally unique
		///identifier (UUID).
		///
		///If you're unsure whether a particular request was successful,
		///you can reattempt it with the same idempotency key without
		///worrying about creating duplicate objects.
		///
		///See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Idempotency_key { get; set; }
	}
	
	/// <summary>
	/// A batch of catalog objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogObjectBatch
	{
		
		/// <summary>
		/// A list of CatalogObjects belonging to this batch.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public CatalogObject[] Objects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchUpsertCatalogObjectsResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The mapping between client and server IDs for this upsert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id_mappings")]
		public CatalogIdMapping[] Id_mappings { get; set; }
		
		/// <summary>
		/// The created successfully created CatalogObjects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public CatalogObject[] Objects { get; set; }
		
		/// <summary>
		/// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// A mapping between a temporary client-supplied ID and a permanent server-generated ID.
	///
	///When calling [UpsertCatalogObject](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/upsert-catalog-object) or
	///[BatchUpsertCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-upsert-catalog-objects) to
	///create a [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance, you can supply
	///a temporary ID for the to-be-created object, especially when the object is to be referenced
	///elsewhere in the same request body. This temporary ID can be any string unique within
	///the call, but must be prefixed by "#".
	///
	///After the request is submitted and the object created, a permanent server-generated ID is assigned
	///to the new object. The permanent ID is unique across the Square catalog.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogIdMapping
	{
		
		/// <summary>
		/// The client-supplied temporary `#`-prefixed ID for a new `CatalogObject`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_object_id")]
		public string Client_object_id { get; set; }
		
		/// <summary>
		/// The permanent ID for the CatalogObject created by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_id")]
		public string Object_id { get; set; }
	}
	
	/// <summary>
	/// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
	///at a given location to a requesting customer in one or more appointment segments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Booking
	{
		
		/// <summary>
		/// A list of appointment segments for this booking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appointment_segments")]
		public AppointmentSegment[] Appointment_segments { get; set; }
		
		/// <summary>
		/// The timestamp specifying the creation time of this booking, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The ID of the [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) object representing the customer attending this booking
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_note")]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string Customer_note { get; set; }
		
		/// <summary>
		/// A unique ID of this object representing a booking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) object representing the location where the booked service is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
		///This field should not be visible to customers.
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller_note")]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string Seller_note { get; set; }
		
		/// <summary>
		/// The timestamp specifying the starting time of this booking, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_at")]
		public string Start_at { get; set; }
		
		/// <summary>
		/// The status of the booking, describing where the booking stands with respect to the booking state machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The timestamp specifying the most recent update time of this booking, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// The revision number for the booking used for optimistic concurrency.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Supported booking statuses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BookingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED_BY_CUSTOMER")]
		CANCELLED_BY_CUSTOMER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED_BY_SELLER")]
		CANCELLED_BY_SELLER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DECLINED")]
		DECLINED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCEPTED")]
		ACCEPTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_SHOW")]
		NO_SHOW = 5,
	}
	
	/// <summary>
	/// A record of an employee's break during a shift.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Break
	{
		
		/// <summary>
		/// The `BreakType` that this `Break` was templated on.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="break_type_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Break_type_id { get; set; }
		
		/// <summary>
		/// RFC 3339; follows the same timezone information as `Shift`. Precision up to
		///the minute is respected; seconds are truncated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_at")]
		public string End_at { get; set; }
		
		/// <summary>
		/// Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
		///the break.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expected_duration")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Expected_duration { get; set; }
		
		/// <summary>
		/// The UUID for this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this break counts towards time worked for compensation
		///purposes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_paid")]
		public bool Is_paid { get; set; }
		
		/// <summary>
		/// A human-readable name.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// RFC 3339; follows the same timezone information as `Shift`. Precision up to
		///the minute is respected; seconds are truncated.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_at")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Start_at { get; set; }
	}
	
	/// <summary>
	/// A defined break template that sets an expectation for possible `Break`
	///instances on a `Shift`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BreakType
	{
		
		/// <summary>
		/// A human-readable name for this type of break. The name is displayed to
		///employees in Square products.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="break_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Break_name { get; set; }
		
		/// <summary>
		/// A read-only timestamp in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
		///this break. Precision less than minutes is truncated.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expected_duration")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Expected_duration { get; set; }
		
		/// <summary>
		/// The UUID for this object.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this break counts towards time worked for compensation
		///purposes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_paid")]
		public bool Is_paid { get; set; }
		
		/// <summary>
		/// The ID of the business location this type of break applies to.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// A read-only timestamp in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// Used for resolving concurrency issues. The request fails if the version
		///provided does not match the server version at the time of the request. If a value is not
		///provided, Square's servers execute a "blind" write; potentially
		///overwriting another writer's data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Represents a bulk create request for `TeamMember` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BulkCreateTeamMembersRequest
	{
		
		/// <summary>
		/// The data used to create the `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="team_members")]
		public System.Collections.Generic.Dictionary<string, CreateTeamMemberRequest> Team_members { get; set; }
	}
	
	/// <summary>
	/// Represents a create request for a `TeamMember` object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTeamMemberRequest
	{
		
		/// <summary>
		/// A unique string that identifies this `CreateTeamMember` request.
		///Keys can be any valid string, but must be unique for every request.
		///For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		///
		///The minimum length is 1 and the maximum length is 45.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// A record representing an individual team member for a business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member")]
		public TeamMember Team_member { get; set; }
	}
	
	/// <summary>
	/// A record representing an individual team member for a business.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamMember
	{
		
		/// <summary>
		/// An object that represents a team member's assignment to locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assigned_locations")]
		public TeamMemberAssignedLocations Assigned_locations { get; set; }
		
		/// <summary>
		/// The timestamp, in RFC 3339 format, describing when the team member was created.
		///For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The email address associated with the team member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The family name (that is, the last name) associated with the team member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		/// <summary>
		/// The given name (that is, the first name) associated with the team member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		/// <summary>
		/// The unique ID for the team member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the team member is the owner of the Square account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_owner")]
		public System.Nullable<System.Boolean> Is_owner { get; set; }
		
		/// <summary>
		/// The team member's phone number, in E.164 format. For example:
		///+14155552671 - the country code is 1 for US
		///+551155256325 - the country code is 55 for BR
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// A second ID used to associate the team member with an entity in another system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Describes the status of the team member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The timestamp, in RFC 3339 format, describing when the team member was last updated.
		///For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// An object that represents a team member's assignment to locations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamMemberAssignedLocations
	{
		
		/// <summary>
		/// The current assignment type of the team member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignment_type")]
		public string Assignment_type { get; set; }
		
		/// <summary>
		/// The locations that the team member is assigned to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string[] Location_ids { get; set; }
	}
	
	/// <summary>
	/// Represents a response from a bulk create request containing the created `TeamMember` objects or error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BulkCreateTeamMembersResponse
	{
		
		/// <summary>
		/// The errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The successfully created `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_members")]
		public System.Collections.Generic.Dictionary<string, CreateTeamMemberResponse> Team_members { get; set; }
	}
	
	/// <summary>
	/// Represents a response from a create request containing the created `TeamMember` object or error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTeamMemberResponse
	{
		
		/// <summary>
		/// The errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A record representing an individual team member for a business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member")]
		public TeamMember Team_member { get; set; }
	}
	
	/// <summary>
	/// Represents a bulk update request for `TeamMember` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BulkUpdateTeamMembersRequest
	{
		
		/// <summary>
		/// The data used to update the `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="team_members")]
		public System.Collections.Generic.Dictionary<string, UpdateTeamMemberRequest> Team_members { get; set; }
	}
	
	/// <summary>
	/// Represents an update request for a `TeamMember` object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTeamMemberRequest
	{
		
		/// <summary>
		/// A record representing an individual team member for a business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member")]
		public TeamMember Team_member { get; set; }
	}
	
	/// <summary>
	/// Represents a response from a bulk update request containing the updated `TeamMember` objects or error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BulkUpdateTeamMembersResponse
	{
		
		/// <summary>
		/// The errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The successfully updated `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_members")]
		public System.Collections.Generic.Dictionary<string, UpdateTeamMemberResponse> Team_members { get; set; }
	}
	
	/// <summary>
	/// Represents a response from an update request containing the updated `TeamMember` object or error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTeamMemberResponse
	{
		
		/// <summary>
		/// The errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A record representing an individual team member for a business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member")]
		public TeamMember Team_member { get; set; }
	}
	
	/// <summary>
	/// The service appointment settings, including where and how the service is provided.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessAppointmentSettings
	{
		
		/// <summary>
		/// The time unit of the service duration for bookings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alignment_time")]
		public string Alignment_time { get; set; }
		
		/// <summary>
		/// Indicates whether a customer can choose from all available time slots and have a staff member assigned
		///automatically (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="any_team_member_booking_enabled")]
		public System.Nullable<System.Boolean> Any_team_member_booking_enabled { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancellation_fee_money")]
		public Money Cancellation_fee_money { get; set; }
		
		/// <summary>
		/// The cancellation policy adopted by the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancellation_policy")]
		public string Cancellation_policy { get; set; }
		
		/// <summary>
		/// The free-form text of the seller's cancellation policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancellation_policy_text")]
		public string Cancellation_policy_text { get; set; }
		
		/// <summary>
		/// The cut-off time in seconds for allowing clients to cancel or reschedule an appointment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancellation_window_seconds")]
		public System.Nullable<System.Int32> Cancellation_window_seconds { get; set; }
		
		/// <summary>
		/// Types of the location allowed for bookings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_types")]
		public string[] Location_types { get; set; }
		
		/// <summary>
		/// The maximum number of daily appointments per team member or per location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_appointments_per_day_limit")]
		public System.Nullable<System.Int32> Max_appointments_per_day_limit { get; set; }
		
		/// <summary>
		/// Indicates whether the daily appointment limit applies to team members or to
		///business locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_appointments_per_day_limit_type")]
		public string Max_appointments_per_day_limit_type { get; set; }
		
		/// <summary>
		/// The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_booking_lead_time_seconds")]
		public System.Nullable<System.Int32> Max_booking_lead_time_seconds { get; set; }
		
		/// <summary>
		/// The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min_booking_lead_time_seconds")]
		public System.Nullable<System.Int32> Min_booking_lead_time_seconds { get; set; }
		
		/// <summary>
		/// Indicates whether a customer can book multiple services in a single online booking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiple_service_booking_enabled")]
		public System.Nullable<System.Boolean> Multiple_service_booking_enabled { get; set; }
		
		/// <summary>
		/// Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skip_booking_flow_staff_selection")]
		public System.Nullable<System.Boolean> Skip_booking_flow_staff_selection { get; set; }
	}
	
	/// <summary>
	/// Time units of a service duration for bookings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BusinessAppointmentSettingsAlignmentTime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVICE_DURATION")]
		SERVICE_DURATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUARTER_HOURLY")]
		QUARTER_HOURLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HALF_HOURLY")]
		HALF_HOURLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HOURLY")]
		HOURLY = 3,
	}
	
	/// <summary>
	/// Types of location where service is provided.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BusinessAppointmentSettingsBookingLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUSINESS_LOCATION")]
		BUSINESS_LOCATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER_LOCATION")]
		CUSTOMER_LOCATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHONE")]
		PHONE = 2,
	}
	
	/// <summary>
	/// The category of the seller’s cancellation policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BusinessAppointmentSettingsCancellationPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLATION_TREATED_AS_NO_SHOW")]
		CANCELLATION_TREATED_AS_NO_SHOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM_POLICY")]
		CUSTOM_POLICY = 1,
	}
	
	/// <summary>
	/// Types of daily appointment limits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PER_TEAM_MEMBER")]
		PER_TEAM_MEMBER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PER_LOCATION")]
		PER_LOCATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessBookingProfile
	{
		
		/// <summary>
		/// Indicates whether customers can cancel or reschedule their own bookings (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allow_user_cancel")]
		public System.Nullable<System.Boolean> Allow_user_cancel { get; set; }
		
		/// <summary>
		/// Indicates whether the seller is open for booking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booking_enabled")]
		public System.Nullable<System.Boolean> Booking_enabled { get; set; }
		
		/// <summary>
		/// The policy for the seller to automatically accept booking requests (`ACCEPT_ALL`) or not (`REQUIRES_ACCEPTANCE`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booking_policy")]
		public string Booking_policy { get; set; }
		
		/// <summary>
		/// The service appointment settings, including where and how the service is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business_appointment_settings")]
		public BusinessAppointmentSettings Business_appointment_settings { get; set; }
		
		/// <summary>
		/// The RFC 3339 timestamp specifying the booking's creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The choice of customer's time zone information of a booking.
		///The Square online booking site and all notifications to customers uses either the seller location’s time zone
		///or the time zone the customer chooses at booking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_timezone_choice")]
		public string Customer_timezone_choice { get; set; }
		
		/// <summary>
		/// The ID of the seller, obtainable using the Merchants API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller_id")]
		public string Seller_id { get; set; }
	}
	
	/// <summary>
	/// Policies for accepting bookings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BusinessBookingProfileBookingPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCEPT_ALL")]
		ACCEPT_ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUIRES_ACCEPTANCE")]
		REQUIRES_ACCEPTANCE = 1,
	}
	
	/// <summary>
	/// Choices of customer-facing time zone used for bookings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BusinessBookingProfileCustomerTimezoneChoice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUSINESS_LOCATION_TIMEZONE")]
		BUSINESS_LOCATION_TIMEZONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER_CHOICE")]
		CUSTOMER_CHOICE = 1,
	}
	
	/// <summary>
	/// Represents the hours of operation for a business location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHours
	{
		
		/// <summary>
		/// The list of time periods during which the business is open. There may be at most 10
		///periods per day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periods")]
		public BusinessHoursPeriod[] Periods { get; set; }
	}
	
	/// <summary>
	/// Represents a period of time during which a business location is open.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHoursPeriod
	{
		
		/// <summary>
		/// The day of week for this time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day_of_week")]
		public string Day_of_week { get; set; }
		
		/// <summary>
		/// The end time of a business hours period, specified in local time using partial-time
		///RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_local_time")]
		public string End_local_time { get; set; }
		
		/// <summary>
		/// The start time of a business hours period, specified in local time using partial-time
		///RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_local_time")]
		public string Start_local_time { get; set; }
	}
	
	/// <summary>
	/// A request to calculate the points that a buyer can earn from 
	///a specified purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalculateLoyaltyPointsRequest
	{
		
		/// <summary>
		/// The [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) ID for which to calculate the points.
		///Specify this field if your application uses the Orders API to process orders.
		///Otherwise, specify the `transaction_amount_money`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction_amount_money")]
		public Money Transaction_amount_money { get; set; }
	}
	
	/// <summary>
	/// A response that includes the points that the buyer can earn from 
	///a specified purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalculateLoyaltyPointsResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The points that the buyer can earn from a specified purchase.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="points")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Points { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalculateOrderRequest
	{
		
		/// <summary>
		/// Contains all information related to a single order to process with Square,
		///including line items that specify the products to purchase. `Order` objects also
		///include information about any associated tenders, refunds, and returns.
		///
		///All Connect V2 Transactions have all been converted to Orders including all associated
		///itemization data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
		
		/// <summary>
		/// Identifies one or more loyalty reward tiers to apply during the order calculation.
		///The discounts defined by the reward tiers are added to the order only to preview the
		///effect of applying the specified rewards. The rewards do not correspond to actual
		///redemptions; that is, no `reward`s are created. Therefore, the reward `id`s are
		///random strings used only to reference the reward tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposed_rewards")]
		public OrderReward[] Proposed_rewards { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalculateOrderResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Contains all information related to a single order to process with Square,
		///including line items that specify the products to purchase. `Order` objects also
		///include information about any associated tenders, refunds, and returns.
		///
		///All Connect V2 Transactions have all been converted to Orders including all associated
		///itemization data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelBookingRequest
	{
		
		/// <summary>
		/// The revision number for the booking used for optimistic concurrency.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booking_version")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Booking_version { get; set; }
		
		/// <summary>
		/// A unique key to make this request an idempotent operation.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Idempotency_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelBookingResponse
	{
		
		/// <summary>
		/// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		///at a given location to a requesting customer in one or more appointment segments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booking")]
		public Booking Booking { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Describes a `CancelInvoice` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelInvoiceRequest
	{
		
		/// <summary>
		/// The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to cancel.
		///If you do not know the version, you can call 
		///[GetInvoice](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/get-invoice) or [ListInvoices](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/list-invoices).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public int Version { get; set; }
	}
	
	/// <summary>
	/// The response returned by the `CancelInvoice` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelInvoiceResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Stores information about an invoice. You use the Invoices API to create and manage
		///invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public Invoice Invoice { get; set; }
	}
	
	/// <summary>
	/// Stores information about an invoice. You use the Invoices API to create and manage
	///invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Invoice
	{
		
		/// <summary>
		/// The payment methods that customers can use to pay an invoice on the Square-hosted invoice page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accepted_payment_methods")]
		public InvoiceAcceptedPaymentMethods Accepted_payment_methods { get; set; }
		
		/// <summary>
		/// The timestamp when the invoice was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Additional seller-defined fields to render on the invoice. These fields are visible to sellers and buyers
		///on the Square-hosted invoice page and in emailed or PDF copies of invoices. For more information, see
		///[Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).
		///
		///Adding custom fields to an invoice requires an 
		///[Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
		///
		///Max: 2 custom fields
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public InvoiceCustomField[] Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delivery_method")]
		public Invoice_delivery_methodInvoiceDeliveryMethod Delivery_method { get; set; }
		
		/// <summary>
		/// The description of the invoice. This is visible to the customer receiving the invoice.
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Description { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A user-friendly invoice number. The value is unique within a location.
		///If not provided when creating an invoice, Square assigns a value.
		///It increments from 1 and padded with zeros making it 7 characters long
		///(for example, 0000001 and 0000002).
		/// Min length: 1
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Invoice_number { get; set; }
		
		/// <summary>
		/// The ID of the location that this invoice is associated with. 
		///
		///If specified in a `CreateInvoice` request, the value must match the `location_id` of the associated order.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_payment_amount_money")]
		public Money Next_payment_amount_money { get; set; }
		
		/// <summary>
		/// The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the invoice is created. 
		///This field is required when creating an invoice, and the order must be in the `OPEN` state.
		///
		///To view the line items and other information for the associated order, call the 
		///[RetrieveOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/retrieve-order) endpoint using the order ID.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The payment schedule for the invoice, represented by one or more payment requests that
		///define payment settings, such as amount due and due date. An invoice supports the following payment request combinations:
		///- One balance
		///- One deposit with one balance
		///- 2–12 installments 
		///- One deposit with 2–12 installments
		///
		///This field is required when creating an invoice. It must contain at least one payment request. 
		///All payment requests for the invoice must equal the total order amount. For more information, see 
		///[Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).
		///
		///Adding `INSTALLMENT` payment requests to an invoice requires an 
		///[Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_requests")]
		public InvoicePaymentRequest[] Payment_requests { get; set; }
		
		/// <summary>
		/// Provides customer data that Square uses to deliver an invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary_recipient")]
		public InvoiceRecipient Primary_recipient { get; set; }
		
		/// <summary>
		/// The URL of the Square-hosted invoice page.
		///After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice
		///page and returns the page URL in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_url")]
		public string Public_url { get; set; }
		
		/// <summary>
		/// The timestamp when the invoice is scheduled for processing, in RFC 3339 format.
		///After the invoice is published, Square processes the invoice on the specified date,
		///according to the delivery method and payment request settings.
		///
		///If the field is not set, Square processes the invoice immediately after it is published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduled_at")]
		public string Scheduled_at { get; set; }
		
		/// <summary>
		/// The status of the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The ID of the [subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription) associated with the invoice.
		///This field is present only on subscription billing invoices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription_id")]
		public string Subscription_id { get; set; }
		
		/// <summary>
		/// The time zone used to interpret calendar dates on the invoice, such as `due_date`.
		///When an invoice is created, this field is set to the `timezone` specified for the seller
		///location. The value cannot be changed.
		///
		///For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\_Angeles
		///becomes overdue at midnight on March 9 in America/Los\_Angeles (which equals a UTC timestamp
		///of 2021-03-10T08:00:00Z).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// The title of the invoice.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Title { get; set; }
		
		/// <summary>
		/// The timestamp when the invoice was last updated, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// The Square-assigned version number, which is incremented each time an update is committed to the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// The payment methods that customers can use to pay an invoice on the Square-hosted invoice page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceAcceptedPaymentMethods
	{
		
		/// <summary>
		/// Indicates whether bank transfer payments are accepted. The default value is `false`.
		///
		///This option is allowed only for invoices that have a single payment request of type `BALANCE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_account")]
		public System.Nullable<System.Boolean> Bank_account { get; set; }
		
		/// <summary>
		/// Indicates whether credit card or debit card payments are accepted. The default value is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public System.Nullable<System.Boolean> Card { get; set; }
		
		/// <summary>
		/// Indicates whether Square gift card payments are accepted. The default value is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="square_gift_card")]
		public System.Nullable<System.Boolean> Square_gift_card { get; set; }
	}
	
	/// <summary>
	/// An additional seller-defined and customer-facing field to include on the invoice. For more information, 
	///see [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).
	///
	///Adding custom fields to an invoice requires an 
	///[Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceCustomField
	{
		
		/// <summary>
		/// The label or title of the custom field. This field is required for a custom field.
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Label { get; set; }
		
		/// <summary>
		/// The location of the custom field on the invoice. This field is required for a custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placement")]
		public string Placement { get; set; }
		
		/// <summary>
		/// The text of the custom field. If omitted, only the label is rendered.
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents a payment request for an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice). Invoices can specify a maximum
	///of 13 payment requests, with up to 12 `INSTALLMENT` request types. For more information, 
	///see [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).
	///
	///Adding `INSTALLMENT` payment requests to an invoice requires an 
	///[Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoicePaymentRequest
	{
		
		/// <summary>
		/// The payment method for an automatic payment.
		///
		///The default value is `NONE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automatic_payment_source")]
		public string Automatic_payment_source { get; set; }
		
		/// <summary>
		/// The ID of the credit or debit card on file to charge for the payment request. To get the cards on file for a customer,
		///call [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) and include the `customer_id` of the invoice recipient.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Card_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computed_amount_money")]
		public Money Computed_amount_money { get; set; }
		
		/// <summary>
		/// The due date (in the invoice's time zone) for the payment request, in `YYYY-MM-DD` format. This field
		///is required to create a payment request.
		///
		///After this date, the invoice becomes overdue. For example, a payment `due_date` of 2021-03-09 with a `timezone`
		///of America/Los\_Angeles becomes overdue at midnight on March 9 in America/Los\_Angeles (which equals a UTC
		///timestamp of 2021-03-10T08:00:00Z).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_date")]
		public string Due_date { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixed_amount_requested_money")]
		public Money Fixed_amount_requested_money { get; set; }
		
		/// <summary>
		/// Specifies the amount for the payment request in percentage:
		///
		///- When the payment `request_type` is `DEPOSIT`, it is the percentage of the order's total amount.
		///- When the payment `request_type` is `INSTALLMENT`, it is the percentage of the order's total less 
		///the deposit, if requested. The sum of the `percentage_requested` in all installment 
		///payment requests must be equal to 100.
		///
		///You cannot specify this when the payment `request_type` is `BALANCE` or when the 
		///payment request specifies the `fixed_amount_requested_money` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage_requested")]
		public string Percentage_requested { get; set; }
		
		/// <summary>
		/// A list of one or more reminders to send for the payment request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reminders")]
		public InvoicePaymentReminder[] Reminders { get; set; }
		
		/// <summary>
		/// Indicates how Square processes the payment request. DEPRECATED at version 2021-01-21. Replaced by the
		///`Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.
		///
		///One of the following is required when creating an invoice:
		///- (Recommended) The `delivery_method` field of the invoice. To configure an automatic payment, the
		///`automatic_payment_source` field of the payment request is also required.
		///- This `request_method` field. Note that `invoice` objects returned in responses do not include `request_method`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request_method")]
		public string Request_method { get; set; }
		
		/// <summary>
		/// Identifies the payment request type. This type defines how the payment request amount is determined. 
		///This field is required to create a payment request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request_type")]
		public string Request_type { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rounding_adjustment_included_money")]
		public Money Rounding_adjustment_included_money { get; set; }
		
		/// <summary>
		/// If set to true, the Square-hosted invoice page (the `public_url` field of the invoice) 
		///provides a place for the customer to pay a tip. 
		///
		///This field is allowed only on the final payment request  
		///and the payment `request_type` must be `BALANCE` or `INSTALLMENT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tipping_enabled")]
		public System.Nullable<System.Boolean> Tipping_enabled { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_completed_amount_money")]
		public Money Total_completed_amount_money { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the payment request in an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice).
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Describes a payment request reminder (automatic notification) that Square sends
	///to the customer. You configure a reminder relative to the payment request
	///`due_date`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoicePaymentReminder
	{
		
		/// <summary>
		/// The reminder message.
		/// Min length: 1
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Message { get; set; }
		
		/// <summary>
		/// The number of days before (a negative number) or after (a positive number)
		///the payment request `due_date` when the reminder is sent. For example, -3 indicates that
		///the reminder should be sent 3 days before the payment request `due_date`.
		/// Minimum: -32767
		/// Maximum: 32767
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relative_scheduled_days")]
		[System.ComponentModel.DataAnnotations.Range(-32767, 32767)]
		public System.Nullable<System.Int32> Relative_scheduled_days { get; set; }
		
		/// <summary>
		/// If sent, the timestamp when the reminder was sent, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sent_at")]
		public string Sent_at { get; set; }
		
		/// <summary>
		/// The status of the reminder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// A Square-assigned ID that uniquely identifies the reminder within the
		///`InvoicePaymentRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Provides customer data that Square uses to deliver an invoice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceRecipient
	{
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The name of the recipient's company.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// The ID of the customer. This is the customer profile ID that 
		///you provide when creating a draft invoice.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// The recipient's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The recipient's family (that is, last) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		/// <summary>
		/// The recipient's given (that is, first) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		/// <summary>
		/// The recipient's phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
	}
	
	/// <summary>
	/// Describes a request to cancel a payment using 
	///[CancelPaymentByIdempotencyKey](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment-by-idempotency-key).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelPaymentByIdempotencyKeyRequest
	{
		
		/// <summary>
		/// The `idempotency_key` identifying the payment to be canceled.
		/// Required
		/// Min length: 1
		/// Max length: 45
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Idempotency_key { get; set; }
	}
	
	/// <summary>
	/// Defines the response returned by 
	///[CancelPaymentByIdempotencyKey](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment-by-idempotency-key).
	///On success, `errors` is empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelPaymentByIdempotencyKeyResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Describes the request to cancel (void) a payment using 
	///[CancelPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment). 
	///You can only cancel a payment that is approved (not completed).
	///For more information, see 
	///[Delayed capture of a payment](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelPaymentRequest
	{
	}
	
	/// <summary>
	/// Defines the response returned by [CancelPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelPaymentResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a payment processed by the Square API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment")]
		public Payment Payment { get; set; }
	}
	
	/// <summary>
	/// Represents a payment processed by the Square API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Payment
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="app_fee_money")]
		public Money App_fee_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approved_money")]
		public Money Approved_money { get; set; }
		
		/// <summary>
		/// Additional details about BANK_ACCOUNT type payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_account_details")]
		public BankAccountPaymentDetails Bank_account_details { get; set; }
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// The buyer's email address.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email_address")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Buyer_email_address { get; set; }
		
		/// <summary>
		/// Actions that can be performed on this payment:
		///- `EDIT_AMOUNT_UP` - The payment amount can be edited up.
		///- `EDIT_AMOUNT_DOWN` - The payment amount can be edited down.
		///- `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up.
		///- `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public string[] Capabilities { get; set; }
		
		/// <summary>
		/// Reflects the current status of a card payment. Contains only non-confidential information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_details")]
		public CardPaymentDetails Card_details { get; set; }
		
		/// <summary>
		/// Stores details about a cash payment. Contains only non-confidential information. For more information, see 
		///[Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_details")]
		public CashPaymentDetails Cash_details { get; set; }
		
		/// <summary>
		/// The timestamp of when the payment was created, in RFC 3339 format.
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// The action to be applied to the payment when the `delay_duration` has elapsed. This field
		///is read-only.
		///
		///Current values include `CANCEL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delay_action")]
		public string Delay_action { get; set; }
		
		/// <summary>
		/// The duration of time after the payment's creation when Square automatically applies the
		///`delay_action` to the payment. This automatic `delay_action` applies only to payments that
		///do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration`
		///time period.
		///
		///This field is specified as a time duration, in RFC 3339 format.
		///
		///Notes:
		///This feature is only supported for card payments.
		///
		///Default:
		///
		///- Card-present payments: "PT36H" (36 hours) from the creation time.
		///- Card-not-present payments: "P7D" (7 days) from the creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delay_duration")]
		public string Delay_duration { get; set; }
		
		/// <summary>
		/// The read-only timestamp of when the `delay_action` is automatically applied,
		///in RFC 3339 format.
		///
		///Note that this field is calculated by summing the payment's `delay_duration` and `created_at`
		///fields. The `created_at` field is generated by Square and might not exactly match the
		///time on your local machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayed_until")]
		public string Delayed_until { get; set; }
		
		/// <summary>
		/// An optional ID of the employee associated with taking the payment.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// Stores details about an external payment. Contains only non-confidential information.
		///For more information, see 
		///[Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_details")]
		public ExternalPaymentDetails External_details { get; set; }
		
		/// <summary>
		/// A unique ID for the payment.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the location associated with the payment.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// An optional note to include when creating a payment.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Note { get; set; }
		
		/// <summary>
		/// The ID of the order associated with the payment.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The processing fees and fee adjustments assessed by Square for this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processing_fee")]
		public ProcessingFee[] Processing_fee { get; set; }
		
		/// <summary>
		/// The payment's receipt number.
		///The field is missing if a payment is canceled.
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_number")]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Receipt_number { get; set; }
		
		/// <summary>
		/// The URL for the payment's receipt.
		///The field is only populated for COMPLETED payments.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_url")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Receipt_url { get; set; }
		
		/// <summary>
		/// An optional ID that associates the payment with an entity in
		///another system.
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// A list of `refund_id`s identifying refunds for the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_ids")]
		public string[] Refund_ids { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_money")]
		public Money Refunded_money { get; set; }
		
		/// <summary>
		/// Represents fraud risk information for the associated payment.
		///
		///When you take a payment through Square's Payments API (using the `CreatePayment`
		///endpoint), Square evaluates it and assigns a risk level to the payment. Sellers
		///can use this information to determine the course of action (for example,
		///provide the goods/services or refund the payment).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="risk_evaluation")]
		public RiskEvaluation Risk_evaluation { get; set; }
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
		
		/// <summary>
		/// The source type for this payment.
		///
		///Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `CASH`, or `EXTERNAL`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Source_type { get; set; }
		
		/// <summary>
		/// Additional payment information that gets added to the customer's card statement
		///as part of the statement description.
		///
		///Note that the `statement_description_identifier` might get truncated on the statement description
		///to fit the required information including the Square identifier (SQ *) and the name of the
		///seller taking the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statement_description_identifier")]
		public string Statement_description_identifier { get; set; }
		
		/// <summary>
		/// Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Status { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tip_money")]
		public Money Tip_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public Money Total_money { get; set; }
		
		/// <summary>
		/// The timestamp of when the payment was last updated, in RFC 3339 format.
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// Used for optimistic concurrency. This opaque token identifies a specific version of the
		///`Payment` object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version_token")]
		public string Version_token { get; set; }
		
		/// <summary>
		/// Additional details about `WALLET` type payments. Contains only non-confidential information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wallet_details")]
		public DigitalWalletDetails Wallet_details { get; set; }
	}
	
	/// <summary>
	/// Reflects the current status of a card payment. Contains only non-confidential information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CardPaymentDetails
	{
		
		/// <summary>
		/// For EMV payments, the cryptogram generated for the payment.
		/// Max length: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="application_cryptogram")]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Application_cryptogram { get; set; }
		
		/// <summary>
		/// For EMV payments, the application ID identifies the EMV application used for the payment.
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="application_identifier")]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Application_identifier { get; set; }
		
		/// <summary>
		/// For EMV payments, the human-readable name of the EMV application used for the payment.
		/// Max length: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="application_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Application_name { get; set; }
		
		/// <summary>
		/// The status code returned by the card issuer that describes the payment's
		///authorization status.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth_result_code")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Auth_result_code { get; set; }
		
		/// <summary>
		/// The status code returned from the Address Verification System (AVS) check. The code can be
		///`AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avs_status")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Avs_status { get; set; }
		
		/// <summary>
		/// Represents the payment details of a card to be used for payments. These
		///details are determined by the payment token generated by Web Payments SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public Card Card { get; set; }
		
		/// <summary>
		/// The timeline for card payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_payment_timeline")]
		public CardPaymentTimeline Card_payment_timeline { get; set; }
		
		/// <summary>
		/// The status code returned from the Card Verification Value (CVV) check. The code can be
		///`CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvv_status")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Cvv_status { get; set; }
		
		/// <summary>
		/// Details about the device that took the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device_details")]
		public DeviceDetails Device_details { get; set; }
		
		/// <summary>
		/// The method used to enter the card's details for the payment. The method can be
		///`KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry_method")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Entry_method { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Whether the card must be physically present for the payment to
		///be refunded.  If set to `true`, the card must be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_requires_card_presence")]
		public System.Nullable<System.Boolean> Refund_requires_card_presence { get; set; }
		
		/// <summary>
		/// The statement description sent to the card networks.
		///
		///Note: The actual statement description varies and is likely to be truncated and appended with
		///additional information on a per issuer basis.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statement_description")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Statement_description { get; set; }
		
		/// <summary>
		/// The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or
		///FAILED.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Status { get; set; }
		
		/// <summary>
		/// For EMV payments, the method used to verify the cardholder's identity. The method can be
		///`PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_method")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Verification_method { get; set; }
		
		/// <summary>
		/// For EMV payments, the results of the cardholder verification. The result can be
		///`SUCCESS`, `FAILURE`, or `UNKNOWN`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_results")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Verification_results { get; set; }
	}
	
	/// <summary>
	/// The timeline for card payments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CardPaymentTimeline
	{
		
		/// <summary>
		/// The timestamp when the payment was authorized, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorized_at")]
		public string Authorized_at { get; set; }
		
		/// <summary>
		/// The timestamp when the payment was captured, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captured_at")]
		public string Captured_at { get; set; }
		
		/// <summary>
		/// The timestamp when the payment was voided, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voided_at")]
		public string Voided_at { get; set; }
	}
	
	/// <summary>
	/// Details about the device that took the payment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceDetails
	{
		
		/// <summary>
		/// The Square-issued ID of the device.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Device_id { get; set; }
		
		/// <summary>
		/// The Square-issued installation ID for the device.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device_installation_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Device_installation_id { get; set; }
		
		/// <summary>
		/// The name of the device set by the seller.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Device_name { get; set; }
	}
	
	/// <summary>
	/// Stores details about a cash payment. Contains only non-confidential information. For more information, see 
	///[Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashPaymentDetails
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="buyer_supplied_money")]
		public Money Buyer_supplied_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="change_back_money")]
		public Money Change_back_money { get; set; }
	}
	
	/// <summary>
	/// Stores details about an external payment. Contains only non-confidential information.
	///For more information, see 
	///[Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExternalPaymentDetails
	{
		
		/// <summary>
		/// A description of the external payment source. For example, 
		///"Food Delivery Service".
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Source { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_fee_money")]
		public Money Source_fee_money { get; set; }
		
		/// <summary>
		/// An ID to associate the payment to its originating source.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Source_id { get; set; }
		
		/// <summary>
		/// The type of external payment the seller received. It can be one of the following:
		///- CHECK - Paid using a physical check.
		///- BANK_TRANSFER - Paid using external bank transfer.
		///- OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
		///- CRYPTO - Paid using a crypto currency.
		///- SQUARE_CASH - Paid using Square Cash App.
		///- SOCIAL - Paid using peer-to-peer payment applications.
		///- EXTERNAL - A third-party application gathered this payment outside of Square.
		///- EMONEY - Paid using an E-money provider.
		///- CARD - A credit or debit card that Square does not support.
		///- STORED_BALANCE - Use for house accounts, store credit, and so forth.
		///- FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
		///- OTHER - A type not listed here.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents the Square processing fee.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingFee
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// The timestamp of when the fee takes effect, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effective_at")]
		public string Effective_at { get; set; }
		
		/// <summary>
		/// The type of fee assessed or adjusted. The fee type can be `INITIAL` or `ADJUSTMENT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents fraud risk information for the associated payment.
	///
	///When you take a payment through Square's Payments API (using the `CreatePayment`
	///endpoint), Square evaluates it and assigns a risk level to the payment. Sellers
	///can use this information to determine the course of action (for example,
	///provide the goods/services or refund the payment).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RiskEvaluation
	{
		
		/// <summary>
		/// The timestamp when payment risk was evaluated, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The risk level associated with the payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="risk_level")]
		public string Risk_level { get; set; }
	}
	
	/// <summary>
	/// Additional details about `WALLET` type payments. Contains only non-confidential information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DigitalWalletDetails
	{
		
		/// <summary>
		/// The status of the `WALLET` payment. The status can be `AUTHORIZED`, `CAPTURED`, `VOIDED`, or
		///`FAILED`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Defines parameters in a
	///[CancelSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/cancel-subscription) endpoint request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelSubscriptionRequest
	{
	}
	
	/// <summary>
	/// Defines fields that are included in a
	///[CancelSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/cancel-subscription) response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelSubscriptionResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a customer subscription to a subscription plan.
		///For an overview of the `Subscription` type, see
		///[Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Subscription Subscription { get; set; }
	}
	
	/// <summary>
	/// Represents a customer subscription to a subscription plan.
	///For an overview of the `Subscription` type, see
	///[Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		/// <summary>
		/// The subscription cancellation date, in YYYY-MM-DD format (for
		///example, 2013-01-15). On this date, the subscription status changes
		///to `CANCELED` and the subscription billing stops.
		///If you don't set this field, the subscription plan dictates if and
		///when subscription ends.
		///
		///You cannot update this field, you can only clear it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceled_date")]
		public string Canceled_date { get; set; }
		
		/// <summary>
		/// The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card)
		///that is charged for the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		public string Card_id { get; set; }
		
		/// <summary>
		/// The date up to which the customer is invoiced for the
		///subscription, in YYYY-MM-DD format (for example, 2013-01-15).
		///
		///After the invoice is sent for a given billing period,
		///this date will be the last day of the billing period.
		///For example,
		///suppose for the month of May a customer gets an invoice
		///(or charged the card) on May 1. For the monthly billing scenario,
		///this date is then set to May 31.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="charged_through_date")]
		public string Charged_through_date { get; set; }
		
		/// <summary>
		/// The timestamp when the subscription was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The ID of the associated [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the subscription.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Id { get; set; }
		
		/// <summary>
		/// The IDs of the [invoices](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) created for the
		///subscription, listed in order when the invoices were created
		///(oldest invoices appear first).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_ids")]
		public string[] Invoice_ids { get; set; }
		
		/// <summary>
		/// The ID of the location associated with the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The ID of the associated [subscription plan](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogSubscriptionPlan).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan_id")]
		public string Plan_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_override_money")]
		public Money Price_override_money { get; set; }
		
		/// <summary>
		/// The start date of the subscription, in YYYY-MM-DD format (for example,
		///2013-01-15).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
		
		/// <summary>
		/// The current status of the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The tax amount applied when billing the subscription. The
		///percentage is expressed in decimal form, using a `'.'` as the decimal
		///separator and without a `'%'` sign. For example, a value of `7.5`
		///corresponds to 7.5%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_percentage")]
		public string Tax_percentage { get; set; }
		
		/// <summary>
		/// Timezone that will be used in date calculations for the subscription.
		///Defaults to the timezone of the location based on `location_id`.
		///Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// The version of the object. When updating an object, the version
		///supplied must match the version in the database, otherwise the write will
		///be rejected as conflicting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelTerminalCheckoutRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelTerminalCheckoutResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="checkout")]
		public TerminalCheckout Checkout { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminalCheckout
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// The ID of the application that created the checkout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="app_id")]
		public string App_id { get; set; }
		
		/// <summary>
		/// Present if the status is `CANCELED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancel_reason")]
		public string Cancel_reason { get; set; }
		
		/// <summary>
		/// The time when the `TerminalCheckout` was created, as an RFC 3339 timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// An RFC 3339 duration, after which the checkout is automatically canceled.
		///A `TerminalCheckout` that is `PENDING` is automatically `CANCELED` and has a cancellation reason
		///of `TIMED_OUT`.
		///
		///Default: 5 minutes from creation
		///
		///Maximum: 5 minutes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadline_duration")]
		public string Deadline_duration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device_options")]
		public DeviceCheckoutOptions Device_options { get; set; }
		
		/// <summary>
		/// A unique ID for this `TerminalCheckout`.
		/// Min length: 10
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the device where the `TerminalCheckout` was directed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// An optional note to associate with the checkout, as well as with any payments used to complete the checkout.
		/// Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Note { get; set; }
		
		/// <summary>
		/// A list of IDs for payments created by this `TerminalCheckout`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_ids")]
		public string[] Payment_ids { get; set; }
		
		/// <summary>
		/// The type of payment the terminal should attempt to capture from. Defaults to `CARD_PRESENT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_type")]
		public string Payment_type { get; set; }
		
		/// <summary>
		/// An optional user-defined reference ID that can be used to associate
		///this `TerminalCheckout` to another entity in an external system. For example, an order
		///ID generated by a third-party shopping cart. The ID is also associated with any payments
		///used to complete the checkout.
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// The status of the `TerminalCheckout`.
		///Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The time when the `TerminalCheckout` was last updated, as an RFC 3339 timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceCheckoutOptions
	{
		
		/// <summary>
		/// The unique ID of the device intended for this `TerminalCheckout`.
		///A list of `DeviceCode` objects can be retrieved from the /v2/devices/codes endpoint.
		///Match a `DeviceCode.device_id` value with `device_id` to get the associated device code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device_id")]
		public string Device_id { get; set; }
		
		/// <summary>
		/// Instructs the device to skip the receipt screen. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skip_receipt_screen")]
		public System.Nullable<System.Boolean> Skip_receipt_screen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tip_settings")]
		public TipSettings Tip_settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TipSettings
	{
		
		/// <summary>
		/// Indicates whether tipping is enabled for this checkout. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allow_tipping")]
		public System.Nullable<System.Boolean> Allow_tipping { get; set; }
		
		/// <summary>
		/// Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_tip_field")]
		public System.Nullable<System.Boolean> Custom_tip_field { get; set; }
		
		/// <summary>
		/// Indicates whether tip options should be presented on the screen before presenting
		///the signature screen during card payment. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="separate_tip_screen")]
		public System.Nullable<System.Boolean> Separate_tip_screen { get; set; }
		
		/// <summary>
		/// Enables the "Smart Tip Amounts" behavior.
		///Exact tipping options depend on the region in which the Square seller is active.
		///
		///For payments under 10.00, in the Australia, Canada, Ireland, United Kingdom, and United States, tipping options are presented as no tip, .50, 1.00 or 2.00.
		///
		///For payment amounts of 10.00 or greater, tipping options are presented as the following percentages: 0%, 5%, 10%, 15%.
		///
		///If set to true, the `tip_percentages` settings is ignored.
		///Defaults to false.
		///
		///To learn more about smart tipping, see [Accept Tips with the Square App](https://squareup.com/help/us/en/article/5069-accept-tips-with-the-square-app).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smart_tipping")]
		public System.Nullable<System.Boolean> Smart_tipping { get; set; }
		
		/// <summary>
		/// A list of tip percentages that should be presented during the checkout flow, specified as
		///up to 3 non-negative integers from 0 to 100 (inclusive). Defaults to 15, 20, and 25.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tip_percentages")]
		public int[] Tip_percentages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelTerminalRefundRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelTerminalRefundResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refund")]
		public TerminalRefund Refund { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminalRefund
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// The ID of the application that created the refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="app_id")]
		public string App_id { get; set; }
		
		/// <summary>
		/// Present if the status is `CANCELED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancel_reason")]
		public string Cancel_reason { get; set; }
		
		/// <summary>
		/// The time when the `TerminalRefund` was created, as an RFC 3339 timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The RFC 3339 duration, after which the refund is automatically canceled.
		///A `TerminalRefund` that is `PENDING` is automatically `CANCELED` and has a cancellation reason
		///of `TIMED_OUT`.
		///
		///Default: 5 minutes from creation.
		///
		///Maximum: 5 minutes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadline_duration")]
		public string Deadline_duration { get; set; }
		
		/// <summary>
		/// The unique ID of the device intended for this `TerminalRefund`.
		///The Id can be retrieved from /v2/devices api.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device_id")]
		public string Device_id { get; set; }
		
		/// <summary>
		/// A unique ID for this `TerminalRefund`.
		/// Min length: 10
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the device where the `TerminalRefund` was directed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The reference to the Square order ID for the payment identified by the `payment_id`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The unique ID of the payment being refunded.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// A description of the reason for the refund.
		///Note: maximum 192 characters
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Reason { get; set; }
		
		/// <summary>
		/// The reference to the payment refund created by completing this `TerminalRefund`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_id")]
		public string Refund_id { get; set; }
		
		/// <summary>
		/// The status of the `TerminalRefund`.
		///Options: `PENDING`, `IN_PROGRESS`, `CANCELED`, or `COMPLETED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The time when the `TerminalRefund` was last updated, as an RFC 3339 timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptureTransactionRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [CaptureTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/capture-transaction) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptureTransactionResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Indicates a card's brand, such as `VISA` or `MASTERCARD`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CardBrand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_BRAND")]
		OTHER_BRAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VISA")]
		VISA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASTERCARD")]
		MASTERCARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMERICAN_EXPRESS")]
		AMERICAN_EXPRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCOVER")]
		DISCOVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCOVER_DINERS")]
		DISCOVER_DINERS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JCB")]
		JCB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHINA_UNIONPAY")]
		CHINA_UNIONPAY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_GIFT_CARD")]
		SQUARE_GIFT_CARD = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_CAPITAL_CARD")]
		SQUARE_CAPITAL_CARD = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERAC")]
		INTERAC = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EFTPOS")]
		EFTPOS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FELICA")]
		FELICA = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EBT")]
		EBT = 13,
	}
	
	/// <summary>
	/// Indicates a card's prepaid type, such as `NOT_PREPAID` or `PREPAID`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CardPrepaidType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_PREPAID_TYPE")]
		UNKNOWN_PREPAID_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_PREPAID")]
		NOT_PREPAID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREPAID")]
		PREPAID = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CardSquareProduct
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_SQUARE_PRODUCT")]
		UNKNOWN_SQUARE_PRODUCT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECT_API")]
		CONNECT_API = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DASHBOARD")]
		DASHBOARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTER_CLIENT")]
		REGISTER_CLIENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUYER_DASHBOARD")]
		BUYER_DASHBOARD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEB")]
		WEB = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVOICES")]
		INVOICES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIFT_CARD")]
		GIFT_CARD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIRTUAL_TERMINAL")]
		VIRTUAL_TERMINAL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READER_SDK")]
		READER_SDK = 9,
	}
	
	/// <summary>
	/// Indicates a card's type, such as `CREDIT` or `DEBIT`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CardType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_CARD_TYPE")]
		UNKNOWN_CARD_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREDIT")]
		CREDIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEBIT")]
		DEBIT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashDrawerDevice
	{
		
		/// <summary>
		/// The device Square-issued ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The device merchant-specified name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The types of events on a CashDrawerShift.
	///Each event type represents an employee action on the actual cash drawer
	///represented by a CashDrawerShift.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CashDrawerEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_SALE")]
		NO_SALE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CASH_TENDER_PAYMENT")]
		CASH_TENDER_PAYMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_TENDER_PAYMENT")]
		OTHER_TENDER_PAYMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CASH_TENDER_CANCELLED_PAYMENT")]
		CASH_TENDER_CANCELLED_PAYMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_TENDER_CANCELLED_PAYMENT")]
		OTHER_TENDER_CANCELLED_PAYMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CASH_TENDER_REFUND")]
		CASH_TENDER_REFUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_TENDER_REFUND")]
		OTHER_TENDER_REFUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAID_IN")]
		PAID_IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAID_OUT")]
		PAID_OUT = 8,
	}
	
	/// <summary>
	/// This model gives the details of a cash drawer shift.
	///The cash_payment_money, cash_refund_money, cash_paid_in_money,
	///and cash_paid_out_money fields are all computed by summing their respective
	///event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashDrawerShift
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_paid_in_money")]
		public Money Cash_paid_in_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_paid_out_money")]
		public Money Cash_paid_out_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_payment_money")]
		public Money Cash_payment_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_refunds_money")]
		public Money Cash_refunds_money { get; set; }
		
		/// <summary>
		/// The time when the shift was closed, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closed_at")]
		public string Closed_at { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closed_cash_money")]
		public Money Closed_cash_money { get; set; }
		
		/// <summary>
		/// The ID of the employee that closed the cash drawer shift by auditing
		///the cash drawer contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closing_employee_id")]
		public string Closing_employee_id { get; set; }
		
		/// <summary>
		/// The free-form text description of a cash drawer by an employee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public CashDrawerDevice Device { get; set; }
		
		/// <summary>
		/// The IDs of all employees that were logged into Square Point of Sale at any
		///point while the cash drawer shift was open.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_ids")]
		public string[] Employee_ids { get; set; }
		
		/// <summary>
		/// The time when the shift ended, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ended_at")]
		public string Ended_at { get; set; }
		
		/// <summary>
		/// The ID of the employee that ended the cash drawer shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ending_employee_id")]
		public string Ending_employee_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expected_cash_money")]
		public Money Expected_cash_money { get; set; }
		
		/// <summary>
		/// The shift unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The time when the shift began, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opened_at")]
		public string Opened_at { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opened_cash_money")]
		public Money Opened_cash_money { get; set; }
		
		/// <summary>
		/// The ID of the employee that started the cash drawer shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opening_employee_id")]
		public string Opening_employee_id { get; set; }
		
		/// <summary>
		/// The shift current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashDrawerShiftEvent
	{
		
		/// <summary>
		/// The event time in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// An optional description of the event, entered by the employee that
		///created the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of the employee that created the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_money")]
		public Money Event_money { get; set; }
		
		/// <summary>
		/// The type of cash drawer shift event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public string Event_type { get; set; }
		
		/// <summary>
		/// The unique ID of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The current state of a cash drawer shift.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CashDrawerShiftState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPEN")]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENDED")]
		ENDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOSED")]
		CLOSED = 2,
	}
	
	/// <summary>
	/// The summary of a closed cash drawer shift.
	///This model contains only the money counted to start a cash drawer shift, counted
	///at the end of the shift, and the amount that should be in the drawer at shift
	///end based on summing all cash drawer shift events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashDrawerShiftSummary
	{
		
		/// <summary>
		/// The shift close time in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closed_at")]
		public string Closed_at { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closed_cash_money")]
		public Money Closed_cash_money { get; set; }
		
		/// <summary>
		/// An employee free-text description of a cash drawer shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The shift end time in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ended_at")]
		public string Ended_at { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expected_cash_money")]
		public Money Expected_cash_money { get; set; }
		
		/// <summary>
		/// The shift unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The shift start time in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opened_at")]
		public string Opened_at { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opened_cash_money")]
		public Money Opened_cash_money { get; set; }
		
		/// <summary>
		/// The shift current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// Defines the visibility of a custom attribute to applications other than their
	///creating application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogCustomAttributeDefinitionAppVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_VISIBILITY_HIDDEN")]
		APP_VISIBILITY_HIDDEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_VISIBILITY_READ_ONLY")]
		APP_VISIBILITY_READ_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_VISIBILITY_READ_WRITE_VALUES")]
		APP_VISIBILITY_READ_WRITE_VALUES = 2,
	}
	
	/// <summary>
	/// Defines the visibility of a custom attribute to sellers in Square
	///client applications, Square APIs or in Square UIs (including Square Point
	///of Sale applications and Square Dashboard).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogCustomAttributeDefinitionSellerVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SELLER_VISIBILITY_HIDDEN")]
		SELLER_VISIBILITY_HIDDEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SELLER_VISIBILITY_READ_WRITE_VALUES")]
		SELLER_VISIBILITY_READ_WRITE_VALUES = 1,
	}
	
	/// <summary>
	/// Defines the possible types for a custom attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogCustomAttributeDefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRING")]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOOLEAN")]
		BOOLEAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUMBER")]
		NUMBER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SELECTION")]
		SELECTION = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogDiscountModifyTaxBasis
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODIFY_TAX_BASIS")]
		MODIFY_TAX_BASIS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DO_NOT_MODIFY_TAX_BASIS")]
		DO_NOT_MODIFY_TAX_BASIS = 1,
	}
	
	/// <summary>
	/// How to apply a CatalogDiscount to a CatalogItem.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogDiscountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED_PERCENTAGE")]
		FIXED_PERCENTAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED_AMOUNT")]
		FIXED_AMOUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VARIABLE_PERCENTAGE")]
		VARIABLE_PERCENTAGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VARIABLE_AMOUNT")]
		VARIABLE_AMOUNT = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogInfoRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogInfoResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limits")]
		public CatalogInfoResponseLimits Limits { get; set; }
		
		/// <summary>
		/// Group of standard measurement units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standard_unit_description_group")]
		public StandardUnitDescriptionGroup Standard_unit_description_group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogInfoResponseLimits
	{
		
		/// <summary>
		/// The maximum number of object IDs that may be included in a single
		///`/v2/catalog/batch-delete` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_delete_max_object_ids")]
		public System.Nullable<System.Int32> Batch_delete_max_object_ids { get; set; }
		
		/// <summary>
		/// The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve`
		///request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_retrieve_max_object_ids")]
		public System.Nullable<System.Int32> Batch_retrieve_max_object_ids { get; set; }
		
		/// <summary>
		/// The maximum number of objects that may appear within a single batch in a
		///`/v2/catalog/batch-upsert` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_upsert_max_objects_per_batch")]
		public System.Nullable<System.Int32> Batch_upsert_max_objects_per_batch { get; set; }
		
		/// <summary>
		/// The maximum number of objects that may appear across all batches in a
		///`/v2/catalog/batch-upsert` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_upsert_max_total_objects")]
		public System.Nullable<System.Int32> Batch_upsert_max_total_objects { get; set; }
		
		/// <summary>
		/// The maximum number of results that may be returned in a page of a
		///`/v2/catalog/search` response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_max_page_limit")]
		public System.Nullable<System.Int32> Search_max_page_limit { get; set; }
		
		/// <summary>
		/// The maximum number of item IDs that may be included in a single
		///`/v2/catalog/update-item-modifier-lists` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_modifier_lists_max_item_ids")]
		public System.Nullable<System.Int32> Update_item_modifier_lists_max_item_ids { get; set; }
		
		/// <summary>
		/// The maximum number of modifier list IDs to be disabled that may be included in
		///a single `/v2/catalog/update-item-modifier-lists` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_modifier_lists_max_modifier_lists_to_disable")]
		public System.Nullable<System.Int32> Update_item_modifier_lists_max_modifier_lists_to_disable { get; set; }
		
		/// <summary>
		/// The maximum number of modifier list IDs to be enabled that may be included in
		///a single `/v2/catalog/update-item-modifier-lists` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_modifier_lists_max_modifier_lists_to_enable")]
		public System.Nullable<System.Int32> Update_item_modifier_lists_max_modifier_lists_to_enable { get; set; }
		
		/// <summary>
		/// The maximum number of item IDs that may be included in a single
		///`/v2/catalog/update-item-taxes` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_taxes_max_item_ids")]
		public System.Nullable<System.Int32> Update_item_taxes_max_item_ids { get; set; }
		
		/// <summary>
		/// The maximum number of tax IDs to be disabled that may be included in a single
		///`/v2/catalog/update-item-taxes` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_taxes_max_taxes_to_disable")]
		public System.Nullable<System.Int32> Update_item_taxes_max_taxes_to_disable { get; set; }
		
		/// <summary>
		/// The maximum number of tax IDs to be enabled that may be included in a single
		///`/v2/catalog/update-item-taxes` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_taxes_max_taxes_to_enable")]
		public System.Nullable<System.Int32> Update_item_taxes_max_taxes_to_enable { get; set; }
	}
	
	/// <summary>
	/// Group of standard measurement units.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StandardUnitDescriptionGroup
	{
		
		/// <summary>
		/// IETF language tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_code")]
		public string Language_code { get; set; }
		
		/// <summary>
		/// List of standard (non-custom) measurement units in this description group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standard_unit_descriptions")]
		public StandardUnitDescription[] Standard_unit_descriptions { get; set; }
	}
	
	/// <summary>
	/// Contains the name and abbreviation for standard measurement unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StandardUnitDescription
	{
		
		/// <summary>
		/// UI display abbreviation for the measurement unit. For example, 'lb'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// UI display name of the measurement unit. For example, 'Pound'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents a unit of measurement to use with a quantity, such as ounces
		///or inches. Exactly one of the following fields are required: `custom_unit`,
		///`area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MeasurementUnit Unit { get; set; }
	}
	
	/// <summary>
	/// The type of a CatalogItem. Connect V2 only allows the creation of `REGULAR` or `APPOINTMENTS_SERVICE` items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogItemProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGULAR")]
		REGULAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIFT_CARD")]
		GIFT_CARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPOINTMENTS_SERVICE")]
		APPOINTMENTS_SERVICE = 2,
	}
	
	/// <summary>
	/// Indicates whether a CatalogModifierList supports multiple selections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogModifierListSelectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SINGLE")]
		SINGLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLE")]
		MULTIPLE = 1,
	}
	
	/// <summary>
	/// A reference to a Catalog object at a specific version. In general this is
	///used as an entry point into a graph of catalog objects, where the objects exist
	///at a specific version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogObjectReference
	{
		
		/// <summary>
		/// The version of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// The ID of the referenced object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_id")]
		public string Object_id { get; set; }
	}
	
	/// <summary>
	/// Possible types of CatalogObjects returned from the Catalog, each
	///containing type-specific properties in the `*_data` field corresponding to the object type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ITEM")]
		ITEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMAGE")]
		IMAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CATEGORY")]
		CATEGORY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ITEM_VARIATION")]
		ITEM_VARIATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TAX")]
		TAX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCOUNT")]
		DISCOUNT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODIFIER_LIST")]
		MODIFIER_LIST = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODIFIER")]
		MODIFIER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRICING_RULE")]
		PRICING_RULE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRODUCT_SET")]
		PRODUCT_SET = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIME_PERIOD")]
		TIME_PERIOD = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEASUREMENT_UNIT")]
		MEASUREMENT_UNIT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBSCRIPTION_PLAN")]
		SUBSCRIPTION_PLAN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ITEM_OPTION")]
		ITEM_OPTION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ITEM_OPTION_VAL")]
		ITEM_OPTION_VAL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM_ATTRIBUTE_DEFINITION")]
		CUSTOM_ATTRIBUTE_DEFINITION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUICK_AMOUNTS_SETTINGS")]
		QUICK_AMOUNTS_SETTINGS = 16,
	}
	
	/// <summary>
	/// Indicates whether the price of a CatalogItemVariation should be entered manually at the time of sale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogPricingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED_PRICING")]
		FIXED_PRICING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VARIABLE_PRICING")]
		VARIABLE_PRICING = 1,
	}
	
	/// <summary>
	/// A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
	///
	///Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
	///Any combination of the following types may be used together:
	///- [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact)
	///- [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix)
	///- [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange)
	///- [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute)
	///- [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText)
	///All other query types cannot be combined with any others.
	///
	///When a query filter is based on an attribute, the attribute must be searchable.
	///Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
	///
	///* Searchable attribute and objects queryable by searchable attributes **
	///- `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
	///- `description`: `CatalogItem`, `CatalogItemOptionValue`
	///- `abbreviation`: `CatalogItem`
	///- `upc`: `CatalogItemVariation`
	///- `sku`: `CatalogItemVariation`
	///- `caption`: `CatalogImage`
	///- `display_name`: `CatalogItemOption`
	///
	///For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use
	///the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQuery
	{
		
		/// <summary>
		/// The query filter to return the search result by exact match of the specified attribute name and value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exact_query")]
		public CatalogQueryExact Exact_query { get; set; }
		
		/// <summary>
		/// The query filter to return the item variations containing the specified item option value IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_variations_for_item_option_values_query")]
		public CatalogQueryItemVariationsForItemOptionValues Item_variations_for_item_option_values_query { get; set; }
		
		/// <summary>
		/// The query filter to return the items containing the specified item option IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items_for_item_options_query")]
		public CatalogQueryItemsForItemOptions Items_for_item_options_query { get; set; }
		
		/// <summary>
		/// The query filter to return the items containing the specified modifier list IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items_for_modifier_list_query")]
		public CatalogQueryItemsForModifierList Items_for_modifier_list_query { get; set; }
		
		/// <summary>
		/// The query filter to return the items containing the specified tax IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items_for_tax_query")]
		public CatalogQueryItemsForTax Items_for_tax_query { get; set; }
		
		/// <summary>
		/// The query filter to return the search result whose named attribute values are prefixed by the specified attribute value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix_query")]
		public CatalogQueryPrefix Prefix_query { get; set; }
		
		/// <summary>
		/// The query filter to return the search result whose named attribute values fall between the specified range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range_query")]
		public CatalogQueryRange Range_query { get; set; }
		
		/// <summary>
		/// The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of
		///the `attribute_values`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="set_query")]
		public CatalogQuerySet Set_query { get; set; }
		
		/// <summary>
		/// The query expression to specify the key to sort search results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sorted_attribute_query")]
		public CatalogQuerySortedAttribute Sorted_attribute_query { get; set; }
		
		/// <summary>
		/// The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text_query")]
		public CatalogQueryText Text_query { get; set; }
	}
	
	/// <summary>
	/// The query filter to return the search result by exact match of the specified attribute name and value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQueryExact
	{
		
		/// <summary>
		/// The name of the attribute to be searched. Matching of the attribute name is exact.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Attribute_name { get; set; }
		
		/// <summary>
		/// The desired value of the search attribute. Matching of the attribute value is case insensitive and can be partial.
		///For example, if a specified value of "sma", objects with the named attribute value of "Small", "small" are both matched.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_value")]
		public string Attribute_value { get; set; }
	}
	
	/// <summary>
	/// The query filter to return the item variations containing the specified item option value IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQueryItemVariationsForItemOptionValues
	{
		
		/// <summary>
		/// A set of `CatalogItemOptionValue` IDs to be used to find associated
		///`CatalogItemVariation`s. All ItemVariations that contain all of the given
		///Item Option Values (in any order) will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_option_value_ids")]
		public string[] Item_option_value_ids { get; set; }
	}
	
	/// <summary>
	/// The query filter to return the items containing the specified item option IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQueryItemsForItemOptions
	{
		
		/// <summary>
		/// A set of `CatalogItemOption` IDs to be used to find associated
		///`CatalogItem`s. All Items that contain all of the given Item Options (in any order)
		///will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_option_ids")]
		public string[] Item_option_ids { get; set; }
	}
	
	/// <summary>
	/// The query filter to return the items containing the specified modifier list IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQueryItemsForModifierList
	{
		
		/// <summary>
		/// A set of `CatalogModifierList` IDs to be used to find associated `CatalogItem`s.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modifier_list_ids")]
		public string[] Modifier_list_ids { get; set; }
	}
	
	/// <summary>
	/// The query filter to return the items containing the specified tax IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQueryItemsForTax
	{
		
		/// <summary>
		/// A set of `CatalogTax` IDs to be used to find associated `CatalogItem`s.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tax_ids")]
		public string[] Tax_ids { get; set; }
	}
	
	/// <summary>
	/// The query filter to return the search result whose named attribute values are prefixed by the specified attribute value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQueryPrefix
	{
		
		/// <summary>
		/// The name of the attribute to be searched.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Attribute_name { get; set; }
		
		/// <summary>
		/// The desired prefix of the search attribute value.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_prefix")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Attribute_prefix { get; set; }
	}
	
	/// <summary>
	/// The query filter to return the search result whose named attribute values fall between the specified range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQueryRange
	{
		
		/// <summary>
		/// The desired maximum value for the search attribute (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute_max_value")]
		public System.Nullable<System.Int64> Attribute_max_value { get; set; }
		
		/// <summary>
		/// The desired minimum value for the search attribute (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute_min_value")]
		public System.Nullable<System.Int64> Attribute_min_value { get; set; }
		
		/// <summary>
		/// The name of the attribute to be searched.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Attribute_name { get; set; }
	}
	
	/// <summary>
	/// The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of
	///the `attribute_values`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQuerySet
	{
		
		/// <summary>
		/// The name of the attribute to be searched. Matching of the attribute name is exact.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Attribute_name { get; set; }
		
		/// <summary>
		/// The desired values of the search attribute. Matching of the attribute values is exact and case insensitive.
		///A maximum of 250 values may be searched in a request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_values")]
		public string[] Attribute_values { get; set; }
	}
	
	/// <summary>
	/// The query expression to specify the key to sort search results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQuerySortedAttribute
	{
		
		/// <summary>
		/// The attribute whose value is used as the sort key.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Attribute_name { get; set; }
		
		/// <summary>
		/// The first attribute value to be returned by the query. Ascending sorts will return only
		///objects with this value or greater, while descending sorts will return only objects with this value
		///or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initial_attribute_value")]
		public string Initial_attribute_value { get; set; }
		
		/// <summary>
		/// The desired sort order, `"ASC"` (ascending) or `"DESC"` (descending).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
	}
	
	/// <summary>
	/// The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogQueryText
	{
		
		/// <summary>
		/// A list of 1, 2, or 3 search keywords. Keywords with fewer than 3 characters are ignored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
	}
	
	/// <summary>
	/// Determines the type of a specific Quick Amount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogQuickAmountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUICK_AMOUNT_TYPE_MANUAL")]
		QUICK_AMOUNT_TYPE_MANUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUICK_AMOUNT_TYPE_AUTO")]
		QUICK_AMOUNT_TYPE_AUTO = 1,
	}
	
	/// <summary>
	/// Determines a seller's option on Quick Amounts feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogQuickAmountsSettingsOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANUAL")]
		MANUAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 2,
	}
	
	/// <summary>
	/// Defines the parameters that can be included in the body of
	///a request to the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint.
	///
	///Deprecated - recommend using [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChargeRequest
	{
		
		/// <summary>
		/// The basic primitive of multi-party transaction. The value is optional.
		///The transaction facilitated by you can be split from here.
		///
		///If you provide this value, the `amount_money` value in your additional_recipients
		///must not be more than 90% of the `amount_money` value in the charge request.
		///The `location_id` must be the valid location of the app owner merchant.
		///
		///This field requires the `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.
		///
		///This field is currently not supported in sandbox.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_recipients")]
		public AdditionalRecipient[] Additional_recipients { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// The buyer's email address, if available. This value is optional,
		///but this transaction is ineligible for chargeback protection if it is not
		///provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email_address")]
		public string Buyer_email_address { get; set; }
		
		/// <summary>
		/// A payment token generated from the [Card.tokenize()](https://developer.squareup.com/reference/sdks/web/payments/objects/Card#Card.tokenize) that represents the card
		///to charge.
		///
		///The application that provides a payment token to this endpoint must be the
		///_same application_ that generated the payment token with the Web Payments SDK.
		///Otherwise, the nonce is invalid.
		///
		///Do not provide a value for this field if you provide a value for
		///`customer_card_id`.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_nonce")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Card_nonce { get; set; }
		
		/// <summary>
		/// The ID of the customer card on file to charge. Do
		///not provide a value for this field if you provide a value for `card_nonce`.
		///
		///If you provide this value, you _must_ also provide a value for
		///`customer_id`.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_card_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Customer_card_id { get; set; }
		
		/// <summary>
		/// The ID of the customer to associate this transaction with. This field
		///is required if you provide a value for `customer_card_id`, and optional
		///otherwise.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// If `true`, the request will only perform an Auth on the provided
		///card. You can then later perform either a Capture (with the
		///[CaptureTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/capture-transaction) endpoint) or a Void
		///(with the [VoidTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/void-transaction) endpoint).
		///
		///Default value: `false`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delay_capture")]
		public System.Nullable<System.Boolean> Delay_capture { get; set; }
		
		/// <summary>
		/// A value you specify that uniquely identifies this
		///transaction among transactions you've created.
		///
		///If you're unsure whether a particular transaction succeeded,
		///you can reattempt it with the same idempotency key without
		///worrying about double-charging the buyer.
		///
		///See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
		/// Required
		/// Min length: 1
		/// Max length: 192
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// An optional note to associate with the transaction.
		///
		///This value cannot exceed 60 characters.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Note { get; set; }
		
		/// <summary>
		/// The ID of the order to associate with this transaction.
		///
		///If you provide this value, the `amount_money` value of your request must
		///__exactly match__ the value of the order's `total_money` field.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Order_id { get; set; }
		
		/// <summary>
		/// An optional ID you can associate with the transaction for your own
		///purposes (such as to associate the transaction with an entity ID in your
		///own database).
		///
		///This value cannot exceed 40 characters.
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
		
		/// <summary>
		/// A token generated by SqPaymentForm's verifyBuyer() that represents
		///customer's device info and 3ds challenge result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_token")]
		public string Verification_token { get; set; }
	}
	
	/// <summary>
	/// Represents an additional recipient (other than the merchant) entitled to a portion of the tender.
	///Support is currently limited to USD, CAD and GBP currencies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChargeRequestAdditionalRecipient
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// The description of the additional recipient.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Description { get; set; }
		
		/// <summary>
		/// The location ID for a recipient (other than the merchant) receiving a portion of the tender.
		/// Required
		/// Min length: 1
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Location_id { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint.
	///
	///One of `errors` or `transaction` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChargeResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a transaction processed with Square, either with the
		///Connect API or with Square Point of Sale.
		///
		///The `tenders` field of this object lists all methods of payment used to pay in
		///the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	/// <summary>
	/// Represents a transaction processed with Square, either with the
	///Connect API or with Square Point of Sale.
	///
	///The `tenders` field of this object lists all methods of payment used to pay in
	///the transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Transaction
	{
		
		/// <summary>
		/// If the transaction was created in the Square Point of Sale app, this value
		///is the ID generated for the transaction by Square Point of Sale.
		///
		///This ID has no relationship to the transaction's canonical `id`, which is
		///generated by Square's backend servers. This value is generated for bookkeeping
		///purposes, in case the transaction cannot immediately be completed (for example,
		///if the transaction is processed in offline mode).
		///
		///It is not currently possible with the Connect API to perform a transaction
		///lookup by this value.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Client_id { get; set; }
		
		/// <summary>
		/// The timestamp for when the transaction was created, in RFC 3339 format.
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The transaction's unique ID, issued by Square payments servers.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the transaction's associated location.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The order_id is an identifier for the order associated with this transaction, if any.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The Square product that processed the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// If the transaction was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
		///endpoint, this value is the same as the value provided for the `reference_id`
		///parameter in the request to that endpoint. Otherwise, it is not set.
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Refunds that have been applied to any tender in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public Refund[] Refunds { get; set; }
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
		
		/// <summary>
		/// The tenders used to pay in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenders")]
		public Tender[] Tenders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckAppointmentsOnboardedRequest
	{
	}
	
	/// <summary>
	/// Square Checkout lets merchants accept online payments for supported
	///payment types using a checkout workflow hosted on squareup.com.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Checkout
	{
		
		/// <summary>
		/// Additional recipients (other than the merchant) receiving a portion of this checkout.
		///For example, fees assessed on the purchase by a third party integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_recipients")]
		public AdditionalRecipient[] Additional_recipients { get; set; }
		
		/// <summary>
		/// If `true`, Square Checkout will collect shipping information on your
		///behalf and store that information with the transaction information in your
		///Square Dashboard.
		///
		///Default: `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ask_for_shipping_address")]
		public System.Nullable<System.Boolean> Ask_for_shipping_address { get; set; }
		
		/// <summary>
		/// The URL that the buyer's browser should be redirected to after the
		///checkout is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkout_page_url")]
		public string Checkout_page_url { get; set; }
		
		/// <summary>
		/// The time when the checkout was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// ID generated by Square Checkout when a new checkout is requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The email address to display on the Square Checkout confirmation page
		///and confirmation email that the buyer can use to contact the merchant.
		///
		///If this value is not set, the confirmation page and email will display the
		///primary email address associated with the merchant's Square account.
		///
		///Default: none; only exists if explicitly set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_support_email")]
		public string Merchant_support_email { get; set; }
		
		/// <summary>
		/// Contains all information related to a single order to process with Square,
		///including line items that specify the products to purchase. `Order` objects also
		///include information about any associated tenders, refunds, and returns.
		///
		///All Connect V2 Transactions have all been converted to Orders including all associated
		///itemization data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
		
		/// <summary>
		/// If provided, the buyer's email is pre-populated on the checkout page
		///as an editable text field.
		///
		///Default: none; only exists if explicitly set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pre_populate_buyer_email")]
		public string Pre_populate_buyer_email { get; set; }
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pre_populate_shipping_address")]
		public Address Pre_populate_shipping_address { get; set; }
		
		/// <summary>
		/// The URL to redirect to after checkout is completed with `checkoutId`,
		///Square's `orderId`, `transactionId`, and `referenceId` appended as URL
		///parameters. For example, if the provided redirect_url is
		///`http://www.example.com/order-complete`, a successful transaction redirects
		///the customer to:
		///
		///<pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>
		///
		///If you do not provide a redirect URL, Square Checkout will display an order
		///confirmation page on your behalf; however Square strongly recommends that
		///you provide a redirect URL so you can verify the transaction results and
		///finalize the order through your existing/normal confirmation workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_url")]
		public string Redirect_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckoutOptionsPaymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARD_PRESENT")]
		CARD_PRESENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANUAL_CARD_ENTRY")]
		MANUAL_CARD_ENTRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FELICA_ID")]
		FELICA_ID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FELICA_QUICPAY")]
		FELICA_QUICPAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FELICA_TRANSPORTATION_GROUP")]
		FELICA_TRANSPORTATION_GROUP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FELICA_ALL")]
		FELICA_ALL = 5,
	}
	
	/// <summary>
	/// Describes a request to complete (capture) a payment using 
	///[CompletePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/complete-payment).
	///
	///By default, payments are set to `autocomplete` immediately after they are created.
	///To complete payments manually, set `autocomplete` to `false`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompletePaymentRequest
	{
	}
	
	/// <summary>
	/// Defines the response returned by[CompletePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/complete-payment).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompletePaymentResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a payment processed by the Square API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment")]
		public Payment Payment { get; set; }
	}
	
	/// <summary>
	/// Latitude and longitude coordinates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Coordinates
	{
		
		/// <summary>
		/// The latitude of the coordinate expressed in degrees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude of the coordinate expressed in degrees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// Indicates the country associated with another entity, such as a business.
	///Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Country
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZZ")]
		ZZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AD")]
		AD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AE")]
		AE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AF")]
		AF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AG")]
		AG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AI")]
		AI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AL")]
		AL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AM")]
		AM = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AO")]
		AO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AQ")]
		AQ = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AR")]
		AR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS")]
		AS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AT")]
		AT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AU")]
		AU = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AW")]
		AW = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AX")]
		AX = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AZ")]
		AZ = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BA")]
		BA = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BB")]
		BB = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BD")]
		BD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BE")]
		BE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BF")]
		BF = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BG")]
		BG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BH")]
		BH = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BI")]
		BI = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BJ")]
		BJ = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BL")]
		BL = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BM")]
		BM = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BN")]
		BN = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BO")]
		BO = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BQ")]
		BQ = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BR")]
		BR = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BS")]
		BS = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BT")]
		BT = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BV")]
		BV = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BW")]
		BW = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BY")]
		BY = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BZ")]
		BZ = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CA")]
		CA = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CC")]
		CC = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CD")]
		CD = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CF")]
		CF = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CG")]
		CG = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CH")]
		CH = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CI")]
		CI = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CK")]
		CK = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CL")]
		CL = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CM")]
		CM = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CN")]
		CN = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CO")]
		CO = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CR")]
		CR = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CU")]
		CU = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CV")]
		CV = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CW")]
		CW = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CX")]
		CX = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CY")]
		CY = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CZ")]
		CZ = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DE")]
		DE = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DJ")]
		DJ = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DK")]
		DK = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DM")]
		DM = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DO")]
		DO = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DZ")]
		DZ = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EC")]
		EC = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EE")]
		EE = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EG")]
		EG = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EH")]
		EH = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ER")]
		ER = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ES")]
		ES = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ET")]
		ET = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FI")]
		FI = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FJ")]
		FJ = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FK")]
		FK = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FM")]
		FM = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FO")]
		FO = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FR")]
		FR = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GA")]
		GA = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GB")]
		GB = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GD")]
		GD = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GE")]
		GE = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GF")]
		GF = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GG")]
		GG = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GH")]
		GH = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GI")]
		GI = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GL")]
		GL = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GM")]
		GM = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GN")]
		GN = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GP")]
		GP = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GQ")]
		GQ = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GR")]
		GR = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GS")]
		GS = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GT")]
		GT = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GU")]
		GU = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GW")]
		GW = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GY")]
		GY = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HK")]
		HK = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HM")]
		HM = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HN")]
		HN = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HR")]
		HR = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HT")]
		HT = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HU")]
		HU = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ID")]
		ID = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IE")]
		IE = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IL")]
		IL = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IM")]
		IM = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN")]
		IN = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IO")]
		IO = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IQ")]
		IQ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IR")]
		IR = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IS")]
		IS = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IT")]
		IT = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JE")]
		JE = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JM")]
		JM = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JO")]
		JO = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JP")]
		JP = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KE")]
		KE = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KG")]
		KG = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KH")]
		KH = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KI")]
		KI = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KM")]
		KM = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KN")]
		KN = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KP")]
		KP = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KR")]
		KR = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KW")]
		KW = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KY")]
		KY = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KZ")]
		KZ = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LA")]
		LA = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LB")]
		LB = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LC")]
		LC = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LI")]
		LI = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LK")]
		LK = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LR")]
		LR = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LS")]
		LS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LT")]
		LT = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LU")]
		LU = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LV")]
		LV = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LY")]
		LY = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MA")]
		MA = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MC")]
		MC = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MD")]
		MD = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ME")]
		ME = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MF")]
		MF = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MG")]
		MG = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MH")]
		MH = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MK")]
		MK = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ML")]
		ML = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MM")]
		MM = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MN")]
		MN = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MO")]
		MO = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MP")]
		MP = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MQ")]
		MQ = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MR")]
		MR = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MS")]
		MS = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MT")]
		MT = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MU")]
		MU = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MV")]
		MV = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MW")]
		MW = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MX")]
		MX = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MY")]
		MY = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MZ")]
		MZ = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NA")]
		NA = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NC")]
		NC = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NE")]
		NE = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NF")]
		NF = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NG")]
		NG = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NI")]
		NI = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NL")]
		NL = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO")]
		NO = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NP")]
		NP = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NR")]
		NR = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NU")]
		NU = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NZ")]
		NZ = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OM")]
		OM = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PA")]
		PA = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PE")]
		PE = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PF")]
		PF = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PG")]
		PG = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PH")]
		PH = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PK")]
		PK = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PL")]
		PL = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PM")]
		PM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PN")]
		PN = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PR")]
		PR = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PS")]
		PS = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PT")]
		PT = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PW")]
		PW = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PY")]
		PY = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QA")]
		QA = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RE")]
		RE = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RO")]
		RO = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RS")]
		RS = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RU")]
		RU = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RW")]
		RW = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SA")]
		SA = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SB")]
		SB = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SC")]
		SC = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SD")]
		SD = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SE")]
		SE = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SG")]
		SG = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SH")]
		SH = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SI")]
		SI = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SJ")]
		SJ = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SK")]
		SK = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SL")]
		SL = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SM")]
		SM = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SN")]
		SN = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SO")]
		SO = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SR")]
		SR = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SS")]
		SS = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ST")]
		ST = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SV")]
		SV = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SX")]
		SX = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SY")]
		SY = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SZ")]
		SZ = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TC")]
		TC = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TD")]
		TD = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TF")]
		TF = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TG")]
		TG = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TH")]
		TH = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TJ")]
		TJ = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TK")]
		TK = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TL")]
		TL = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TM")]
		TM = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TN")]
		TN = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TO")]
		TO = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TR")]
		TR = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TT")]
		TT = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TV")]
		TV = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TW")]
		TW = 228,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TZ")]
		TZ = 229,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UA")]
		UA = 230,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UG")]
		UG = 231,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UM")]
		UM = 232,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US")]
		US = 233,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UY")]
		UY = 234,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UZ")]
		UZ = 235,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VA")]
		VA = 236,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VC")]
		VC = 237,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VE")]
		VE = 238,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VG")]
		VG = 239,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VI")]
		VI = 240,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VN")]
		VN = 241,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VU")]
		VU = 242,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WF")]
		WF = 243,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WS")]
		WS = 244,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YE")]
		YE = 245,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YT")]
		YT = 246,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZA")]
		ZA = 247,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZM")]
		ZM = 248,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZW")]
		ZW = 249,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBookingRequest
	{
		
		/// <summary>
		/// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		///at a given location to a requesting customer in one or more appointment segments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="booking")]
		public Booking Booking { get; set; }
		
		/// <summary>
		/// A unique key to make this request an idempotent operation.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Idempotency_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBookingResponse
	{
		
		/// <summary>
		/// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		///at a given location to a requesting customer in one or more appointment segments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booking")]
		public Booking Booking { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// A request to create a new `BreakType`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBreakTypeRequest
	{
		
		/// <summary>
		/// A defined break template that sets an expectation for possible `Break`
		///instances on a `Shift`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="break_type")]
		public BreakType Break_type { get; set; }
		
		/// <summary>
		/// A unique string value to ensure the idempotency of the operation.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
	}
	
	/// <summary>
	/// The response to the request to create a `BreakType`. The response contains
	///the created `BreakType` object and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBreakTypeResponse
	{
		
		/// <summary>
		/// A defined break template that sets an expectation for possible `Break`
		///instances on a `Shift`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="break_type")]
		public BreakType Break_type { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Creates a card from the source (nonce, payment id, etc). Accessible via
	///HTTP requests at POST https://connect.squareup.com/v2/cards
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCardRequest
	{
		
		/// <summary>
		/// Represents the payment details of a card to be used for payments. These
		///details are determined by the payment token generated by Web Payments SDK.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card")]
		public Card Card { get; set; }
		
		/// <summary>
		/// A unique string that identifies this CreateCard request. Keys can be
		///any valid string and must be unique for every request.
		///
		///Max: 45 characters
		///
		///See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id.
		/// Required
		/// Min length: 1
		/// Max length: 16384
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16384)]
		public string Source_id { get; set; }
		
		/// <summary>
		/// An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
		///Verification tokens encapsulate customer device information and 3-D Secure
		///challenge results to indicate that Square has verified the buyer identity.
		///
		///See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_token")]
		public string Verification_token { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [CreateCard](#endpoint-cards-createcard) endpoint.
	///
	///Note: if there are errors processing the request, the card field will not be
	///present.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCardResponse
	{
		
		/// <summary>
		/// Represents the payment details of a card to be used for payments. These
		///details are determined by the payment token generated by Web Payments SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public Card Card { get; set; }
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the parameters that can be included in the body of
	///a request to the `CreateCheckout` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCheckoutRequest
	{
		
		/// <summary>
		/// The basic primitive of a multi-party transaction. The value is optional.
		///The transaction facilitated by you can be split from here.
		///
		///If you provide this value, the `amount_money` value in your `additional_recipients` field
		///cannot be more than 90% of the `total_money` calculated by Square for your order.
		///The `location_id` must be a valid seller location where the checkout is occurring.
		///
		///This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.
		///
		///This field is currently not supported in the Square Sandbox.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_recipients")]
		public ChargeRequestAdditionalRecipient[] Additional_recipients { get; set; }
		
		/// <summary>
		/// If `true`, Square Checkout collects shipping information on your behalf and stores 
		///that information with the transaction information in the Square Seller Dashboard.
		///
		///Default: `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ask_for_shipping_address")]
		public System.Nullable<System.Boolean> Ask_for_shipping_address { get; set; }
		
		/// <summary>
		/// A unique string that identifies this checkout among others you have created. It can be
		///any valid string but must be unique for every order sent to Square Checkout for a given location ID.
		///
		///The idempotency key is used to avoid processing the same order more than once. If you are 
		///unsure whether a particular checkout was created successfully, you can attempt it again with
		///the same idempotency key and all the same other parameters without worrying about creating duplicates.
		///
		///You should use a random number/string generator native to the language
		///you are working in to generate strings for your idempotency keys.
		///
		///For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// Required
		/// Min length: 1
		/// Max length: 192
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The email address to display on the Square Checkout confirmation page
		///and confirmation email that the buyer can use to contact the seller.
		///
		///If this value is not set, the confirmation page and email display the
		///primary email address associated with the seller's Square account.
		///
		///Default: none; only exists if explicitly set.
		/// Max length: 254
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_support_email")]
		[System.ComponentModel.DataAnnotations.MaxLength(254)]
		public string Merchant_support_email { get; set; }
		
		/// <summary>
		/// An optional note to associate with the `checkout` object.
		///
		///This value cannot exceed 60 characters.
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public CreateOrderRequest Order { get; set; }
		
		/// <summary>
		/// If provided, the buyer's email is prepopulated on the checkout page
		///as an editable text field.
		///
		///Default: none; only exists if explicitly set.
		/// Max length: 254
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pre_populate_buyer_email")]
		[System.ComponentModel.DataAnnotations.MaxLength(254)]
		public string Pre_populate_buyer_email { get; set; }
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pre_populate_shipping_address")]
		public Address Pre_populate_shipping_address { get; set; }
		
		/// <summary>
		/// The URL to redirect to after the checkout is completed with `checkoutId`,
		///`transactionId`, and `referenceId` appended as URL parameters. For example,
		///if the provided redirect URL is `http://www.example.com/order-complete`, a
		///successful transaction redirects the customer to:
		///
		///<pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>
		///
		///If you do not provide a redirect URL, Square Checkout displays an order
		///confirmation page on your behalf; however, it is strongly recommended that
		///you provide a redirect URL so you can verify the transaction results and
		///finalize the order through your existing/normal confirmation workflow.
		///
		///Default: none; only exists if explicitly set.
		/// Max length: 800
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_url")]
		[System.ComponentModel.DataAnnotations.MaxLength(800)]
		public string Redirect_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOrderRequest
	{
		
		/// <summary>
		/// A value you specify that uniquely identifies this
		///order among orders you have created.
		///
		///If you are unsure whether a particular order was created successfully,
		///you can try it again with the same idempotency key without
		///worrying about creating duplicate orders.
		///
		///For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// Contains all information related to a single order to process with Square,
		///including line items that specify the products to purchase. `Order` objects also
		///include information about any associated tenders, refunds, and returns.
		///
		///All Connect V2 Transactions have all been converted to Orders including all associated
		///itemization data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the `CreateCheckout` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCheckoutResponse
	{
		
		/// <summary>
		/// Square Checkout lets merchants accept online payments for supported
		///payment types using a checkout workflow hosted on squareup.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkout")]
		public Checkout Checkout { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the request body of a request
	///to the `CreateCustomerCard` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomerCardRequest
	{
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// A card nonce representing the credit card to link to the customer.
		///
		///Card nonces are generated by the Square payment form when customers enter
		///their card information. For more information, see
		///[Walkthrough: Integrate Square Payments in a Website](https://developer.squareup.com/docs/web-payments/take-card-payment).
		///
		///__NOTE:__ Card nonces generated by digital wallets (such as Apple Pay)
		///cannot be used to create a customer card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_nonce")]
		public string Card_nonce { get; set; }
		
		/// <summary>
		/// The full name printed on the credit card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardholder_name")]
		public string Cardholder_name { get; set; }
		
		/// <summary>
		/// An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
		///Verification tokens encapsulate customer device information and 3-D Secure
		///challenge results to indicate that Square has verified the buyer identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_token")]
		public string Verification_token { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the `CreateCustomerCard` endpoint.
	///
	///Either `errors` or `card` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomerCardResponse
	{
		
		/// <summary>
		/// Represents the payment details of a card to be used for payments. These
		///details are determined by the payment token generated by Web Payments SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public Card Card { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the body parameters that can be included in a request to the
	///[CreateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/create-customer-group) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomerGroupRequest
	{
		
		/// <summary>
		/// Represents a group of customer profiles. 
		///
		///Customer groups can be created, be modified, and have their membership defined using 
		///the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group")]
		public CustomerGroup Group { get; set; }
		
		/// <summary>
		/// The idempotency key for the request. For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		public string Idempotency_key { get; set; }
	}
	
	/// <summary>
	/// Represents a group of customer profiles. 
	///
	///Customer groups can be created, be modified, and have their membership defined using 
	///the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerGroup
	{
		
		/// <summary>
		/// The timestamp when the customer group was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// A unique Square-generated ID for the customer group.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the customer group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The timestamp when the customer group was last updated, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [CreateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/create-customer-group) endpoint.
	///
	///Either `errors` or `group` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomerGroupResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a group of customer profiles. 
		///
		///Customer groups can be created, be modified, and have their membership defined using 
		///the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public CustomerGroup Group { get; set; }
	}
	
	/// <summary>
	/// Defines the body parameters that can be included in a request to the
	///`CreateCustomer` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomerRequest
	{
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
		///For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
		///You can also specify this value in `YYYY-MM-DD` format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthday")]
		public string Birthday { get; set; }
		
		/// <summary>
		/// A business name associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// The email address associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The family name (that is, the last name) associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		/// <summary>
		/// The given name (that is, the first name) associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		/// <summary>
		/// The idempotency key for the request.	For more information, see
		///[Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// A nickname for the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// A custom note associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The 11-digit phone number associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// An optional second ID used to associate the customer profile with an
		///entity in another system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the `CreateCustomer` endpoint.
	///
	///Either `errors` or `customer` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomerResponse
	{
		
		/// <summary>
		/// Represents a Square customer profile in the Customer Directory of a Square seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer Customer { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Represents a Square customer profile in the Customer Directory of a Square seller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Customer
	{
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
		///For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthday")]
		public string Birthday { get; set; }
		
		/// <summary>
		/// Payment details of the credit, debit, and gift cards stored on file for the customer profile. 
		///
		///DEPRECATED at version 2021-06-16. Replaced by calling [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) (for credit and debit cards on file) 
		///or [ListGiftCards](https://developer.squareup.com/reference/square_2021-08-18/gift-cards-api/list-gift-cards) (for gift cards on file) and including the `customer_id` query parameter. 
		///For more information, see [Migrate to the Cards API and Gift Cards API](https://developer.squareup.com/docs/customers-api/use-the-api/integrate-with-other-services#migrate-customer-cards).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cards")]
		public Card[] Cards { get; set; }
		
		/// <summary>
		/// A business name associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// The timestamp when the customer profile was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// A creation source represents the method used to create the
		///customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creation_source")]
		public string Creation_source { get; set; }
		
		/// <summary>
		/// The email address associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The family (i.e., last) name associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		/// <summary>
		/// The given (i.e., first) name associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		/// <summary>
		/// The IDs of customer groups the customer belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		/// <summary>
		/// A unique Square-assigned ID for the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A nickname for the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// A custom note associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The 11-digit phone number associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Represents communication preferences for the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public CustomerPreferences Preferences { get; set; }
		
		/// <summary>
		/// An optional second ID used to associate the customer profile with an
		///entity in another system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// The IDs of segments the customer belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment_ids")]
		public string[] Segment_ids { get; set; }
		
		/// <summary>
		/// The timestamp when the customer profile was last updated, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// The Square-assigned version number of the customer profile. The version number is incremented each time an update is committed to the customer profile, except for changes to customer segment membership and cards on file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	/// <summary>
	/// Represents communication preferences for the customer profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerPreferences
	{
		
		/// <summary>
		/// Indicates whether the customer has unsubscribed from marketing campaign emails. A value of `true` means that the customer chose to opt out of email marketing from the current Square seller or from all Square sellers. This value is read-only from the Customers API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_unsubscribed")]
		public System.Nullable<System.Boolean> Email_unsubscribed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDeviceCodeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device_code")]
		public DeviceCode Device_code { get; set; }
		
		/// <summary>
		/// A unique string that identifies this CreateDeviceCode request. Keys can
		///be any valid string but must be unique for every CreateDeviceCode request.
		///
		///See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceCode
	{
		
		/// <summary>
		/// The unique code that can be used to login.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// When this DeviceCode was created. Timestamp in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The unique id of the device that used this code. Populated when the device is paired up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device_id")]
		public string Device_id { get; set; }
		
		/// <summary>
		/// The unique id for this device code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location assigned to this code.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// An optional user-defined name for the device code.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Name { get; set; }
		
		/// <summary>
		/// When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pair_by")]
		public string Pair_by { get; set; }
		
		/// <summary>
		/// When this DeviceCode was paired. Timestamp in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paired_at")]
		public string Paired_at { get; set; }
		
		/// <summary>
		/// The targeting product type of the device code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product_type")]
		public string Product_type { get; set; }
		
		/// <summary>
		/// The pairing status of the device code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// When this DeviceCode's status was last changed. Timestamp in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_changed_at")]
		public string Status_changed_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDeviceCodeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="device_code")]
		public DeviceCode Device_code { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the parameters for a `CreateDisputeEvidenceText` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDisputeEvidenceTextRequest
	{
		
		/// <summary>
		/// The evidence string.
		/// Required
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidence_text")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Evidence_text { get; set; }
		
		/// <summary>
		/// The type of evidence you are uploading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence_type")]
		public string Evidence_type { get; set; }
		
		/// <summary>
		/// The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// Required
		/// Min length: 1
		/// Max length: 45
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Idempotency_key { get; set; }
	}
	
	/// <summary>
	/// Defines the fields in a `CreateDisputeEvidenceText` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDisputeEvidenceTextResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public DisputeEvidence Evidence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisputeEvidence
	{
		
		/// <summary>
		/// The ID of the dispute the evidence is associated with.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dispute_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Dispute_id { get; set; }
		
		/// <summary>
		/// A file to be uploaded as dispute evidence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence_file")]
		public DisputeEvidenceFile Evidence_file { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the evidence.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Evidence_id { get; set; }
		
		/// <summary>
		/// Raw text
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence_text")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Evidence_text { get; set; }
		
		/// <summary>
		/// The type of the evidence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence_type")]
		public string Evidence_type { get; set; }
		
		/// <summary>
		/// The Square-generated ID of the evidence.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Id { get; set; }
		
		/// <summary>
		/// The time when the next action is due, in RFC 3339 format.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploaded_at")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Uploaded_at { get; set; }
	}
	
	/// <summary>
	/// A file to be uploaded as dispute evidence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisputeEvidenceFile
	{
		
		/// <summary>
		/// The file name including the file extension. For example: "receipt.tiff".
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Filename { get; set; }
		
		/// <summary>
		/// Dispute evidence files must be application/pdf, image/heic, image/heif, image/jpeg, image/png, or image/tiff formats.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filetype")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Filetype { get; set; }
	}
	
	/// <summary>
	/// A request to create a gift card activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGiftCardActivityRequest
	{
		
		/// <summary>
		/// Represents an action performed on a gift card that affects its state or balance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gift_card_activity")]
		public GiftCardActivity Gift_card_activity { get; set; }
		
		/// <summary>
		/// A unique string that identifies the `CreateGiftCardActivity` request.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
	}
	
	/// <summary>
	/// Represents an action performed on a gift card that affects its state or balance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivity
	{
		
		/// <summary>
		/// Describes a gift card activity of the ACTIVATE type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activate_activity_details")]
		public GiftCardActivityActivate Activate_activity_details { get; set; }
		
		/// <summary>
		/// Describes a gift card activity of the ADJUST_DECREMENT type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjust_decrement_activity_details")]
		public GiftCardActivityAdjustDecrement Adjust_decrement_activity_details { get; set; }
		
		/// <summary>
		/// Describes a gift card activity of the ADJUST_INCREMENT type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjust_increment_activity_details")]
		public GiftCardActivityAdjustIncrement Adjust_increment_activity_details { get; set; }
		
		/// <summary>
		/// Describes a gift card activity of the BLOCK type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="block_activity_details")]
		public GiftCardActivityBlock Block_activity_details { get; set; }
		
		/// <summary>
		/// Describes a gift card activity of the CLEAR_BALANCE type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clear_balance_activity_details")]
		public GiftCardActivityClearBalance Clear_balance_activity_details { get; set; }
		
		/// <summary>
		/// The timestamp when the gift card activity was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Describes a gift card activity of the DEACTIVATE type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deactivate_activity_details")]
		public GiftCardActivityDeactivate Deactivate_activity_details { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card_balance_money")]
		public Money Gift_card_balance_money { get; set; }
		
		/// <summary>
		/// The gift card GAN. The GAN is not required if `gift_card_id` is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card_gan")]
		public string Gift_card_gan { get; set; }
		
		/// <summary>
		/// The gift card ID. The ID is not required if a GAN is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card_id")]
		public string Gift_card_id { get; set; }
		
		/// <summary>
		/// The unique ID of the gift card activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Describes a gift card activity of the IMPORT type and the `GiftCardGANSource` is OTHER 
		///(a third-party gift card).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="import_activity_details")]
		public GiftCardActivityImport Import_activity_details { get; set; }
		
		/// <summary>
		/// Present only when GiftCardActivityType is IMPORT_REVERSAL and GiftCardGANSource is OTHER
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="import_reversal_activity_details")]
		public GiftCardActivityImportReversal Import_reversal_activity_details { get; set; }
		
		/// <summary>
		/// Present only when `GiftCardActivityType` is LOAD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="load_activity_details")]
		public GiftCardActivityLoad Load_activity_details { get; set; }
		
		/// <summary>
		/// The ID of the location at which the activity occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// Present only when `GiftCardActivityType` is REDEEM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redeem_activity_details")]
		public GiftCardActivityRedeem Redeem_activity_details { get; set; }
		
		/// <summary>
		/// Present only when `GiftCardActivityType` is REFUND.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_activity_details")]
		public GiftCardActivityRefund Refund_activity_details { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Type Type { get; set; }
		
		/// <summary>
		/// Present only when `GiftCardActivityType` is UNBLOCK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unblock_activity_details")]
		public GiftCardActivityUnblock Unblock_activity_details { get; set; }
		
		/// <summary>
		/// Present only when `GiftCardActivityType` is UNLINKED_ACTIVITY_REFUND.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlinked_activity_refund_activity_details")]
		public GiftCardActivityUnlinkedActivityRefund Unlinked_activity_refund_activity_details { get; set; }
	}
	
	/// <summary>
	/// Describes a gift card activity of the ACTIVATE type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityActivate
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Required if your application does not use the Square Orders API. 
		///This is a list of client-provided payment instrument IDs. 
		///Square uses this information to perform compliance checks.
		///If you use the Square Orders API, Square has the necessary instrument IDs to perform necessary 
		///compliance checks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_payment_instrument_ids")]
		public string[] Buyer_payment_instrument_ids { get; set; }
		
		/// <summary>
		/// The `line_item_uid` of the gift card line item in an order. 
		///This is required if your application uses the Square Orders API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line_item_uid")]
		public string Line_item_uid { get; set; }
		
		/// <summary>
		/// The ID of the order associated with the activity. 
		///This is required if your application uses the Square Orders API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// If your application does not use the Square Orders API, you can optionally use this field 
		///to associate the gift card activity with a client-side entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
	}
	
	/// <summary>
	/// Describes a gift card activity of the ADJUST_DECREMENT type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityAdjustDecrement
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Reason Reason { get; set; }
	}
	
	/// <summary>
	/// Describes a gift card activity of the ADJUST_INCREMENT type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityAdjustIncrement
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Reason Reason { get; set; }
	}
	
	/// <summary>
	/// Describes a gift card activity of the BLOCK type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityBlock
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Reason Reason { get; set; }
	}
	
	/// <summary>
	/// Describes a gift card activity of the CLEAR_BALANCE type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityClearBalance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Reason Reason { get; set; }
	}
	
	/// <summary>
	/// Describes a gift card activity of the DEACTIVATE type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityDeactivate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Reason Reason { get; set; }
	}
	
	/// <summary>
	/// Describes a gift card activity of the IMPORT type and the `GiftCardGANSource` is OTHER 
	///(a third-party gift card).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityImport
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
	}
	
	/// <summary>
	/// Present only when GiftCardActivityType is IMPORT_REVERSAL and GiftCardGANSource is OTHER
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityImportReversal
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
	}
	
	/// <summary>
	/// Present only when `GiftCardActivityType` is LOAD.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityLoad
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// If you are not using the Orders API, this field is required because it is used to identify a buyer 
		///to perform compliance checks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_payment_instrument_ids")]
		public string[] Buyer_payment_instrument_ids { get; set; }
		
		/// <summary>
		/// The `line_item_uid` of the gift card’s line item in the order associated with the activity.
		///It is populated along with `order_id` and is required if using the Square Orders API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line_item_uid")]
		public string Line_item_uid { get; set; }
		
		/// <summary>
		/// The `order_id` of the order associated with the activity.
		///It is populated along with `line_item_uid` and is required if using the Square Orders API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// A client-specified ID to associate an entity, in another system, with this gift card
		///activity. This can be used to track the order or payment related information when the Square Orders
		///API is not being used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
	}
	
	/// <summary>
	/// Present only when `GiftCardActivityType` is REDEEM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityRedeem
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// When the Square Payments API is used, Redeem is not called on the Gift Cards API.
		///However, when Square reads a Redeem activity from the Gift Cards API, developers need to know the
		///associated `payment_id`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// A client-specified ID to associate an entity, in another system, with this gift card
		///activity. This can be used to track the order or payment related information when the Square Orders
		///API is not being used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
	}
	
	/// <summary>
	/// Present only when `GiftCardActivityType` is REFUND.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityRefund
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// When the Square Payments API is used, Refund is not called on the Gift Cards API.
		///However, when Square reads a Refund activity from the Gift Cards API, the developer needs to know the
		///ID of the payment (made using this gift card) that is being refunded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// The ID for the Redeem activity that needs to be refunded. Hence, the activity it
		///refers to has to be of the REDEEM type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redeem_activity_id")]
		public string Redeem_activity_id { get; set; }
		
		/// <summary>
		/// A client-specified ID to associate an entity, in another system, with this gift card
		///activity. This can be used to track the order or payment related information when the Square Orders
		///API is not being used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
	}
	
	/// <summary>
	/// Present only when `GiftCardActivityType` is UNBLOCK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityUnblock
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Reason Reason { get; set; }
	}
	
	/// <summary>
	/// Present only when `GiftCardActivityType` is UNLINKED_ACTIVITY_REFUND.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardActivityUnlinkedActivityRefund
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// When using the Square Payments API, the ID of the payment that was refunded to this gift
		///card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// A client-specified ID to associate an entity, in another system, with this gift card
		///activity. This can be used to track the order or payment related information when the Square Payments
		///API is not being used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
	}
	
	/// <summary>
	/// A response that contains a `GiftCardActivity` that was created.
	///The response might contain a set of `Error` objects if the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGiftCardActivityResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents an action performed on a gift card that affects its state or balance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card_activity")]
		public GiftCardActivity Gift_card_activity { get; set; }
	}
	
	/// <summary>
	/// A request to create a gift card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGiftCardRequest
	{
		
		/// <summary>
		/// Represents a Square gift card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gift_card")]
		public GiftCard Gift_card { get; set; }
		
		/// <summary>
		/// A unique string that identifies the `CreateGiftCard` request.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The location ID where the gift card that will be created should be registered.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Location_id { get; set; }
	}
	
	/// <summary>
	/// Represents a Square gift card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCard
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance_money")]
		public Money Balance_money { get; set; }
		
		/// <summary>
		/// The timestamp when the gift card was created, in RFC 3339 format. 
		///In the case of a digital gift card, it is the time when you create a card 
		///(using the Square Point of Sale application, Seller Dashboard, or Gift Cards API).  
		///In the case of a plastic gift card, it is the time when Square associates the card with the 
		///seller at the time of activation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The IDs of the customers to whom this gift card is linked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_ids")]
		public string[] Customer_ids { get; set; }
		
		/// <summary>
		/// The gift card account number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gan")]
		public string Gan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gan_source")]
		public GANSource Gan_source { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the gift card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public Status State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Type Type { get; set; }
	}
	
	/// <summary>
	/// A response that contains a `GiftCard`. The response might contain a set of `Error` objects if the request
	///resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGiftCardResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a Square gift card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card")]
		public GiftCard Gift_card { get; set; }
	}
	
	/// <summary>
	/// Describes a `CreateInvoice` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInvoiceRequest
	{
		
		/// <summary>
		/// A unique string that identifies the `CreateInvoice` request. If you do not 
		///provide `idempotency_key` (or provide an empty string as the value), the endpoint 
		///treats each request as independent.
		///
		///For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// Stores information about an invoice. You use the Invoices API to create and manage
		///invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public Invoice Invoice { get; set; }
	}
	
	/// <summary>
	/// The response returned by the `CreateInvoice` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInvoiceResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Stores information about an invoice. You use the Invoices API to create and manage
		///invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public Invoice Invoice { get; set; }
	}
	
	/// <summary>
	/// Request object for the [CreateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/create-location) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLocationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The email of the location.
		///This email is visible to the customers of the location.
		///For example, the email appears on customer receipts. 
		///For example, `help&#64;squareup.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business_email")]
		public string Business_email { get; set; }
		
		/// <summary>
		/// Represents the hours of operation for a business location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business_hours")]
		public BusinessHours Business_hours { get; set; }
		
		/// <summary>
		/// The business name of the location
		///This is the name visible to the customers of the location.
		///For example, this name appears on customer receipts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business_name")]
		public string Business_name { get; set; }
		
		/// <summary>
		/// The Square features that are enabled for the location.
		///See [LocationCapability](https://developer.squareup.com/reference/square_2021-08-18/enums/LocationCapability) for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public string[] Capabilities { get; set; }
		
		/// <summary>
		/// Latitude and longitude coordinates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		public Coordinates Coordinates { get; set; }
		
		/// <summary>
		/// The country of the location, in ISO 3166-1-alpha-2 format.
		///
		///See [Country](https://developer.squareup.com/reference/square_2021-08-18/enums/Country) for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The time when the location was created, in RFC 3339 format.
		///For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The currency used for all transactions at this location,
		///in ISO 4217 format.
		///See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The description of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, `https://www.facebook.com/square`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="facebook_url")]
		public string Facebook_url { get; set; }
		
		/// <summary>
		/// The URL of a full-format logo image for the location. The Seller must choose this logo in the
		///Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
		///that Square generates on behalf of the Seller. This image can have an aspect ratio of 2:1 or greater
		///and is recommended to be at least 1280x648 pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="full_format_logo_url")]
		public string Full_format_logo_url { get; set; }
		
		/// <summary>
		/// The Square-issued ID of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Instagram username of the location without the '&#64;' symbol. For example, `square`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instagram_username")]
		public string Instagram_username { get; set; }
		
		/// <summary>
		/// The language associated with the location, in
		///[BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A). 
		///For more information, see [Location language code](https://developer.squareup.com/docs/locations-api#location-language-code).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_code")]
		public string Language_code { get; set; }
		
		/// <summary>
		/// The URL of the logo image for the location. The Seller must choose this logo in the Seller
		///dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
		///that Square generates on behalf of the Seller. This image should have an aspect ratio
		///close to 1:1 and is recommended to be at least 200x200 pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo_url")]
		public string Logo_url { get; set; }
		
		/// <summary>
		/// The merchant category code (MCC) of the location, as standardized by ISO 18245.
		///The MCC describes the kind of goods or services sold at the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mcc")]
		public string Mcc { get; set; }
		
		/// <summary>
		/// The ID of the merchant that owns the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		/// <summary>
		/// The name of the location.
		///This information appears in the dashboard as the nickname.
		///A location name must be unique within a seller account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The phone number of the location in human readable format. For example, `+353 80 0 098 8099`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// The URL of the Point of Sale background image for the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pos_background_url")]
		public string Pos_background_url { get; set; }
		
		/// <summary>
		/// The status of the location, either active or inactive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The tax IDs that a Location is operating under.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_ids")]
		public TaxIds Tax_ids { get; set; }
		
		/// <summary>
		/// The [IANA Timezone](https://www.iana.org/time-zones) identifier for
		///the timezone of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// The Twitter username of the location without the '&#64;' symbol. For example, `Square`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twitter_username")]
		public string Twitter_username { get; set; }
		
		/// <summary>
		/// The type of the location, either physical or mobile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The website URL of the location.  For example, `https://squareup.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website_url")]
		public string Website_url { get; set; }
	}
	
	/// <summary>
	/// The tax IDs that a Location is operating under.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxIds
	{
		
		/// <summary>
		/// The EU VAT number for this location. For example, "IE3426675K".
		///If the EU VAT number is present, it is well-formed and has been
		///validated with VIES, the VAT Information Exchange System.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eu_vat")]
		public string Eu_vat { get; set; }
		
		/// <summary>
		/// The French government uses the NAF (Nomenclature des Activités Françaises) to display and
		///track economic statistical data. This is also called the APE (Activite Principale de l’Entreprise) code.
		///For example, 6910Z.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fr_naf")]
		public string Fr_naf { get; set; }
		
		/// <summary>
		/// The SIRET (Système d'Identification du Répertoire des Entreprises et de leurs Etablissements)
		///number is a 14 digits code issued by the French INSEE. For example, "39922799000021".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fr_siret")]
		public string Fr_siret { get; set; }
	}
	
	/// <summary>
	/// Response object returned by the [CreateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/create-location) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLocationResponse
	{
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// A request to create a new loyalty account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoyaltyAccountRequest
	{
		
		/// <summary>
		/// A unique string that identifies this `CreateLoyaltyAccount` request. 
		///Keys can be any valid string, but must be unique for every request.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// Describes a loyalty account. For more information, see
		///[Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loyalty_account")]
		public LoyaltyAccount Loyalty_account { get; set; }
	}
	
	/// <summary>
	/// Describes a loyalty account. For more information, see
	///[Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyAccount
	{
		
		/// <summary>
		/// The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the `expiring_point_deadlines` field.
		///
		///Your application should be able to handle loyalty accounts that have a negative point balance (`balance` is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int32> Balance { get; set; }
		
		/// <summary>
		/// The timestamp when the loyalty account was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) that is associated with the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// The timestamp when enrollment occurred, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrolled_at")]
		public string Enrolled_at { get; set; }
		
		/// <summary>
		/// The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire. 
		///
		///The total number of points in this field equals the number of points in the `balance` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiring_point_deadlines")]
		public LoyaltyAccountExpiringPointDeadline[] Expiring_point_deadlines { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the loyalty account.
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Id { get; set; }
		
		/// <summary>
		/// The total points accrued during the lifetime of the account.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifetime_points")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Lifetime_points { get; set; }
		
		/// <summary>
		/// Represents the mapping that associates a loyalty account with a buyer. 
		///
		///Currently, a loyalty account can only be mapped to a buyer by phone number. For more information, see 
		///[Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapping")]
		public LoyaltyAccountMapping Mapping { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) to which the account belongs.
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="program_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Program_id { get; set; }
		
		/// <summary>
		/// The timestamp when the loyalty account was last updated, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// Represents a set of points for a loyalty account that are scheduled to expire on a specific date.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyAccountExpiringPointDeadline
	{
		
		/// <summary>
		/// The timestamp of when the points are scheduled to expire, in RFC 3339 format.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Expires_at { get; set; }
		
		/// <summary>
		/// The number of points scheduled to expire at the `expires_at` timestamp.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="points")]
		public int Points { get; set; }
	}
	
	/// <summary>
	/// Represents the mapping that associates a loyalty account with a buyer. 
	///
	///Currently, a loyalty account can only be mapped to a buyer by phone number. For more information, see 
	///[Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyAccountMapping
	{
		
		/// <summary>
		/// The timestamp when the mapping was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the mapping.
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Id { get; set; }
		
		/// <summary>
		/// The phone number of the buyer, in E.164 format. For example, "+14155551111".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
	}
	
	/// <summary>
	/// A response that includes loyalty account created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoyaltyAccountResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Describes a loyalty account. For more information, see
		///[Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loyalty_account")]
		public LoyaltyAccount Loyalty_account { get; set; }
	}
	
	/// <summary>
	/// A request to create a loyalty reward.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoyaltyRewardRequest
	{
		
		/// <summary>
		/// A unique string that identifies this `CreateLoyaltyReward` request. 
		///Keys can be any valid string, but must be unique for every request.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reward")]
		public LoyaltyReward Reward { get; set; }
	}
	
	/// <summary>
	/// Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyReward
	{
		
		/// <summary>
		/// The timestamp when the reward was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the loyalty reward.
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Id { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to which the reward belongs.
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loyalty_account_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Loyalty_account_id { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) to which the reward is attached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The number of loyalty points used for the reward.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="points")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Points { get; set; }
		
		/// <summary>
		/// The timestamp when the reward was redeemed, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redeemed_at")]
		public string Redeemed_at { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) used to create the reward.
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reward_tier_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Reward_tier_id { get; set; }
		
		/// <summary>
		/// The status of a loyalty reward.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The timestamp when the reward was last updated, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// A response that includes the loyalty reward created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoyaltyRewardResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reward")]
		public LoyaltyReward Reward { get; set; }
	}
	
	/// <summary>
	/// Defines the body parameters that can be provided in a request to the
	///__CreateMobileAuthorizationCode__ endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMobileAuthorizationCodeRequest
	{
		
		/// <summary>
		/// The Square location ID the authorization code should be tied to.
		/// Min length: 1
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Location_id { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the __CreateMobileAuthorizationCode__ endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMobileAuthorizationCodeResponse
	{
		
		/// <summary>
		/// Generated authorization code that connects a mobile application instance
		///to a Square account.
		/// Min length: 0
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization_code")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Authorization_code { get; set; }
		
		/// <summary>
		/// Represents an error encountered during a request to the Connect API.
		///
		///See [Handling errors](https://developer.squareup.com/docs/build-basics/handling-errors) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// The timestamp when `authorization_code` expires in
		///[RFC 3339](https://tools.ietf.org/html/rfc3339) format, e.g., "2016-09-04T23:59:33.123Z".
		/// Min length: 20
		/// Max length: 48
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(48)]
		public string Expires_at { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the `CreateOrder` endpoint.
	///
	///Either `errors` or `order` is present in a given response, but never both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOrderResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Contains all information related to a single order to process with Square,
		///including line items that specify the products to purchase. `Order` objects also
		///include information about any associated tenders, refunds, and returns.
		///
		///All Connect V2 Transactions have all been converted to Orders including all associated
		///itemization data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
	}
	
	/// <summary>
	/// Describes a request to create a payment using 
	///[CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePaymentRequest
	{
		
		/// <summary>
		/// If set to `true` and charging a Square Gift Card, a payment might be returned with
		///`amount_money` equal to less than what was requested. For example, a request for $20 when charging
		///a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose
		///to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card
		///payment. This field cannot be `true` when `autocomplete = true`.
		///
		///For more information, see
		///[Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).
		///
		///Default: false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accept_partial_authorization")]
		public System.Nullable<System.Boolean> Accept_partial_authorization { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="app_fee_money")]
		public Money App_fee_money { get; set; }
		
		/// <summary>
		/// If set to `true`, this payment will be completed when possible. If
		///set to `false`, this payment is held in an approved state until either
		///explicitly completed (captured) or canceled (voided). For more information, see
		///[Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).
		///
		///Default: true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autocomplete")]
		public System.Nullable<System.Boolean> Autocomplete { get; set; }
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// The buyer's email address.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email_address")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Buyer_email_address { get; set; }
		
		/// <summary>
		/// Stores details about a cash payment. Contains only non-confidential information. For more information, see 
		///[Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_details")]
		public CashPaymentDetails Cash_details { get; set; }
		
		/// <summary>
		/// The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
		///
		///This is required if the `source_id` refers to a card on file created using the Customers API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// The duration of time after the payment's creation when Square automatically cancels the
		///payment. This automatic cancellation applies only to payments that do not reach a terminal state
		///(COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.
		///
		///This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value
		///of 1 minute.
		///
		///Note: This feature is only supported for card payments. This parameter can only be set for a delayed
		///capture payment (`autocomplete=false`).
		///
		///Default:
		///
		///- Card-present payments: "PT36H" (36 hours) from the creation time.
		///- Card-not-present payments: "P7D" (7 days) from the creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delay_duration")]
		public string Delay_duration { get; set; }
		
		/// <summary>
		/// Stores details about an external payment. Contains only non-confidential information.
		///For more information, see 
		///[Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_details")]
		public ExternalPaymentDetails External_details { get; set; }
		
		/// <summary>
		/// A unique string that identifies this `CreatePayment` request. Keys can be any valid string
		///but must be unique for every `CreatePayment` request.
		///
		///Max: 45 characters
		///
		///Note: The number of allowed characters might be less than the stated maximum, if multi-byte
		///characters are used.
		///
		///For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// Required
		/// Min length: 1
		/// Max length: 45
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The location ID to associate with the payment. If not specified, the default location is
		///used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// An optional note to be entered by the developer when creating a payment.
		///
		///Limit 500 characters.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Note { get; set; }
		
		/// <summary>
		/// Associates a previously created order with this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// A user-defined ID to associate with the payment.
		///
		///You can use this field to associate the payment to an entity in an external system 
		///(for example, you might specify an order ID that is generated by a third-party shopping cart).
		///
		///Limit 40 characters.
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
		
		/// <summary>
		/// The ID for the source of funds for this payment. This can be a payment token 
		///(card nonce) generated by the Square payment form or a card on file made with the 
		///Customers API. If recording a payment that the seller 
		///received outside of Square, specify either "CASH" or "EXTERNAL". 
		///For more information, see 
		///[Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Source_id { get; set; }
		
		/// <summary>
		/// Optional additional payment information to include on the customer's card statement
		///as part of the statement description. This can be, for example, an invoice number, ticket number,
		///or short description that uniquely identifies the purchase.
		///
		///Note that the `statement_description_identifier` might get truncated on the statement description
		///to fit the required information including the Square identifier (SQ *) and name of the
		///seller taking the payment.
		/// Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statement_description_identifier")]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Statement_description_identifier { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tip_money")]
		public Money Tip_money { get; set; }
		
		/// <summary>
		/// An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
		///Verification tokens encapsulate customer device information and 3-D Secure
		///challenge results to indicate that Square has verified the buyer identity.
		///
		///For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_token")]
		public string Verification_token { get; set; }
	}
	
	/// <summary>
	/// Defines the response returned by [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
	///
	///If there are errors processing the request, the `payment` field might not be
	///present, or it might be present with a status of `FAILED`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePaymentResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a payment processed by the Square API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment")]
		public Payment Payment { get; set; }
	}
	
	/// <summary>
	/// Defines the body parameters that can be included in
	///a request to the [CreateRefund](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/create-refund) endpoint.
	///
	///Deprecated - recommend using [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRefundRequest
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// A value you specify that uniquely identifies this
		///refund among refunds you've created for the tender.
		///
		///If you're unsure whether a particular refund succeeded,
		///you can reattempt it with the same idempotency key without
		///worrying about duplicating the refund.
		///
		///See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
		/// Required
		/// Min length: 1
		/// Max length: 192
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// A description of the reason for the refund.
		///
		///Default value: `Refund via API`
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Reason { get; set; }
		
		/// <summary>
		/// The ID of the tender to refund.
		///
		///A [`Transaction`](https://developer.squareup.com/reference/square_2021-08-18/objects/Transaction) has one or more `tenders` (i.e., methods
		///of payment) associated with it, and you refund each tender separately with
		///the Connect API.
		/// Required
		/// Min length: 1
		/// Max length: 192
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tender_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Tender_id { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [CreateRefund](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/create-refund) endpoint.
	///
	///One of `errors` or `refund` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRefundResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a refund processed for a Square transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund")]
		public Refund Refund { get; set; }
	}
	
	/// <summary>
	/// Represents a request to create a `Shift`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateShiftRequest
	{
		
		/// <summary>
		/// A unique string value to ensure the idempotency of the operation.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// A record of the hourly rate, start, and end times for a single work shift
		///for an employee. This might include a record of the start and end times for breaks
		///taken during the shift.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shift")]
		public Shift Shift { get; set; }
	}
	
	/// <summary>
	/// A record of the hourly rate, start, and end times for a single work shift
	///for an employee. This might include a record of the start and end times for breaks
	///taken during the shift.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Shift
	{
		
		/// <summary>
		/// A list of all the paid or unpaid breaks that were taken during this shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breaks")]
		public Break[] Breaks { get; set; }
		
		/// <summary>
		/// A read-only timestamp in RFC 3339 format; presented in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// RFC 3339; shifted to the timezone + offset. Precision up to the minute is
		///respected; seconds are truncated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_at")]
		public string End_at { get; set; }
		
		/// <summary>
		/// The UUID for this object.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the location this shift occurred at. The location should be based on
		///where the employee clocked in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// RFC 3339; shifted to the location timezone + offset. Precision up to the
		///minute is respected; seconds are truncated.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_at")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Start_at { get; set; }
		
		/// <summary>
		/// Describes the working state of the current `Shift`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The ID of the team member this shift belongs to. Replaced `employee_id` at version "2020-08-26".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member_id")]
		public string Team_member_id { get; set; }
		
		/// <summary>
		/// The read-only convenience value that is calculated from the location based
		///on the `location_id`. Format: the IANA timezone database identifier for the
		///location timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// A read-only timestamp in RFC 3339 format; presented in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// Used for resolving concurrency issues. The request fails if the version
		///provided does not match the server version at the time of the request. If not provided,
		///Square executes a blind write; potentially overwriting data from another
		///write.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// The hourly wage rate used to compensate an employee for this shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wage")]
		public ShiftWage Wage { get; set; }
	}
	
	/// <summary>
	/// The hourly wage rate used to compensate an employee for this shift.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShiftWage
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hourly_rate")]
		public Money Hourly_rate { get; set; }
		
		/// <summary>
		/// The name of the job performed during this shift. Square
		///labor-reporting UIs might group shifts together by title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The response to a request to create a `Shift`. The response contains
	///the created `Shift` object and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateShiftResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A record of the hourly rate, start, and end times for a single work shift
		///for an employee. This might include a record of the start and end times for breaks
		///taken during the shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shift")]
		public Shift Shift { get; set; }
	}
	
	/// <summary>
	/// Defines parameters in a
	///[CreateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/create-subscription) endpoint request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSubscriptionRequest
	{
		
		/// <summary>
		/// The date when the subscription should be canceled, in
		///YYYY-MM-DD format (for example, 2025-02-29). This overrides the plan configuration
		///if it comes before the date the subscription would otherwise end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceled_date")]
		public string Canceled_date { get; set; }
		
		/// <summary>
		/// The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) to charge.
		///If not specified, Square sends an invoice via email. For an example to
		///create a customer and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		public string Card_id { get; set; }
		
		/// <summary>
		/// The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// A unique string that identifies this `CreateSubscription` request.
		///If you do not provide a unique string (or provide an empty string as the value),
		///the endpoint treats each request as independent.
		///
		///For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The ID of the location the subscription is associated with.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The ID of the subscription plan created using the Catalog API.
		///For more information, see
		///[Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan) and 
		///[Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plan_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Plan_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_override_money")]
		public Money Price_override_money { get; set; }
		
		/// <summary>
		/// The start date of the subscription, in YYYY-MM-DD format. For example,
		///2013-01-15. If the start date is left empty, the subscription begins
		///immediately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
		
		/// <summary>
		/// The tax to add when billing the subscription.
		///The percentage is expressed in decimal form, using a `'.'` as the decimal
		///separator and without a `'%'` sign. For example, a value of 7.5
		///corresponds to 7.5%.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_percentage")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Tax_percentage { get; set; }
		
		/// <summary>
		/// The timezone that is used in date calculations for the subscription. If unset, defaults to
		///the location timezone. If a timezone is not configured for the location, defaults to "America/New_York".
		///Format: the IANA Timezone Database identifier for the location timezone. For
		///a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response from the
	///[CreateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/create-subscription) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSubscriptionResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a customer subscription to a subscription plan.
		///For an overview of the `Subscription` type, see
		///[Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Subscription Subscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTerminalCheckoutRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkout")]
		public TerminalCheckout Checkout { get; set; }
		
		/// <summary>
		/// A unique string that identifies this `CreateCheckout` request. Keys can be any valid string but
		///must be unique for every `CreateCheckout` request.
		///
		///See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Idempotency_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTerminalCheckoutResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="checkout")]
		public TerminalCheckout Checkout { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTerminalRefundRequest
	{
		
		/// <summary>
		/// A unique string that identifies this `CreateRefund` request. Keys can be any valid string but
		///must be unique for every `CreateRefund` request.
		///
		///See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Idempotency_key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refund")]
		public TerminalRefund Refund { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTerminalRefundResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refund")]
		public TerminalRefund Refund { get; set; }
	}
	
	/// <summary>
	/// Indicates the associated currency for an amount of money. Values correspond
	///to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Currency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_CURRENCY")]
		UNKNOWN_CURRENCY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AED")]
		AED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFN")]
		AFN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMD")]
		AMD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANG")]
		ANG = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AOA")]
		AOA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARS")]
		ARS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUD")]
		AUD = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWG")]
		AWG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AZN")]
		AZN = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAM")]
		BAM = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BBD")]
		BBD = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BDT")]
		BDT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BGN")]
		BGN = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BHD")]
		BHD = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIF")]
		BIF = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BMD")]
		BMD = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BND")]
		BND = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOB")]
		BOB = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOV")]
		BOV = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BRL")]
		BRL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BSD")]
		BSD = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BTN")]
		BTN = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BWP")]
		BWP = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BYR")]
		BYR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BZD")]
		BZD = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAD")]
		CAD = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CDF")]
		CDF = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHE")]
		CHE = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHF")]
		CHF = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHW")]
		CHW = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLF")]
		CLF = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLP")]
		CLP = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CNY")]
		CNY = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COP")]
		COP = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COU")]
		COU = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CRC")]
		CRC = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUC")]
		CUC = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUP")]
		CUP = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CVE")]
		CVE = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CZK")]
		CZK = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DJF")]
		DJF = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DKK")]
		DKK = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOP")]
		DOP = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DZD")]
		DZD = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EGP")]
		EGP = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERN")]
		ERN = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ETB")]
		ETB = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EUR")]
		EUR = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FJD")]
		FJD = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FKP")]
		FKP = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GBP")]
		GBP = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GEL")]
		GEL = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GHS")]
		GHS = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIP")]
		GIP = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GMD")]
		GMD = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GNF")]
		GNF = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GTQ")]
		GTQ = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GYD")]
		GYD = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HKD")]
		HKD = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HNL")]
		HNL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HRK")]
		HRK = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTG")]
		HTG = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HUF")]
		HUF = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IDR")]
		IDR = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ILS")]
		ILS = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INR")]
		INR = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IQD")]
		IQD = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IRR")]
		IRR = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ISK")]
		ISK = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JMD")]
		JMD = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOD")]
		JOD = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JPY")]
		JPY = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KES")]
		KES = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KGS")]
		KGS = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KHR")]
		KHR = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KMF")]
		KMF = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KPW")]
		KPW = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KRW")]
		KRW = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KWD")]
		KWD = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KYD")]
		KYD = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KZT")]
		KZT = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAK")]
		LAK = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LBP")]
		LBP = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LKR")]
		LKR = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LRD")]
		LRD = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LSL")]
		LSL = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LTL")]
		LTL = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LVL")]
		LVL = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LYD")]
		LYD = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAD")]
		MAD = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MDL")]
		MDL = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MGA")]
		MGA = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MKD")]
		MKD = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MMK")]
		MMK = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MNT")]
		MNT = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOP")]
		MOP = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MRO")]
		MRO = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUR")]
		MUR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MVR")]
		MVR = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MWK")]
		MWK = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MXN")]
		MXN = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MXV")]
		MXV = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MYR")]
		MYR = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MZN")]
		MZN = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NAD")]
		NAD = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NGN")]
		NGN = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NIO")]
		NIO = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOK")]
		NOK = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NPR")]
		NPR = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NZD")]
		NZD = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OMR")]
		OMR = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAB")]
		PAB = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PEN")]
		PEN = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PGK")]
		PGK = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHP")]
		PHP = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PKR")]
		PKR = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLN")]
		PLN = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PYG")]
		PYG = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QAR")]
		QAR = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RON")]
		RON = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSD")]
		RSD = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUB")]
		RUB = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RWF")]
		RWF = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAR")]
		SAR = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SBD")]
		SBD = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCR")]
		SCR = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDG")]
		SDG = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEK")]
		SEK = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SGD")]
		SGD = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHP")]
		SHP = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SLL")]
		SLL = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOS")]
		SOS = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SRD")]
		SRD = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSP")]
		SSP = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STD")]
		STD = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SVC")]
		SVC = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYP")]
		SYP = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SZL")]
		SZL = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THB")]
		THB = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TJS")]
		TJS = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TMT")]
		TMT = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TND")]
		TND = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOP")]
		TOP = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRY")]
		TRY = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TTD")]
		TTD = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TWD")]
		TWD = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TZS")]
		TZS = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UAH")]
		UAH = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UGX")]
		UGX = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USD")]
		USD = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USN")]
		USN = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USS")]
		USS = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UYI")]
		UYI = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UYU")]
		UYU = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UZS")]
		UZS = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VEF")]
		VEF = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VND")]
		VND = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VUV")]
		VUV = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WST")]
		WST = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XAF")]
		XAF = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XAG")]
		XAG = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XAU")]
		XAU = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XBA")]
		XBA = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XBB")]
		XBB = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XBC")]
		XBC = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XBD")]
		XBD = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XCD")]
		XCD = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XDR")]
		XDR = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XOF")]
		XOF = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XPD")]
		XPD = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XPF")]
		XPF = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XPT")]
		XPT = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XTS")]
		XTS = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XXX")]
		XXX = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YER")]
		YER = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZAR")]
		ZAR = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZMK")]
		ZMK = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZMW")]
		ZMW = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BTC")]
		BTC = 180,
	}
	
	/// <summary>
	/// Supported custom attribute query expressions for calling the
	///[SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items)
	///endpoint to search for items or item variations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomAttributeFilter
	{
		
		/// <summary>
		/// A query expression to filter items or item variations by matching their custom attributes'
		///`boolean_value` property values
		///against the specified Boolean expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bool_filter")]
		public System.Nullable<System.Boolean> Bool_filter { get; set; }
		
		/// <summary>
		/// A query expression to filter items or item variations by matching their custom attributes'
		///`custom_attribute_definition_id`
		///property value against the the specified id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_attribute_definition_id")]
		public string Custom_attribute_definition_id { get; set; }
		
		/// <summary>
		/// A query expression to filter items or item variations by matching their custom attributes'
		///`key` property value against
		///the specified key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The range of a number value between the specified lower and upper bounds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number_filter")]
		public Range Number_filter { get; set; }
		
		/// <summary>
		/// A query expression to filter items or item variations by matching  their custom attributes'
		///`selection_uid_values`
		///values against the specified selection uids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selection_uids_filter")]
		public string[] Selection_uids_filter { get; set; }
		
		/// <summary>
		/// A query expression to filter items or item variations by matching their custom attributes'
		///`string_value`  property value
		///against the specified text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="string_filter")]
		public string String_filter { get; set; }
	}
	
	/// <summary>
	/// The range of a number value between the specified lower and upper bounds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Range
	{
		
		/// <summary>
		/// The upper bound of the number range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public string Max { get; set; }
		
		/// <summary>
		/// The lower bound of the number range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public string Min { get; set; }
	}
	
	/// <summary>
	/// Indicates the method used to create the customer profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CustomerCreationSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPOINTMENTS")]
		APPOINTMENTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COUPON")]
		COUPON = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETION_RECOVERY")]
		DELETION_RECOVERY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIRECTORY")]
		DIRECTORY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EGIFTING")]
		EGIFTING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMAIL_COLLECTION")]
		EMAIL_COLLECTION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FEEDBACK")]
		FEEDBACK = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT")]
		IMPORT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVOICES")]
		INVOICES = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOYALTY")]
		LOYALTY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MARKETING")]
		MARKETING = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MERGE")]
		MERGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONLINE_STORE")]
		ONLINE_STORE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTANT_PROFILE")]
		INSTANT_PROFILE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TERMINAL")]
		TERMINAL = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THIRD_PARTY")]
		THIRD_PARTY = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THIRD_PARTY_IMPORT")]
		THIRD_PARTY_IMPORT = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNMERGE_RECOVERY")]
		UNMERGE_RECOVERY = 18,
	}
	
	/// <summary>
	/// The creation source filter.
	///
	///If one or more creation sources are set, customer profiles are included in,
	///or excluded from, the result if they match at least one of the filter criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCreationSourceFilter
	{
		
		/// <summary>
		/// Indicates whether a customer profile matching the filter criteria
		///should be included in the result or excluded from the result.
		///
		///Default: `INCLUDE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public string Rule { get; set; }
		
		/// <summary>
		/// The list of creation sources used as filtering criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Represents a set of `CustomerQuery` filters used to limit the set of
	///customers returned by the [SearchCustomers](https://developer.squareup.com/reference/square_2021-08-18/customers-api/search-customers) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerFilter
	{
		
		/// <summary>
		/// Represents a generic time range. The start and end values are
		///represented in RFC 3339 format. Time ranges are customized to be
		///inclusive or exclusive based on the needs of a particular endpoint.
		///Refer to the relevant endpoint-specific documentation to determine
		///how time ranges are handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public TimeRange Created_at { get; set; }
		
		/// <summary>
		/// The creation source filter.
		///
		///If one or more creation sources are set, customer profiles are included in,
		///or excluded from, the result if they match at least one of the filter criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creation_source")]
		public CustomerCreationSourceFilter Creation_source { get; set; }
		
		/// <summary>
		/// A filter to select customers based on exact or fuzzy matching of
		///customer attributes against a specified query. Depending on the customer attributes, 
		///the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public CustomerTextFilter Email_address { get; set; }
		
		/// <summary>
		/// A filter to select resources based on an exact field value. For any given
		///value, the value can only be in one property. Depending on the field, either
		///all properties can be set or only a subset will be available.
		///
		///Refer to the documentation of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public FilterValue Group_ids { get; set; }
		
		/// <summary>
		/// A filter to select customers based on exact or fuzzy matching of
		///customer attributes against a specified query. Depending on the customer attributes, 
		///the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public CustomerTextFilter Phone_number { get; set; }
		
		/// <summary>
		/// A filter to select customers based on exact or fuzzy matching of
		///customer attributes against a specified query. Depending on the customer attributes, 
		///the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public CustomerTextFilter Reference_id { get; set; }
		
		/// <summary>
		/// Represents a generic time range. The start and end values are
		///represented in RFC 3339 format. Time ranges are customized to be
		///inclusive or exclusive based on the needs of a particular endpoint.
		///Refer to the relevant endpoint-specific documentation to determine
		///how time ranges are handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public TimeRange Updated_at { get; set; }
	}
	
	/// <summary>
	/// Represents a generic time range. The start and end values are
	///represented in RFC 3339 format. Time ranges are customized to be
	///inclusive or exclusive based on the needs of a particular endpoint.
	///Refer to the relevant endpoint-specific documentation to determine
	///how time ranges are handled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeRange
	{
		
		/// <summary>
		/// A datetime value in RFC 3339 format indicating when the time range
		///ends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_at")]
		public string End_at { get; set; }
		
		/// <summary>
		/// A datetime value in RFC 3339 format indicating when the time range
		///starts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_at")]
		public string Start_at { get; set; }
	}
	
	/// <summary>
	/// A filter to select customers based on exact or fuzzy matching of
	///customer attributes against a specified query. Depending on the customer attributes, 
	///the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerTextFilter
	{
		
		/// <summary>
		/// Use the exact filter to select customers whose attributes match exactly the specified query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exact")]
		public string Exact { get; set; }
		
		/// <summary>
		/// Use the fuzzy filter to select customers whose attributes match the specified query 
		///in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then 
		///each query token must be matched somewhere in the searched attribute. For single token queries, 
		///this is effectively the same behavior as a partial match operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fuzzy")]
		public string Fuzzy { get; set; }
	}
	
	/// <summary>
	/// A filter to select resources based on an exact field value. For any given
	///value, the value can only be in one property. Depending on the field, either
	///all properties can be set or only a subset will be available.
	///
	///Refer to the documentation of the field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterValue
	{
		
		/// <summary>
		/// A list of terms that must be present on the field of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="all")]
		public string[] All { get; set; }
		
		/// <summary>
		/// A list of terms where at least one of them must be present on the
		///field of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="any")]
		public string[] Any { get; set; }
		
		/// <summary>
		/// A list of terms that must not be present on the field the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="none")]
		public string[] None { get; set; }
	}
	
	/// <summary>
	/// Indicates whether customers should be included in, or excluded from,
	///the result set when they match the filtering criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CustomerInclusionExclusion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUDE")]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXCLUDE")]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// Represents a query (including filtering criteria, sorting criteria, or both) used to search
	///for customer profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerQuery
	{
		
		/// <summary>
		/// Represents a set of `CustomerQuery` filters used to limit the set of
		///customers returned by the [SearchCustomers](https://developer.squareup.com/reference/square_2021-08-18/customers-api/search-customers) endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public CustomerFilter Filter { get; set; }
		
		/// <summary>
		/// Specifies how searched customers profiles are sorted, including the sort key and sort order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public CustomerSort Sort { get; set; }
	}
	
	/// <summary>
	/// Specifies how searched customers profiles are sorted, including the sort key and sort order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerSort
	{
		
		/// <summary>
		/// Use one or more customer attributes as the sort key to sort searched customer profiles. 
		///For example, use the creation date (`created_at`) of customers or default attributes as the sort key.
		///
		///
		///Default: `DEFAULT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// Indicates the order in which results should be sorted based on the
		///sort field value. Strings use standard alphabetic comparison
		///to determine order. Strings representing numbers are sorted as strings.
		///
		///Default: `ASC`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
	}
	
	/// <summary>
	/// Represents a group of customer profiles that match one or more predefined filter criteria. 
	///
	///Segments (also known as Smart Groups) are defined and created within the Customer Directory in the
	///Square Seller Dashboard or Point of Sale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerSegment
	{
		
		/// <summary>
		/// The timestamp when the segment was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// A unique Square-generated ID for the segment.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the segment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The timestamp when the segment was last updated, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// Specifies customer attributes as the sort key to customer profiles returned from a search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CustomerSortField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATED_AT")]
		CREATED_AT = 1,
	}
	
	/// <summary>
	/// A range defined by two dates. Used for filtering a query for Connect v2
	///objects that have date properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateRange
	{
		
		/// <summary>
		/// A string in `YYYY-MM-DD` format, such as `2017-10-31`, per the ISO 8601
		///extended format for calendar dates.
		///The end of a date range (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public string End_date { get; set; }
		
		/// <summary>
		/// A string in `YYYY-MM-DD` format, such as `2017-10-31`, per the ISO 8601
		///extended format for calendar dates.
		///The beginning of a date range (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
	}
	
	/// <summary>
	/// Indicates the specific day  of the week.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUN")]
		SUN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MON")]
		MON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TUE")]
		TUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WED")]
		WED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THU")]
		THU = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FRI")]
		FRI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAT")]
		SAT = 6,
	}
	
	/// <summary>
	/// A request to delete a `BreakType`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBreakTypeRequest
	{
	}
	
	/// <summary>
	/// The response to a request to delete a `BreakType`. The response might contain a set 
	///of `Error` objects if the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBreakTypeResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCatalogObjectRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCatalogObjectResponse
	{
		
		/// <summary>
		/// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		///of this deletion in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted_at")]
		public string Deleted_at { get; set; }
		
		/// <summary>
		/// The IDs of all catalog objects deleted by this request.
		///Multiple IDs may be returned when associated objects are also deleted, for example
		///a catalog item variation will be deleted (and its ID included in this field)
		///when its parent catalog item is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted_object_ids")]
		public string[] Deleted_object_ids { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in requests to the
	///`DeleteCustomerCard` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomerCardRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the `DeleteCustomerCard` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomerCardResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that can be included in a request to the
	///[DeleteCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/delete-customer-group) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomerGroupRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [DeleteCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/delete-customer-group) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomerGroupResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in a request to the `DeleteCustomer`
	///endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomerRequest
	{
		
		/// <summary>
		/// The current version of the customer profile.
		///
		///As a best practice, you should include this parameter to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control.  For more information, see [Delete a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#delete-customer-profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the `DeleteCustomer` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomerResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the parameters for a `DeleteDisputeEvidence` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDisputeEvidenceRequest
	{
	}
	
	/// <summary>
	/// Defines the fields in a `DeleteDisputeEvidence` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDisputeEvidenceResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Describes a `DeleteInvoice` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInvoiceRequest
	{
		
		/// <summary>
		/// The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to delete.
		///If you do not know the version, you can call [GetInvoice](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/get-invoice) or 
		///[ListInvoices](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/list-invoices).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Describes a `DeleteInvoice` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInvoiceResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// A request to delete a loyalty reward.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLoyaltyRewardRequest
	{
	}
	
	/// <summary>
	/// A response returned by the API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLoyaltyRewardResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// A request to delete a `Shift`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteShiftRequest
	{
	}
	
	/// <summary>
	/// The response to a request to delete a `Shift`. The response might contain a set of 
	///`Error` objects if the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteShiftResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Represents a `DeleteSnippet` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSnippetRequest
	{
	}
	
	/// <summary>
	/// Represents a `DeleteSnippet` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSnippetResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the parameters for a `DeprecatedCreateDisputeEvidenceFile` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeprecatedCreateDisputeEvidenceFileRequest
	{
		
		/// <summary>
		/// The MIME type of the uploaded file.
		///The type can be image/heic, image/heif, image/jpeg, application/pdf, image/png, or image/tiff.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content_type")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Content_type { get; set; }
		
		/// <summary>
		/// The type of evidence you are uploading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence_type")]
		public string Evidence_type { get; set; }
		
		/// <summary>
		/// The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// Required
		/// Min length: 1
		/// Max length: 45
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Idempotency_key { get; set; }
	}
	
	/// <summary>
	/// Defines the fields in a `DeprecatedCreateDisputeEvidenceFile` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeprecatedCreateDisputeEvidenceFileResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public DisputeEvidence Evidence { get; set; }
	}
	
	/// <summary>
	/// Defines the parameters for a `DeprecatedCreateDisputeEvidenceText` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeprecatedCreateDisputeEvidenceTextRequest
	{
		
		/// <summary>
		/// The evidence string.
		/// Required
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidence_text")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Evidence_text { get; set; }
		
		/// <summary>
		/// The type of evidence you are uploading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence_type")]
		public string Evidence_type { get; set; }
		
		/// <summary>
		/// The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// Required
		/// Min length: 1
		/// Max length: 45
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Idempotency_key { get; set; }
	}
	
	/// <summary>
	/// Defines the fields in a `DeprecatedCreateDisputeEvidenceText` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeprecatedCreateDisputeEvidenceTextResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public DisputeEvidence Evidence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Device
	{
		
		/// <summary>
		/// The device's Square-issued ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The device's merchant-specified name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// DeviceCode.Status enum.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceCodeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNPAIRED")]
		UNPAIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAIRED")]
		PAIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 3,
	}
	
	/// <summary>
	/// Disables the card, preventing any further updates or charges. Disabling
	///an already disabled card is allowed but has no effect. Accessible via
	///HTTP requests at POST https://connect.squareup.com/v2/cards/{card_id}/disable
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableCardRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [DisableCard](#endpoint-cards-disablecard) endpoint.
	///
	///Note: if there are errors processing the request, the card field will not be
	///present.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableCardResponse
	{
		
		/// <summary>
		/// Represents the payment details of a card to be used for payments. These
		///details are determined by the payment token generated by Web Payments SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public Card Card { get; set; }
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Published when evidence is added to a [Dispute](https://developer.squareup.com/reference/square_2021-08-18/objects/Dispute)
	///from the Disputes Dashboard in the Seller Dashboard, the Square Point of Sale app,
	///or by calling either [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) or [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisputeEvidenceCreatedWebhook
	{
		
		/// <summary>
		/// Timestamp of when the webhook event was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DisputeEvidenceCreatedWebhookData Data { get; set; }
		
		/// <summary>
		/// A unique ID for the webhook event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_id")]
		public string Event_id { get; set; }
		
		/// <summary>
		/// The ID of the target location associated with the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The ID of the target merchant associated with the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		/// <summary>
		/// The type of event this represents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisputeEvidenceCreatedWebhookData
	{
		
		/// <summary>
		/// ID of the affected dispute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public DisputeEvidenceCreatedWebhookObject Object { get; set; }
		
		/// <summary>
		/// Name of the affected dispute's type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisputeEvidenceCreatedWebhookObject
	{
		
		/// <summary>
		/// Represents a dispute a cardholder initiated with their bank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public Dispute Object { get; set; }
	}
	
	/// <summary>
	/// The type of the dispute evidence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DisputeEvidenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_EVIDENCE")]
		GENERIC_EVIDENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONLINE_OR_APP_ACCESS_LOG")]
		ONLINE_OR_APP_ACCESS_LOG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTHORIZATION_DOCUMENTATION")]
		AUTHORIZATION_DOCUMENTATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLATION_OR_REFUND_DOCUMENTATION")]
		CANCELLATION_OR_REFUND_DOCUMENTATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARDHOLDER_COMMUNICATION")]
		CARDHOLDER_COMMUNICATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARDHOLDER_INFORMATION")]
		CARDHOLDER_INFORMATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PURCHASE_ACKNOWLEDGEMENT")]
		PURCHASE_ACKNOWLEDGEMENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DUPLICATE_CHARGE_DOCUMENTATION")]
		DUPLICATE_CHARGE_DOCUMENTATION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRODUCT_OR_SERVICE_DESCRIPTION")]
		PRODUCT_OR_SERVICE_DESCRIPTION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECEIPT")]
		RECEIPT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVICE_RECEIVED_DOCUMENTATION")]
		SERVICE_RECEIVED_DOCUMENTATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROOF_OF_DELIVERY_DOCUMENTATION")]
		PROOF_OF_DELIVERY_DOCUMENTATION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RELATED_TRANSACTION_DOCUMENTATION")]
		RELATED_TRANSACTION_DOCUMENTATION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REBUTTAL_EXPLANATION")]
		REBUTTAL_EXPLANATION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRACKING_NUMBER")]
		TRACKING_NUMBER = 14,
	}
	
	/// <summary>
	/// The list of possible reasons why a cardholder might initiate a
	///dispute with their bank.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DisputeReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMOUNT_DIFFERS")]
		AMOUNT_DIFFERS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DUPLICATE")]
		DUPLICATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_KNOWLEDGE")]
		NO_KNOWLEDGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_AS_DESCRIBED")]
		NOT_AS_DESCRIBED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_RECEIVED")]
		NOT_RECEIVED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAID_BY_OTHER_MEANS")]
		PAID_BY_OTHER_MEANS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER_REQUESTS_CREDIT")]
		CUSTOMER_REQUESTS_CREDIT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMV_LIABILITY_SHIFT")]
		EMV_LIABILITY_SHIFT = 8,
	}
	
	/// <summary>
	/// The list of possible dispute states.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DisputeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_STATE")]
		UNKNOWN_STATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INQUIRY_EVIDENCE_REQUIRED")]
		INQUIRY_EVIDENCE_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INQUIRY_PROCESSING")]
		INQUIRY_PROCESSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INQUIRY_CLOSED")]
		INQUIRY_CLOSED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVIDENCE_REQUIRED")]
		EVIDENCE_REQUIRED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROCESSING")]
		PROCESSING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WON")]
		WON = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOST")]
		LOST = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCEPTED")]
		ACCEPTED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WAITING_THIRD_PARTY")]
		WAITING_THIRD_PARTY = 9,
	}
	
	/// <summary>
	/// Determines item visibility in Ecom (Online Store) and Online Checkout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EcomVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNINDEXED")]
		UNINDEXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAVAILABLE")]
		UNAVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIDDEN")]
		HIDDEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VISIBLE")]
		VISIBLE = 3,
	}
	
	/// <summary>
	/// An employee object that is used by the external API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Employee
	{
		
		/// <summary>
		/// A read-only timestamp in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The employee's email address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The employee's first name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// UUID for this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this employee is the owner of the merchant. Each merchant
		///has one owner employee, and that employee has full authority over
		///the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_owner")]
		public System.Nullable<System.Boolean> Is_owner { get; set; }
		
		/// <summary>
		/// The employee's last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// A list of location IDs where this employee has access to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string[] Location_ids { get; set; }
		
		/// <summary>
		/// The employee's phone number in E.164 format, i.e. "+12125554250"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Specifies the status of the employees being fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// A read-only timestamp in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// The status of the Employee being retrieved.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EmployeeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
	}
	
	/// <summary>
	/// The hourly wage rate that an employee earns on a `Shift` for doing the job
	///specified by the `title` property of this object. Deprecated at version 2020-08-26. Use `TeamMemberWage` instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmployeeWage
	{
		
		/// <summary>
		/// The `Employee` that this wage is assigned to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hourly_rate")]
		public Money Hourly_rate { get; set; }
		
		/// <summary>
		/// The UUID for this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The job title that this wage relates to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Indicates which high-level category of error has occurred during a
	///request to the Connect API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ErrorCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="API_ERROR")]
		API_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTHENTICATION_ERROR")]
		AUTHENTICATION_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_REQUEST_ERROR")]
		INVALID_REQUEST_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RATE_LIMIT_ERROR")]
		RATE_LIMIT_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAYMENT_METHOD_ERROR")]
		PAYMENT_METHOD_ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFUND_ERROR")]
		REFUND_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MERCHANT_SUBSCRIPTION_ERROR")]
		MERCHANT_SUBSCRIPTION_ERROR = 6,
	}
	
	/// <summary>
	/// Indicates the specific error that occurred during a request to a
	///Square API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_SERVER_ERROR")]
		INTERNAL_SERVER_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAUTHORIZED")]
		UNAUTHORIZED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCESS_TOKEN_EXPIRED")]
		ACCESS_TOKEN_EXPIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCESS_TOKEN_REVOKED")]
		ACCESS_TOKEN_REVOKED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLIENT_DISABLED")]
		CLIENT_DISABLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FORBIDDEN")]
		FORBIDDEN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSUFFICIENT_SCOPES")]
		INSUFFICIENT_SCOPES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPLICATION_DISABLED")]
		APPLICATION_DISABLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="V1_APPLICATION")]
		V1_APPLICATION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="V1_ACCESS_TOKEN")]
		V1_ACCESS_TOKEN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARD_PROCESSING_NOT_ENABLED")]
		CARD_PROCESSING_NOT_ENABLED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MERCHANT_SUBSCRIPTION_NOT_FOUND")]
		MERCHANT_SUBSCRIPTION_NOT_FOUND = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_REQUEST")]
		BAD_REQUEST = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MISSING_REQUIRED_PARAMETER")]
		MISSING_REQUIRED_PARAMETER = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCORRECT_TYPE")]
		INCORRECT_TYPE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_TIME")]
		INVALID_TIME = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_TIME_RANGE")]
		INVALID_TIME_RANGE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_VALUE")]
		INVALID_VALUE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_CURSOR")]
		INVALID_CURSOR = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_QUERY_PARAMETER")]
		UNKNOWN_QUERY_PARAMETER = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFLICTING_PARAMETERS")]
		CONFLICTING_PARAMETERS = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPECTED_JSON_BODY")]
		EXPECTED_JSON_BODY = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_SORT_ORDER")]
		INVALID_SORT_ORDER = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALUE_REGEX_MISMATCH")]
		VALUE_REGEX_MISMATCH = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALUE_TOO_SHORT")]
		VALUE_TOO_SHORT = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALUE_TOO_LONG")]
		VALUE_TOO_LONG = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALUE_TOO_LOW")]
		VALUE_TOO_LOW = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALUE_TOO_HIGH")]
		VALUE_TOO_HIGH = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALUE_EMPTY")]
		VALUE_EMPTY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARRAY_LENGTH_TOO_LONG")]
		ARRAY_LENGTH_TOO_LONG = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARRAY_LENGTH_TOO_SHORT")]
		ARRAY_LENGTH_TOO_SHORT = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARRAY_EMPTY")]
		ARRAY_EMPTY = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPECTED_BOOLEAN")]
		EXPECTED_BOOLEAN = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPECTED_INTEGER")]
		EXPECTED_INTEGER = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPECTED_FLOAT")]
		EXPECTED_FLOAT = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPECTED_STRING")]
		EXPECTED_STRING = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPECTED_OBJECT")]
		EXPECTED_OBJECT = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPECTED_ARRAY")]
		EXPECTED_ARRAY = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPECTED_MAP")]
		EXPECTED_MAP = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPECTED_BASE64_ENCODED_BYTE_ARRAY")]
		EXPECTED_BASE64_ENCODED_BYTE_ARRAY = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_ARRAY_VALUE")]
		INVALID_ARRAY_VALUE = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_ENUM_VALUE")]
		INVALID_ENUM_VALUE = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_CONTENT_TYPE")]
		INVALID_CONTENT_TYPE = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_FORM_VALUE")]
		INVALID_FORM_VALUE = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER_NOT_FOUND")]
		CUSTOMER_NOT_FOUND = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONE_INSTRUMENT_EXPECTED")]
		ONE_INSTRUMENT_EXPECTED = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_FIELDS_SET")]
		NO_FIELDS_SET = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOO_MANY_MAP_ENTRIES")]
		TOO_MANY_MAP_ENTRIES = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAP_KEY_LENGTH_TOO_SHORT")]
		MAP_KEY_LENGTH_TOO_SHORT = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAP_KEY_LENGTH_TOO_LONG")]
		MAP_KEY_LENGTH_TOO_LONG = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARD_EXPIRED")]
		CARD_EXPIRED = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_EXPIRATION")]
		INVALID_EXPIRATION = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_EXPIRATION_YEAR")]
		INVALID_EXPIRATION_YEAR = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_EXPIRATION_DATE")]
		INVALID_EXPIRATION_DATE = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSUPPORTED_CARD_BRAND")]
		UNSUPPORTED_CARD_BRAND = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSUPPORTED_ENTRY_METHOD")]
		UNSUPPORTED_ENTRY_METHOD = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_ENCRYPTED_CARD")]
		INVALID_ENCRYPTED_CARD = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_CARD")]
		INVALID_CARD = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_DECLINE")]
		GENERIC_DECLINE = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CVV_FAILURE")]
		CVV_FAILURE = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDRESS_VERIFICATION_FAILURE")]
		ADDRESS_VERIFICATION_FAILURE = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_ACCOUNT")]
		INVALID_ACCOUNT = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CURRENCY_MISMATCH")]
		CURRENCY_MISMATCH = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSUFFICIENT_FUNDS")]
		INSUFFICIENT_FUNDS = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSUFFICIENT_PERMISSIONS")]
		INSUFFICIENT_PERMISSIONS = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARDHOLDER_INSUFFICIENT_PERMISSIONS")]
		CARDHOLDER_INSUFFICIENT_PERMISSIONS = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_LOCATION")]
		INVALID_LOCATION = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSACTION_LIMIT")]
		TRANSACTION_LIMIT = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_FAILURE")]
		VOICE_FAILURE = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAN_FAILURE")]
		PAN_FAILURE = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRATION_FAILURE")]
		EXPIRATION_FAILURE = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARD_NOT_SUPPORTED")]
		CARD_NOT_SUPPORTED = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_PIN")]
		INVALID_PIN = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MISSING_PIN")]
		MISSING_PIN = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MISSING_ACCOUNT_TYPE")]
		MISSING_ACCOUNT_TYPE = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_POSTAL_CODE")]
		INVALID_POSTAL_CODE = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_FEES")]
		INVALID_FEES = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED")]
		MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAYMENT_LIMIT_EXCEEDED")]
		PAYMENT_LIMIT_EXCEEDED = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIFT_CARD_AVAILABLE_AMOUNT")]
		GIFT_CARD_AVAILABLE_AMOUNT = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCOUNT_UNUSABLE")]
		ACCOUNT_UNUSABLE = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUYER_REFUSED_PAYMENT")]
		BUYER_REFUSED_PAYMENT = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELAYED_TRANSACTION_EXPIRED")]
		DELAYED_TRANSACTION_EXPIRED = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELAYED_TRANSACTION_CANCELED")]
		DELAYED_TRANSACTION_CANCELED = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELAYED_TRANSACTION_CAPTURED")]
		DELAYED_TRANSACTION_CAPTURED = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELAYED_TRANSACTION_FAILED")]
		DELAYED_TRANSACTION_FAILED = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARD_TOKEN_EXPIRED")]
		CARD_TOKEN_EXPIRED = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARD_TOKEN_USED")]
		CARD_TOKEN_USED = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMOUNT_TOO_HIGH")]
		AMOUNT_TOO_HIGH = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSUPPORTED_INSTRUMENT_TYPE")]
		UNSUPPORTED_INSTRUMENT_TYPE = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFUND_AMOUNT_INVALID")]
		REFUND_AMOUNT_INVALID = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFUND_ALREADY_PENDING")]
		REFUND_ALREADY_PENDING = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAYMENT_NOT_REFUNDABLE")]
		PAYMENT_NOT_REFUNDABLE = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFUND_DECLINED")]
		REFUND_DECLINED = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_CARD_DATA")]
		INVALID_CARD_DATA = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOURCE_USED")]
		SOURCE_USED = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOURCE_EXPIRED")]
		SOURCE_EXPIRED = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSUPPORTED_LOYALTY_REWARD_TIER")]
		UNSUPPORTED_LOYALTY_REWARD_TIER = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_MISMATCH")]
		LOCATION_MISMATCH = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IDEMPOTENCY_KEY_REUSED")]
		IDEMPOTENCY_KEY_REUSED = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNEXPECTED_VALUE")]
		UNEXPECTED_VALUE = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SANDBOX_NOT_SUPPORTED")]
		SANDBOX_NOT_SUPPORTED = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_EMAIL_ADDRESS")]
		INVALID_EMAIL_ADDRESS = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_PHONE_NUMBER")]
		INVALID_PHONE_NUMBER = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHECKOUT_EXPIRED")]
		CHECKOUT_EXPIRED = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_CERTIFICATE")]
		BAD_CERTIFICATE = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_SQUARE_VERSION_FORMAT")]
		INVALID_SQUARE_VERSION_FORMAT = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="API_VERSION_INCOMPATIBLE")]
		API_VERSION_INCOMPATIBLE = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARD_DECLINED")]
		CARD_DECLINED = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERIFY_CVV_FAILURE")]
		VERIFY_CVV_FAILURE = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERIFY_AVS_FAILURE")]
		VERIFY_AVS_FAILURE = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARD_DECLINED_CALL_ISSUER")]
		CARD_DECLINED_CALL_ISSUER = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARD_DECLINED_VERIFICATION_REQUIRED")]
		CARD_DECLINED_VERIFICATION_REQUIRED = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_EXPIRATION")]
		BAD_EXPIRATION = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHIP_INSERTION_REQUIRED")]
		CHIP_INSERTION_REQUIRED = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOWABLE_PIN_TRIES_EXCEEDED")]
		ALLOWABLE_PIN_TRIES_EXCEEDED = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESERVATION_DECLINED")]
		RESERVATION_DECLINED = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_FOUND")]
		NOT_FOUND = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND")]
		APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METHOD_NOT_ALLOWED")]
		METHOD_NOT_ALLOWED = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_ACCEPTABLE")]
		NOT_ACCEPTABLE = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUEST_TIMEOUT")]
		REQUEST_TIMEOUT = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFLICT")]
		CONFLICT = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GONE")]
		GONE = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUEST_ENTITY_TOO_LARGE")]
		REQUEST_ENTITY_TOO_LARGE = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSUPPORTED_MEDIA_TYPE")]
		UNSUPPORTED_MEDIA_TYPE = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNPROCESSABLE_ENTITY")]
		UNPROCESSABLE_ENTITY = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RATE_LIMITED")]
		RATE_LIMITED = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_IMPLEMENTED")]
		NOT_IMPLEMENTED = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_GATEWAY")]
		BAD_GATEWAY = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVICE_UNAVAILABLE")]
		SERVICE_UNAVAILABLE = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEMPORARY_ERROR")]
		TEMPORARY_ERROR = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GATEWAY_TIMEOUT")]
		GATEWAY_TIMEOUT = 132,
	}
	
	/// <summary>
	/// Indicates which products matched by a CatalogPricingRule
	///will be excluded if the pricing rule uses an exclude set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExcludeStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEAST_EXPENSIVE")]
		LEAST_EXPENSIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOST_EXPENSIVE")]
		MOST_EXPENSIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GANSource
	{
	}
	
	/// <summary>
	/// Request object for fetching a specific `BankAccount`
	///by the object ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBankAccountByV1IdRequest
	{
	}
	
	/// <summary>
	/// Response object returned by GetBankAccountByV1Id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBankAccountByV1IdResponse
	{
		
		/// <summary>
		/// Represents a bank account. For more information about 
		///linking a bank account to a Square account, see 
		///[Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_account")]
		public BankAccount Bank_account { get; set; }
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Request object to fetch a specific `BankAccount`
	///by the object ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBankAccountRequest
	{
	}
	
	/// <summary>
	/// Response object returned by `GetBankAccount`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBankAccountResponse
	{
		
		/// <summary>
		/// Represents a bank account. For more information about 
		///linking a bank account to a Square account, see 
		///[Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_account")]
		public BankAccount Bank_account { get; set; }
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// A request to get a `BreakType` by ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBreakTypeRequest
	{
	}
	
	/// <summary>
	/// The response to a request to get a `BreakType`. The response contains
	///the requested `BreakType` objects and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBreakTypeResponse
	{
		
		/// <summary>
		/// A defined break template that sets an expectation for possible `Break`
		///instances on a `Shift`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="break_type")]
		public BreakType Break_type { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeviceCodeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeviceCodeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="device_code")]
		public DeviceCode Device_code { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// A request to get an `EmployeeWage`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEmployeeWageRequest
	{
	}
	
	/// <summary>
	/// A response to a request to get an `EmployeeWage`. The response contains
	///the requested `EmployeeWage` objects and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEmployeeWageResponse
	{
		
		/// <summary>
		/// The hourly wage rate that an employee earns on a `Shift` for doing the job
		///specified by the `title` property of this object. Deprecated at version 2020-08-26. Use `TeamMemberWage` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_wage")]
		public EmployeeWage Employee_wage { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Describes a `GetInvoice` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInvoiceRequest
	{
	}
	
	/// <summary>
	/// Describes a `GetInvoice` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInvoiceResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Stores information about an invoice. You use the Invoices API to create and manage
		///invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public Invoice Invoice { get; set; }
	}
	
	/// <summary>
	/// Describes a request to retrieve a refund using 
	///[GetPaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/get-payment-refund).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPaymentRefundRequest
	{
	}
	
	/// <summary>
	/// Defines the response returned by [GetRefund](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/get-payment-refund).
	///
	///Note: If there are errors processing the request, the refund field might not be
	///present or it might be present in a FAILED state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPaymentRefundResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a refund of a payment made using Square. Contains information about
		///the original payment and the amount of money refunded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund")]
		public PaymentRefund Refund { get; set; }
	}
	
	/// <summary>
	/// Represents a refund of a payment made using Square. Contains information about
	///the original payment and the amount of money refunded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentRefund
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="app_fee_money")]
		public Money App_fee_money { get; set; }
		
		/// <summary>
		/// The timestamp of when the refund was created, in RFC 3339 format.
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The unique ID for this refund, generated by Square.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Id { get; set; }
		
		/// <summary>
		/// The location ID associated with the payment this refund is attached to.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The ID of the order associated with the refund.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The ID of the payment associated with this refund.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// Processing fees and fee adjustments assessed by Square for this refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processing_fee")]
		public ProcessingFee[] Processing_fee { get; set; }
		
		/// <summary>
		/// The reason for the refund.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Reason { get; set; }
		
		/// <summary>
		/// The refund's status:
		///- `PENDING` - Awaiting approval.
		///- `COMPLETED` - Successfully completed.
		///- `REJECTED` - The refund was rejected.
		///- `FAILED` - An error occurred.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Status { get; set; }
		
		/// <summary>
		/// The timestamp of when the refund was last updated, in RFC 3339 format.
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// Describes a request to retrieve a payment using 
	///[GetPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/get-payment).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPaymentRequest
	{
	}
	
	/// <summary>
	/// Defines the response returned by [GetPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/get-payment).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPaymentResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a payment processed by the Square API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment")]
		public Payment Payment { get; set; }
	}
	
	/// <summary>
	/// A request to get a `Shift` by ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetShiftRequest
	{
	}
	
	/// <summary>
	/// A response to a request to get a `Shift`. The response contains
	///the requested `Shift` object and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetShiftResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A record of the hourly rate, start, and end times for a single work shift
		///for an employee. This might include a record of the start and end times for breaks
		///taken during the shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shift")]
		public Shift Shift { get; set; }
	}
	
	/// <summary>
	/// A request to get a `TeamMemberWage`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTeamMemberWageRequest
	{
	}
	
	/// <summary>
	/// A response to a request to get a `TeamMemberWage`. The response contains
	///the requested `TeamMemberWage` objects and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTeamMemberWageResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The hourly wage rate that a team member earns on a `Shift` for doing the job
		///specified by the `title` property of this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member_wage")]
		public TeamMemberWage Team_member_wage { get; set; }
	}
	
	/// <summary>
	/// The hourly wage rate that a team member earns on a `Shift` for doing the job
	///specified by the `title` property of this object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamMemberWage
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hourly_rate")]
		public Money Hourly_rate { get; set; }
		
		/// <summary>
		/// The UUID for this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The `TeamMember` that this wage is assigned to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member_id")]
		public string Team_member_id { get; set; }
		
		/// <summary>
		/// The job title that this wage relates to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTerminalCheckoutRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTerminalCheckoutResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="checkout")]
		public TerminalCheckout Checkout { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTerminalRefundRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTerminalRefundResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refund")]
		public TerminalRefund Refund { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GiftCardActivityAdjustDecrementReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUSPICIOUS_ACTIVITY")]
		SUSPICIOUS_ACTIVITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BALANCE_ACCIDENTALLY_INCREASED")]
		BALANCE_ACCIDENTALLY_INCREASED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUPPORT_ISSUE")]
		SUPPORT_ISSUE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GiftCardActivityAdjustIncrementReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLIMENTARY")]
		COMPLIMENTARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUPPORT_ISSUE")]
		SUPPORT_ISSUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSACTION_VOIDED")]
		TRANSACTION_VOIDED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GiftCardActivityBlockReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHARGEBACK_BLOCK")]
		CHARGEBACK_BLOCK = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GiftCardActivityClearBalanceReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUSPICIOUS_ACTIVITY")]
		SUSPICIOUS_ACTIVITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REUSE_GIFTCARD")]
		REUSE_GIFTCARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_REASON")]
		UNKNOWN_REASON = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GiftCardActivityDeactivateReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUSPICIOUS_ACTIVITY")]
		SUSPICIOUS_ACTIVITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_REASON")]
		UNKNOWN_REASON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHARGEBACK_DEACTIVATE")]
		CHARGEBACK_DEACTIVATE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GiftCardActivityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVATE")]
		ACTIVATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOAD")]
		LOAD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REDEEM")]
		REDEEM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLEAR_BALANCE")]
		CLEAR_BALANCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEACTIVATE")]
		DEACTIVATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADJUST_INCREMENT")]
		ADJUST_INCREMENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADJUST_DECREMENT")]
		ADJUST_DECREMENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFUND")]
		REFUND = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNLINKED_ACTIVITY_REFUND")]
		UNLINKED_ACTIVITY_REFUND = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT")]
		IMPORT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCK")]
		BLOCK = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNBLOCK")]
		UNBLOCK = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT_REVERSAL")]
		IMPORT_REVERSAL = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GiftCardActivityUnblockReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHARGEBACK_UNBLOCK")]
		CHARGEBACK_UNBLOCK = 0,
	}
	
	/// <summary>
	/// Indicates the source that generated the gift card 
	///account number (GAN).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GiftCardGANSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE")]
		SQUARE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 1,
	}
	
	/// <summary>
	/// Indicates the gift card state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GiftCardStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEACTIVATED")]
		DEACTIVATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCKED")]
		BLOCKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GiftCardType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHYSICAL")]
		PHYSICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIGITAL")]
		DIGITAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Info
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InfoCode
	{
	}
	
	/// <summary>
	/// Object types to inline under their respective parent object in certain connect v2 responses
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InlineTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INLINE_NONE")]
		INLINE_NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INLINE_VARIATIONS")]
		INLINE_VARIATIONS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INLINE_ALL")]
		INLINE_ALL = 2,
	}
	
	/// <summary>
	/// Indicates whether Square should alert the merchant when the inventory quantity of a CatalogItemVariation is low.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InventoryAlertType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW_QUANTITY")]
		LOW_QUANTITY = 1,
	}
	
	/// <summary>
	/// Indicates how the inventory change was applied to a tracked product quantity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InventoryChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHYSICAL_COUNT")]
		PHYSICAL_COUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADJUSTMENT")]
		ADJUSTMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSFER")]
		TRANSFER = 2,
	}
	
	/// <summary>
	/// Indicates the state of a tracked item quantity in the lifecycle of goods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InventoryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM")]
		CUSTOM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_STOCK")]
		IN_STOCK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOLD")]
		SOLD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RETURNED_BY_CUSTOMER")]
		RETURNED_BY_CUSTOMER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESERVED_FOR_SALE")]
		RESERVED_FOR_SALE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOLD_ONLINE")]
		SOLD_ONLINE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORDERED_FROM_VENDOR")]
		ORDERED_FROM_VENDOR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECEIVED_FROM_VENDOR")]
		RECEIVED_FROM_VENDOR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_TRANSIT_TO")]
		IN_TRANSIT_TO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WASTE")]
		WASTE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNLINKED_RETURN")]
		UNLINKED_RETURN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPOSED")]
		COMPOSED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DECOMPOSED")]
		DECOMPOSED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUPPORTED_BY_NEWER_VERSION")]
		SUPPORTED_BY_NEWER_VERSION = 14,
	}
	
	/// <summary>
	/// Indicates the automatic payment method for an [invoice payment request](https://developer.squareup.com/reference/square_2021-08-18/objects/InvoicePaymentRequest).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceAutomaticPaymentSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARD_ON_FILE")]
		CARD_ON_FILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BANK_ON_FILE")]
		BANK_ON_FILE = 2,
	}
	
	/// <summary>
	/// Indicates where to render a custom field on the Square-hosted invoice page and in emailed or PDF 
	///copies of the invoice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceCustomFieldPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ABOVE_LINE_ITEMS")]
		ABOVE_LINE_ITEMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BELOW_LINE_ITEMS")]
		BELOW_LINE_ITEMS = 1,
	}
	
	/// <summary>
	/// Indicates how Square delivers the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to the customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceDeliveryMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMAIL")]
		EMAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHARE_MANUALLY")]
		SHARE_MANUALLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMS")]
		SMS = 2,
	}
	
	/// <summary>
	/// Describes query filters to apply.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceFilter
	{
		
		/// <summary>
		/// Limits the search to the specified customers, within the specified locations. 
		///Specifying a customer is optional. In the current implementation, 
		///a maximum of one customer can be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_ids")]
		public string[] Customer_ids { get; set; }
		
		/// <summary>
		/// Limits the search to the specified locations. A location is required. 
		///In the current implementation, only one location can be specified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string[] Location_ids { get; set; }
	}
	
	/// <summary>
	/// The status of a payment request reminder.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoicePaymentReminderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_APPLICABLE")]
		NOT_APPLICABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SENT")]
		SENT = 2,
	}
	
	/// <summary>
	/// Describes query criteria for searching invoices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceQuery
	{
		
		/// <summary>
		/// Describes query filters to apply.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public InvoiceFilter Filter { get; set; }
		
		/// <summary>
		/// Identifies the sort field and sort order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public InvoiceSort Sort { get; set; }
	}
	
	/// <summary>
	/// Identifies the sort field and sort order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceSort
	{
		
		/// <summary>
		/// The field to use for sorting.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// The order to use for sorting the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
	}
	
	/// <summary>
	/// Specifies the action for Square to take for processing the invoice. For example, 
	///email the invoice, charge a customer's card on file, or do nothing. DEPRECATED at
	///version 2021-01-21. The corresponding `request_method` field is replaced by the
	///`Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceRequestMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMAIL")]
		EMAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHARGE_CARD_ON_FILE")]
		CHARGE_CARD_ON_FILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHARE_MANUALLY")]
		SHARE_MANUALLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHARGE_BANK_ON_FILE")]
		CHARGE_BANK_ON_FILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMS")]
		SMS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMS_CHARGE_CARD_ON_FILE")]
		SMS_CHARGE_CARD_ON_FILE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMS_CHARGE_BANK_ON_FILE")]
		SMS_CHARGE_BANK_ON_FILE = 6,
	}
	
	/// <summary>
	/// Indicates the type of the payment request. For more information, see 
	///[Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BALANCE")]
		BALANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPOSIT")]
		DEPOSIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLMENT")]
		INSTALLMENT = 2,
	}
	
	/// <summary>
	/// The field to use for sorting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceSortField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVOICE_SORT_DATE")]
		INVOICE_SORT_DATE = 0,
	}
	
	/// <summary>
	/// Indicates the status of an invoice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DRAFT")]
		DRAFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNPAID")]
		UNPAID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCHEDULED")]
		SCHEDULED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARTIALLY_PAID")]
		PARTIALLY_PAID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAID")]
		PAID = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARTIALLY_REFUNDED")]
		PARTIALLY_REFUNDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFUNDED")]
		REFUNDED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAYMENT_PENDING")]
		PAYMENT_PENDING = 9,
	}
	
	/// <summary>
	/// An object describing a job that a team member is assigned to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobAssignment
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annual_rate")]
		public Money Annual_rate { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hourly_rate")]
		public Money Hourly_rate { get; set; }
		
		/// <summary>
		/// The title of the job.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="job_title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Job_title { get; set; }
		
		/// <summary>
		/// The current pay type for the job assignment used to
		///calculate the pay amount in a pay period.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pay_type")]
		public string Pay_type { get; set; }
		
		/// <summary>
		/// The planned hours per week for the job. Set if the job `PayType` is `SALARY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekly_hours")]
		public System.Nullable<System.Int32> Weekly_hours { get; set; }
	}
	
	/// <summary>
	/// Enumerates the possible pay types that a job can be assigned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobAssignmentPayType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HOURLY")]
		HOURLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SALARY")]
		SALARY = 2,
	}
	
	/// <summary>
	/// A request to link a customer to a gift card
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkCustomerToGiftCardRequest
	{
		
		/// <summary>
		/// The ID of the customer to be linked.
		/// Required
		/// Min length: 1
		/// Max length: 191
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Customer_id { get; set; }
	}
	
	/// <summary>
	/// A response that contains one `GiftCard` that was linked. The response might contain a set of `Error`
	///objects if the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkCustomerToGiftCardResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a Square gift card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card")]
		public GiftCard Gift_card { get; set; }
	}
	
	/// <summary>
	/// Request object for fetching all `BankAccount`
	///objects linked to a account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBankAccountsRequest
	{
		
		/// <summary>
		/// The pagination cursor returned by a previous call to this endpoint.
		///Use it in the next `ListBankAccounts` request to retrieve the next set 
		///of results.
		///
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Upper limit on the number of bank accounts to return in the response. 
		///Currently, 1000 is the largest supported limit. You can specify a limit 
		///of up to 1000 bank accounts. This is also the default limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Location ID. You can specify this optional filter 
		///to retrieve only the linked bank accounts belonging to a specific location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
	}
	
	/// <summary>
	/// Response object returned by ListBankAccounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBankAccountsResponse
	{
		
		/// <summary>
		/// List of BankAccounts associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_accounts")]
		public BankAccount[] Bank_accounts { get; set; }
		
		/// <summary>
		/// When a response is truncated, it includes a cursor that you can 
		///use in a subsequent request to fetch next set of bank accounts.
		///If empty, this is the final response.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// A request for a filtered set of `BreakType` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBreakTypesRequest
	{
		
		/// <summary>
		/// A pointer to the next page of `BreakType` results to fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of `BreakType` results to return per page. The number can range between 1
		///and 200. The default is 200.
		/// Minimum: 1
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 200)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Filter the returned `BreakType` results to only those that are associated with the
		///specified location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
	}
	
	/// <summary>
	/// The response to a request for a set of `BreakType` objects. The response contains
	///the requested `BreakType` objects and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBreakTypesResponse
	{
		
		/// <summary>
		///  A page of `BreakType` results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="break_types")]
		public BreakType[] Break_types { get; set; }
		
		/// <summary>
		/// The value supplied in the subsequent request to fetch the next page
		///of `BreakType` results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Retrieves details for a specific Card. Accessible via
	///HTTP requests at GET https://connect.squareup.com/v2/cards
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCardsRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Limit results to cards associated with the customer supplied.
		///By default, all cards owned by the merchant are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// Includes disabled cards.
		///By default, all enabled cards owned by the merchant are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_disabled")]
		public System.Nullable<System.Boolean> Include_disabled { get; set; }
		
		/// <summary>
		/// Limit results to cards associated with the reference_id supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Sorts the returned list by when the card was created with the specified order.
		///This field defaults to ASC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [ListCards](#endpoint-cards-listcards) endpoint.
	///
	///Note: if there are errors processing the request, the card field will not be
	///present.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCardsResponse
	{
		
		/// <summary>
		/// The requested list of `Card`s.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cards")]
		public Card[] Cards { get; set; }
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If empty,
		///this is the final response.
		///
		///See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCashDrawerShiftEventsRequest
	{
		
		/// <summary>
		/// Opaque cursor for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Number of resources to be returned in a page of results (200 by
		///default, 1000 max).
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(System.Int32.MinValue, 1000)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The ID of the location to list cash drawer shifts for.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Location_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCashDrawerShiftEventsResponse
	{
		
		/// <summary>
		/// Opaque cursor for fetching the next page. Cursor is not present in
		///the last page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// All of the events (payments, refunds, etc.) for a cash drawer during
		///the shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public CashDrawerShiftEvent[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCashDrawerShiftsRequest
	{
		
		/// <summary>
		/// The inclusive start time of the query on opened_at, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// Opaque cursor for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The exclusive end date of the query on opened_at, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		/// <summary>
		/// Number of cash drawer shift events in a page of results (200 by
		///default, 1000 max).
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(System.Int32.MinValue, 1000)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The ID of the location to query for a list of cash drawer shifts.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The order in which cash drawer shifts are listed in the response,
		///based on their opened_at field. Default value: ASC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCashDrawerShiftsResponse
	{
		
		/// <summary>
		/// Opaque cursor for fetching the next page of results. Cursor is not
		///present in the last page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A collection of CashDrawerShiftSummary objects for shifts that match
		///the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CashDrawerShiftSummary[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCatalogRequest
	{
		
		/// <summary>
		/// The specific version of the catalog objects to be included in the response. 
		///This allows you to retrieve historical
		///versions of objects. The specified version value is matched against
		///the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s' `version` attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// The pagination cursor returned in the previous response. Leave unset for an initial request.
		///The page size is currently set to be 100.
		///See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// An optional case-insensitive, comma-separated list of object types to retrieve.
		///
		///The valid values are defined in the [CatalogObjectType](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) enum, including
		///`ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`,
		///`MODIFIER`, `MODIFIER_LIST`, or `IMAGE`.
		///
		///If this is unspecified, the operation returns objects of all the types at the version of the Square API used to make the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string Types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCatalogResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If unset, this is the final response.
		///See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The CatalogObjects returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public CatalogObject[] Objects { get; set; }
	}
	
	/// <summary>
	/// Defines the query parameters that can be included in a request to the
	///[ListCustomerGroups](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/list-customer-groups) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCustomerGroupsRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for your original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results. 
		///The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [ListCustomerGroups](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/list-customer-groups) endpoint.
	///
	///Either `errors` or `groups` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCustomerGroupsResponse
	{
		
		/// <summary>
		/// A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint. This value is present only if the request
		///succeeded and additional results are available.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A list of customer groups belonging to the current seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public CustomerGroup[] Groups { get; set; }
	}
	
	/// <summary>
	/// Defines the valid parameters for requests to the `ListCustomerSegments` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCustomerSegmentsRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by previous calls to `ListCustomerSegments`.
		///This cursor is used to retrieve the next set of query results.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results. 
		///The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body for requests to the `ListCustomerSegments` endpoint.
	///
	///Either `errors` or `segments` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCustomerSegmentsResponse
	{
		
		/// <summary>
		/// A pagination cursor to be used in subsequent calls to `ListCustomerSegments`
		///to retrieve the next set of query results. The cursor is only present if the request succeeded and
		///additional results are available.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The list of customer segments belonging to the associated Square account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public CustomerSegment[] Segments { get; set; }
	}
	
	/// <summary>
	/// Defines the query parameters that can be included in a request to the
	///`ListCustomers` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCustomersRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for your original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results. 
		///The limit is ignored if it is less than 1 or greater than 100. The default value is 100.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Indicates how customers should be sorted.
		///
		///The default value is `DEFAULT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_field")]
		public string Sort_field { get; set; }
		
		/// <summary>
		/// Indicates whether customers should be sorted in ascending (`ASC`) or
		///descending (`DESC`) order.
		///
		///The default value is `ASC`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the `ListCustomers` endpoint.
	///
	///Either `errors` or `customers` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCustomersResponse
	{
		
		/// <summary>
		/// A pagination cursor to retrieve the next set of results for the
		///original query. A cursor is only present if the request succeeded and additional results
		///are available.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// An array of `Customer` objects that match the provided query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public Customer[] Customers { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDeviceCodesRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// If specified, only returns DeviceCodes of the specified location.
		///Returns DeviceCodes of all locations if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// If specified, only returns DeviceCodes targeting the specified product type.
		///Returns DeviceCodes of all product types if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_type")]
		public string Product_type { get; set; }
		
		/// <summary>
		/// If specified, returns DeviceCodes with the specified statuses.
		///Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string[] Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDeviceCodesResponse
	{
		
		/// <summary>
		/// A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint. This value is present only if the request
		///succeeded and additional results are available.
		///
		///See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The queried DeviceCode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device_codes")]
		public DeviceCode[] Device_codes { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the parameters for a `ListDisputeEvidence` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDisputeEvidenceRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
	}
	
	/// <summary>
	/// Defines the fields in a `ListDisputeEvidence` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDisputeEvidenceResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request.
		///If unset, this is the final response. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The list of evidence previously uploaded to the specified dispute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public DisputeEvidence[] Evidence { get; set; }
	}
	
	/// <summary>
	/// Defines the request parameters for the `ListDisputes` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDisputesRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The ID of the location for which to return a list of disputes. If not specified, the endpoint returns
		///all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`) associated with all locations.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The dispute states to filter the result.
		///If not specified, the endpoint returns all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`,
		///or `LOST`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="states")]
		public string[] States { get; set; }
	}
	
	/// <summary>
	/// Defines fields in a `ListDisputes` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDisputesResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request.
		///If unset, this is the final response. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The list of disputes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disputes")]
		public Dispute[] Disputes { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// A request for a set of `EmployeeWage` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEmployeeWagesRequest
	{
		
		/// <summary>
		/// A pointer to the next page of `EmployeeWage` results to fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Filter the returned wages to only those that are associated with the specified employee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// The maximum number of `EmployeeWage` results to return per page. The number can range between
		///1 and 200. The default is 200.
		/// Minimum: 1
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 200)]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// The response to a request for a set of `EmployeeWage` objects. The response contains
	///a set of `EmployeeWage` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEmployeeWagesResponse
	{
		
		/// <summary>
		/// The value supplied in the subsequent request to fetch the next page
		///of `EmployeeWage` results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// A page of `EmployeeWage` results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_wages")]
		public EmployeeWage[] Employee_wages { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEmployeesRequest
	{
		
		/// <summary>
		/// The token required to retrieve the specified page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The number of employees to be returned on each page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// Specifies the EmployeeStatus to filter the employee by.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEmployeesResponse
	{
		
		/// <summary>
		/// The token to be used to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="employees")]
		public Employee[] Employees { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Returns a list of gift card activities. You can optionally specify a filter to retrieve a
	///subset of activites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGiftCardActivitiesRequest
	{
		
		/// <summary>
		/// The timestamp for the beginning of the reporting period, in RFC 3339 format.
		///Inclusive. Default: The current time minus one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///If you do not provide the cursor, the call returns the first page of the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The timestamp for the end of the reporting period, in RFC 3339 format.
		///Inclusive. Default: The current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		/// <summary>
		/// If you provide a gift card ID, the endpoint returns activities that belong 
		///to the specified gift card. Otherwise, the endpoint returns all gift card activities for 
		///the seller.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Gift_card_id { get; set; }
		
		/// <summary>
		/// If you provide a limit value, the endpoint returns the specified number 
		///of results (or less) per page. A maximum value is 100. The default value is 50.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// If you provide a location ID, the endpoint returns gift card activities for that location. 
		///Otherwise, the endpoint returns gift card activities for all locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The order in which the endpoint returns the activities, based on `created_at`.
		///- `ASC` - Oldest to newest.
		///- `DESC` - Newest to oldest (default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
		
		/// <summary>
		/// If you provide a type, the endpoint returns gift card activities of this type. 
		///Otherwise, the endpoint returns all types of gift card activities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A response that contains one or more `GiftCardActivity`. The response might contain a set of `Error` objects
	///if the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGiftCardActivitiesResponse
	{
		
		/// <summary>
		/// When a response is truncated, it includes a cursor that you can use in a
		///subsequent request to fetch the next set of activities. If empty, this is
		///the final response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Gift card activities retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card_activities")]
		public GiftCardActivity[] Gift_card_activities { get; set; }
	}
	
	/// <summary>
	/// A request to list gift cards. You can optionally specify a filter to retrieve a subset of 
	///gift cards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGiftCardsRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///If a cursor is not provided, it returns the first page of the results. 
		///For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// If a value is provided, returns only the gift cards linked to the specified customer
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// If a value is provided, it returns only that number of results per page.
		///The maximum number of results allowed per page is 50. The default value is 30.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// If the state is provided, it returns the gift cards in the specified state 
		///(see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)).
		///Otherwise, it returns the gift cards of all states.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// If a type is provided, gift cards of this type are returned 
		///(see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)).
		///If no type is provided, it returns gift cards of all types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A response that contains one or more `GiftCard`. The response might contain a set of `Error`
	///objects if the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGiftCardsResponse
	{
		
		/// <summary>
		/// When a response is truncated, it includes a cursor that you can use in a
		///subsequent request to fetch the next set of gift cards. If empty, this is
		///the final response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Gift cards retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_cards")]
		public GiftCard[] Gift_cards { get; set; }
	}
	
	/// <summary>
	/// Describes a `ListInvoice` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInvoicesRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint. 
		///Provide this cursor to retrieve the next set of results for your original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of invoices to return (200 is the maximum `limit`). 
		///If not provided, the server uses a default limit of 100 invoices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The ID of the location for which to list invoices.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Location_id { get; set; }
	}
	
	/// <summary>
	/// Describes a `ListInvoice` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInvoicesResponse
	{
		
		/// <summary>
		/// When a response is truncated, it includes a cursor that you can use in a 
		///subsequent request to retrieve the next set of invoices. If empty, this is the final 
		///response. 
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The invoices retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoices")]
		public Invoice[] Invoices { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in requests to
	///the __ListLocations__ endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationsRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the __ListLocations__ endpoint.
	///
	///One of `errors` or `locations` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The business locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
	}
	
	/// <summary>
	/// A request to list `LoyaltyProgram`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLoyaltyProgramsRequest
	{
	}
	
	/// <summary>
	/// A response that contains all loyalty programs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLoyaltyProgramsResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A list of `LoyaltyProgram` for the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programs")]
		public LoyaltyProgram[] Programs { get; set; }
	}
	
	/// <summary>
	/// Represents a Square loyalty program. Loyalty programs define how buyers can earn points and redeem points for rewards. 
	///Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. 
	///For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyProgram
	{
		
		/// <summary>
		/// Defines how buyers can earn loyalty points.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accrual_rules")]
		public LoyaltyProgramAccrualRule[] Accrual_rules { get; set; }
		
		/// <summary>
		/// The timestamp when the program was created, in RFC 3339 format.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Describes when the loyalty program expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_policy")]
		public LoyaltyProgramExpirationPolicy Expiration_policy { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the loyalty program. Updates to 
		///the loyalty program do not modify the identifier.
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Id { get; set; }
		
		/// <summary>
		/// The [locations](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) at which the program is active.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string[] Location_ids { get; set; }
		
		/// <summary>
		/// The list of rewards for buyers, sorted by ascending points.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reward_tiers")]
		public LoyaltyProgramRewardTier[] Reward_tiers { get; set; }
		
		/// <summary>
		/// Whether the program is currently active.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Represents the naming used for loyalty points.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="terminology")]
		public LoyaltyProgramTerminology Terminology { get; set; }
		
		/// <summary>
		/// The timestamp when the reward was last updated, in RFC 3339 format.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// Defines an accrual rule, which is how buyers can earn points.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyProgramAccrualRule
	{
		
		/// <summary>
		/// The type of the accrual rule that defines how buyers can earn points.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accrual_type")]
		public string Accrual_type { get; set; }
		
		/// <summary>
		/// When the accrual rule is item-based or category-based, this field specifies the ID 
		///of the [catalog object](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) that buyers can purchase to earn points. 
		///If `accrual_type` is `ITEM_VARIATION`, the object is an item variation. 
		///If `accrual_type` is `CATEGORY`, the object is a category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_id")]
		public string Catalog_object_id { get; set; }
		
		/// <summary>
		/// When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field 
		///lists the IDs of any `CATEGORY` catalog objects that are excluded from points accrual. 
		///
		///You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects) 
		///endpoint to retrieve information about the excluded categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excluded_category_ids")]
		public string[] Excluded_category_ids { get; set; }
		
		/// <summary>
		/// When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field 
		///lists the IDs of any `ITEM_VARIATION` catalog objects that are excluded from points accrual. 
		///
		///You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects) 
		///endpoint to retrieve information about the excluded item variations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excluded_item_variation_ids")]
		public string[] Excluded_item_variation_ids { get; set; }
		
		/// <summary>
		/// The number of points that 
		///buyers earn based on the `accrual_type`.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="points")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Points { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spend_amount_money")]
		public Money Spend_amount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visit_minimum_amount_money")]
		public Money Visit_minimum_amount_money { get; set; }
	}
	
	/// <summary>
	/// Describes when the loyalty program expires.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyProgramExpirationPolicy
	{
		
		/// <summary>
		/// The number of months before points expire, in `P[n]M` RFC 3339 duration format. For example, a value of `P12M` represents a duration of 12 months. 
		///Points are valid through the last day of the month in which they are scheduled to expire. For example, with a  `P12M` duration, points earned on July 6, 2020 expire on August 1, 2021.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_duration")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Expiration_duration { get; set; }
	}
	
	/// <summary>
	/// Represents a reward tier in a loyalty program. A reward tier defines how buyers can redeem points for a reward, such as the number of points required and the value and scope of the discount. A loyalty program can offer multiple reward tiers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyProgramRewardTier
	{
		
		/// <summary>
		/// The timestamp when the reward tier was created, in RFC 3339 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details
		///are now defined using a catalog pricing rule and other catalog objects. For more information, see
		///[Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public LoyaltyProgramRewardDefinition Definition { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the reward tier.
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the reward tier.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The points exchanged for the reward tier.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="points")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Points { get; set; }
		
		/// <summary>
		/// A reference to a Catalog object at a specific version. In general this is
		///used as an entry point into a graph of catalog objects, where the objects exist
		///at a specific version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricing_rule_reference")]
		public CatalogObjectReference Pricing_rule_reference { get; set; }
	}
	
	/// <summary>
	/// Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details
	///are now defined using a catalog pricing rule and other catalog objects. For more information, see
	///[Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyProgramRewardDefinition
	{
		
		/// <summary>
		/// The list of catalog objects to which this reward can be applied. They are either all item-variation ids or category ids, depending on the `type` field.
		///DEPRECATED at version 2020-12-16. You can find this information in the `product_set_data.product_ids_any` field
		///of the `PRODUCT_SET` catalog object referenced by the pricing rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object_ids")]
		public string[] Catalog_object_ids { get; set; }
		
		/// <summary>
		/// The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. You can find this information
		///in the `discount_data.discount_type` field of the `DISCOUNT` catalog object referenced by the pricing rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discount_type")]
		public string Discount_type { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixed_discount_money")]
		public Money Fixed_discount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_discount_money")]
		public Money Max_discount_money { get; set; }
		
		/// <summary>
		/// The fixed percentage of the discount. Present if `discount_type` is `FIXED_PERCENTAGE`.
		///For example, a 7.25% off discount will be represented as "7.25". DEPRECATED at version 2020-12-16. You can find this
		///information in the `discount_data.percentage` field of the `DISCOUNT` catalog object referenced by the pricing rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage_discount")]
		public string Percentage_discount { get; set; }
		
		/// <summary>
		/// Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. You can find this information in the
		///`discount_target_scope` field of the `PRICING_RULE` catalog object and the `product_set_data` field of the `PRODUCT_SET`
		///catalog object referenced by the pricing rule. For `ORDER` scopes, the target scope is `WHOLE_PURCHASE` and `all_products`
		///is true. For `ITEM_VARIATION` and `CATEGORY` scopes, the target scope is `LINE_ITEM` and `product_ids_any` is a list of
		///catalog object IDs of the given type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
	}
	
	/// <summary>
	/// Represents the naming used for loyalty points.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyProgramTerminology
	{
		
		/// <summary>
		/// A singular unit for a point (for example, 1 point is called 1 star).
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="one")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string One { get; set; }
		
		/// <summary>
		/// A plural unit for point (for example, 10 points is called 10 stars).
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="other")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Other { get; set; }
	}
	
	/// <summary>
	/// Request object for the [ListMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/list-merchants) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMerchantsRequest
	{
		
		/// <summary>
		/// The cursor generated by the previous response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public System.Nullable<System.Int32> Cursor { get; set; }
	}
	
	/// <summary>
	/// The response object returned by the [ListMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/list-merchants) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMerchantsResponse
	{
		
		/// <summary>
		/// If the  response is truncated, the cursor to use in next  request to fetch next set of objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public System.Nullable<System.Int32> Cursor { get; set; }
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The requested `Merchant` entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant")]
		public Merchant[] Merchant { get; set; }
	}
	
	/// <summary>
	/// Represents a Square seller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Merchant
	{
		
		/// <summary>
		/// The business name of the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business_name")]
		public string Business_name { get; set; }
		
		/// <summary>
		/// The country code associated with the merchant account, in ISO 3166 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The currency associated with the merchant account, in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The Square-issued ID of the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The language code associated with the merchant account, in BCP 47 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_code")]
		public string Language_code { get; set; }
		
		/// <summary>
		/// The ID of the main `Location` for this merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="main_location_id")]
		public string Main_location_id { get; set; }
		
		/// <summary>
		/// The merchant status, active or inactive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Describes a request to list refunds using 
	///[ListPaymentRefunds](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/list-payment-refunds).
	///
	///The maximum results per page is 100.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPaymentRefundsRequest
	{
		
		/// <summary>
		/// The timestamp for the beginning of the requested reporting period, in RFC 3339 format.
		///
		///Default: The current time minus one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The timestamp for the end of the requested reporting period, in RFC 3339 format.
		///
		///Default: The current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		/// <summary>
		/// The maximum number of results to be returned in a single page.
		///
		///It is possible to receive fewer results than the specified limit on a given page.
		///
		///If the supplied value is greater than 100, no more than 100 results are returned.
		///
		///Default: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Limit results to the location supplied. By default, results are returned
		///for all locations associated with the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The order in which results are listed:
		///- `ASC` - Oldest to newest.
		///- `DESC` - Newest to oldest (default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
		
		/// <summary>
		/// If provided, only refunds with the given source type are returned.
		///- `CARD` - List refunds only for payments where `CARD` was specified as the payment
		///source.
		///
		///Default: If omitted, refunds are returned regardless of the source type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_type")]
		public string Source_type { get; set; }
		
		/// <summary>
		/// If provided, only refunds with the given status are returned.
		///For a list of refund status values, see [PaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/objects/PaymentRefund).
		///
		///Default: If omitted, refunds are returned regardless of their status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Defines the response returned by [ListPaymentRefunds](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/list-payment-refunds).
	///
	///Either `errors` or `refunds` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPaymentRefundsResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If empty,
		///this is the final response.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The list of requested refunds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public PaymentRefund[] Refunds { get; set; }
	}
	
	/// <summary>
	/// Describes a request to list payments using 
	///[ListPayments](https://developer.squareup.com/reference/square_2021-08-18/payments-api/list-payments).
	///
	///The maximum results per page is 100.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPaymentsRequest
	{
		
		/// <summary>
		/// The timestamp for the beginning of the reporting period, in RFC 3339 format.
		///Inclusive. Default: The current time minus one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// The brand of the payment card (for example, VISA).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_brand")]
		public string Card_brand { get; set; }
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The timestamp for the end of the reporting period, in RFC 3339 format.
		///
		///Default: The current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		/// <summary>
		/// The last four digits of a payment card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_4")]
		public string Last_4 { get; set; }
		
		/// <summary>
		/// The maximum number of results to be returned in a single page.
		///It is possible to receive fewer results than the specified limit on a given page.
		///
		///The default value of 100 is also the maximum allowed value. If the provided value is 
		///greater than 100, it is ignored and the default value is used instead.
		///
		///Default: `100`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Limit results to the location supplied. By default, results are returned
		///for the default (main) location associated with the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The order in which results are listed:
		///- `ASC` - Oldest to newest.
		///- `DESC` - Newest to oldest (default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
		
		/// <summary>
		/// The exact amount in the `total_money` for a payment.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	/// <summary>
	/// Defines the response returned by [ListPayments](https://developer.squareup.com/reference/square_2021-08-18/payments-api/list-payments).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPaymentsResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If empty,
		///this is the final response.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The requested list of payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public Payment[] Payments { get; set; }
	}
	
	/// <summary>
	/// Defines the query parameters that can be included in
	///a request to the [ListRefunds](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-refunds) endpoint.
	///
	///Deprecated - recommend using [SearchOrders](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRefundsRequest
	{
		
		/// <summary>
		/// The beginning of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time minus one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The end of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		/// <summary>
		/// The order in which results are listed in the response (`ASC` for
		///oldest first, `DESC` for newest first).
		///
		///Default value: `DESC`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [ListRefunds](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-refunds) endpoint.
	///
	///One of `errors` or `refunds` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRefundsResponse
	{
		
		/// <summary>
		/// A pagination cursor for retrieving the next set of results,
		///if any remain. Provide this value as the `cursor` parameter in a subsequent
		///request to this endpoint.
		///
		///See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// An array of refunds that match your query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public Refund[] Refunds { get; set; }
	}
	
	/// <summary>
	/// Represents a `ListSites` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSitesRequest
	{
	}
	
	/// <summary>
	/// Represents a `ListSites` response. The response can include either `sites` or `errors`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSitesResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The sites that belong to the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public Site[] Sites { get; set; }
	}
	
	/// <summary>
	/// Represents a Square Online site, which is an online store for a Square seller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Site
	{
		
		/// <summary>
		/// The timestamp of when the site was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The domain of the site (without the protocol). For example, `mysite1.square.site`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The Square-assigned ID of the site.
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether the site is published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_published")]
		public System.Nullable<System.Boolean> Is_published { get; set; }
		
		/// <summary>
		/// The title of the site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="site_title")]
		public string Site_title { get; set; }
		
		/// <summary>
		/// The timestamp of when the site was last updated, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// Defines parameters in a
	///[ListSubscriptionEvents](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/list-subscription-events)
	///endpoint request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSubscriptionEventsRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for the original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The upper limit on the number of subscription events to return
		///in the response.
		///
		///Default: `200`
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response from the
	///[ListSubscriptionEvents](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/list-subscription-events)
	///endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSubscriptionEventsResponse
	{
		
		/// <summary>
		/// When a response is truncated, it includes a cursor that you can
		///use in a subsequent request to fetch the next set of events.
		///If empty, this is the final response.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The `SubscriptionEvents` retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription_events")]
		public SubscriptionEvent[] Subscription_events { get; set; }
	}
	
	/// <summary>
	/// Describes changes to subscription and billing states.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionEvent
	{
		
		/// <summary>
		/// The date, in YYYY-MM-DD format (for
		///example, 2013-01-15), when the subscription event went into effect.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effective_date")]
		public string Effective_date { get; set; }
		
		/// <summary>
		/// The ID of the subscription event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public Info Info { get; set; }
		
		/// <summary>
		/// The ID of the subscription plan associated with the subscription.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plan_id")]
		public string Plan_id { get; set; }
		
		/// <summary>
		/// Type of the subscription event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscription_event_type")]
		public string Subscription_event_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTeamMemberBookingProfilesRequest
	{
		
		/// <summary>
		/// Indicates whether to include only bookable team members in the returned result (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookable_only")]
		public System.Nullable<System.Boolean> Bookable_only { get; set; }
		
		/// <summary>
		/// The cursor for paginating through the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of results to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Indicates whether to include only team members enabled at the given location in the returned result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTeamMemberBookingProfilesResponse
	{
		
		/// <summary>
		/// The cursor for paginating through the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The list of team member booking profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member_booking_profiles")]
		public TeamMemberBookingProfile[] Team_member_booking_profiles { get; set; }
	}
	
	/// <summary>
	/// The booking profile of a seller's team member, including the team member's ID, display name, description and whether the team member can be booked as a service provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamMemberBookingProfile
	{
		
		/// <summary>
		/// The description of the team member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display name of the team member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// Indicates whether the team member can be booked through the Bookings API or the seller's online booking channel or site (`true) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_bookable")]
		public System.Nullable<System.Boolean> Is_bookable { get; set; }
		
		/// <summary>
		/// The URL of the team member's image for the bookings profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile_image_url")]
		public string Profile_image_url { get; set; }
		
		/// <summary>
		/// The ID of the [TeamMember](https://developer.squareup.com/reference/square_2021-08-18/objects/TeamMember) object for the team member associated with the booking profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member_id")]
		public string Team_member_id { get; set; }
	}
	
	/// <summary>
	/// A request for a set of `TeamMemberWage` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTeamMemberWagesRequest
	{
		
		/// <summary>
		/// A pointer to the next page of `EmployeeWage` results to fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of `TeamMemberWage` results to return per page. The number can range between
		///1 and 200. The default is 200.
		/// Minimum: 1
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 200)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Filter the returned wages to only those that are associated with the
		///specified team member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member_id")]
		public string Team_member_id { get; set; }
	}
	
	/// <summary>
	/// The response to a request for a set of `TeamMemberWage` objects. The response contains
	///a set of `TeamMemberWage` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTeamMemberWagesResponse
	{
		
		/// <summary>
		/// The value supplied in the subsequent request to fetch the next page
		///of `TeamMemberWage` results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A page of `TeamMemberWage` results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member_wages")]
		public TeamMemberWage[] Team_member_wages { get; set; }
	}
	
	/// <summary>
	/// Defines the query parameters that can be included in
	///a request to the [ListTransactions](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-transactions) endpoint.
	///
	///Deprecated - recommend using [SearchOrders](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTransactionsRequest
	{
		
		/// <summary>
		/// The beginning of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time minus one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The end of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		/// <summary>
		/// The order in which results are listed in the response (`ASC` for
		///oldest first, `DESC` for newest first).
		///
		///Default value: `DESC`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [ListTransactions](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-transactions) endpoint.
	///
	///One of `errors` or `transactions` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTransactionsResponse
	{
		
		/// <summary>
		/// A pagination cursor for retrieving the next set of results,
		///if any remain. Provide this value as the `cursor` parameter in a subsequent
		///request to this endpoint.
		///
		///See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// An array of transactions that match your query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public Transaction[] Transactions { get; set; }
	}
	
	/// <summary>
	/// A request for a set of `WorkweekConfig` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkweekConfigsRequest
	{
		
		/// <summary>
		/// A pointer to the next page of `WorkweekConfig` results to fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of `WorkweekConfigs` results to return per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// The response to a request for a set of `WorkweekConfig` objects. The response contains
	///the requested `WorkweekConfig` objects and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkweekConfigsResponse
	{
		
		/// <summary>
		/// The value supplied in the subsequent request to fetch the next page of
		///`EmployeeWage` results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A page of `EmployeeWage` results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workweek_configs")]
		public WorkweekConfig[] Workweek_configs { get; set; }
	}
	
	/// <summary>
	/// Sets the day of the week and hour of the day that a business starts a
	///workweek. This is used to calculate overtime pay.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkweekConfig
	{
		
		/// <summary>
		/// A read-only timestamp in RFC 3339 format; presented in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The UUID for this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The local time at which a business week ends. Represented as a
		///string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are
		///truncated).
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_of_day_local_time")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Start_of_day_local_time { get; set; }
		
		/// <summary>
		/// The day of the week on which a business week ends for
		///compensation purposes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_of_week")]
		public string Start_of_week { get; set; }
		
		/// <summary>
		/// A read-only timestamp in RFC 3339 format; presented in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// Used for resolving concurrency issues. The request fails if the version
		///provided does not match the server version at the time of the request. If not provided,
		///Square executes a blind write; potentially overwriting data from another
		///write.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// The capabilities a location may have.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LocationCapability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREDIT_CARD_PROCESSING")]
		CREDIT_CARD_PROCESSING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTOMATIC_TRANSFERS")]
		AUTOMATIC_TRANSFERS = 1,
	}
	
	/// <summary>
	/// The status of the location, whether a location is active or inactive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LocationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
	}
	
	/// <summary>
	/// A location's physical or mobile type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHYSICAL")]
		PHYSICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOBILE")]
		MOBILE = 1,
	}
	
	/// <summary>
	/// The type of mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoyaltyAccountMappingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHONE")]
		PHONE = 0,
	}
	
	/// <summary>
	/// Filter events by date time range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventDateTimeFilter
	{
		
		/// <summary>
		/// Represents a generic time range. The start and end values are
		///represented in RFC 3339 format. Time ranges are customized to be
		///inclusive or exclusive based on the needs of a particular endpoint.
		///Refer to the relevant endpoint-specific documentation to determine
		///how time ranges are handled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public TimeRange Created_at { get; set; }
	}
	
	/// <summary>
	/// The filtering criteria. If the request specifies multiple filters, 
	///the endpoint uses a logical AND to evaluate them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventFilter
	{
		
		/// <summary>
		/// Filter events by date time range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_time_filter")]
		public LoyaltyEventDateTimeFilter Date_time_filter { get; set; }
		
		/// <summary>
		/// Filter events by location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_filter")]
		public LoyaltyEventLocationFilter Location_filter { get; set; }
		
		/// <summary>
		/// Filter events by loyalty account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loyalty_account_filter")]
		public LoyaltyEventLoyaltyAccountFilter Loyalty_account_filter { get; set; }
		
		/// <summary>
		/// Filter events by the order associated with the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_filter")]
		public LoyaltyEventOrderFilter Order_filter { get; set; }
		
		/// <summary>
		/// Filter events by event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_filter")]
		public LoyaltyEventTypeFilter Type_filter { get; set; }
	}
	
	/// <summary>
	/// Filter events by location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventLocationFilter
	{
		
		/// <summary>
		/// The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs for loyalty events to query.
		///If multiple values are specified, the endpoint uses 
		///a logical OR to combine them.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string[] Location_ids { get; set; }
	}
	
	/// <summary>
	/// Filter events by loyalty account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventLoyaltyAccountFilter
	{
		
		/// <summary>
		/// The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) associated with loyalty events.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loyalty_account_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Loyalty_account_id { get; set; }
	}
	
	/// <summary>
	/// Filter events by the order associated with the event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventOrderFilter
	{
		
		/// <summary>
		/// The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) associated with the event.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Order_id { get; set; }
	}
	
	/// <summary>
	/// Filter events by event type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventTypeFilter
	{
		
		/// <summary>
		/// The loyalty event types used to filter the result.
		///If multiple values are specified, the endpoint uses a 
		///logical OR to combine them.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	/// <summary>
	/// Represents a query used to search for loyalty events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyEventQuery
	{
		
		/// <summary>
		/// The filtering criteria. If the request specifies multiple filters, 
		///the endpoint uses a logical AND to evaluate them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public LoyaltyEventFilter Filter { get; set; }
	}
	
	/// <summary>
	/// Defines whether the event was generated by the Square Point of Sale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoyaltyEventSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE")]
		SQUARE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOYALTY_API")]
		LOYALTY_API = 1,
	}
	
	/// <summary>
	/// The type of the loyalty event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoyaltyEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCUMULATE_POINTS")]
		ACCUMULATE_POINTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_REWARD")]
		CREATE_REWARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REDEEM_REWARD")]
		REDEEM_REWARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE_REWARD")]
		DELETE_REWARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADJUST_POINTS")]
		ADJUST_POINTS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRE_POINTS")]
		EXPIRE_POINTS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 6,
	}
	
	/// <summary>
	/// The type of the accrual rule that defines how buyers can earn points.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoyaltyProgramAccrualRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VISIT")]
		VISIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPEND")]
		SPEND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ITEM_VARIATION")]
		ITEM_VARIATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CATEGORY")]
		CATEGORY = 3,
	}
	
	/// <summary>
	/// Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. Discount details
	///are now defined using a catalog pricing rule and other catalog objects. For more information, see
	///[Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoyaltyProgramRewardDefinitionScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORDER")]
		ORDER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ITEM_VARIATION")]
		ITEM_VARIATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CATEGORY")]
		CATEGORY = 2,
	}
	
	/// <summary>
	/// The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. Discount details
	///are now defined using a catalog pricing rule and other catalog objects. For more information, see
	///[Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoyaltyProgramRewardDefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED_AMOUNT")]
		FIXED_AMOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED_PERCENTAGE")]
		FIXED_PERCENTAGE = 1,
	}
	
	/// <summary>
	/// Indicates whether the program is currently active.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoyaltyProgramStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
	}
	
	/// <summary>
	/// The status of the loyalty reward.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoyaltyRewardStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ISSUED")]
		ISSUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REDEEMED")]
		REDEEMED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 2,
	}
	
	/// <summary>
	/// Unit of area used to measure a quantity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MeasurementUnitArea
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_ACRE")]
		IMPERIAL_ACRE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_SQUARE_INCH")]
		IMPERIAL_SQUARE_INCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_SQUARE_FOOT")]
		IMPERIAL_SQUARE_FOOT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_SQUARE_YARD")]
		IMPERIAL_SQUARE_YARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_SQUARE_MILE")]
		IMPERIAL_SQUARE_MILE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_SQUARE_CENTIMETER")]
		METRIC_SQUARE_CENTIMETER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_SQUARE_METER")]
		METRIC_SQUARE_METER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_SQUARE_KILOMETER")]
		METRIC_SQUARE_KILOMETER = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MeasurementUnitGeneric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNIT")]
		UNIT = 0,
	}
	
	/// <summary>
	/// The unit of length used to measure a quantity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MeasurementUnitLength
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_INCH")]
		IMPERIAL_INCH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_FOOT")]
		IMPERIAL_FOOT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_YARD")]
		IMPERIAL_YARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_MILE")]
		IMPERIAL_MILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_MILLIMETER")]
		METRIC_MILLIMETER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_CENTIMETER")]
		METRIC_CENTIMETER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_METER")]
		METRIC_METER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_KILOMETER")]
		METRIC_KILOMETER = 7,
	}
	
	/// <summary>
	/// Unit of time used to measure a quantity (a duration).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MeasurementUnitTime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_MILLISECOND")]
		GENERIC_MILLISECOND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_SECOND")]
		GENERIC_SECOND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_MINUTE")]
		GENERIC_MINUTE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_HOUR")]
		GENERIC_HOUR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_DAY")]
		GENERIC_DAY = 4,
	}
	
	/// <summary>
	/// Describes the type of this unit and indicates which field contains the unit information. This is an ‘open’ enum.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MeasurementUnitUnitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_CUSTOM")]
		TYPE_CUSTOM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_AREA")]
		TYPE_AREA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_LENGTH")]
		TYPE_LENGTH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_VOLUME")]
		TYPE_VOLUME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_WEIGHT")]
		TYPE_WEIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_GENERIC")]
		TYPE_GENERIC = 5,
	}
	
	/// <summary>
	/// The unit of volume used to measure a quantity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MeasurementUnitVolume
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_FLUID_OUNCE")]
		GENERIC_FLUID_OUNCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_SHOT")]
		GENERIC_SHOT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_CUP")]
		GENERIC_CUP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_PINT")]
		GENERIC_PINT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_QUART")]
		GENERIC_QUART = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERIC_GALLON")]
		GENERIC_GALLON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_CUBIC_INCH")]
		IMPERIAL_CUBIC_INCH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_CUBIC_FOOT")]
		IMPERIAL_CUBIC_FOOT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_CUBIC_YARD")]
		IMPERIAL_CUBIC_YARD = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_MILLILITER")]
		METRIC_MILLILITER = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_LITER")]
		METRIC_LITER = 10,
	}
	
	/// <summary>
	/// Unit of weight used to measure a quantity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MeasurementUnitWeight
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_WEIGHT_OUNCE")]
		IMPERIAL_WEIGHT_OUNCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_POUND")]
		IMPERIAL_POUND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERIAL_STONE")]
		IMPERIAL_STONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_MILLIGRAM")]
		METRIC_MILLIGRAM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_GRAM")]
		METRIC_GRAM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_KILOGRAM")]
		METRIC_KILOGRAM = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MerchantStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ObtainTokenRequest
	{
		
		/// <summary>
		/// The Square-issued ID of your application, available from the
		///[developer dashboard](https://developer.squareup.com/apps).
		/// Required
		/// Max length: 191
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Client_id { get; set; }
		
		/// <summary>
		/// The Square-issued application secret for your application, available
		///from the [developer dashboard](https://developer.squareup.com/apps).
		/// Required
		/// Min length: 2
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Client_secret { get; set; }
		
		/// <summary>
		/// The authorization code to exchange.
		///This is required if `grant_type` is set to `authorization_code`, to indicate that
		///the application wants to exchange an authorization code for an OAuth access token.
		/// Min length: 0
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Code { get; set; }
		
		/// <summary>
		/// Specifies the method to request an OAuth access token.
		///Valid values are: `authorization_code`, `refresh_token`, and `migration_token`
		/// Required
		/// Min length: 10
		/// Max length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grant_type")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Grant_type { get; set; }
		
		/// <summary>
		/// Legacy OAuth access token obtained using a Connect API version prior
		///to 2019-03-13. This parameter is required if `grant_type` is set to
		///`migration_token` to indicate that the application wants to get a replacement
		///OAuth access token. The response also returns a refresh token.
		///For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
		/// Min length: 2
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migration_token")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Migration_token { get; set; }
		
		/// <summary>
		/// The redirect URL assigned in the [developer dashboard](https://developer.squareup.com/apps).
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_uri")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Redirect_uri { get; set; }
		
		/// <summary>
		/// A valid refresh token for generating a new OAuth access token.
		///A valid refresh token is required if `grant_type` is set to `refresh_token` , to indicate the application wants a replacement for an expired OAuth access token.
		/// Min length: 2
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Refresh_token { get; set; }
		
		/// <summary>
		/// A JSON list of strings representing the permissions the application is requesting.
		///For example: "`["MERCHANT_PROFILE_READ","PAYMENTS_READ","BANK_ACCOUNTS_READ"]`"
		///The access token returned in the response is granted the permissions
		///that comprise the intersection between the requested list of permissions, and those
		///that belong to the provided refresh token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		/// <summary>
		/// A boolean indicating a request for a short-lived access token.
		///The short-lived access token returned in the response will expire in 24 hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="short_lived")]
		public System.Nullable<System.Boolean> Short_lived { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ObtainTokenResponse
	{
		
		/// <summary>
		/// A valid OAuth access token. OAuth access tokens are 64 bytes long.
		///Provide the access token in a header with every request to Connect API
		///endpoints. See [OAuth API: Walkthrough](https://developer.squareup.com/docs/oauth-api/walkthrough)
		///for more information.
		/// Min length: 2
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Access_token { get; set; }
		
		/// <summary>
		/// The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
		/// Min length: 20
		/// Max length: 48
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(48)]
		public string Expires_at { get; set; }
		
		/// <summary>
		/// Then OpenID token belonging to this this person. Only present if the
		///OPENID scope is included in the authorize request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id_token")]
		public string Id_token { get; set; }
		
		/// <summary>
		/// The ID of the authorizing merchant's business.
		/// Min length: 8
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Merchant_id { get; set; }
		
		/// <summary>
		/// __LEGACY FIELD__. The ID of the subscription plan the merchant signed
		///up for. Only present if the merchant signed up for a subscription during
		///authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan_id")]
		public string Plan_id { get; set; }
		
		/// <summary>
		/// A refresh token. OAuth refresh tokens are 64 bytes long.
		///For more information, see [OAuth access token management](https://developer.squareup.com/docs/oauth-api/how-it-works#oauth-access-token-management).
		/// Min length: 2
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Refresh_token { get; set; }
		
		/// <summary>
		/// A boolean indicating the access token is a short-lived access token.
		///The short-lived access token returned in the response will expire in 24 hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="short_lived")]
		public System.Nullable<System.Boolean> Short_lived { get; set; }
		
		/// <summary>
		/// __LEGACY FIELD__. The ID of a subscription plan the merchant signed up
		///for. Only present if the merchant signed up for a subscription during authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription_id")]
		public string Subscription_id { get; set; }
		
		/// <summary>
		/// This value is always _bearer_.
		/// Min length: 2
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Token_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnboardAppointmentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderCreated
	{
		
		/// <summary>
		/// The timestamp for when the order was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The ID of the seller location that this order is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The order's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The state of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The version number, which is incremented each time an update is committed to the order.
		///Orders that were not created through the API do not include a version number and
		///therefore cannot be updated.
		///
		///[Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderCreatedObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="order_created")]
		public OrderCreated Order_created { get; set; }
	}
	
	/// <summary>
	/// A lightweight description of an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that is returned when 
	///`returned_entries` is `true` on a [SearchOrdersRequest](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderEntry
	{
		
		/// <summary>
		/// The location ID the order belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The ID of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The version number, which is incremented each time an update is committed to the order.
		///Orders that were not created through the API do not include a version number and
		///therefore cannot be updated.
		///
		///[Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// The schedule type of the pickup fulfillment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderFulfillmentPickupDetailsScheduleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCHEDULED")]
		SCHEDULED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASAP")]
		ASAP = 1,
	}
	
	/// <summary>
	/// The current state of this fulfillment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderFulfillmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROPOSED")]
		PROPOSED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESERVED")]
		RESERVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREPARED")]
		PREPARED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 5,
	}
	
	/// <summary>
	/// The type of fulfillment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderFulfillmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PICKUP")]
		PICKUP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHIPMENT")]
		SHIPMENT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderFulfillmentUpdated
	{
		
		/// <summary>
		/// The timestamp for when the order was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The fulfillments that were updated with this version change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfillment_update")]
		public OrderFulfillmentUpdatedUpdate[] Fulfillment_update { get; set; }
		
		/// <summary>
		/// The ID of the seller location that this order is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The order's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The state of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The timestamp for when the order was last updated, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// The version number, which is incremented each time an update is committed to the order.
		///Orders that were not created through the API do not include a version number and
		///therefore cannot be updated.
		///
		///[Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Information about fulfillment updates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderFulfillmentUpdatedUpdate
	{
		
		/// <summary>
		/// A unique ID that identifies the fulfillment only within this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfillment_uid")]
		public string Fulfillment_uid { get; set; }
		
		/// <summary>
		/// The state of the fulfillment after the change. The state might be equal to `old_state` if a non-state
		///field was changed on the fulfillment (such as the tracking number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="new_state")]
		public string New_state { get; set; }
		
		/// <summary>
		/// The state of the fulfillment before the change.
		///The state is not populated if the fulfillment is created with this new `Order` version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="old_state")]
		public string Old_state { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderFulfillmentUpdatedObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="order_fulfillment_updated")]
		public OrderFulfillmentUpdated Order_fulfillment_updated { get; set; }
	}
	
	/// <summary>
	/// Indicates whether this is a line-item or order-level discount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderLineItemDiscountScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_DISCOUNT_SCOPE")]
		OTHER_DISCOUNT_SCOPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINE_ITEM")]
		LINE_ITEM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORDER")]
		ORDER = 2,
	}
	
	/// <summary>
	/// Indicates how the discount is applied to the associated line item or order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderLineItemDiscountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_DISCOUNT")]
		UNKNOWN_DISCOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED_PERCENTAGE")]
		FIXED_PERCENTAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED_AMOUNT")]
		FIXED_AMOUNT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VARIABLE_PERCENTAGE")]
		VARIABLE_PERCENTAGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VARIABLE_AMOUNT")]
		VARIABLE_AMOUNT = 4,
	}
	
	/// <summary>
	/// Represents the line item type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderLineItemItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ITEM")]
		ITEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM_AMOUNT")]
		CUSTOM_AMOUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIFT_CARD")]
		GIFT_CARD = 2,
	}
	
	/// <summary>
	/// Indicates whether this is a line-item or order-level tax.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderLineItemTaxScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_TAX_SCOPE")]
		OTHER_TAX_SCOPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINE_ITEM")]
		LINE_ITEM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORDER")]
		ORDER = 2,
	}
	
	/// <summary>
	/// Indicates how the tax is applied to the associated line item or order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderLineItemTaxType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_TAX")]
		UNKNOWN_TAX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITIVE")]
		ADDITIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUSIVE")]
		INCLUSIVE = 2,
	}
	
	/// <summary>
	/// Represents a phase in the process of calculating order totals.
	///Service charges are applied after the indicated phase.
	///
	///[Read more about how order totals are calculated.](https://developer.squareup.com/docs/orders-api/how-it-works#how-totals-are-calculated)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderServiceChargeCalculationPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTOTAL_PHASE")]
		SUBTOTAL_PHASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOTAL_PHASE")]
		TOTAL_PHASE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderServiceChargeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO_GRATUITY")]
		AUTO_GRATUITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM")]
		CUSTOM = 1,
	}
	
	/// <summary>
	/// The state of the order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPEN")]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderUpdated
	{
		
		/// <summary>
		/// The timestamp for when the order was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The ID of the seller location that this order is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The order's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// The state of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The timestamp for when the order was last updated, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// The version number, which is incremented each time an update is committed to the order.
		///Orders that were not created through the API do not include a version number and
		///therefore cannot be updated.
		///
		///[Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderUpdatedObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="order_updated")]
		public OrderUpdated Order_updated { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in requests to the
	///[PayOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/pay-order) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayOrderRequest
	{
		
		/// <summary>
		/// A value you specify that uniquely identifies this request among requests you have sent. If
		///you are unsure whether a particular payment request was completed successfully, you can reattempt
		///it with the same idempotency key without worrying about duplicate payments.
		///
		///For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// Required
		/// Min length: 1
		/// Max length: 192
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The version of the order being paid. If not supplied, the latest version will be paid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_version")]
		public System.Nullable<System.Int32> Order_version { get; set; }
		
		/// <summary>
		/// The IDs of the [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) to collect.
		///The payment total must match the order total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_ids")]
		public string[] Payment_ids { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of a request to the
	///[PayOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/pay-order) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayOrderResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Contains all information related to a single order to process with Square,
		///including line items that specify the products to purchase. `Order` objects also
		///include information about any associated tenders, refunds, and returns.
		///
		///All Connect V2 Transactions have all been converted to Orders including all associated
		///itemization data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentOptions
	{
		
		/// <summary>
		/// Indicates whether the `Payment` objects created from this `TerminalCheckout` are automatically
		///`COMPLETED` or left in an `APPROVED` state for later modification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autocomplete")]
		public System.Nullable<System.Boolean> Autocomplete { get; set; }
	}
	
	/// <summary>
	/// Indicates the Square product used to generate an inventory change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Product
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_POS")]
		SQUARE_POS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTERNAL_API")]
		EXTERNAL_API = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BILLING")]
		BILLING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPOINTMENTS")]
		APPOINTMENTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVOICES")]
		INVOICES = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONLINE_STORE")]
		ONLINE_STORE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAYROLL")]
		PAYROLL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DASHBOARD")]
		DASHBOARD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ITEM_LIBRARY_IMPORT")]
		ITEM_LIBRARY_IMPORT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TERMINAL_API")]
		TERMINAL_API = 0,
	}
	
	/// <summary>
	/// Describes a `PublishInvoice` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishInvoiceRequest
	{
		
		/// <summary>
		/// A unique string that identifies the `PublishInvoice` request. If you do not 
		///provide `idempotency_key` (or provide an empty string as the value), the endpoint 
		///treats each request as independent.
		///
		///For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to publish.
		///This must match the current version of the invoice; otherwise, the request is rejected.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public int Version { get; set; }
	}
	
	/// <summary>
	/// Describes a `PublishInvoice` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishInvoiceResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Stores information about an invoice. You use the Invoices API to create and manage
		///invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public Invoice Invoice { get; set; }
	}
	
	/// <summary>
	/// A whole number or unreduced fractional ratio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuantityRatio
	{
		
		/// <summary>
		/// The whole or fractional quantity as the numerator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// The whole or fractional quantity as the denominator. 
		///In the case of fractional quantity this field is the denominator and quantity is the numerator.
		///When unspecified, the value is `1`. For example, when `quantity=3` and `quantity_donominator` is unspecified,
		///the quantity ratio is `3` or `3/1`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_denominator")]
		public System.Nullable<System.Int32> Quantity_denominator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reason
	{
	}
	
	/// <summary>
	/// A request to redeem a loyalty reward.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RedeemLoyaltyRewardRequest
	{
		
		/// <summary>
		/// A unique string that identifies this `RedeemLoyaltyReward` request. 
		///Keys can be any valid string, but must be unique for every request.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the reward is redeemed.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Location_id { get; set; }
	}
	
	/// <summary>
	/// A response that includes the `LoyaltyEvent` published for redeeming the reward.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RedeemLoyaltyRewardResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Provides information about a loyalty event. 
		///For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public LoyaltyEvent Event { get; set; }
	}
	
	/// <summary>
	/// Describes a request to refund a payment using [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RefundPaymentRequest
	{
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money. `Money` fields can be signed or unsigned.
		///Fields that do not explicitly define whether they are signed or unsigned are
		///considered unsigned and can only hold positive amounts. For signed fields, the
		///sign of the value indicates the purpose of the money transfer. See
		///[Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		///for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="app_fee_money")]
		public Money App_fee_money { get; set; }
		
		/// <summary>
		///  A unique string that identifies this `RefundPayment` request. The key can be any valid string
		///but must be unique for every `RefundPayment` request.
		///
		///For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The unique ID of the payment being refunded.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// A description of the reason for the refund.
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Defines the response returned by 
	///[RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment).
	///
	///If there are errors processing the request, the `refund` field might not be
	///present, or it might be present with a status of `FAILED`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RefundPaymentResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a refund of a payment made using Square. Contains information about
		///the original payment and the amount of money refunded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund")]
		public PaymentRefund Refund { get; set; }
	}
	
	/// <summary>
	/// Indicates a refund's current status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RefundStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPROVED")]
		APPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECTED")]
		REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
	}
	
	/// <summary>
	/// Defines the parameters that can be included in the body of
	///a request to the [RegisterDomain](https://developer.squareup.com/reference/square_2021-08-18/apple-pay-api/register-domain) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterDomainRequest
	{
		
		/// <summary>
		/// A domain name as described in RFC-1034 that will be registered with ApplePay.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Domain_name { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [RegisterDomain](https://developer.squareup.com/reference/square_2021-08-18/apple-pay-api/register-domain) endpoint.
	///
	///Either `errors` or `status` are present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterDomainResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The status of the domain registration.
		///
		///See [RegisterDomainResponseStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/RegisterDomainResponseStatus) for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The status of the domain registration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RegisterDomainResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERIFIED")]
		VERIFIED = 1,
	}
	
	/// <summary>
	/// Defines the fields that are included in the request body of
	///a request to the [RemoveGroupFromCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/remove-group-from-customer) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveGroupFromCustomerRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [RemoveGroupFromCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/remove-group-from-customer)
	///endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveGroupFromCustomerResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenewTokenRequest
	{
		
		/// <summary>
		/// The token you want to renew.
		/// Min length: 2
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Access_token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenewTokenResponse
	{
		
		/// <summary>
		/// The renewed access token.
		///This value might be different from the `access_token` you provided in your request.
		///You provide this token in a header with every request to Connect API endpoints.
		///See [Request and response headers](https://developer.squareup.com/docs/api/connect/v2/#requestandresponseheaders) for the format of this header.
		/// Min length: 2
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Access_token { get; set; }
		
		/// <summary>
		/// The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
		/// Min length: 20
		/// Max length: 48
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(48)]
		public string Expires_at { get; set; }
		
		/// <summary>
		/// The ID of the authorizing merchant's business.
		/// Min length: 8
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Merchant_id { get; set; }
		
		/// <summary>
		/// __LEGACY FIELD__. The ID of the subscription plan the merchant signed
		///up for. Only present if the merchant signed up for a subscription during
		///authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan_id")]
		public string Plan_id { get; set; }
		
		/// <summary>
		/// __LEGACY FIELD__. The ID of the merchant subscription associated with
		///the authorization. Only present if the merchant signed up for a subscription
		///during authorization..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription_id")]
		public string Subscription_id { get; set; }
		
		/// <summary>
		/// This value is always _bearer_.
		/// Min length: 2
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Token_type { get; set; }
	}
	
	/// <summary>
	/// Defines parameters in a
	///[ResumeSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/resume-subscription) endpoint
	///request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResumeSubscriptionRequest
	{
	}
	
	/// <summary>
	/// Defines parameters in a
	///[ResumeSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/resume-subscription) endpoint
	///response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResumeSubscriptionResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a customer subscription to a subscription plan.
		///For an overview of the `Subscription` type, see
		///[Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Subscription Subscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveBookingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveBookingResponse
	{
		
		/// <summary>
		/// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		///at a given location to a requesting customer in one or more appointment segments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booking")]
		public Booking Booking { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveBusinessBookingProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveBusinessBookingProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="business_booking_profile")]
		public BusinessBookingProfile Business_booking_profile { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Retrieves details for a specific Card. Accessible via
	///HTTP requests at GET https://connect.squareup.com/v2/cards/{card_id}
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCardRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [RetrieveCard](#endpoint-cards-retrievecard) endpoint.
	///
	///Note: if there are errors processing the request, the card field will not be
	///present.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCardResponse
	{
		
		/// <summary>
		/// Represents the payment details of a card to be used for payments. These
		///details are determined by the payment token generated by Web Payments SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public Card Card { get; set; }
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCashDrawerShiftRequest
	{
		
		/// <summary>
		/// The ID of the location to retrieve cash drawer shifts from.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Location_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCashDrawerShiftResponse
	{
		
		/// <summary>
		/// This model gives the details of a cash drawer shift.
		///The cash_payment_money, cash_refund_money, cash_paid_in_money,
		///and cash_paid_out_money fields are all computed by summing their respective
		///event types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_drawer_shift")]
		public CashDrawerShift Cash_drawer_shift { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCatalogObjectRequest
	{
		
		/// <summary>
		/// Requests objects as of a specific version of the catalog. This allows you to retrieve historical
		///versions of objects. The value to retrieve a specific version of an object can be found
		///in the version field of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_version")]
		public System.Nullable<System.Int64> Catalog_version { get; set; }
		
		/// <summary>
		/// If `true`, the response will include additional objects that are related to the
		///requested object, as follows:
		///
		///If the `object` field of the response contains a `CatalogItem`, its associated
		///`CatalogCategory`, `CatalogTax`, `CatalogImage` and `CatalogModifierList` objects will
		///be returned in the `related_objects` field of the response. If the `object` field of
		///the response contains a `CatalogItemVariation`, its parent `CatalogItem` will be returned
		///in the `related_objects` field of the response.
		///
		///Default value: `false`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_related_objects")]
		public System.Nullable<System.Boolean> Include_related_objects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCatalogObjectResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The wrapper object for the Catalog entries of a given object type.
		///
		///The type of a particular `CatalogObject` is determined by the value of the
		///`type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
		///For example, the following list shows some instances of `CatalogObject` of a given `type` and
		///their corresponding data attribute that can be set:
		///- For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
		///- For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
		///- For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
		///- For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
		///- For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
		///- For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
		///- For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
		///- For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
		///- For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
		///- For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
		///- For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
		///- For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
		///- For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
		///
		///
		///For a more detailed discussion of the Catalog data model, please see the
		///[Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public CatalogObject Object { get; set; }
		
		/// <summary>
		/// A list of `CatalogObject`s referenced by the object in the `object` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related_objects")]
		public CatalogObject[] Related_objects { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that can be included in a request to the
	///[RetrieveCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/retrieve-customer-group) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCustomerGroupRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [RetrieveCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/retrieve-customer-group) endpoint.
	///
	///Either `errors` or `group` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCustomerGroupResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a group of customer profiles. 
		///
		///Customer groups can be created, be modified, and have their membership defined using 
		///the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public CustomerGroup Group { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in requests to the `RetrieveCustomer`
	///endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCustomerRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the `RetrieveCustomer` endpoint.
	///
	///Either `errors` or `customer` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCustomerResponse
	{
		
		/// <summary>
		/// Represents a Square customer profile in the Customer Directory of a Square seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer Customer { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the valid parameters for requests to the `RetrieveCustomerSegmentRequest` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCustomerSegmentRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body for requests to the `RetrieveCustomerSegment` endpoint.
	///
	///Either `errors` or `segment` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveCustomerSegmentResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a group of customer profiles that match one or more predefined filter criteria. 
		///
		///Segments (also known as Smart Groups) are defined and created within the Customer Directory in the
		///Square Seller Dashboard or Point of Sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public CustomerSegment Segment { get; set; }
	}
	
	/// <summary>
	/// Defines the parameters for a `RetrieveDisputeEvidence` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveDisputeEvidenceRequest
	{
	}
	
	/// <summary>
	/// Defines the fields in a `RetrieveDisputeEvidence` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveDisputeEvidenceResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public DisputeEvidence Evidence { get; set; }
	}
	
	/// <summary>
	/// Defines the request parameters for the `RetrieveDispute` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveDisputeRequest
	{
	}
	
	/// <summary>
	/// Defines fields in a `RetrieveDispute` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveDisputeResponse
	{
		
		/// <summary>
		/// Represents a dispute a cardholder initiated with their bank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dispute")]
		public Dispute Dispute { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveEmployeeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveEmployeeResponse
	{
		
		/// <summary>
		/// An employee object that is used by the external API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee")]
		public Employee Employee { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// A request to retrieve gift cards by their GANs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveGiftCardFromGANRequest
	{
		
		/// <summary>
		/// The gift card account number (GAN) of the gift card to retrieve.
		///The maximum length of a GAN is 255 digits to account for third-party GANs that have been imported.
		///Square-issued gift cards have 16-digit GANs.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gan")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Gan { get; set; }
	}
	
	/// <summary>
	/// A response that contains a `GiftCard`. This response might contain a set of `Error` objects
	///if the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveGiftCardFromGANResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a Square gift card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card")]
		public GiftCard Gift_card { get; set; }
	}
	
	/// <summary>
	/// A request to retrieve gift cards by using nonces.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveGiftCardFromNonceRequest
	{
		
		/// <summary>
		/// The nonce of the gift card to retrieve.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Nonce { get; set; }
	}
	
	/// <summary>
	/// A response that contains a `GiftCard`. The response might contain a set of `Error` objects
	///if the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveGiftCardFromNonceResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a Square gift card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card")]
		public GiftCard Gift_card { get; set; }
	}
	
	/// <summary>
	/// A request to retrieve digital gift cards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveGiftCardRequest
	{
	}
	
	/// <summary>
	/// A response that contains a `GiftCard`. The response might contain a set of `Error` objects
	///if the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveGiftCardResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a Square gift card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card")]
		public GiftCard Gift_card { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveInventoryAdjustmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveInventoryAdjustmentResponse
	{
		
		/// <summary>
		/// Represents a change in state or quantity of product inventory at a
		///particular time and location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjustment")]
		public InventoryAdjustment Adjustment { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveInventoryChangesRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for the original query.
		///
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
		///list. An empty list queries all locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string Location_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveInventoryChangesResponse
	{
		
		/// <summary>
		/// The set of inventory changes for the requested object and locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changes")]
		public InventoryChange[] Changes { get; set; }
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If unset,
		///this is the final response.
		///
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveInventoryCountRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for the original query.
		///
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
		///list. An empty list queries all locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string Location_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveInventoryCountResponse
	{
		
		/// <summary>
		/// The current calculated inventory counts for the requested object and
		///locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public InventoryCount[] Counts { get; set; }
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If unset,
		///this is the final response.
		///
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveInventoryPhysicalCountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveInventoryPhysicalCountResponse
	{
		
		/// <summary>
		/// Represents the quantity of an item variation that is physically present
		///at a specific location, verified by a seller or a seller's employee. For example,
		///a physical count might come from an employee counting the item variations on
		///hand or from syncing with an external system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public InventoryPhysicalCount Count { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveInventoryTransferRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveInventoryTransferResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents the transfer of a quantity of product inventory at a
		///particular time from one location to another.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer")]
		public InventoryTransfer Transfer { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the request body for
	///the __RetrieveLocation__ endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveLocationRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that the
	///[RetrieveLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/retrieve-location) endpoint returns
	///in a response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveLocationResponse
	{
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// A request to retrieve a loyalty account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveLoyaltyAccountRequest
	{
	}
	
	/// <summary>
	/// A response that includes the loyalty account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveLoyaltyAccountResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Describes a loyalty account. For more information, see
		///[Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loyalty_account")]
		public LoyaltyAccount Loyalty_account { get; set; }
	}
	
	/// <summary>
	/// A request to retrieve the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) that belongs to a seller. A seller can have only one loyalty program.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveLoyaltyProgramRequest
	{
	}
	
	/// <summary>
	/// A response that contains the loyalty program.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveLoyaltyProgramResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a Square loyalty program. Loyalty programs define how buyers can earn points and redeem points for rewards. 
		///Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. 
		///For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="program")]
		public LoyaltyProgram Program { get; set; }
	}
	
	/// <summary>
	/// A request to retrieve a loyalty reward.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveLoyaltyRewardRequest
	{
	}
	
	/// <summary>
	/// A response that includes the loyalty reward.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveLoyaltyRewardResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reward")]
		public LoyaltyReward Reward { get; set; }
	}
	
	/// <summary>
	/// Request object for the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveMerchantRequest
	{
	}
	
	/// <summary>
	/// The response object returned by the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveMerchantResponse
	{
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a Square seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant")]
		public Merchant Merchant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveObsMigrationProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveOrderRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveOrderResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Contains all information related to a single order to process with Square,
		///including line items that specify the products to purchase. `Order` objects also
		///include information about any associated tenders, refunds, and returns.
		///
		///All Connect V2 Transactions have all been converted to Orders including all associated
		///itemization data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
	}
	
	/// <summary>
	/// Represents a `RetrieveSnippet` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveSnippetRequest
	{
	}
	
	/// <summary>
	/// Represents a `RetrieveSnippet` response. The response can include either `snippet` or `errors`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveSnippetResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public Snippet Snippet { get; set; }
	}
	
	/// <summary>
	/// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Snippet
	{
		
		/// <summary>
		/// The snippet code, which can contain valid HTML, JavaScript, or both.
		/// Required
		/// Min length: 1
		/// Max length: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string Content { get; set; }
		
		/// <summary>
		/// The timestamp of when the snippet was initially added to the site, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The Square-assigned ID for the snippet.
		/// Max length: 48
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(48)]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the site that contains the snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="site_id")]
		public string Site_id { get; set; }
		
		/// <summary>
		/// The timestamp of when the snippet was last updated on the site, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// Defines parameters in a
	///[RetrieveSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/retrieve-subscription) endpoint request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveSubscriptionRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response from the
	///[RetrieveSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/retrieve-subscription) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveSubscriptionResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a customer subscription to a subscription plan.
		///For an overview of the `Subscription` type, see
		///[Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Subscription Subscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveTeamMemberBookingProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveTeamMemberBookingProfileResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The booking profile of a seller's team member, including the team member's ID, display name, description and whether the team member can be booked as a service provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member_booking_profile")]
		public TeamMemberBookingProfile Team_member_booking_profile { get; set; }
	}
	
	/// <summary>
	/// Represents a retrieve request for a `TeamMember` object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveTeamMemberRequest
	{
	}
	
	/// <summary>
	/// Represents a response from a retrieve request containing a `TeamMember` object or error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveTeamMemberResponse
	{
		
		/// <summary>
		/// The errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A record representing an individual team member for a business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member")]
		public TeamMember Team_member { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveTransactionRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [RetrieveTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/retrieve-transaction) endpoint.
	///
	///One of `errors` or `transaction` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveTransactionResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a transaction processed with Square, either with the
		///Connect API or with Square Point of Sale.
		///
		///The `tenders` field of this object lists all methods of payment used to pay in
		///the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	/// <summary>
	/// Represents a retrieve request for the wage setting of a team member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveWageSettingRequest
	{
	}
	
	/// <summary>
	/// Represents a response from a retrieve request containing the specified `WageSetting` object or error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveWageSettingResponse
	{
		
		/// <summary>
		/// The errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// An object representing a team member's wage information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wage_setting")]
		public WageSetting Wage_setting { get; set; }
	}
	
	/// <summary>
	/// An object representing a team member's wage information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WageSetting
	{
		
		/// <summary>
		/// The timestamp, in RFC 3339 format, describing when the wage setting object was created.
		///For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Whether the team member is exempt from the overtime rules of the seller's country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_overtime_exempt")]
		public System.Nullable<System.Boolean> Is_overtime_exempt { get; set; }
		
		/// <summary>
		/// Required. The ordered list of jobs that the team member is assigned to.
		///The first job assignment is considered the team member's primary job.
		///
		///The minimum length is 1 and the maximum length is 12.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="job_assignments")]
		public JobAssignment[] Job_assignments { get; set; }
		
		/// <summary>
		/// The unique ID of the `TeamMember` whom this wage setting describes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member_id")]
		public string Team_member_id { get; set; }
		
		/// <summary>
		/// The timestamp, in RFC 3339 format, describing when the wage setting object was last updated.
		///For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// Used for resolving concurrency issues. The request fails if the version
		///provided does not match the server version at the time of the request. If not provided,
		///Square executes a blind write, potentially overwriting data from another write. For more information,
		///see [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeTokenRequest
	{
		
		/// <summary>
		/// The access token of the merchant whose token you want to revoke.
		///Do not provide a value for merchant_id if you provide this parameter.
		/// Min length: 2
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Access_token { get; set; }
		
		/// <summary>
		/// The Square issued ID for your application, available from the
		///[developer dashboard](https://developer.squareup.com/apps).
		/// Max length: 191
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Client_id { get; set; }
		
		/// <summary>
		/// The ID of the merchant whose token you want to revoke.
		///Do not provide a value for access_token if you provide this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		/// <summary>
		/// If `true`, terminate the given single access token, but do not
		///terminate the entire authorization.
		///Default: `false`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revoke_only_access_token")]
		public System.Nullable<System.Boolean> Revoke_only_access_token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeTokenResponse
	{
		
		/// <summary>
		/// If the request is successful, this is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RiskEvaluationRiskLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NORMAL")]
		NORMAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODERATE")]
		MODERATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 3,
	}
	
	/// <summary>
	/// A query filter to search for availabilities by.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchAvailabilityFilter
	{
		
		/// <summary>
		/// The query expression to search for availabilities for an existing booking by matching the specified `booking_id` value.
		///This is commonly used to reschedule an appointment.
		///If this expression is specified, the `location_id` and `segment_filters` expressions are not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booking_id")]
		public string Booking_id { get; set; }
		
		/// <summary>
		/// The query expression to search for availabilities matching the specified seller location IDs.
		///This query expression is not applicable when `booking_id` is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// The list of segment filters to apply. A query with `n` segment filters returns availabilities with `n` segments per
		///availability. It is not applicable when `booking_id` is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment_filters")]
		public SegmentFilter[] Segment_filters { get; set; }
		
		/// <summary>
		/// Represents a generic time range. The start and end values are
		///represented in RFC 3339 format. Time ranges are customized to be
		///inclusive or exclusive based on the needs of a particular endpoint.
		///Refer to the relevant endpoint-specific documentation to determine
		///how time ranges are handled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_at_range")]
		public TimeRange Start_at_range { get; set; }
	}
	
	/// <summary>
	/// A query filter to search for appointment segments by.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SegmentFilter
	{
		
		/// <summary>
		/// The ID of the [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) representing the service booked in this segment.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service_variation_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Service_variation_id { get; set; }
		
		/// <summary>
		/// A filter to select resources based on an exact field value. For any given
		///value, the value can only be in one property. Depending on the field, either
		///all properties can be set or only a subset will be available.
		///
		///Refer to the documentation of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_member_id_filter")]
		public FilterValue Team_member_id_filter { get; set; }
	}
	
	/// <summary>
	/// Query conditions to search for availabilities of bookings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchAvailabilityQuery
	{
		
		/// <summary>
		/// A query filter to search for availabilities by.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public SearchAvailabilityFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchAvailabilityRequest
	{
		
		/// <summary>
		/// Query conditions to search for availabilities of bookings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public SearchAvailabilityQuery Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchAvailabilityResponse
	{
		
		/// <summary>
		/// List of slots available for booking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilities")]
		public Availability[] Availabilities { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the request body for the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchCatalogItemsRequest
	{
		
		/// <summary>
		/// The category id query expression to return items containing the specified category IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_ids")]
		public string[] Category_ids { get; set; }
		
		/// <summary>
		/// The pagination token, returned in the previous response, used to fetch the next batch of pending results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The customer-attribute filter to return items or item variations matching the specified
		///custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in
		///a single call to the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_attribute_filters")]
		public CustomAttributeFilter[] Custom_attribute_filters { get; set; }
		
		/// <summary>
		/// The enabled-location query expression to return items and item variations having specified enabled locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled_location_ids")]
		public string[] Enabled_location_ids { get; set; }
		
		/// <summary>
		/// The maximum number of results to return per page. The default value is 100.
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(System.Int32.MinValue, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The product types query expression to return items or item variations having the specified product types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_types")]
		public string[] Product_types { get; set; }
		
		/// <summary>
		/// The order to sort the results by item names. The default sort order is ascending (`ASC`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
		
		/// <summary>
		/// The stock-level query expression to return item variations with the specified stock levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stock_levels")]
		public string[] Stock_levels { get; set; }
		
		/// <summary>
		/// The text filter expression to return items or item variations containing specified text in
		///the `name`, `description`, or `abbreviation` attribute value of an item, or in
		///the `name`, `sku`, or `upc` attribute value of an item variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text_filter")]
		public string Text_filter { get; set; }
	}
	
	/// <summary>
	/// Defines supported stock levels of the item inventory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SearchCatalogItemsRequestStockLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUT")]
		OUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW")]
		LOW = 1,
	}
	
	/// <summary>
	/// Defines the response body returned from the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchCatalogItemsResponse
	{
		
		/// <summary>
		/// Pagination token used in the next request to return more of the search result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Returned items matching the specified query expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CatalogObject[] Items { get; set; }
		
		/// <summary>
		/// Ids of returned item variations matching the specified query expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matched_variation_ids")]
		public string[] Matched_variation_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchCatalogObjectsRequest
	{
		
		/// <summary>
		/// Return objects modified after this [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), in RFC 3339
		///format, e.g., `2016-09-04T23:59:33.123Z`. The timestamp is exclusive - objects with a
		///timestamp equal to `begin_time` will not be included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// The pagination cursor returned in the previous response. Leave unset for an initial request.
		///See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// If `true`, deleted objects will be included in the results. Deleted objects will have their
		///`is_deleted` field set to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_deleted_objects")]
		public System.Nullable<System.Boolean> Include_deleted_objects { get; set; }
		
		/// <summary>
		/// If `true`, the response will include additional objects that are related to the
		///requested object, as follows:
		///
		///If a CatalogItem is returned in the object field of the response,
		///its associated CatalogCategory, CatalogTax objects,
		///CatalogImage objects and CatalogModifierList objects
		///will be included in the `related_objects` field of the response.
		///
		///If a CatalogItemVariation is returned in the object field of the
		///response, its parent CatalogItem will be included in the `related_objects` field of
		///the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_related_objects")]
		public System.Nullable<System.Boolean> Include_related_objects { get; set; }
		
		/// <summary>
		/// A limit on the number of results to be returned in a single page. The limit is advisory -
		///the implementation may return more or fewer results. If the supplied limit is negative, zero, or
		///is higher than the maximum limit of 1,000, it will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The desired set of object types to appear in the search results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_types")]
		public string[] Object_types { get; set; }
		
		/// <summary>
		/// A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
		///
		///Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
		///Any combination of the following types may be used together:
		///- [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact)
		///- [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix)
		///- [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange)
		///- [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute)
		///- [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText)
		///All other query types cannot be combined with any others.
		///
		///When a query filter is based on an attribute, the attribute must be searchable.
		///Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
		///
		///* Searchable attribute and objects queryable by searchable attributes **
		///- `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
		///- `description`: `CatalogItem`, `CatalogItemOptionValue`
		///- `abbreviation`: `CatalogItem`
		///- `upc`: `CatalogItemVariation`
		///- `sku`: `CatalogItemVariation`
		///- `caption`: `CatalogImage`
		///- `display_name`: `CatalogItemOption`
		///
		///For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use
		///the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public CatalogQuery Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchCatalogObjectsResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If unset, this is the final response.
		///See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// When the associated product catalog was last updated. Will
		///match the value for `end_time` or `cursor` if either field is included in the `SearchCatalog` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latest_time")]
		public string Latest_time { get; set; }
		
		/// <summary>
		/// The CatalogObjects returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public CatalogObject[] Objects { get; set; }
		
		/// <summary>
		/// A list of CatalogObjects referenced by the objects in the `objects` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related_objects")]
		public CatalogObject[] Related_objects { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the request body of a request to the
	///`SearchCustomers` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchCustomersRequest
	{
		
		/// <summary>
		/// Include the pagination cursor in subsequent calls to this endpoint to retrieve
		///the next set of results associated with the original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results. 
		///The limit is ignored if it is less than the minimum or greater than the maximum value. The default value is 100.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int64> Limit { get; set; }
		
		/// <summary>
		/// Represents a query (including filtering criteria, sorting criteria, or both) used to search
		///for customer profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public CustomerQuery Query { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the `SearchCustomers` endpoint.
	///
	///Either `errors` or `customers` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchCustomersResponse
	{
		
		/// <summary>
		/// A pagination cursor that can be used during subsequent calls
		///to `SearchCustomers` to retrieve the next set of results associated
		///with the original query. Pagination cursors are only present when
		///a request succeeds and additional results are available.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// An array of `Customer` objects that match a query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public Customer[] Customers { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Describes a `SearchInvoices` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchInvoicesRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint. 
		///Provide this cursor to retrieve the next set of results for your original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of invoices to return (200 is the maximum `limit`). 
		///If not provided, the server uses a default limit of 100 invoices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Describes query criteria for searching invoices.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public InvoiceQuery Query { get; set; }
	}
	
	/// <summary>
	/// Describes a `SearchInvoices` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchInvoicesResponse
	{
		
		/// <summary>
		/// When a response is truncated, it includes a cursor that you can use in a 
		///subsequent request to fetch the next set of invoices. If empty, this is the final 
		///response. 
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The list of invoices returned by the search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoices")]
		public Invoice[] Invoices { get; set; }
	}
	
	/// <summary>
	/// A request to search for loyalty accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchLoyaltyAccountsRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to 
		///this endpoint. Provide this to retrieve the next set of 
		///results for the original query.
		///
		///For more information, 
		///see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of results to include in the response.
		/// Minimum: 1
		/// Maximum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 30)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The search criteria for the loyalty accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public SearchLoyaltyAccountsRequestLoyaltyAccountQuery Query { get; set; }
	}
	
	/// <summary>
	/// The search criteria for the loyalty accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchLoyaltyAccountsRequestLoyaltyAccountQuery
	{
		
		/// <summary>
		/// The set of customer IDs to use in the loyalty account search.  
		///
		///This cannot be combined with `mappings`.  
		///
		///Max: 30 customer IDs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_ids")]
		public string[] Customer_ids { get; set; }
		
		/// <summary>
		/// The set of mappings to use in the loyalty account search.  
		///
		///This cannot be combined with `customer_ids`.  
		///
		///Max: 30 mappings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappings")]
		public LoyaltyAccountMapping[] Mappings { get; set; }
	}
	
	/// <summary>
	/// A response that includes loyalty accounts that satisfy the search criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchLoyaltyAccountsResponse
	{
		
		/// <summary>
		/// The pagination cursor to use in a subsequent 
		///request. If empty, this is the final response.
		///For more information, 
		///see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The loyalty accounts that met the search criteria,  
		///in order of creation date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loyalty_accounts")]
		public LoyaltyAccount[] Loyalty_accounts { get; set; }
	}
	
	/// <summary>
	/// A request to search for loyalty events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchLoyaltyEventsRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of results to include in the response. 
		///The last page might contain fewer events. 
		///The default is 30 events.
		/// Minimum: 1
		/// Maximum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 30)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Represents a query used to search for loyalty events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public LoyaltyEventQuery Query { get; set; }
	}
	
	/// <summary>
	/// A response that contains loyalty events that satisfy the search 
	///criteria, in order by the `created_at` date.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchLoyaltyEventsResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent 
		///request. If empty, this is the final response. 
		///For more information, 
		///see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The loyalty events that satisfy the search criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public LoyaltyEvent[] Events { get; set; }
	}
	
	/// <summary>
	/// A request to search for loyalty rewards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchLoyaltyRewardsRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to 
		///this endpoint. Provide this to retrieve the next set of 
		///results for the original query.
		///For more information, 
		///see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in the response.
		/// Minimum: 1
		/// Maximum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 30)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The set of search requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public SearchLoyaltyRewardsRequestLoyaltyRewardQuery Query { get; set; }
	}
	
	/// <summary>
	/// The set of search requirements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchLoyaltyRewardsRequestLoyaltyRewardQuery
	{
		
		/// <summary>
		/// The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to which the loyalty reward belongs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loyalty_account_id")]
		public string Loyalty_account_id { get; set; }
		
		/// <summary>
		/// The status of the loyalty reward.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// A response that includes the loyalty rewards satisfying the search criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchLoyaltyRewardsResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent 
		///request. If empty, this is the final response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The loyalty rewards that satisfy the search criteria.
		///These are returned in descending order by `updated_at`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewards")]
		public LoyaltyReward[] Rewards { get; set; }
	}
	
	/// <summary>
	/// A filter based on the order `customer_id` and any tender `customer_id`
	///associated with the order. It does not filter based on the
	///[FulfillmentRecipient](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentRecipient) `customer_id`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchOrdersCustomerFilter
	{
		
		/// <summary>
		/// A list of customer IDs to filter by.
		///
		///Max: 10 customer IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_ids")]
		public string[] Customer_ids { get; set; }
	}
	
	/// <summary>
	/// Filter for `Order` objects based on whether their `CREATED_AT`,
	///`CLOSED_AT`, or `UPDATED_AT` timestamps fall within a specified time range.
	///You can specify the time range and which timestamp to filter for. You can filter
	///for only one time range at a time.
	///
	///For each time range, the start time and end time are inclusive. If the end time
	///is absent, it defaults to the time of the first request for the cursor.
	///
	///__Important:__ If you use the `DateTimeFilter` in a `SearchOrders` query,
	///you must set the `sort_field` in [OrdersSort](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersSort)
	///to the same field you filter for. For example, if you set the `CLOSED_AT` field
	///in `DateTimeFilter`, you must set the `sort_field` in `SearchOrdersSort` to
	///`CLOSED_AT`. Otherwise, `SearchOrders` throws an error.
	///[Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchOrdersDateTimeFilter
	{
		
		/// <summary>
		/// Represents a generic time range. The start and end values are
		///represented in RFC 3339 format. Time ranges are customized to be
		///inclusive or exclusive based on the needs of a particular endpoint.
		///Refer to the relevant endpoint-specific documentation to determine
		///how time ranges are handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closed_at")]
		public TimeRange Closed_at { get; set; }
		
		/// <summary>
		/// Represents a generic time range. The start and end values are
		///represented in RFC 3339 format. Time ranges are customized to be
		///inclusive or exclusive based on the needs of a particular endpoint.
		///Refer to the relevant endpoint-specific documentation to determine
		///how time ranges are handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public TimeRange Created_at { get; set; }
		
		/// <summary>
		/// Represents a generic time range. The start and end values are
		///represented in RFC 3339 format. Time ranges are customized to be
		///inclusive or exclusive based on the needs of a particular endpoint.
		///Refer to the relevant endpoint-specific documentation to determine
		///how time ranges are handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public TimeRange Updated_at { get; set; }
	}
	
	/// <summary>
	/// Filtering criteria to use for a `SearchOrders` request. Multiple filters
	///are ANDed together.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchOrdersFilter
	{
		
		/// <summary>
		/// A filter based on the order `customer_id` and any tender `customer_id`
		///associated with the order. It does not filter based on the
		///[FulfillmentRecipient](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentRecipient) `customer_id`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_filter")]
		public SearchOrdersCustomerFilter Customer_filter { get; set; }
		
		/// <summary>
		/// Filter for `Order` objects based on whether their `CREATED_AT`,
		///`CLOSED_AT`, or `UPDATED_AT` timestamps fall within a specified time range.
		///You can specify the time range and which timestamp to filter for. You can filter
		///for only one time range at a time.
		///
		///For each time range, the start time and end time are inclusive. If the end time
		///is absent, it defaults to the time of the first request for the cursor.
		///
		///__Important:__ If you use the `DateTimeFilter` in a `SearchOrders` query,
		///you must set the `sort_field` in [OrdersSort](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersSort)
		///to the same field you filter for. For example, if you set the `CLOSED_AT` field
		///in `DateTimeFilter`, you must set the `sort_field` in `SearchOrdersSort` to
		///`CLOSED_AT`. Otherwise, `SearchOrders` throws an error.
		///[Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_time_filter")]
		public SearchOrdersDateTimeFilter Date_time_filter { get; set; }
		
		/// <summary>
		/// Filter based on [order fulfillment](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillment) information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfillment_filter")]
		public SearchOrdersFulfillmentFilter Fulfillment_filter { get; set; }
		
		/// <summary>
		/// A filter based on order `source` information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_filter")]
		public SearchOrdersSourceFilter Source_filter { get; set; }
		
		/// <summary>
		/// Filter by the current order `state`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_filter")]
		public SearchOrdersStateFilter State_filter { get; set; }
	}
	
	/// <summary>
	/// Filter based on [order fulfillment](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillment) information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchOrdersFulfillmentFilter
	{
		
		/// <summary>
		/// A list of [fulfillment states](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentState) to filter
		///for. The list returns orders if any of its fulfillments match any of the
		///fulfillment states listed in this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfillment_states")]
		public string[] Fulfillment_states { get; set; }
		
		/// <summary>
		/// A list of [fulfillment types](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderFulfillmentType) to filter
		///for. The list returns orders if any of its fulfillments match any of the fulfillment types
		///listed in this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfillment_types")]
		public string[] Fulfillment_types { get; set; }
	}
	
	/// <summary>
	/// A filter based on order `source` information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchOrdersSourceFilter
	{
		
		/// <summary>
		/// Filters by the [Source](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderSource) `name`. The filter returns any orders
		///with a `source.name` that matches any of the listed source names.
		///
		///Max: 10 source names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_names")]
		public string[] Source_names { get; set; }
	}
	
	/// <summary>
	/// Filter by the current order `state`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchOrdersStateFilter
	{
		
		/// <summary>
		/// States to filter for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="states")]
		public string[] States { get; set; }
	}
	
	/// <summary>
	/// Contains query criteria for the search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchOrdersQuery
	{
		
		/// <summary>
		/// Filtering criteria to use for a `SearchOrders` request. Multiple filters
		///are ANDed together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public SearchOrdersFilter Filter { get; set; }
		
		/// <summary>
		/// Sorting criteria for a `SearchOrders` request. Results can only be sorted
		///by a timestamp field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public SearchOrdersSort Sort { get; set; }
	}
	
	/// <summary>
	/// Sorting criteria for a `SearchOrders` request. Results can only be sorted
	///by a timestamp field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchOrdersSort
	{
		
		/// <summary>
		/// The field to sort by.
		///
		///__Important:__ When using a [DateTimeFilter](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersFilter),
		///`sort_field` must match the timestamp field that the `DateTimeFilter` uses to
		///filter. For example, if you set your `sort_field` to `CLOSED_AT` and you use a
		///`DateTimeFilter`, your `DateTimeFilter` must filter for orders by their `CLOSED_AT` date.
		///If this field does not match the timestamp field in `DateTimeFilter`,
		///`SearchOrders` returns an error.
		///
		///Default: `CREATED_AT`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sort_field")]
		public string Sort_field { get; set; }
		
		/// <summary>
		/// The chronological order in which results are returned. Defaults to `DESC`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
	}
	
	/// <summary>
	/// The request does not have any required fields. When given no query criteria,
	///`SearchOrders` returns all results for all of the seller's locations. When retrieving additional
	///pages using a `cursor`, the `query` must be equal to the `query` used to retrieve the first page of
	///results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchOrdersRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for your original query.
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of results to be returned in a single page. It is
		///possible to receive fewer results than the specified limit on a given page.
		///
		///Default: `500`
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The location IDs for the orders to query. All locations must belong to
		///the same merchant.
		///
		///Min: 1 location ID.
		///
		///Max: 10 location IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string[] Location_ids { get; set; }
		
		/// <summary>
		/// Contains query criteria for the search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public SearchOrdersQuery Query { get; set; }
		
		/// <summary>
		/// A Boolean that controls the format of the search results. If `true`,
		///`SearchOrders` returns [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects. If `false`, `SearchOrders`
		///returns complete order objects.
		///
		///Default: `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="return_entries")]
		public System.Nullable<System.Boolean> Return_entries { get; set; }
	}
	
	/// <summary>
	/// Either the `order_entries` or `orders` field is set, depending on whether
	///`return_entries` is set on the [SearchOrdersRequest](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchOrdersResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If unset,
		///this is the final response.
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// [Errors](https://developer.squareup.com/reference/square_2021-08-18/objects/Error) encountered during the search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A list of [OrderEntries](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) that fit the query
		///conditions. The list is populated only if `return_entries` is set to `true` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_entries")]
		public OrderEntry[] Order_entries { get; set; }
		
		/// <summary>
		/// A list of
		///[Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) objects that match the query conditions. The list is populated only if
		///`return_entries` is set to `false` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public Order[] Orders { get; set; }
	}
	
	/// <summary>
	/// Specifies which timestamp to use to sort `SearchOrder` results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SearchOrdersSortField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATED_AT")]
		CREATED_AT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATED_AT")]
		UPDATED_AT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOSED_AT")]
		CLOSED_AT = 2,
	}
	
	/// <summary>
	/// A request for a filtered and sorted set of `Shift` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchShiftsRequest
	{
		
		/// <summary>
		/// An opaque cursor for fetching the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The number of resources in a page (200 by default).
		/// Minimum: 1
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 200)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The parameters of a `Shift` search query, which includes filter and sort options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public ShiftQuery Query { get; set; }
	}
	
	/// <summary>
	/// The parameters of a `Shift` search query, which includes filter and sort options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShiftQuery
	{
		
		/// <summary>
		/// Defines a filter used in a search for `Shift` records. `AND` logic is
		///used by Square's servers to apply each filter property specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ShiftFilter Filter { get; set; }
		
		/// <summary>
		/// Sets the sort order of search results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public ShiftSort Sort { get; set; }
	}
	
	/// <summary>
	/// Defines a filter used in a search for `Shift` records. `AND` logic is
	///used by Square's servers to apply each filter property specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShiftFilter
	{
		
		/// <summary>
		/// Fetch shifts for the specified employees. DEPRECATED at version 2020-08-26. Use `team_member_ids` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_ids")]
		public string[] Employee_ids { get; set; }
		
		/// <summary>
		/// Represents a generic time range. The start and end values are
		///represented in RFC 3339 format. Time ranges are customized to be
		///inclusive or exclusive based on the needs of a particular endpoint.
		///Refer to the relevant endpoint-specific documentation to determine
		///how time ranges are handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public TimeRange End { get; set; }
		
		/// <summary>
		/// Fetch shifts for the specified location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string[] Location_ids { get; set; }
		
		/// <summary>
		/// Represents a generic time range. The start and end values are
		///represented in RFC 3339 format. Time ranges are customized to be
		///inclusive or exclusive based on the needs of a particular endpoint.
		///Refer to the relevant endpoint-specific documentation to determine
		///how time ranges are handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public TimeRange Start { get; set; }
		
		/// <summary>
		/// Fetch a `Shift` instance by `Shift.status`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Fetch shifts for the specified team members. Replaced `employee_ids` at version "2020-08-26".
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="team_member_ids")]
		public string[] Team_member_ids { get; set; }
		
		/// <summary>
		/// A `Shift` search query filter parameter that sets a range of days that
		///a `Shift` must start or end in before passing the filter condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workday")]
		public ShiftWorkday Workday { get; set; }
	}
	
	/// <summary>
	/// A `Shift` search query filter parameter that sets a range of days that
	///a `Shift` must start or end in before passing the filter condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShiftWorkday
	{
		
		/// <summary>
		/// A range defined by two dates. Used for filtering a query for Connect v2
		///objects that have date properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_range")]
		public DateRange Date_range { get; set; }
		
		/// <summary>
		/// Location-specific timezones convert workdays to datetime filters.
		///Every location included in the query must have a timezone or this field
		///must be provided as a fallback. Format: the IANA timezone database
		///identifier for the relevant timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default_timezone")]
		public string Default_timezone { get; set; }
		
		/// <summary>
		/// The strategy on which the dates are applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match_shifts_by")]
		public string Match_shifts_by { get; set; }
	}
	
	/// <summary>
	/// Sets the sort order of search results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShiftSort
	{
		
		/// <summary>
		/// The field to sort on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// The order in which results are returned. Defaults to DESC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
	}
	
	/// <summary>
	/// The response to a request for `Shift` objects. The response contains
	///the requested `Shift` objects and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchShiftsResponse
	{
		
		/// <summary>
		/// An opaque cursor for fetching the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Shifts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shifts")]
		public Shift[] Shifts { get; set; }
	}
	
	/// <summary>
	/// Represents a set of SearchSubscriptionsQuery filters used to limit the set of Subscriptions returned by SearchSubscriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchSubscriptionsFilter
	{
		
		/// <summary>
		/// A filter to select subscriptions based on the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_ids")]
		public string[] Customer_ids { get; set; }
		
		/// <summary>
		/// A filter to select subscriptions based the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string[] Location_ids { get; set; }
	}
	
	/// <summary>
	/// Represents a query (including filtering criteria) used to search for subscriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchSubscriptionsQuery
	{
		
		/// <summary>
		/// Represents a set of SearchSubscriptionsQuery filters used to limit the set of Subscriptions returned by SearchSubscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public SearchSubscriptionsFilter Filter { get; set; }
	}
	
	/// <summary>
	/// Defines parameters in a
	///[SearchSubscriptions](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/search-subscriptions) endpoint
	///request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchSubscriptionsRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for the original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The upper limit on the number of subscriptions to return
		///in the response.
		///
		///Default: `200`
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Represents a query (including filtering criteria) used to search for subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public SearchSubscriptionsQuery Query { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response from the
	///[SearchSubscriptions](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/search-subscriptions) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchSubscriptionsResponse
	{
		
		/// <summary>
		/// When a response is truncated, it includes a cursor that you can
		///use in a subsequent request to fetch the next set of subscriptions.
		///If empty, this is the final response.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The search result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public Subscription[] Subscriptions { get; set; }
	}
	
	/// <summary>
	/// Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied
	///between the individual fields, and `OR` logic is applied within list-based fields.
	///For example, setting this filter value:
	///```
	///filter = (locations_ids = ["A", "B"], status = ACTIVE)
	///```
	///returns only active team members assigned to either location "A" or "B".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchTeamMembersFilter
	{
		
		/// <summary>
		/// When present, filters by team members assigned to the specified locations.
		///When empty, includes team members assigned to any location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_ids")]
		public string[] Location_ids { get; set; }
		
		/// <summary>
		/// When present, filters by team members who match the given status.
		///When empty, includes team members of all statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Represents the parameters in a search for `TeamMember` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchTeamMembersQuery
	{
		
		/// <summary>
		/// Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied
		///between the individual fields, and `OR` logic is applied within list-based fields.
		///For example, setting this filter value:
		///```
		///filter = (locations_ids = ["A", "B"], status = ACTIVE)
		///```
		///returns only active team members assigned to either location "A" or "B".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public SearchTeamMembersFilter Filter { get; set; }
	}
	
	/// <summary>
	/// Represents a search request for a filtered list of `TeamMember` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchTeamMembersRequest
	{
		
		/// <summary>
		/// The opaque cursor for fetching the next page. For more information, see
		///[pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The maximum number of `TeamMember` objects in a page (100 by default).
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Represents the parameters in a search for `TeamMember` objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public SearchTeamMembersQuery Query { get; set; }
	}
	
	/// <summary>
	/// Represents a response from a search request containing a filtered list of `TeamMember` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchTeamMembersResponse
	{
		
		/// <summary>
		/// The opaque cursor for fetching the next page. For more information, see
		///[pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The filtered list of `TeamMember` objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_members")]
		public TeamMember[] Team_members { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchTerminalCheckoutsRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Limits the number of results returned for a single request.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public TerminalCheckoutQuery Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminalCheckoutQuery
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public TerminalCheckoutQueryFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public TerminalCheckoutQuerySort Sort { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminalCheckoutQueryFilter
	{
		
		/// <summary>
		/// Represents a generic time range. The start and end values are
		///represented in RFC 3339 format. Time ranges are customized to be
		///inclusive or exclusive based on the needs of a particular endpoint.
		///Refer to the relevant endpoint-specific documentation to determine
		///how time ranges are handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public TimeRange Created_at { get; set; }
		
		/// <summary>
		/// The `TerminalCheckout` objects associated with a specific device. If no device is specified, then all
		///`TerminalCheckout` objects for the merchant are displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device_id")]
		public string Device_id { get; set; }
		
		/// <summary>
		/// Filtered results with the desired status of the `TerminalCheckout`.
		///Options: PENDING, IN_PROGRESS, CANCELED, COMPLETED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminalCheckoutQuerySort
	{
		
		/// <summary>
		/// The order in which results are listed.
		///- `ASC` - Oldest to newest.
		///- `DESC` - Newest to oldest (default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchTerminalCheckoutsResponse
	{
		
		/// <summary>
		/// The requested search result of `TerminalCheckout` objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkouts")]
		public TerminalCheckout[] Checkouts { get; set; }
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If empty,
		///this is the final response.
		///
		///See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchTerminalRefundsRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Limits the number of results returned for a single request.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public TerminalRefundQuery Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminalRefundQuery
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public TerminalRefundQueryFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public TerminalRefundQuerySort Sort { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminalRefundQueryFilter
	{
		
		/// <summary>
		/// Represents a generic time range. The start and end values are
		///represented in RFC 3339 format. Time ranges are customized to be
		///inclusive or exclusive based on the needs of a particular endpoint.
		///Refer to the relevant endpoint-specific documentation to determine
		///how time ranges are handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public TimeRange Created_at { get; set; }
		
		/// <summary>
		/// `TerminalRefund` objects associated with a specific device. If no device is specified, then all
		///`TerminalRefund` objects for the signed-in account are displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device_id")]
		public string Device_id { get; set; }
		
		/// <summary>
		/// Filtered results with the desired status of the `TerminalRefund`.
		///Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, or `COMPLETED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminalRefundQuerySort
	{
		
		/// <summary>
		/// The order in which results are listed.
		///- `ASC` - Oldest to newest.
		///- `DESC` - Newest to oldest (default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchTerminalRefundsResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If empty,
		///this is the final response.
		///
		///See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The requested search result of `TerminalRefund` objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public TerminalRefund[] Refunds { get; set; }
	}
	
	/// <summary>
	/// Specifies the `status` of `Shift` records to be returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShiftFilterStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPEN")]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOSED")]
		CLOSED = 1,
	}
	
	/// <summary>
	/// Enumerates the `Shift` fields to sort on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShiftSortField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="START_AT")]
		START_AT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="END_AT")]
		END_AT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATED_AT")]
		CREATED_AT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATED_AT")]
		UPDATED_AT = 3,
	}
	
	/// <summary>
	/// Enumerates the possible status of a `Shift`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShiftStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPEN")]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOSED")]
		CLOSED = 1,
	}
	
	/// <summary>
	/// Defines the logic used to apply a workday filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShiftWorkdayMatcher
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="START_AT")]
		START_AT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="END_AT")]
		END_AT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERSECTION")]
		INTERSECTION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnippetResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public Snippet Snippet { get; set; }
	}
	
	/// <summary>
	/// The order (e.g., chronological or alphabetical) in which results from a request are returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESC")]
		DESC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASC")]
		ASC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
	}
	
	/// <summary>
	/// Defines the parameters for a `SubmitEvidence` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubmitEvidenceRequest
	{
	}
	
	/// <summary>
	/// Defines the fields in a `SubmitEvidence` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubmitEvidenceResponse
	{
		
		/// <summary>
		/// Represents a dispute a cardholder initiated with their bank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dispute")]
		public Dispute Dispute { get; set; }
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Determines the billing cadence of a [Subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SubscriptionCadence
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DAILY")]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEEKLY")]
		WEEKLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVERY_TWO_WEEKS")]
		EVERY_TWO_WEEKS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THIRTY_DAYS")]
		THIRTY_DAYS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SIXTY_DAYS")]
		SIXTY_DAYS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NINETY_DAYS")]
		NINETY_DAYS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTHLY")]
		MONTHLY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVERY_TWO_MONTHS")]
		EVERY_TWO_MONTHS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUARTERLY")]
		QUARTERLY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVERY_FOUR_MONTHS")]
		EVERY_FOUR_MONTHS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVERY_SIX_MONTHS")]
		EVERY_SIX_MONTHS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANNUAL")]
		ANNUAL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVERY_TWO_YEARS")]
		EVERY_TWO_YEARS = 12,
	}
	
	/// <summary>
	/// Provides information about the subscription event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionEventInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public InfoCode Code { get; set; }
		
		/// <summary>
		/// A human-readable explanation for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
	}
	
	/// <summary>
	/// The possible subscription event info codes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SubscriptionEventInfoCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_NOT_ACTIVE")]
		LOCATION_NOT_ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_CANNOT_ACCEPT_PAYMENT")]
		LOCATION_CANNOT_ACCEPT_PAYMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER_DELETED")]
		CUSTOMER_DELETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER_NO_EMAIL")]
		CUSTOMER_NO_EMAIL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER_NO_NAME")]
		CUSTOMER_NO_NAME = 4,
	}
	
	/// <summary>
	/// The possible subscription event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SubscriptionEventSubscriptionEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="START_SUBSCRIPTION")]
		START_SUBSCRIPTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLAN_CHANGE")]
		PLAN_CHANGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOP_SUBSCRIPTION")]
		STOP_SUBSCRIPTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEACTIVATE_SUBSCRIPTION")]
		DEACTIVATE_SUBSCRIPTION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESUME_SUBSCRIPTION")]
		RESUME_SUBSCRIPTION = 4,
	}
	
	/// <summary>
	/// Possible subscription status values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SubscriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEACTIVATED")]
		DEACTIVATED = 3,
	}
	
	/// <summary>
	/// When to calculate the taxes due on a cart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TaxCalculationPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TAX_SUBTOTAL_PHASE")]
		TAX_SUBTOTAL_PHASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TAX_TOTAL_PHASE")]
		TAX_TOTAL_PHASE = 1,
	}
	
	/// <summary>
	/// Whether to the tax amount should be additional to or included in the CatalogItem price.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TaxInclusionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITIVE")]
		ADDITIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUSIVE")]
		INCLUSIVE = 1,
	}
	
	/// <summary>
	/// Enumerates the possible assignment types that the team member can have.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TeamMemberAssignedLocationsAssignmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL_CURRENT_AND_FUTURE_LOCATIONS")]
		ALL_CURRENT_AND_FUTURE_LOCATIONS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPLICIT_LOCATIONS")]
		EXPLICIT_LOCATIONS = 1,
	}
	
	/// <summary>
	/// Enumerates the possible invitation statuses the team member can have within a business.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TeamMemberInvitationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNINVITED")]
		UNINVITED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCEPTED")]
		ACCEPTED = 2,
	}
	
	/// <summary>
	/// Enumerates the possible statuses the team member can have within a business.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TeamMemberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
	}
	
	/// <summary>
	/// Indicates the method used to enter the card's details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TenderCardDetailsEntryMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SWIPED")]
		SWIPED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEYED")]
		KEYED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMV")]
		EMV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ON_FILE")]
		ON_FILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTACTLESS")]
		CONTACTLESS = 4,
	}
	
	/// <summary>
	/// Indicates the card transaction's current status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TenderCardDetailsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTHORIZED")]
		AUTHORIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAPTURED")]
		CAPTURED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOIDED")]
		VOIDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
	}
	
	/// <summary>
	/// Indicates a tender's type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TenderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARD")]
		CARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CASH")]
		CASH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THIRD_PARTY_CARD")]
		THIRD_PARTY_CARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_GIFT_CARD")]
		SQUARE_GIFT_CARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_SALE")]
		NO_SALE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WALLET")]
		WALLET = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 6,
	}
	
	/// <summary>
	/// Indicates the Square product used to process a transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransactionProduct
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTER")]
		REGISTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTERNAL_API")]
		EXTERNAL_API = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BILLING")]
		BILLING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPOINTMENTS")]
		APPOINTMENTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVOICES")]
		INVOICES = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONLINE_STORE")]
		ONLINE_STORE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAYROLL")]
		PAYROLL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 7,
	}
	
	/// <summary>
	/// The transaction type used in the disputed payment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEBIT")]
		DEBIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREDIT")]
		CREDIT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Type
	{
	}
	
	/// <summary>
	/// A request to unlink a customer to a gift card
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnlinkCustomerFromGiftCardRequest
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 191
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(191)]
		public string Customer_id { get; set; }
	}
	
	/// <summary>
	/// A response that contains one `GiftCard` that was unlinked. The response might contain a set of `Error`
	///objects if the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnlinkCustomerFromGiftCardResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a Square gift card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gift_card")]
		public GiftCard Gift_card { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBookingRequest
	{
		
		/// <summary>
		/// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		///at a given location to a requesting customer in one or more appointment segments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="booking")]
		public Booking Booking { get; set; }
		
		/// <summary>
		/// A unique key to make this request an idempotent operation.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Idempotency_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBookingResponse
	{
		
		/// <summary>
		/// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		///at a given location to a requesting customer in one or more appointment segments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booking")]
		public Booking Booking { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// A request to update a `BreakType`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBreakTypeRequest
	{
		
		/// <summary>
		/// A defined break template that sets an expectation for possible `Break`
		///instances on a `Shift`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="break_type")]
		public BreakType Break_type { get; set; }
	}
	
	/// <summary>
	/// A response to a request to update a `BreakType`. The response contains
	///the requested `BreakType` objects and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBreakTypeResponse
	{
		
		/// <summary>
		/// A defined break template that sets an expectation for possible `Break`
		///instances on a `Shift`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="break_type")]
		public BreakType Break_type { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the body parameters that can be included in a request to the
	///[UpdateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/update-customer-group) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCustomerGroupRequest
	{
		
		/// <summary>
		/// Represents a group of customer profiles. 
		///
		///Customer groups can be created, be modified, and have their membership defined using 
		///the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group")]
		public CustomerGroup Group { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [UpdateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/update-customer-group) endpoint.
	///
	///Either `errors` or `group` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCustomerGroupResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a group of customer profiles. 
		///
		///Customer groups can be created, be modified, and have their membership defined using 
		///the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public CustomerGroup Group { get; set; }
	}
	
	/// <summary>
	/// Defines the body parameters that can be included in a request to the
	///`UpdateCustomer` endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCustomerRequest
	{
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
		///For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
		///You can also specify this value in `YYYY-MM-DD` format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthday")]
		public string Birthday { get; set; }
		
		/// <summary>
		/// A business name associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// The email address associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The family name (that is, the last name) associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		/// <summary>
		/// The given name (that is, the first name) associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		/// <summary>
		/// A nickname for the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// A custom note associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The 11-digit phone number associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// An optional second ID used to associate the customer profile with an
		///entity in another system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// The current version of the customer profile.
		///
		///As a best practice, you should include this field to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. For more information, see [Update a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#update-a-customer-profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the `UpdateCustomer` endpoint.
	///
	///Either `errors` or `customer` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCustomerResponse
	{
		
		/// <summary>
		/// Represents a Square customer profile in the Customer Directory of a Square seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer Customer { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Describes a `UpdateInvoice` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInvoiceRequest
	{
		
		/// <summary>
		/// The list of fields to clear.
		///For examples, see [Update an invoice](https://developer.squareup.com/docs/invoices-api/overview#update-an-invoice).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields_to_clear")]
		public string[] Fields_to_clear { get; set; }
		
		/// <summary>
		/// A unique string that identifies the `UpdateInvoice` request. If you do not
		///provide `idempotency_key` (or provide an empty string as the value), the endpoint
		///treats each request as independent.
		///
		///For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// Stores information about an invoice. You use the Invoices API to create and manage
		///invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public Invoice Invoice { get; set; }
	}
	
	/// <summary>
	/// Describes a `UpdateInvoice` response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInvoiceResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Stores information about an invoice. You use the Invoices API to create and manage
		///invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public Invoice Invoice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateItemModifierListsRequest
	{
		
		/// <summary>
		/// The IDs of the catalog items associated with the CatalogModifierList objects being updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="item_ids")]
		public string[] Item_ids { get; set; }
		
		/// <summary>
		/// The IDs of the CatalogModifierList objects to disable for the CatalogItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_lists_to_disable")]
		public string[] Modifier_lists_to_disable { get; set; }
		
		/// <summary>
		/// The IDs of the CatalogModifierList objects to enable for the CatalogItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_lists_to_enable")]
		public string[] Modifier_lists_to_enable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateItemModifierListsResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-date) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateItemTaxesRequest
	{
		
		/// <summary>
		/// IDs for the CatalogItems associated with the CatalogTax objects being updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="item_ids")]
		public string[] Item_ids { get; set; }
		
		/// <summary>
		/// IDs of the CatalogTax objects to disable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes_to_disable")]
		public string[] Taxes_to_disable { get; set; }
		
		/// <summary>
		/// IDs of the CatalogTax objects to enable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes_to_enable")]
		public string[] Taxes_to_enable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateItemTaxesResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// Request object for the [UpdateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/update-location) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLocationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// Response object returned by the [UpdateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/update-location) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLocationResponse
	{
		
		/// <summary>
		/// Information on errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in requests to the
	///[UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateOrderRequest
	{
		
		/// <summary>
		/// The [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)
		///fields to clear. For example, `line_items[uid].note`.
		///For more information, see [Deleting fields](https://developer.squareup.com/docs/orders-api/manage-orders#delete-fields).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields_to_clear")]
		public string[] Fields_to_clear { get; set; }
		
		/// <summary>
		/// A value you specify that uniquely identifies this update request.
		///
		///If you are unsure whether a particular update was applied to an order successfully,
		///you can reattempt it with the same idempotency key without
		///worrying about creating duplicate updates to the order.
		///The latest order version is returned.
		///
		///For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		/// Max length: 192
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// Contains all information related to a single order to process with Square,
		///including line items that specify the products to purchase. `Order` objects also
		///include information about any associated tenders, refunds, and returns.
		///
		///All Connect V2 Transactions have all been converted to Orders including all associated
		///itemization data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateOrderResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Contains all information related to a single order to process with Square,
		///including line items that specify the products to purchase. `Order` objects also
		///include information about any associated tenders, refunds, and returns.
		///
		///All Connect V2 Transactions have all been converted to Orders including all associated
		///itemization data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
	}
	
	/// <summary>
	/// Describes a request to update a payment using 
	///[UpdatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/update-payment).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePaymentRequest
	{
		
		/// <summary>
		/// A unique string that identifies this `UpdatePayment` request. Keys can be any valid string
		///but must be unique for every `UpdatePayment` request.
		///
		///The maximum is 45 characters.
		///
		///For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		/// Required
		/// Min length: 1
		/// Max length: 45
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// Represents a payment processed by the Square API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment")]
		public Payment Payment { get; set; }
	}
	
	/// <summary>
	/// Defines the response returned by 
	///[UpdatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/update-payment).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePaymentResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a payment processed by the Square API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment")]
		public Payment Payment { get; set; }
	}
	
	/// <summary>
	/// A request to update a `Shift` object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateShiftRequest
	{
		
		/// <summary>
		/// A record of the hourly rate, start, and end times for a single work shift
		///for an employee. This might include a record of the start and end times for breaks
		///taken during the shift.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shift")]
		public Shift Shift { get; set; }
	}
	
	/// <summary>
	/// The response to a request to update a `Shift`. The response contains
	///the updated `Shift` object and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateShiftResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A record of the hourly rate, start, and end times for a single work shift
		///for an employee. This might include a record of the start and end times for breaks
		///taken during the shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shift")]
		public Shift Shift { get; set; }
	}
	
	/// <summary>
	/// Defines parameters in a
	///[UpdateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/update-subscription) endpoint
	///request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSubscriptionRequest
	{
		
		/// <summary>
		/// Represents a customer subscription to a subscription plan.
		///For an overview of the `Subscription` type, see
		///[Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Subscription Subscription { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response from the
	///[UpdateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/update-subscription) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSubscriptionResponse
	{
		
		/// <summary>
		/// Information about errors encountered during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a customer subscription to a subscription plan.
		///For an overview of the `Subscription` type, see
		///[Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Subscription Subscription { get; set; }
	}
	
	/// <summary>
	/// Represents an update request for the `WageSetting` object describing a `TeamMember`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWageSettingRequest
	{
		
		/// <summary>
		/// An object representing a team member's wage information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wage_setting")]
		public WageSetting Wage_setting { get; set; }
	}
	
	/// <summary>
	/// Represents a response from an update request containing the updated `WageSetting` object
	///or error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWageSettingResponse
	{
		
		/// <summary>
		/// The errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// An object representing a team member's wage information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wage_setting")]
		public WageSetting Wage_setting { get; set; }
	}
	
	/// <summary>
	/// A request to update a `WorkweekConfig` object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkweekConfigRequest
	{
		
		/// <summary>
		/// Sets the day of the week and hour of the day that a business starts a
		///workweek. This is used to calculate overtime pay.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workweek_config")]
		public WorkweekConfig Workweek_config { get; set; }
	}
	
	/// <summary>
	/// The response to a request to update a `WorkweekConfig` object. The response contains
	///the updated `WorkweekConfig` object and might contain a set of `Error` objects if
	///the request resulted in errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkweekConfigResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Sets the day of the week and hour of the day that a business starts a
		///workweek. This is used to calculate overtime pay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workweek_config")]
		public WorkweekConfig Workweek_config { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpsertCatalogObjectRequest
	{
		
		/// <summary>
		/// A value you specify that uniquely identifies this
		///request among all your requests. A common way to create
		///a valid idempotency key is to use a Universally unique
		///identifier (UUID).
		///
		///If you're unsure whether a particular request was successful,
		///you can reattempt it with the same idempotency key without
		///worrying about creating duplicate objects.
		///
		///See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The wrapper object for the Catalog entries of a given object type.
		///
		///The type of a particular `CatalogObject` is determined by the value of the
		///`type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
		///For example, the following list shows some instances of `CatalogObject` of a given `type` and
		///their corresponding data attribute that can be set:
		///- For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
		///- For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
		///- For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
		///- For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
		///- For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
		///- For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
		///- For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
		///- For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
		///- For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
		///- For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
		///- For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
		///- For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
		///- For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
		///
		///
		///For a more detailed discussion of the Catalog data model, please see the
		///[Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public CatalogObject Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpsertCatalogObjectResponse
	{
		
		/// <summary>
		/// The wrapper object for the Catalog entries of a given object type.
		///
		///The type of a particular `CatalogObject` is determined by the value of the
		///`type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
		///For example, the following list shows some instances of `CatalogObject` of a given `type` and
		///their corresponding data attribute that can be set:
		///- For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
		///- For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
		///- For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
		///- For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
		///- For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
		///- For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
		///- For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
		///- For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
		///- For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
		///- For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
		///- For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
		///- For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
		///- For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
		///
		///
		///For a more detailed discussion of the Catalog data model, please see the
		///[Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object")]
		public CatalogObject Catalog_object { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The mapping between client and server IDs for this upsert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id_mappings")]
		public CatalogIdMapping[] Id_mappings { get; set; }
	}
	
	/// <summary>
	/// Represents an `UpsertSnippet` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpsertSnippetRequest
	{
		
		/// <summary>
		/// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public Snippet Snippet { get; set; }
	}
	
	/// <summary>
	/// Represents an `UpsertSnippet` response. The response can include either `snippet` or `errors`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpsertSnippetResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public Snippet Snippet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1CreateEmployeeRoleRequest
	{
		
		/// <summary>
		/// V1EmployeeRole
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_role")]
		public V1EmployeeRole Employee_role { get; set; }
	}
	
	/// <summary>
	/// V1EmployeeRole
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1EmployeeRole
	{
		
		/// <summary>
		/// The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The role's unique ID, Can only be set by Square.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If true, employees with this role have all permissions, regardless of the values indicated in permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_owner")]
		public System.Nullable<System.Boolean> Is_owner { get; set; }
		
		/// <summary>
		/// The role's merchant-defined name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The role's permissions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
		
		/// <summary>
		/// The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// V1CreateRefundRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1CreateRefundRequest
	{
		
		/// <summary>
		/// The ID of the payment to refund. If you are creating a `PARTIAL`
		///refund for a split tender payment, instead provide the id of the
		///particular tender you want to refund.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// The reason for the refund.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_money")]
		public V1Money Refunded_money { get; set; }
		
		/// <summary>
		/// An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request_idempotence_key")]
		public string Request_idempotence_key { get; set; }
		
		/// <summary>
		/// The type of refund (FULL or PARTIAL).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Money
	{
		
		/// <summary>
		/// Amount in the lowest denominated value of this Currency. E.g. in USD
		///these are cents, in JPY they are Yen (which do not have a 'cent' concept).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1CreateRefundRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FULL")]
		FULL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARTIAL")]
		PARTIAL = 1,
	}
	
	/// <summary>
	/// Represents one of a business's employees.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Employee
	{
		
		/// <summary>
		/// The IDs of the locations the employee is allowed to clock in at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorized_location_ids")]
		public string[] Authorized_location_ids { get; set; }
		
		/// <summary>
		/// The time when the employee entity was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The employee's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// An ID the merchant can set to associate the employee with an entity in another system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// The employee's first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// The employee's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The employee's last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role_ids")]
		public string[] Role_ids { get; set; }
		
		/// <summary>
		/// Whether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The time when the employee entity was most recently updated, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1EmployeeRolePermissions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTER_ACCESS_SALES_HISTORY")]
		REGISTER_ACCESS_SALES_HISTORY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTER_APPLY_RESTRICTED_DISCOUNTS")]
		REGISTER_APPLY_RESTRICTED_DISCOUNTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTER_CHANGE_SETTINGS")]
		REGISTER_CHANGE_SETTINGS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTER_EDIT_ITEM")]
		REGISTER_EDIT_ITEM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTER_ISSUE_REFUNDS")]
		REGISTER_ISSUE_REFUNDS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE")]
		REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTER_VIEW_SUMMARY_REPORTS")]
		REGISTER_VIEW_SUMMARY_REPORTS = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1EmployeeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListEmployeeRolesRequest
	{
		
		/// <summary>
		/// A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_token")]
		public string Batch_token { get; set; }
		
		/// <summary>
		/// The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The order in which employees are listed in the response, based on their created_at field.Default value: ASC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListEmployeeRolesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public V1EmployeeRole[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListEmployeesRequest
	{
		
		/// <summary>
		/// A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_token")]
		public string Batch_token { get; set; }
		
		/// <summary>
		/// If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_created_at")]
		public string Begin_created_at { get; set; }
		
		/// <summary>
		/// If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_updated_at")]
		public string Begin_updated_at { get; set; }
		
		/// <summary>
		/// If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_created_at")]
		public string End_created_at { get; set; }
		
		/// <summary>
		/// If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_updated_at")]
		public string End_updated_at { get; set; }
		
		/// <summary>
		/// If provided, the endpoint returns only employee entities with the specified external_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
		
		/// <summary>
		/// If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1ListEmployeesRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListEmployeesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public V1Employee[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListOrdersRequest
	{
		
		/// <summary>
		/// A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_token")]
		public string Batch_token { get; set; }
		
		/// <summary>
		/// The maximum number of payments to return in a single response. This value cannot exceed 200.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The order in which payments are listed in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListOrdersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public V1Order[] Items { get; set; }
	}
	
	/// <summary>
	/// V1Order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Order
	{
		
		/// <summary>
		/// For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="btc_price_satoshi")]
		public System.Nullable<System.Double> Btc_price_satoshi { get; set; }
		
		/// <summary>
		/// For Bitcoin transactions, the address that the buyer sent Bitcoin to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="btc_receive_address")]
		public string Btc_receive_address { get; set; }
		
		/// <summary>
		/// The email address of the order's buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email")]
		public string Buyer_email { get; set; }
		
		/// <summary>
		/// A note provided by the buyer when the order was created, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_note")]
		public string Buyer_note { get; set; }
		
		/// <summary>
		/// A note provided by the merchant when the order's state was set to CANCELED, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceled_note")]
		public string Canceled_note { get; set; }
		
		/// <summary>
		/// A note provided by the merchant when the order's state was set to COMPLETED, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed_note")]
		public string Completed_note { get; set; }
		
		/// <summary>
		/// The time when the order was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The time when the order expires if no action is taken, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public string Expires_at { get; set; }
		
		/// <summary>
		/// The order's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The history of actions associated with the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_history")]
		public V1OrderHistoryEntry[] Order_history { get; set; }
		
		/// <summary>
		/// The unique identifier of the payment associated with the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// The promo code provided by the buyer, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promo_code")]
		public string Promo_code { get; set; }
		
		/// <summary>
		/// The name of the order's buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// The phone number to use for the order's delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_phone_number")]
		public string Recipient_phone_number { get; set; }
		
		/// <summary>
		/// A note provided by the merchant when the order's state was set to REFUNDED, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_note")]
		public string Refunded_note { get; set; }
		
		/// <summary>
		/// Represents a postal address in a country. The address format is based 
		///on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
		///see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
		///This format has dedicated fields for four address components: postal code, 
		///locality (city), administrative district (state, prefecture, or province), and 
		///sublocality (town or village). These components have dedicated fields in the 
		///`Address` object because software sometimes behaves differently based on them. 
		///For example, sales tax software may charge different amounts of sales tax 
		///based on the postal code, and some software is only available in 
		///certain states due to compliance reasons.
		///
		///For the remaining address components, the `Address` type provides the 
		///`address_line_1` and `address_line_2` fields for free-form data entry. 
		///These fields are free-form because the remaining address components have 
		///too many variations around the world and typical software does not parse 
		///these components. These fields enable users to enter anything they want. 
		///
		///Note that, in the current implementation, all other `Address` type fields are blank. 
		///These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
		///`administrative_district_level_2`, `administrative_district_level_3`, 
		///`first_name`, `last_name`, and `organization`. 
		///
		///When it comes to localization, the seller's language preferences 
		///(see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
		///are ignored for addresses. Even though Square products (such as Square Point of Sale 
		///and the Seller Dashboard) mostly use a seller's language preference in 
		///communication, when it comes to addresses, they will use English for a US address, 
		///Japanese for an address in Japan, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
		
		/// <summary>
		/// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal_money")]
		public V1Money Subtotal_money { get; set; }
		
		/// <summary>
		/// A tender represents a discrete monetary exchange. Square represents this
		///exchange as a money object with a specific currency and amount, where the
		///amount is given in the smallest denomination of the given currency.
		///
		///Square POS can accept more than one form of tender for a single payment (such
		///as by splitting a bill between a credit card and a gift card). The `tender`
		///field of the Payment object lists all forms of tender used for the payment.
		///
		///Split tender payments behave slightly differently from single tender payments:
		///
		///The receipt_url for a split tender corresponds only to the first tender listed
		///in the tender field. To get the receipt URLs for the remaining tenders, use
		///the receipt_url fields of the corresponding Tender objects.
		///
		///*A note on gift cards**: when a customer purchases a Square gift card from a
		///merchant, the merchant receives the full amount of the gift card in the
		///associated payment.
		///
		///When that gift card is used as a tender, the balance of the gift card is
		///reduced and the merchant receives no funds. A `Tender` object with a type of
		///`SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
		///associated payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tender")]
		public V1Tender Tender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_discount_money")]
		public V1Money Total_discount_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_price_money")]
		public V1Money Total_price_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_shipping_money")]
		public V1Money Total_shipping_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_tax_money")]
		public V1Money Total_tax_money { get; set; }
		
		/// <summary>
		/// The time when the order was last modified, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// V1OrderHistoryEntry
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1OrderHistoryEntry
	{
		
		/// <summary>
		/// The type of action performed on the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// The time when the action was performed, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
	}
	
	/// <summary>
	/// A tender represents a discrete monetary exchange. Square represents this
	///exchange as a money object with a specific currency and amount, where the
	///amount is given in the smallest denomination of the given currency.
	///
	///Square POS can accept more than one form of tender for a single payment (such
	///as by splitting a bill between a credit card and a gift card). The `tender`
	///field of the Payment object lists all forms of tender used for the payment.
	///
	///Split tender payments behave slightly differently from single tender payments:
	///
	///The receipt_url for a split tender corresponds only to the first tender listed
	///in the tender field. To get the receipt URLs for the remaining tenders, use
	///the receipt_url fields of the corresponding Tender objects.
	///
	///*A note on gift cards**: when a customer purchases a Square gift card from a
	///merchant, the merchant receives the full amount of the gift card in the
	///associated payment.
	///
	///When that gift card is used as a tender, the balance of the gift card is
	///reduced and the merchant receives no funds. A `Tender` object with a type of
	///`SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
	///associated payment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Tender
	{
		
		/// <summary>
		/// The brand of credit card provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_brand")]
		public string Card_brand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="change_back_money")]
		public V1Money Change_back_money { get; set; }
		
		/// <summary>
		/// The ID of the employee that processed the tender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// The tender's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry_method")]
		public string Entry_method { get; set; }
		
		/// <summary>
		/// The tender's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_exchange")]
		public System.Nullable<System.Boolean> Is_exchange { get; set; }
		
		/// <summary>
		/// A human-readable description of the tender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The last four digits of the provided credit card's account number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pan_suffix")]
		public string Pan_suffix { get; set; }
		
		/// <summary>
		/// Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_note")]
		public string Payment_note { get; set; }
		
		/// <summary>
		/// The URL of the receipt for the tender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_url")]
		public string Receipt_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_money")]
		public V1Money Refunded_money { get; set; }
		
		/// <summary>
		/// The time when the tender was settled, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settled_at")]
		public string Settled_at { get; set; }
		
		/// <summary>
		/// The time when the tender was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tendered_at")]
		public string Tendered_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tendered_money")]
		public V1Money Tendered_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public V1Money Total_money { get; set; }
		
		/// <summary>
		/// The type of tender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListPaymentsRequest
	{
		
		/// <summary>
		/// A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_token")]
		public string Batch_token { get; set; }
		
		/// <summary>
		/// The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		/// <summary>
		/// Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_partial")]
		public System.Nullable<System.Boolean> Include_partial { get; set; }
		
		/// <summary>
		/// The maximum number of payments to return in a single response. This value cannot exceed 200.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The order in which payments are listed in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListPaymentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public V1Payment[] Items { get; set; }
	}
	
	/// <summary>
	/// A payment represents a paid transaction between a Square merchant and a
	///customer. Payment details are usually available from Connect API endpoints
	///within a few minutes after the transaction completes.
	///
	///Each Payment object includes several fields that end in `_money`. These fields
	///describe the various amounts of money that contribute to the payment total:
	///
	///<ul>
	///<li>
	///Monetary values are <b>positive</b> if they represent an
	///<em>increase</em> in the amount of money the merchant receives (e.g.,
	///<code>tax_money</code>, <code>tip_money</code>).
	///</li>
	///<li>
	///Monetary values are <b>negative</b> if they represent an
	///<em>decrease</em> in the amount of money the merchant receives (e.g.,
	///<code>discount_money</code>, <code>refunded_money</code>).
	///</li>
	///</ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Payment
	{
		
		/// <summary>
		/// All of the additive taxes associated with the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additive_tax")]
		public V1PaymentTax[] Additive_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additive_tax_money")]
		public V1Money Additive_tax_money { get; set; }
		
		/// <summary>
		/// The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The unique identifier of the Square account that took the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator_id")]
		public string Creator_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Device Device { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount_money")]
		public V1Money Discount_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_sales_money")]
		public V1Money Gross_sales_money { get; set; }
		
		/// <summary>
		/// The payment's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// All of the inclusive taxes associated with the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusive_tax")]
		public V1PaymentTax[] Inclusive_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inclusive_tax_money")]
		public V1Money Inclusive_tax_money { get; set; }
		
		/// <summary>
		/// Indicates whether or not the payment is only partially paid for.
		///If true, this payment will have the tenders collected so far, but the
		///itemizations will be empty until the payment is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_partial")]
		public System.Nullable<System.Boolean> Is_partial { get; set; }
		
		/// <summary>
		/// The items purchased in the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemizations")]
		public V1PaymentItemization[] Itemizations { get; set; }
		
		/// <summary>
		/// The unique identifier of the merchant that took the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_sales_money")]
		public V1Money Net_sales_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_total_money")]
		public V1Money Net_total_money { get; set; }
		
		/// <summary>
		/// The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_url")]
		public string Payment_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processing_fee_money")]
		public V1Money Processing_fee_money { get; set; }
		
		/// <summary>
		/// The URL of the receipt for the payment. Note that for split tender
		///payments, this URL corresponds to the receipt for the first tender
		///listed in the payment's tender field. Each Tender object has its own
		///receipt_url field you can use to get the other receipts associated with
		///a split tender payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_url")]
		public string Receipt_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_money")]
		public V1Money Refunded_money { get; set; }
		
		/// <summary>
		/// All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public V1Refund[] Refunds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="surcharge_money")]
		public V1Money Surcharge_money { get; set; }
		
		/// <summary>
		/// A list of all surcharges associated with the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surcharges")]
		public V1PaymentSurcharge[] Surcharges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="swedish_rounding_money")]
		public V1Money Swedish_rounding_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tax_money")]
		public V1Money Tax_money { get; set; }
		
		/// <summary>
		/// All of the tenders associated with the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tender")]
		public V1Tender[] Tender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tip_money")]
		public V1Money Tip_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_collected_money")]
		public V1Money Total_collected_money { get; set; }
	}
	
	/// <summary>
	/// V1PaymentTax
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1PaymentTax
	{
		
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public V1Money Applied_money { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fee_id")]
		public string Fee_id { get; set; }
		
		/// <summary>
		/// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusion_type")]
		public string Inclusion_type { get; set; }
		
		/// <summary>
		/// The merchant-defined name of the tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public string Rate { get; set; }
	}
	
	/// <summary>
	/// Payment include an` itemizations` field that lists the items purchased,
	///along with associated fees, modifiers, and discounts. Each itemization has an
	///`itemization_type` field that indicates which of the following the itemization
	///represents:
	///
	///<ul>
	///<li>An item variation from the merchant's item library</li>
	///<li>A custom monetary amount</li>
	///<li>
	///An action performed on a Square gift card, such as activating or
	///reloading it.
	///</li>
	///</ul>
	///
	///*Note**: itemization information included in a `Payment` object reflects
	///details collected **at the time of the payment**. Details such as the name or
	///price of items might have changed since the payment was processed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1PaymentItemization
	{
		
		[System.Runtime.Serialization.DataMember(Name="discount_money")]
		public V1Money Discount_money { get; set; }
		
		/// <summary>
		/// All discounts applied to this itemization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discounts")]
		public V1PaymentDiscount[] Discounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_sales_money")]
		public V1Money Gross_sales_money { get; set; }
		
		/// <summary>
		/// V1PaymentItemDetail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_detail")]
		public V1PaymentItemDetail Item_detail { get; set; }
		
		/// <summary>
		/// The name of the item variation purchased, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_variation_name")]
		public string Item_variation_name { get; set; }
		
		/// <summary>
		/// The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemization_type")]
		public string Itemization_type { get; set; }
		
		/// <summary>
		/// All modifier options applied to this itemization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiers")]
		public V1PaymentModifier[] Modifiers { get; set; }
		
		/// <summary>
		/// The item's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_sales_money")]
		public V1Money Net_sales_money { get; set; }
		
		/// <summary>
		/// Notes entered by the merchant about the item at the time of payment, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The quantity of the item purchased. This can be a decimal value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="single_quantity_money")]
		public V1Money Single_quantity_money { get; set; }
		
		/// <summary>
		/// All taxes applied to this itemization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public V1PaymentTax[] Taxes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public V1Money Total_money { get; set; }
	}
	
	/// <summary>
	/// V1PaymentDiscount
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1PaymentDiscount
	{
		
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public V1Money Applied_money { get; set; }
		
		/// <summary>
		/// The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_id")]
		public string Discount_id { get; set; }
		
		/// <summary>
		/// The discount's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// V1PaymentItemDetail
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1PaymentItemDetail
	{
		
		/// <summary>
		/// The name of the item's merchant-defined category, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_name")]
		public string Category_name { get; set; }
		
		/// <summary>
		/// The unique ID of the item purchased, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_id")]
		public string Item_id { get; set; }
		
		/// <summary>
		/// The unique ID of the item variation purchased, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_variation_id")]
		public string Item_variation_id { get; set; }
		
		/// <summary>
		///  The item's merchant-defined SKU, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	/// <summary>
	/// V1PaymentModifier
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1PaymentModifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public V1Money Applied_money { get; set; }
		
		/// <summary>
		/// The ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_option_id")]
		public string Modifier_option_id { get; set; }
		
		/// <summary>
		/// The modifier option's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// V1Refund
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Refund
	{
		
		/// <summary>
		/// The time when the merchant initiated the refund for Square to process, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_exchange")]
		public System.Nullable<System.Boolean> Is_exchange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		/// <summary>
		/// A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange == true), payment_id is the ID of the original payment ID even if the payment includes other tenders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processed_at")]
		public string Processed_at { get; set; }
		
		/// <summary>
		/// The merchant-specified reason for the refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// All of the additive taxes associated with the refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_additive_tax")]
		public V1PaymentTax[] Refunded_additive_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_additive_tax_money")]
		public V1Money Refunded_additive_tax_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_discount_money")]
		public V1Money Refunded_discount_money { get; set; }
		
		/// <summary>
		/// All of the inclusive taxes associated with the refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_inclusive_tax")]
		public V1PaymentTax[] Refunded_inclusive_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_inclusive_tax_money")]
		public V1Money Refunded_inclusive_tax_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_money")]
		public V1Money Refunded_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_processing_fee_money")]
		public V1Money Refunded_processing_fee_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_surcharge_money")]
		public V1Money Refunded_surcharge_money { get; set; }
		
		/// <summary>
		/// A list of all surcharges associated with the refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_surcharges")]
		public V1PaymentSurcharge[] Refunded_surcharges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_tax_money")]
		public V1Money Refunded_tax_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_tip_money")]
		public V1Money Refunded_tip_money { get; set; }
		
		/// <summary>
		/// The type of refund
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// V1PaymentSurcharge
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1PaymentSurcharge
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public V1Money Amount_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public V1Money Applied_money { get; set; }
		
		/// <summary>
		/// The name of the surcharge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, "0.7" corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public string Rate { get; set; }
		
		/// <summary>
		/// A Square-issued unique identifier associated with the surcharge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surcharge_id")]
		public string Surcharge_id { get; set; }
		
		/// <summary>
		/// Indicates whether the surcharge is taxable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxable")]
		public System.Nullable<System.Boolean> Taxable { get; set; }
		
		/// <summary>
		/// The list of taxes that should be applied to the surcharge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public V1PaymentTax[] Taxes { get; set; }
		
		/// <summary>
		/// Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListRefundsRequest
	{
		
		/// <summary>
		/// A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_token")]
		public string Batch_token { get; set; }
		
		/// <summary>
		/// The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		/// <summary>
		/// The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The order in which payments are listed in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListRefundsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public V1Refund[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListSettlementsRequest
	{
		
		/// <summary>
		/// A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_token")]
		public string Batch_token { get; set; }
		
		/// <summary>
		/// The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		/// <summary>
		/// The maximum number of settlements to return in a single response. This value cannot exceed 200.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The order in which settlements are listed in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
		
		/// <summary>
		/// Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1ListSettlementsRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SENT")]
		SENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ListSettlementsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public V1Settlement[] Items { get; set; }
	}
	
	/// <summary>
	/// V1Settlement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Settlement
	{
		
		/// <summary>
		/// The Square-issued unique identifier for the bank account associated with the settlement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_account_id")]
		public string Bank_account_id { get; set; }
		
		/// <summary>
		/// The entries included in this settlement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public V1SettlementEntry[] Entries { get; set; }
		
		/// <summary>
		/// The settlement's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initiated_at")]
		public string Initiated_at { get; set; }
		
		/// <summary>
		/// The settlement's current status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public V1Money Total_money { get; set; }
	}
	
	/// <summary>
	/// V1SettlementEntry
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1SettlementEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public V1Money Amount_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fee_money")]
		public V1Money Fee_money { get; set; }
		
		/// <summary>
		/// The settlement's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// The settlement's current status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1OrderHistoryEntryAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORDER_PLACED")]
		ORDER_PLACED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DECLINED")]
		DECLINED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAYMENT_RECEIVED")]
		PAYMENT_RECEIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFUNDED")]
		REFUNDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1OrderState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPEN")]
		OPEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFUNDED")]
		REFUNDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECTED")]
		REJECTED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1PaymentItemizationItemizationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ITEM")]
		ITEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM_AMOUNT")]
		CUSTOM_AMOUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIFT_CARD_ACTIVATION")]
		GIFT_CARD_ACTIVATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIFT_CARD_RELOAD")]
		GIFT_CARD_RELOAD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIFT_CARD_UNKNOWN")]
		GIFT_CARD_UNKNOWN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1PaymentSurchargeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO_GRATUITY")]
		AUTO_GRATUITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM")]
		CUSTOM = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1PaymentTaxInclusionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITIVE")]
		ADDITIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUSIVE")]
		INCLUSIVE = 1,
	}
	
	/// <summary>
	/// Represents a phone number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1PhoneNumber
	{
		
		/// <summary>
		/// The phone number's international calling code. For US phone numbers, this value is +1.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="calling_code")]
		public string Calling_code { get; set; }
		
		/// <summary>
		/// The phone number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1RefundType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FULL")]
		FULL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARTIAL")]
		PARTIAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1RetrieveEmployeeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1RetrieveEmployeeRoleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1RetrieveOrderRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1RetrievePaymentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1RetrieveSettlementRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1SettlementEntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADJUSTMENT")]
		ADJUSTMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BALANCE_CHARGE")]
		BALANCE_CHARGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHARGE")]
		CHARGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FREE_PROCESSING")]
		FREE_PROCESSING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HOLD_ADJUSTMENT")]
		HOLD_ADJUSTMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAID_SERVICE_FEE")]
		PAID_SERVICE_FEE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAID_SERVICE_FEE_REFUND")]
		PAID_SERVICE_FEE_REFUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REDEMPTION_CODE")]
		REDEMPTION_CODE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFUND")]
		REFUND = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RETURNED_PAYOUT")]
		RETURNED_PAYOUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_CAPITAL_ADVANCE")]
		SQUARE_CAPITAL_ADVANCE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_CAPITAL_PAYMENT")]
		SQUARE_CAPITAL_PAYMENT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_CAPITAL_REVERSED_PAYMENT")]
		SQUARE_CAPITAL_REVERSED_PAYMENT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBSCRIPTION_FEE")]
		SUBSCRIPTION_FEE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBSCRIPTION_FEE_REFUND")]
		SUBSCRIPTION_FEE_REFUND = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCENTED_PAYMENT")]
		INCENTED_PAYMENT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RETURNED_ACH_ENTRY")]
		RETURNED_ACH_ENTRY = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RETURNED_SQUARE_275")]
		RETURNED_SQUARE_275 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_275")]
		SQUARE_275 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_CARD")]
		SQUARE_CARD = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1SettlementStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SENT")]
		SENT = 1,
	}
	
	/// <summary>
	/// The brand of a credit card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1TenderCardBrand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_BRAND")]
		OTHER_BRAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VISA")]
		VISA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASTER_CARD")]
		MASTER_CARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMERICAN_EXPRESS")]
		AMERICAN_EXPRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCOVER")]
		DISCOVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCOVER_DINERS")]
		DISCOVER_DINERS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JCB")]
		JCB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHINA_UNIONPAY")]
		CHINA_UNIONPAY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_GIFT_CARD")]
		SQUARE_GIFT_CARD = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1TenderEntryMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANUAL")]
		MANUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCANNED")]
		SCANNED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_CASH")]
		SQUARE_CASH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_WALLET")]
		SQUARE_WALLET = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SWIPED")]
		SWIPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEB_FORM")]
		WEB_FORM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1TenderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREDIT_CARD")]
		CREDIT_CARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CASH")]
		CASH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THIRD_PARTY_CARD")]
		THIRD_PARTY_CARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_SALE")]
		NO_SALE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_WALLET")]
		SQUARE_WALLET = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUARE_GIFT_CARD")]
		SQUARE_GIFT_CARD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1UpdateEmployeeRequest
	{
		
		/// <summary>
		/// Represents one of a business's employees.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public V1Employee Body { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1UpdateEmployeeRoleRequest
	{
		
		/// <summary>
		/// V1EmployeeRole
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public V1EmployeeRole Body { get; set; }
	}
	
	/// <summary>
	/// V1UpdateOrderRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1UpdateOrderRequest
	{
		
		/// <summary>
		/// The action to perform on the order (COMPLETE, CANCEL, or REFUND).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceled_note")]
		public string Canceled_note { get; set; }
		
		/// <summary>
		/// A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed_note")]
		public string Completed_note { get; set; }
		
		/// <summary>
		/// A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_note")]
		public string Refunded_note { get; set; }
		
		/// <summary>
		/// The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipped_tracking_number")]
		public string Shipped_tracking_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1UpdateOrderRequestAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE")]
		COMPLETE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCEL")]
		CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFUND")]
		REFUND = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoidTransactionRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [VoidTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/void-transaction) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoidTransactionResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// The days of the week.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Weekday
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MON")]
		MON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TUE")]
		TUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WED")]
		WED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THU")]
		THU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FRI")]
		FRI = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAT")]
		SAT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUN")]
		SUN = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Invoice_delivery_methodInvoiceDeliveryMethod
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// CreateMobileAuthorizationCode
		/// Generates code to authorize a mobile application to connect to a Square card reader
		/// 
		/// Authorization codes are one-time-use and expire __60 minutes__ after being issued.
		/// 
		/// __Important:__ The `Authorization` header you provide to this endpoint must have the following format:
		/// 
		/// ```
		/// Authorization: Bearer ACCESS_TOKEN
		/// ```
		/// 
		/// Replace `ACCESS_TOKEN` with a
		/// [valid production authorization credential](https://developer.squareup.com/docs/build-basics/access-tokens).
		/// CreateMobileAuthorizationCode mobile/authorization-code
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateMobileAuthorizationCodeResponse> CreateMobileAuthorizationCodeAsync(CreateMobileAuthorizationCodeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mobile/authorization-code";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateMobileAuthorizationCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RenewToken
		/// `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see
		/// [Migrate from Renew to Refresh OAuth Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
		/// 
		/// 
		/// Renews an OAuth access token before it expires.
		/// 
		/// OAuth access tokens besides your application's personal access token expire after __30 days__.
		/// You can also renew expired tokens within __15 days__ of their expiration.
		/// You cannot renew an access token that has been expired for more than 15 days.
		/// Instead, the associated user must re-complete the OAuth flow from the beginning.
		/// 
		/// __Important:__ The `Authorization` header for this endpoint must have the
		/// following format:
		/// 
		/// ```
		/// Authorization: Client APPLICATION_SECRET
		/// ```
		/// 
		/// Replace `APPLICATION_SECRET` with the application secret on the Credentials
		/// page in the [developer dashboard](https://developer.squareup.com/apps).
		/// RenewToken oauth2/clients/{client_id}/access-token/renew
		/// </summary>
		/// <param name="client_id">Your application ID, available from the [developer dashboard](https://developer.squareup.com/apps).</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<RenewTokenResponse> RenewTokenAsync(string client_id, RenewTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth2/clients/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"/access-token/renew";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RenewTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RevokeToken
		/// Revokes an access token generated with the OAuth flow.
		/// 
		/// If an account has more than one OAuth access token for your application, this
		/// endpoint revokes all of them, regardless of which token you specify. When an
		/// OAuth access token is revoked, all of the active subscriptions associated
		/// with that OAuth token are canceled immediately.
		/// 
		/// __Important:__ The `Authorization` header for this endpoint must have the
		/// following format:
		/// 
		/// ```
		/// Authorization: Client APPLICATION_SECRET
		/// ```
		/// 
		/// Replace `APPLICATION_SECRET` with the application secret on the OAuth
		/// page in the [developer dashboard](https://developer.squareup.com/apps).
		/// RevokeToken oauth2/revoke
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<RevokeTokenResponse> RevokeTokenAsync(RevokeTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth2/revoke";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RevokeTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ObtainToken
		/// Returns an OAuth access token.
		/// 
		/// The endpoint supports distinct methods of obtaining OAuth access tokens.
		/// Applications specify a method by adding the `grant_type` parameter
		/// in the request and also provide relevant information.
		/// 
		/// __Note:__ Regardless of the method application specified,
		/// the endpoint always returns two items; an OAuth access token and
		/// a refresh token in the response.
		/// 
		/// __OAuth tokens should only live on secure servers. Application clients
		/// should never interact directly with OAuth tokens__.
		/// ObtainToken oauth2/token
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<ObtainTokenResponse> ObtainTokenAsync(ObtainTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth2/token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ObtainTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListEmployees
		/// Provides summary information for all of a business's employees.
		/// ListEmployees v1/me/employees
		/// </summary>
		/// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC</param>
		/// <param name="begin_updated_at">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format</param>
		/// <param name="end_updated_at">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="begin_created_at">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="end_created_at">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).</param>
		/// <param name="external_id">If provided, the endpoint returns only employee entities with the specified external_id.</param>
		/// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.</param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Employee[]> ListEmployeesAsync(string order, string begin_updated_at, string end_updated_at, string begin_created_at, string end_created_at, string status, string external_id, int limit, string batch_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/me/employees?order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&begin_updated_at=" + (begin_updated_at==null? "" : System.Uri.EscapeDataString(begin_updated_at))+"&end_updated_at=" + (end_updated_at==null? "" : System.Uri.EscapeDataString(end_updated_at))+"&begin_created_at=" + (begin_created_at==null? "" : System.Uri.EscapeDataString(begin_created_at))+"&end_created_at=" + (end_created_at==null? "" : System.Uri.EscapeDataString(end_created_at))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&external_id=" + (external_id==null? "" : System.Uri.EscapeDataString(external_id))+"&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Employee[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateEmployee
		/// Use the CreateEmployee endpoint to add an employee to a Square
		/// account. Employees created with the Connect API have an initial status
		/// of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale
		/// until they are activated from the Square Dashboard. Employee status
		/// cannot be changed with the Connect API.
		/// 
		/// Employee entities cannot be deleted. To disable employee profiles,
		/// set the employee's status to <code>INACTIVE</code>
		/// CreateEmployee v1/me/employees
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Employee> CreateEmployeeAsync(V1Employee requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/me/employees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Employee>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveEmployee
		/// Provides the details for a single employee.
		/// RetrieveEmployee v1/me/employees/{employee_id}
		/// </summary>
		/// <param name="employee_id">The employee's ID.</param>
		/// <returns>Success</returns>
		public async Task<V1Employee> RetrieveEmployeeAsync(string employee_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/me/employees/"+ (employee_id==null? "" : System.Uri.EscapeDataString(employee_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Employee>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateEmployee
		/// UpdateEmployee v1/me/employees/{employee_id}
		/// </summary>
		/// <param name="employee_id">The ID of the role to modify.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Employee> UpdateEmployeeAsync(string employee_id, V1Employee requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/me/employees/"+ (employee_id==null? "" : System.Uri.EscapeDataString(employee_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Employee>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListEmployeeRoles
		/// Provides summary information for all of a business's employee roles.
		/// ListEmployeeRoles v1/me/roles
		/// </summary>
		/// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC</param>
		/// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.</param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1EmployeeRole[]> ListEmployeeRolesAsync(string order, int limit, string batch_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/me/roles?order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1EmployeeRole[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateEmployeeRole
		/// Creates an employee role you can then assign to employees.
		/// 
		/// Square accounts can include any number of roles that can be assigned to
		/// employees. These roles define the actions and permissions granted to an
		/// employee with that role. For example, an employee with a "Shift Manager"
		/// role might be able to issue refunds in Square Point of Sale, whereas an
		/// employee with a "Clerk" role might not.
		/// 
		/// Roles are assigned with the [V1UpdateEmployee](https://developer.squareup.com/reference/square_2021-08-18/v1-employees-api/update-employee-role)
		/// endpoint. An employee can have only one role at a time.
		/// 
		/// If an employee has no role, they have none of the permissions associated
		/// with roles. All employees can accept payments with Square Point of Sale.
		/// CreateEmployeeRole v1/me/roles
		/// </summary>
		/// <param name="requestBody">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
		/// <returns>Success</returns>
		public async Task<V1EmployeeRole> CreateEmployeeRoleAsync(V1EmployeeRole requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/me/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1EmployeeRole>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveEmployeeRole
		/// Provides the details for a single employee role.
		/// RetrieveEmployeeRole v1/me/roles/{role_id}
		/// </summary>
		/// <param name="role_id">The role's ID.</param>
		/// <returns>Success</returns>
		public async Task<V1EmployeeRole> RetrieveEmployeeRoleAsync(string role_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/me/roles/"+ (role_id==null? "" : System.Uri.EscapeDataString(role_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1EmployeeRole>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateEmployeeRole
		/// Modifies the details of an employee role.
		/// UpdateEmployeeRole v1/me/roles/{role_id}
		/// </summary>
		/// <param name="role_id">The ID of the role to modify.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1EmployeeRole> UpdateEmployeeRoleAsync(string role_id, V1EmployeeRole requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/me/roles/"+ (role_id==null? "" : System.Uri.EscapeDataString(role_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1EmployeeRole>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListOrders
		/// Provides summary information for a merchant's online store orders.
		/// ListOrders v1/{location_id}/orders
		/// </summary>
		/// <param name="location_id">The ID of the location to list online store orders for.</param>
		/// <param name="order">The order in which payments are listed in the response.</param>
		/// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200.</param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Order[]> ListOrdersAsync(string location_id, string order, int limit, string batch_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/orders&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Order[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveOrder
		/// Provides comprehensive information for a single online store order, including the order's history.
		/// RetrieveOrder v1/{location_id}/orders/{order_id}
		/// </summary>
		/// <param name="location_id">The ID of the order's associated location.</param>
		/// <param name="order_id">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
		/// <returns>Success</returns>
		public async Task<V1Order> RetrieveOrderAsync(string location_id, string order_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/orders/"+ (order_id==null? "" : System.Uri.EscapeDataString(order_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateOrder
		/// Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
		/// UpdateOrder v1/{location_id}/orders/{order_id}
		/// </summary>
		/// <param name="location_id">The ID of the order's associated location.</param>
		/// <param name="order_id">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Order> UpdateOrderAsync(string location_id, string order_id, V1UpdateOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/orders/"+ (order_id==null? "" : System.Uri.EscapeDataString(order_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListPayments
		/// Provides summary information for all payments taken for a given
		/// Square account during a date range. Date ranges cannot exceed 1 year in
		/// length. See Date ranges for details of inclusive and exclusive dates.
		/// 
		/// *Note**: Details for payments processed with Square Point of Sale while
		/// in offline mode may not be transmitted to Square for up to 72 hours.
		/// Offline payments have a `created_at` value that reflects the time the
		/// payment was originally processed, not the time it was subsequently
		/// transmitted to Square. Consequently, the ListPayments endpoint might
		/// list an offline payment chronologically between online payments that
		/// were seen in a previous request.
		/// ListPayments v1/{location_id}/payments
		/// </summary>
		/// <param name="location_id">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
		/// <param name="order">The order in which payments are listed in the response.</param>
		/// <param name="begin_time">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.</param>
		/// <param name="end_time">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.</param>
		/// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200.</param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <param name="include_partial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.</param>
		/// <returns>Success</returns>
		public async Task<V1Payment[]> ListPaymentsAsync(string location_id, string order, string begin_time, string end_time, int limit, string batch_token, bool include_partial, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/payments&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token))+"&include_partial="+include_partial;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Payment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrievePayment
		/// Provides comprehensive information for a single payment.
		/// RetrievePayment v1/{location_id}/payments/{payment_id}
		/// </summary>
		/// <param name="location_id">The ID of the payment's associated location.</param>
		/// <param name="payment_id">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Payment> RetrievePaymentAsync(string location_id, string payment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/payments/"+ (payment_id==null? "" : System.Uri.EscapeDataString(payment_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Payment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListRefunds
		/// Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
		/// ListRefunds v1/{location_id}/refunds
		/// </summary>
		/// <param name="location_id">The ID of the location to list refunds for.</param>
		/// <param name="order">The order in which payments are listed in the response.</param>
		/// <param name="begin_time">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.</param>
		/// <param name="end_time">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.</param>
		/// <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.</param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Refund[]> ListRefundsAsync(string location_id, string order, string begin_time, string end_time, int limit, string batch_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/refunds&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Refund[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateRefund
		/// Issues a refund for a previously processed payment. You must issue
		/// a refund within 60 days of the associated payment.
		/// 
		/// You cannot issue a partial refund for a split tender payment. You must
		/// instead issue a full or partial refund for a particular tender, by
		/// providing the applicable tender id to the V1CreateRefund endpoint.
		/// Issuing a full refund for a split tender payment refunds all tenders
		/// associated with the payment.
		/// 
		/// Issuing a refund for a card payment is not reversible. For development
		/// purposes, you can create fake cash payments in Square Point of Sale and
		/// refund them.
		/// CreateRefund v1/{location_id}/refunds
		/// </summary>
		/// <param name="location_id">The ID of the original payment's associated location.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Refund> CreateRefundAsync(string location_id, V1CreateRefundRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/refunds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Refund>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListSettlements
		/// Provides summary information for all deposits and withdrawals
		/// initiated by Square to a linked bank account during a date range. Date
		/// ranges cannot exceed one year in length.
		/// 
		/// *Note**: the ListSettlements endpoint does not provide entry
		/// information.
		/// ListSettlements v1/{location_id}/settlements
		/// </summary>
		/// <param name="location_id">The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business's locations.</param>
		/// <param name="order">The order in which settlements are listed in the response.</param>
		/// <param name="begin_time">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.</param>
		/// <param name="end_time">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.</param>
		/// <param name="limit">The maximum number of settlements to return in a single response. This value cannot exceed 200.</param>
		/// <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).</param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Settlement[]> ListSettlementsAsync(string location_id, string order, string begin_time, string end_time, int limit, string status, string batch_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/settlements&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&limit="+limit+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Settlement[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveSettlement
		/// Provides comprehensive information for a single settlement.
		/// 
		/// The returned `Settlement` objects include an `entries` field that lists
		/// the transactions that contribute to the settlement total. Most
		/// settlement entries correspond to a payment payout, but settlement
		/// entries are also generated for less common events, like refunds, manual
		/// adjustments, or chargeback holds.
		/// 
		/// Square initiates its regular deposits as indicated in the
		/// [Deposit Options with Square](https://squareup.com/help/us/en/article/3807)
		/// help article. Details for a regular deposit are usually not available
		/// from Connect API endpoints before 10 p.m. PST the same day.
		/// 
		/// Square does not know when an initiated settlement **completes**, only
		/// whether it has failed. A completed settlement is typically reflected in
		/// a bank account within 3 business days, but in exceptional cases it may
		/// take longer.
		/// RetrieveSettlement v1/{location_id}/settlements/{settlement_id}
		/// </summary>
		/// <param name="location_id">The ID of the settlements's associated location.</param>
		/// <param name="settlement_id">The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Settlement> RetrieveSettlementAsync(string location_id, string settlement_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/settlements/"+ (settlement_id==null? "" : System.Uri.EscapeDataString(settlement_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Settlement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RegisterDomain
		/// Activates a domain for use with Apple Pay on the Web and Square. A validation
		/// is performed on this domain by Apple to ensure that it is properly set up as
		/// an Apple Pay enabled domain.
		/// 
		/// This endpoint provides an easy way for platform developers to bulk activate
		/// Apple Pay on the Web with Square for merchants using their platform.
		/// 
		/// To learn more about Web Apple Pay, see
		/// [Add the Apple Pay on the Web Button](https://developer.squareup.com/docs/payment-form/add-digital-wallets/apple-pay).
		/// RegisterDomain v2/apple-pay/domains
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<RegisterDomainResponse> RegisterDomainAsync(RegisterDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apple-pay/domains";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListBankAccounts
		/// Returns a list of [BankAccount](https://developer.squareup.com/reference/square_2021-08-18/objects/BankAccount) objects linked to a Square account.
		/// ListBankAccounts v2/bank-accounts
		/// </summary>
		/// <param name="cursor">The pagination cursor returned by a previous call to this endpoint.
		///Use it in the next `ListBankAccounts` request to retrieve the next set 
		///of results.
		///
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.</param>
		/// <param name="limit">Upper limit on the number of bank accounts to return in the response. 
		///Currently, 1000 is the largest supported limit. You can specify a limit 
		///of up to 1000 bank accounts. This is also the default limit.</param>
		/// <param name="location_id">Location ID. You can specify this optional filter 
		///to retrieve only the linked bank accounts belonging to a specific location.</param>
		/// <returns>Success</returns>
		public async Task<ListBankAccountsResponse> ListBankAccountsAsync(string cursor, int limit, string location_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bank-accounts?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBankAccountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetBankAccountByV1Id
		/// Returns details of a [BankAccount](https://developer.squareup.com/reference/square_2021-08-18/objects/BankAccount) identified by V1 bank account ID.
		/// GetBankAccountByV1Id v2/bank-accounts/by-v1-id/{v1_bank_account_id}
		/// </summary>
		/// <param name="v1_bank_account_id">Connect V1 ID of the desired `BankAccount`. For more information, see 
		///[Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api#retrieve-a-bank-account-by-using-an-id-issued-by-v1-bank-accounts-api).</param>
		/// <returns>Success</returns>
		public async Task<GetBankAccountByV1IdResponse> GetBankAccountByV1IdAsync(string v1_bank_account_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bank-accounts/by-v1-id/"+ (v1_bank_account_id==null? "" : System.Uri.EscapeDataString(v1_bank_account_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBankAccountByV1IdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetBankAccount
		/// Returns details of a [BankAccount](https://developer.squareup.com/reference/square_2021-08-18/objects/BankAccount)
		/// linked to a Square account.
		/// GetBankAccount v2/bank-accounts/{bank_account_id}
		/// </summary>
		/// <param name="bank_account_id">Square-issued ID of the desired `BankAccount`.</param>
		/// <returns>Success</returns>
		public async Task<GetBankAccountResponse> GetBankAccountAsync(string bank_account_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bank-accounts/"+ (bank_account_id==null? "" : System.Uri.EscapeDataString(bank_account_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBankAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateBooking
		/// Creates a booking.
		/// CreateBooking v2/bookings
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateBookingResponse> CreateBookingAsync(CreateBookingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bookings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBookingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchAvailability
		/// Searches for availabilities for booking.
		/// SearchAvailability v2/bookings/availability/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchAvailabilityResponse> SearchAvailabilityAsync(SearchAvailabilityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bookings/availability/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchAvailabilityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveBusinessBookingProfile
		/// Retrieves a seller's booking profile.
		/// RetrieveBusinessBookingProfile v2/bookings/business-booking-profile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RetrieveBusinessBookingProfileResponse> RetrieveBusinessBookingProfileAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bookings/business-booking-profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveBusinessBookingProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListTeamMemberBookingProfiles
		/// Lists booking profiles for team members.
		/// ListTeamMemberBookingProfiles v2/bookings/team-member-booking-profiles
		/// </summary>
		/// <param name="bookable_only">Indicates whether to include only bookable team members in the returned result (`true`) or not (`false`).</param>
		/// <param name="limit">The maximum number of results to return.</param>
		/// <param name="cursor">The cursor for paginating through the results.</param>
		/// <param name="location_id">Indicates whether to include only team members enabled at the given location in the returned result.</param>
		/// <returns>Success</returns>
		public async Task<ListTeamMemberBookingProfilesResponse> ListTeamMemberBookingProfilesAsync(bool bookable_only, int limit, string cursor, string location_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bookings/team-member-booking-profiles?bookable_only="+bookable_only+"&limit="+limit+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTeamMemberBookingProfilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveTeamMemberBookingProfile
		/// Retrieves a team member's booking profile.
		/// RetrieveTeamMemberBookingProfile v2/bookings/team-member-booking-profiles/{team_member_id}
		/// </summary>
		/// <param name="team_member_id">The ID of the team member to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveTeamMemberBookingProfileResponse> RetrieveTeamMemberBookingProfileAsync(string team_member_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bookings/team-member-booking-profiles/"+ (team_member_id==null? "" : System.Uri.EscapeDataString(team_member_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveTeamMemberBookingProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveBooking
		/// Retrieves a booking.
		/// RetrieveBooking v2/bookings/{booking_id}
		/// </summary>
		/// <param name="booking_id">The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-retrieved booking.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveBookingResponse> RetrieveBookingAsync(string booking_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bookings/"+ (booking_id==null? "" : System.Uri.EscapeDataString(booking_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveBookingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateBooking
		/// Updates a booking.
		/// UpdateBooking v2/bookings/{booking_id}
		/// </summary>
		/// <param name="booking_id">The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-updated booking.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateBookingResponse> UpdateBookingAsync(string booking_id, UpdateBookingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bookings/"+ (booking_id==null? "" : System.Uri.EscapeDataString(booking_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBookingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CancelBooking
		/// Cancels an existing booking.
		/// CancelBooking v2/bookings/{booking_id}/cancel
		/// </summary>
		/// <param name="booking_id">The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-cancelled booking.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CancelBookingResponse> CancelBookingAsync(string booking_id, CancelBookingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bookings/"+ (booking_id==null? "" : System.Uri.EscapeDataString(booking_id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelBookingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListCards
		/// Retrieves a list of cards owned by the account making the request.
		/// A max of 25 cards will be returned.
		/// ListCards v2/cards
		/// </summary>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.</param>
		/// <param name="customer_id">Limit results to cards associated with the customer supplied.
		///By default, all cards owned by the merchant are returned.</param>
		/// <param name="include_disabled">Includes disabled cards.
		///By default, all enabled cards owned by the merchant are returned.</param>
		/// <param name="reference_id">Limit results to cards associated with the reference_id supplied.</param>
		/// <param name="sort_order">Sorts the returned list by when the card was created with the specified order.
		///This field defaults to ASC.</param>
		/// <returns>Success</returns>
		public async Task<ListCardsResponse> ListCardsAsync(string cursor, string customer_id, bool include_disabled, string reference_id, string sort_order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cards?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&customer_id=" + (customer_id==null? "" : System.Uri.EscapeDataString(customer_id))+"&include_disabled="+include_disabled+"&reference_id=" + (reference_id==null? "" : System.Uri.EscapeDataString(reference_id))+"&sort_order=" + (sort_order==null? "" : System.Uri.EscapeDataString(sort_order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCardsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateCard
		/// Adds a card on file to an existing merchant.
		/// CreateCard v2/cards
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateCardResponse> CreateCardAsync(CreateCardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveCard
		/// Retrieves details for a specific Card.
		/// RetrieveCard v2/cards/{card_id}
		/// </summary>
		/// <param name="card_id">Unique ID for the desired Card.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveCardResponse> RetrieveCardAsync(string card_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cards/"+ (card_id==null? "" : System.Uri.EscapeDataString(card_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DisableCard
		/// Disables the card, preventing any further updates or charges.
		/// Disabling an already disabled card is allowed but has no effect.
		/// DisableCard v2/cards/{card_id}/disable
		/// </summary>
		/// <param name="card_id">Unique ID for the desired Card.</param>
		/// <returns>Success</returns>
		public async Task<DisableCardResponse> DisableCardAsync(string card_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cards/"+ (card_id==null? "" : System.Uri.EscapeDataString(card_id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisableCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListCashDrawerShifts
		/// Provides the details for all of the cash drawer shifts for a location
		/// in a date range.
		/// ListCashDrawerShifts v2/cash-drawers/shifts
		/// </summary>
		/// <param name="location_id">The ID of the location to query for a list of cash drawer shifts.</param>
		/// <param name="sort_order">The order in which cash drawer shifts are listed in the response,
		///based on their opened_at field. Default value: ASC</param>
		/// <param name="begin_time">The inclusive start time of the query on opened_at, in ISO 8601 format.</param>
		/// <param name="end_time">The exclusive end date of the query on opened_at, in ISO 8601 format.</param>
		/// <param name="limit">Number of cash drawer shift events in a page of results (200 by
		///default, 1000 max).</param>
		/// <param name="cursor">Opaque cursor for fetching the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ListCashDrawerShiftsResponse> ListCashDrawerShiftsAsync(string location_id, string sort_order, string begin_time, string end_time, int limit, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cash-drawers/shifts?location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"&sort_order=" + (sort_order==null? "" : System.Uri.EscapeDataString(sort_order))+"&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&limit="+limit+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCashDrawerShiftsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveCashDrawerShift
		/// Provides the summary details for a single cash drawer shift. See
		/// [ListCashDrawerShiftEvents](https://developer.squareup.com/reference/square_2021-08-18/cash-drawers-api/list-cash-drawer-shift-events) for a list of cash drawer shift events.
		/// RetrieveCashDrawerShift v2/cash-drawers/shifts/{shift_id}
		/// </summary>
		/// <param name="location_id">The ID of the location to retrieve cash drawer shifts from.</param>
		/// <param name="shift_id">The shift ID.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveCashDrawerShiftResponse> RetrieveCashDrawerShiftAsync(string location_id, string shift_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cash-drawers/shifts/"+ (shift_id==null? "" : System.Uri.EscapeDataString(shift_id))+"?location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveCashDrawerShiftResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListCashDrawerShiftEvents
		/// Provides a paginated list of events for a single cash drawer shift.
		/// ListCashDrawerShiftEvents v2/cash-drawers/shifts/{shift_id}/events
		/// </summary>
		/// <param name="location_id">The ID of the location to list cash drawer shifts for.</param>
		/// <param name="shift_id">The shift ID.</param>
		/// <param name="limit">Number of resources to be returned in a page of results (200 by
		///default, 1000 max).</param>
		/// <param name="cursor">Opaque cursor for fetching the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ListCashDrawerShiftEventsResponse> ListCashDrawerShiftEventsAsync(string location_id, string shift_id, int limit, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cash-drawers/shifts/"+ (shift_id==null? "" : System.Uri.EscapeDataString(shift_id))+"/events?location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"&limit="+limit+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCashDrawerShiftEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// BatchDeleteCatalogObjects
		/// Deletes a set of [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)s based on the
		/// provided list of target IDs and returns a set of successfully deleted IDs in
		/// the response. Deletion is a cascading event such that all children of the
		/// targeted object are also deleted. For example, deleting a CatalogItem will
		/// also delete all of its [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
		/// children.
		/// 
		/// `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted
		/// IDs can be deleted. The response will only include IDs that were
		/// actually deleted.
		/// BatchDeleteCatalogObjects v2/catalog/batch-delete
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchDeleteCatalogObjectsResponse> BatchDeleteCatalogObjectsAsync(BatchDeleteCatalogObjectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/batch-delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDeleteCatalogObjectsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// BatchRetrieveCatalogObjects
		/// Returns a set of objects based on the provided ID.
		/// Each [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) returned in the set includes all of its
		/// child information including: all of its
		/// [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) objects, references to
		/// its [CatalogModifierList](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifierList) objects, and the ids of
		/// any [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects that apply to it.
		/// BatchRetrieveCatalogObjects v2/catalog/batch-retrieve
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchRetrieveCatalogObjectsResponse> BatchRetrieveCatalogObjectsAsync(BatchRetrieveCatalogObjectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/batch-retrieve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchRetrieveCatalogObjectsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// BatchUpsertCatalogObjects
		/// Creates or updates up to 10,000 target objects based on the provided
		/// list of objects. The target objects are grouped into batches and each batch is
		/// inserted/updated in an all-or-nothing manner. If an object within a batch is
		/// malformed in some way, or violates a database constraint, the entire batch
		/// containing that item will be disregarded. However, other batches in the same
		/// request may still succeed. Each batch may contain up to 1,000 objects, and
		/// batches will be processed in order as long as the total object count for the
		/// request (items, variations, modifier lists, discounts, and taxes) is no more
		/// than 10,000.
		/// BatchUpsertCatalogObjects v2/catalog/batch-upsert
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchUpsertCatalogObjectsResponse> BatchUpsertCatalogObjectsAsync(BatchUpsertCatalogObjectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/batch-upsert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpsertCatalogObjectsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CatalogInfo
		/// Retrieves information about the Square Catalog API, such as batch size
		/// limits that can be used by the `BatchUpsertCatalogObjects` endpoint.
		/// CatalogInfo v2/catalog/info
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CatalogInfoResponse> CatalogInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/info";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CatalogInfoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListCatalog
		/// Returns a list of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s that includes
		/// all objects of a set of desired types (for example, all [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)
		/// and [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects) in the catalog. The `types` parameter
		/// is specified as a comma-separated list of valid [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) types:
		/// `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.
		/// 
		/// __Important:__ ListCatalog does not return deleted catalog items. To retrieve
		/// deleted catalog items, use [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects)
		/// and set the `include_deleted_objects` attribute value to `true`.
		/// ListCatalog v2/catalog/list
		/// </summary>
		/// <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request.
		///The page size is currently set to be 100.
		///See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.</param>
		/// <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve.
		///
		///The valid values are defined in the [CatalogObjectType](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) enum, including
		///`ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`,
		///`MODIFIER`, `MODIFIER_LIST`, or `IMAGE`.
		///
		///If this is unspecified, the operation returns objects of all the types at the version of the Square API used to make the request.</param>
		/// <param name="catalog_version">The specific version of the catalog objects to be included in the response. 
		///This allows you to retrieve historical
		///versions of objects. The specified version value is matched against
		///the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s' `version` attribute.</param>
		/// <returns>Success</returns>
		public async Task<ListCatalogResponse> ListCatalogAsync(string cursor, string types, long catalog_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/list?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&catalog_version="+catalog_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCatalogResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpsertCatalogObject
		/// Creates or updates the target [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject).
		/// UpsertCatalogObject v2/catalog/object
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpsertCatalogObjectResponse> UpsertCatalogObjectAsync(UpsertCatalogObjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/object";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpsertCatalogObjectResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeleteCatalogObject
		/// Deletes a single [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) based on the
		/// provided ID and returns the set of successfully deleted IDs in the response.
		/// Deletion is a cascading event such that all children of the targeted object
		/// are also deleted. For example, deleting a [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)
		/// will also delete all of its
		/// [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) children.
		/// DeleteCatalogObject v2/catalog/object/{object_id}
		/// </summary>
		/// <param name="object_id">The ID of the catalog object to be deleted. When an object is deleted, other
		///objects in the graph that depend on that object will be deleted as well (for example, deleting a
		///catalog item will delete its catalog item variations).</param>
		/// <returns>Success</returns>
		public async Task<DeleteCatalogObjectResponse> DeleteCatalogObjectAsync(string object_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/object/"+ (object_id==null? "" : System.Uri.EscapeDataString(object_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCatalogObjectResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveCatalogObject
		/// Returns a single [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) as a
		/// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) based on the provided ID. The returned
		/// object includes all of the relevant [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)
		/// information including: [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
		/// children, references to its
		/// [CatalogModifierList](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifierList) objects, and the ids of
		/// any [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects that apply to it.
		/// RetrieveCatalogObject v2/catalog/object/{object_id}
		/// </summary>
		/// <param name="object_id">The object ID of any type of catalog objects to be retrieved.</param>
		/// <param name="include_related_objects">If `true`, the response will include additional objects that are related to the
		///requested object, as follows:
		///
		///If the `object` field of the response contains a `CatalogItem`, its associated
		///`CatalogCategory`, `CatalogTax`, `CatalogImage` and `CatalogModifierList` objects will
		///be returned in the `related_objects` field of the response. If the `object` field of
		///the response contains a `CatalogItemVariation`, its parent `CatalogItem` will be returned
		///in the `related_objects` field of the response.
		///
		///Default value: `false`</param>
		/// <param name="catalog_version">Requests objects as of a specific version of the catalog. This allows you to retrieve historical
		///versions of objects. The value to retrieve a specific version of an object can be found
		///in the version field of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveCatalogObjectResponse> RetrieveCatalogObjectAsync(string object_id, bool include_related_objects, long catalog_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/object/"+ (object_id==null? "" : System.Uri.EscapeDataString(object_id))+"&include_related_objects="+include_related_objects+"&catalog_version="+catalog_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveCatalogObjectResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SearchCatalogObjects
		/// Searches for [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) of any type by matching supported search attribute values,
		/// excluding custom attribute values on items or item variations, against one or more of the specified query expressions.
		/// 
		/// This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items)
		/// endpoint in the following aspects:
		/// 
		/// - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects.
		/// - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not.
		/// - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does.
		/// - The both endpoints have different call conventions, including the query filter formats.
		/// SearchCatalogObjects v2/catalog/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchCatalogObjectsResponse> SearchCatalogObjectsAsync(SearchCatalogObjectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchCatalogObjectsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchCatalogItems
		/// Searches for catalog items or item variations by matching supported search attribute values, including
		/// custom attribute values, against one or more of the specified query expressions.
		/// 
		/// This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects)
		/// endpoint in the following aspects:
		/// 
		/// - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects.
		/// - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not.
		/// - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does.
		/// - The both endpoints use different call conventions, including the query filter formats.
		/// SearchCatalogItems v2/catalog/search-catalog-items
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchCatalogItemsResponse> SearchCatalogItemsAsync(SearchCatalogItemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/search-catalog-items";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchCatalogItemsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// UpdateItemModifierLists
		/// Updates the [CatalogModifierList](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifierList) objects
		/// that apply to the targeted [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) without having
		/// to perform an upsert on the entire item.
		/// UpdateItemModifierLists v2/catalog/update-item-modifier-lists
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateItemModifierListsResponse> UpdateItemModifierListsAsync(UpdateItemModifierListsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/update-item-modifier-lists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateItemModifierListsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// UpdateItemTaxes
		/// Updates the [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects that apply to the
		/// targeted [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) without having to perform an
		/// upsert on the entire item.
		/// UpdateItemTaxes v2/catalog/update-item-taxes
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateItemTaxesResponse> UpdateItemTaxesAsync(UpdateItemTaxesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/update-item-taxes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateItemTaxesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListCustomers
		/// Lists customer profiles associated with a Square account.
		/// 
		/// Under normal operating conditions, newly created or updated customer profiles become available
		/// for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated
		/// profiles can take closer to one minute or longer, especially during network incidents and outages.
		/// ListCustomers v2/customers
		/// </summary>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for your original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).</param>
		/// <param name="limit">The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results. 
		///The limit is ignored if it is less than 1 or greater than 100. The default value is 100.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).</param>
		/// <param name="sort_field">Indicates how customers should be sorted.
		///
		///The default value is `DEFAULT`.</param>
		/// <param name="sort_order">Indicates whether customers should be sorted in ascending (`ASC`) or
		///descending (`DESC`) order.
		///
		///The default value is `ASC`.</param>
		/// <returns>Success</returns>
		public async Task<ListCustomersResponse> ListCustomersAsync(string cursor, int limit, string sort_field, string sort_order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&sort_field=" + (sort_field==null? "" : System.Uri.EscapeDataString(sort_field))+"&sort_order=" + (sort_order==null? "" : System.Uri.EscapeDataString(sort_order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCustomersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateCustomer
		/// Creates a new customer for a business.
		/// 
		/// You must provide at least one of the following values in your request to this
		/// endpoint:
		/// 
		/// - `given_name`
		/// - `family_name`
		/// - `company_name`
		/// - `email_address`
		/// - `phone_number`
		/// CreateCustomer v2/customers
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateCustomerResponse> CreateCustomerAsync(CreateCustomerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCustomerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListCustomerGroups
		/// Retrieves the list of customer groups of a business.
		/// ListCustomerGroups v2/customers/groups
		/// </summary>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for your original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).</param>
		/// <param name="limit">The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results. 
		///The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).</param>
		/// <returns>Success</returns>
		public async Task<ListCustomerGroupsResponse> ListCustomerGroupsAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/groups?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCustomerGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateCustomerGroup
		/// Creates a new customer group for a business.
		/// 
		/// The request must include the `name` value of the group.
		/// CreateCustomerGroup v2/customers/groups
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateCustomerGroupResponse> CreateCustomerGroupAsync(CreateCustomerGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCustomerGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeleteCustomerGroup
		/// Deletes a customer group as identified by the `group_id` value.
		/// DeleteCustomerGroup v2/customers/groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the customer group to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteCustomerGroupResponse> DeleteCustomerGroupAsync(string group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/groups/"+ (group_id==null? "" : System.Uri.EscapeDataString(group_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCustomerGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveCustomerGroup
		/// Retrieves a specific customer group as identified by the `group_id` value.
		/// RetrieveCustomerGroup v2/customers/groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the customer group to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveCustomerGroupResponse> RetrieveCustomerGroupAsync(string group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/groups/"+ (group_id==null? "" : System.Uri.EscapeDataString(group_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveCustomerGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateCustomerGroup
		/// Updates a customer group as identified by the `group_id` value.
		/// UpdateCustomerGroup v2/customers/groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the customer group to update.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateCustomerGroupResponse> UpdateCustomerGroupAsync(string group_id, UpdateCustomerGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/groups/"+ (group_id==null? "" : System.Uri.EscapeDataString(group_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateCustomerGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchCustomers
		/// Searches the customer profiles associated with a Square account using a supported query filter.
		/// 
		/// Calling `SearchCustomers` without any explicit query filter returns all
		/// customer profiles ordered alphabetically based on `given_name` and
		/// `family_name`.
		/// 
		/// Under normal operating conditions, newly created or updated customer profiles become available
		/// for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated
		/// profiles can take closer to one minute or longer, especially during network incidents and outages.
		/// SearchCustomers v2/customers/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchCustomersResponse> SearchCustomersAsync(SearchCustomersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchCustomersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListCustomerSegments
		/// Retrieves the list of customer segments of a business.
		/// ListCustomerSegments v2/customers/segments
		/// </summary>
		/// <param name="cursor">A pagination cursor returned by previous calls to `ListCustomerSegments`.
		///This cursor is used to retrieve the next set of query results.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).</param>
		/// <param name="limit">The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results. 
		///The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).</param>
		/// <returns>Success</returns>
		public async Task<ListCustomerSegmentsResponse> ListCustomerSegmentsAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/segments?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCustomerSegmentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveCustomerSegment
		/// Retrieves a specific customer segment as identified by the `segment_id` value.
		/// RetrieveCustomerSegment v2/customers/segments/{segment_id}
		/// </summary>
		/// <param name="segment_id">The Square-issued ID of the customer segment.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveCustomerSegmentResponse> RetrieveCustomerSegmentAsync(string segment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/segments/"+ (segment_id==null? "" : System.Uri.EscapeDataString(segment_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveCustomerSegmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteCustomer
		/// Deletes a customer profile from a business. This operation also unlinks any associated cards on file.
		/// 
		/// As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile.
		/// 
		/// To delete a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
		/// DeleteCustomer v2/customers/{customer_id}
		/// </summary>
		/// <param name="customer_id">The ID of the customer to delete.</param>
		/// <param name="version">The current version of the customer profile.
		///
		///As a best practice, you should include this parameter to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control.  For more information, see [Delete a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#delete-customer-profile).</param>
		/// <returns>Success</returns>
		public async Task<DeleteCustomerResponse> DeleteCustomerAsync(string customer_id, long version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id))+"&version="+version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCustomerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveCustomer
		/// Returns details for a single customer.
		/// RetrieveCustomer v2/customers/{customer_id}
		/// </summary>
		/// <param name="customer_id">The ID of the customer to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveCustomerResponse> RetrieveCustomerAsync(string customer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveCustomerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateCustomer
		/// Updates a customer profile. To change an attribute, specify the new value. To remove an attribute, specify the value as an empty string or empty object.
		/// 
		/// As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile.
		/// 
		/// To update a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
		/// 
		/// You cannot use this endpoint to change cards on file. To make changes, use the [Cards API](https://developer.squareup.com/reference/square_2021-08-18/cards-api) or [Gift Cards API](https://developer.squareup.com/reference/square_2021-08-18/gift-cards-api).
		/// UpdateCustomer v2/customers/{customer_id}
		/// </summary>
		/// <param name="customer_id">The ID of the customer to update.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateCustomerResponse> UpdateCustomerAsync(string customer_id, UpdateCustomerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateCustomerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CreateCustomerCard
		/// Adds a card on file to an existing customer.
		/// 
		/// As with charges, calls to `CreateCustomerCard` are idempotent. Multiple
		/// calls with the same card nonce return the same card record that was created
		/// with the provided nonce during the _first_ call.
		/// CreateCustomerCard v2/customers/{customer_id}/cards
		/// </summary>
		/// <param name="customer_id">The Square ID of the customer profile the card is linked to.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateCustomerCardResponse> CreateCustomerCardAsync(string customer_id, CreateCustomerCardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id))+"/cards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCustomerCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeleteCustomerCard
		/// Removes a card on file from a customer.
		/// DeleteCustomerCard v2/customers/{customer_id}/cards/{card_id}
		/// </summary>
		/// <param name="customer_id">The ID of the customer that the card on file belongs to.</param>
		/// <param name="card_id">The ID of the card on file to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteCustomerCardResponse> DeleteCustomerCardAsync(string customer_id, string card_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id))+"/cards/"+ (card_id==null? "" : System.Uri.EscapeDataString(card_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCustomerCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RemoveGroupFromCustomer
		/// Removes a group membership from a customer.
		/// 
		/// The customer is identified by the `customer_id` value
		/// and the customer group is identified by the `group_id` value.
		/// RemoveGroupFromCustomer v2/customers/{customer_id}/groups/{group_id}
		/// </summary>
		/// <param name="customer_id">The ID of the customer to remove from the group.</param>
		/// <param name="group_id">The ID of the customer group to remove the customer from.</param>
		/// <returns>Success</returns>
		public async Task<RemoveGroupFromCustomerResponse> RemoveGroupFromCustomerAsync(string customer_id, string group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id))+"/groups/"+ (group_id==null? "" : System.Uri.EscapeDataString(group_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveGroupFromCustomerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// AddGroupToCustomer
		/// Adds a group membership to a customer.
		/// 
		/// The customer is identified by the `customer_id` value
		/// and the customer group is identified by the `group_id` value.
		/// AddGroupToCustomer v2/customers/{customer_id}/groups/{group_id}
		/// </summary>
		/// <param name="customer_id">The ID of the customer to add to a group.</param>
		/// <param name="group_id">The ID of the customer group to add the customer to.</param>
		/// <returns>Success</returns>
		public async Task<AddGroupToCustomerResponse> AddGroupToCustomerAsync(string customer_id, string group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id))+"/groups/"+ (group_id==null? "" : System.Uri.EscapeDataString(group_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddGroupToCustomerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListDeviceCodes
		/// Lists all DeviceCodes associated with the merchant.
		/// ListDeviceCodes v2/devices/codes
		/// </summary>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.</param>
		/// <param name="location_id">If specified, only returns DeviceCodes of the specified location.
		///Returns DeviceCodes of all locations if empty.</param>
		/// <param name="product_type">If specified, only returns DeviceCodes targeting the specified product type.
		///Returns DeviceCodes of all product types if empty.</param>
		/// <param name="status">If specified, returns DeviceCodes with the specified statuses.
		///Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty.</param>
		/// <returns>Success</returns>
		public async Task<ListDeviceCodesResponse> ListDeviceCodesAsync(string cursor, string location_id, string product_type, string status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/devices/codes?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"&product_type=" + (product_type==null? "" : System.Uri.EscapeDataString(product_type))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDeviceCodesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateDeviceCode
		/// Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected
		/// terminal mode.
		/// CreateDeviceCode v2/devices/codes
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateDeviceCodeResponse> CreateDeviceCodeAsync(CreateDeviceCodeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/devices/codes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDeviceCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// GetDeviceCode
		/// Retrieves DeviceCode with the associated ID.
		/// GetDeviceCode v2/devices/codes/{id}
		/// </summary>
		/// <param name="id">The unique identifier for the device code.</param>
		/// <returns>Success</returns>
		public async Task<GetDeviceCodeResponse> GetDeviceCodeAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/devices/codes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeviceCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListDisputes
		/// Returns a list of disputes associated with a particular account.
		/// ListDisputes v2/disputes
		/// </summary>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).</param>
		/// <param name="states">The dispute states to filter the result.
		///If not specified, the endpoint returns all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`,
		///or `LOST`).</param>
		/// <param name="location_id">The ID of the location for which to return a list of disputes. If not specified, the endpoint returns
		///all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`) associated with all locations.</param>
		/// <returns>Success</returns>
		public async Task<ListDisputesResponse> ListDisputesAsync(string cursor, string states, string location_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/disputes?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&states=" + (states==null? "" : System.Uri.EscapeDataString(states))+"&location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDisputesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveDispute
		/// Returns details about a specific dispute.
		/// RetrieveDispute v2/disputes/{dispute_id}
		/// </summary>
		/// <param name="dispute_id">The ID of the dispute you want more details about.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveDisputeResponse> RetrieveDisputeAsync(string dispute_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/disputes/"+ (dispute_id==null? "" : System.Uri.EscapeDataString(dispute_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveDisputeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// AcceptDispute
		/// Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and
		/// updates the dispute state to ACCEPTED.
		/// 
		/// Square debits the disputed amount from the seller’s Square account. If the Square account
		/// does not have sufficient funds, Square debits the associated bank account.
		/// AcceptDispute v2/disputes/{dispute_id}/accept
		/// </summary>
		/// <param name="dispute_id">The ID of the dispute you want to accept.</param>
		/// <returns>Success</returns>
		public async Task<AcceptDisputeResponse> AcceptDisputeAsync(string dispute_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/disputes/"+ (dispute_id==null? "" : System.Uri.EscapeDataString(dispute_id))+"/accept";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AcceptDisputeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListDisputeEvidence
		/// Returns a list of evidence associated with a dispute.
		/// ListDisputeEvidence v2/disputes/{dispute_id}/evidence
		/// </summary>
		/// <param name="dispute_id">The ID of the dispute.</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).</param>
		/// <returns>Success</returns>
		public async Task<ListDisputeEvidenceResponse> ListDisputeEvidenceAsync(string dispute_id, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/disputes/"+ (dispute_id==null? "" : System.Uri.EscapeDataString(dispute_id))+"/evidence&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDisputeEvidenceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateDisputeEvidenceText
		/// Uploads text to use as evidence for a dispute challenge.
		/// CreateDisputeEvidenceText v2/disputes/{dispute_id}/evidence-text
		/// </summary>
		/// <param name="dispute_id">The ID of the dispute you want to upload evidence for.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateDisputeEvidenceTextResponse> CreateDisputeEvidenceTextAsync(string dispute_id, CreateDisputeEvidenceTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/disputes/"+ (dispute_id==null? "" : System.Uri.EscapeDataString(dispute_id))+"/evidence-text";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDisputeEvidenceTextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeleteDisputeEvidence
		/// Removes specified evidence from a dispute.
		/// 
		/// Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after
		/// submitting it to the bank using [SubmitEvidence](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/submit-evidence).
		/// DeleteDisputeEvidence v2/disputes/{dispute_id}/evidence/{evidence_id}
		/// </summary>
		/// <param name="dispute_id">The ID of the dispute you want to remove evidence from.</param>
		/// <param name="evidence_id">The ID of the evidence you want to remove.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDisputeEvidenceResponse> DeleteDisputeEvidenceAsync(string dispute_id, string evidence_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/disputes/"+ (dispute_id==null? "" : System.Uri.EscapeDataString(dispute_id))+"/evidence/"+ (evidence_id==null? "" : System.Uri.EscapeDataString(evidence_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDisputeEvidenceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveDisputeEvidence
		/// Returns the evidence metadata specified by the evidence ID in the request URL path
		/// 
		/// You must maintain a copy of the evidence you upload if you want to reference it later. You cannot
		/// download the evidence after you upload it.
		/// RetrieveDisputeEvidence v2/disputes/{dispute_id}/evidence/{evidence_id}
		/// </summary>
		/// <param name="dispute_id">The ID of the dispute that you want to retrieve evidence from.</param>
		/// <param name="evidence_id">The ID of the evidence to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveDisputeEvidenceResponse> RetrieveDisputeEvidenceAsync(string dispute_id, string evidence_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/disputes/"+ (dispute_id==null? "" : System.Uri.EscapeDataString(dispute_id))+"/evidence/"+ (evidence_id==null? "" : System.Uri.EscapeDataString(evidence_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveDisputeEvidenceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SubmitEvidence
		/// Submits evidence to the cardholder's bank.
		/// 
		/// Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded
		/// using the [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) and
		/// [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text) endpoints and
		/// evidence automatically provided by Square, when available.
		/// SubmitEvidence v2/disputes/{dispute_id}/submit-evidence
		/// </summary>
		/// <param name="dispute_id">The ID of the dispute that you want to submit evidence for.</param>
		/// <returns>Success</returns>
		public async Task<SubmitEvidenceResponse> SubmitEvidenceAsync(string dispute_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/disputes/"+ (dispute_id==null? "" : System.Uri.EscapeDataString(dispute_id))+"/submit-evidence";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubmitEvidenceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListEmployees
		/// EmployeesGetByLocation_idAndStatusAndLimitAndCursor v2/employees
		/// </summary>
		/// <param name="status">Specifies the EmployeeStatus to filter the employee by.</param>
		/// <param name="limit">The number of employees to be returned on each page.</param>
		/// <param name="cursor">The token required to retrieve the specified page of results.</param>
		/// <returns>Success</returns>
		public async Task<ListEmployeesResponse> EmployeesGetByLocation_idAndStatusAndLimitAndCursorAsync(string location_id, string status, int limit, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/employees?location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&limit="+limit+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEmployeesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveEmployee
		/// EmployeesGetById v2/employees/{id}
		/// </summary>
		/// <param name="id">UUID for the employee that was requested.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveEmployeeResponse> EmployeesGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/employees/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveEmployeeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListGiftCards
		/// Lists all gift cards. You can specify optional filters to retrieve
		/// a subset of the gift cards.
		/// ListGiftCards v2/gift-cards
		/// </summary>
		/// <param name="type">If a type is provided, gift cards of this type are returned 
		///(see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)).
		///If no type is provided, it returns gift cards of all types.</param>
		/// <param name="state">If the state is provided, it returns the gift cards in the specified state 
		///(see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)).
		///Otherwise, it returns the gift cards of all states.</param>
		/// <param name="limit">If a value is provided, it returns only that number of results per page.
		///The maximum number of results allowed per page is 50. The default value is 30.</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///If a cursor is not provided, it returns the first page of the results. 
		///For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).</param>
		/// <param name="customer_id">If a value is provided, returns only the gift cards linked to the specified customer</param>
		/// <returns>Success</returns>
		public async Task<ListGiftCardsResponse> ListGiftCardsAsync(string type, string state, int limit, string cursor, string customer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/gift-cards?type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&limit="+limit+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&customer_id=" + (customer_id==null? "" : System.Uri.EscapeDataString(customer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListGiftCardsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateGiftCard
		/// Creates a digital gift card or registers a physical (plastic) gift card. You must activate the gift card before
		/// it can be used for payment. For more information, see
		/// [Selling gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#selling-square-gift-cards).
		/// CreateGiftCard v2/gift-cards
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateGiftCardResponse> CreateGiftCardAsync(CreateGiftCardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/gift-cards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateGiftCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListGiftCardActivities
		/// Lists gift card activities. By default, you get gift card activities for all
		/// gift cards in the seller's account. You can optionally specify query parameters to
		/// filter the list. For example, you can get a list of gift card activities for a gift card,
		/// for all gift cards in a specific region, or for activities within a time window.
		/// ListGiftCardActivities v2/gift-cards/activities
		/// </summary>
		/// <param name="gift_card_id">If you provide a gift card ID, the endpoint returns activities that belong 
		///to the specified gift card. Otherwise, the endpoint returns all gift card activities for 
		///the seller.</param>
		/// <param name="type">If you provide a type, the endpoint returns gift card activities of this type. 
		///Otherwise, the endpoint returns all types of gift card activities.</param>
		/// <param name="location_id">If you provide a location ID, the endpoint returns gift card activities for that location. 
		///Otherwise, the endpoint returns gift card activities for all locations.</param>
		/// <param name="begin_time">The timestamp for the beginning of the reporting period, in RFC 3339 format.
		///Inclusive. Default: The current time minus one year.</param>
		/// <param name="end_time">The timestamp for the end of the reporting period, in RFC 3339 format.
		///Inclusive. Default: The current time.</param>
		/// <param name="limit">If you provide a limit value, the endpoint returns the specified number 
		///of results (or less) per page. A maximum value is 100. The default value is 50.</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///If you do not provide the cursor, the call returns the first page of the results.</param>
		/// <param name="sort_order">The order in which the endpoint returns the activities, based on `created_at`.
		///- `ASC` - Oldest to newest.
		///- `DESC` - Newest to oldest (default).</param>
		/// <returns>Success</returns>
		public async Task<ListGiftCardActivitiesResponse> ListGiftCardActivitiesAsync(string gift_card_id, string type, string location_id, string begin_time, string end_time, int limit, string cursor, string sort_order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/gift-cards/activities?gift_card_id=" + (gift_card_id==null? "" : System.Uri.EscapeDataString(gift_card_id))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&limit="+limit+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&sort_order=" + (sort_order==null? "" : System.Uri.EscapeDataString(sort_order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListGiftCardActivitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateGiftCardActivity
		/// Creates a gift card activity. For more information, see
		/// [GiftCardActivity](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#giftcardactivity) and
		/// [Using activated gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#using-activated-gift-cards).
		/// CreateGiftCardActivity v2/gift-cards/activities
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateGiftCardActivityResponse> CreateGiftCardActivityAsync(CreateGiftCardActivityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/gift-cards/activities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateGiftCardActivityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveGiftCardFromGAN
		/// Retrieves a gift card using the gift card account number (GAN).
		/// RetrieveGiftCardFromGAN v2/gift-cards/from-gan
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveGiftCardFromGANResponse> RetrieveGiftCardFromGANAsync(RetrieveGiftCardFromGANRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/gift-cards/from-gan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveGiftCardFromGANResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveGiftCardFromNonce
		/// Retrieves a gift card using a nonce (a secure token) that represents the gift card.
		/// RetrieveGiftCardFromNonce v2/gift-cards/from-nonce
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveGiftCardFromNonceResponse> RetrieveGiftCardFromNonceAsync(RetrieveGiftCardFromNonceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/gift-cards/from-nonce";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveGiftCardFromNonceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// LinkCustomerToGiftCard
		/// Links a customer to a gift card
		/// LinkCustomerToGiftCard v2/gift-cards/{gift_card_id}/link-customer
		/// </summary>
		/// <param name="gift_card_id">The ID of the gift card to link.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<LinkCustomerToGiftCardResponse> LinkCustomerToGiftCardAsync(string gift_card_id, LinkCustomerToGiftCardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/gift-cards/"+ (gift_card_id==null? "" : System.Uri.EscapeDataString(gift_card_id))+"/link-customer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkCustomerToGiftCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// UnlinkCustomerFromGiftCard
		/// Unlinks a customer from a gift card
		/// UnlinkCustomerFromGiftCard v2/gift-cards/{gift_card_id}/unlink-customer
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UnlinkCustomerFromGiftCardResponse> UnlinkCustomerFromGiftCardAsync(string gift_card_id, UnlinkCustomerFromGiftCardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/gift-cards/"+ (gift_card_id==null? "" : System.Uri.EscapeDataString(gift_card_id))+"/unlink-customer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UnlinkCustomerFromGiftCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveGiftCard
		/// Retrieves a gift card using its ID.
		/// RetrieveGiftCard v2/gift-cards/{id}
		/// </summary>
		/// <param name="id">The ID of the gift card to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveGiftCardResponse> RetrieveGiftCardAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/gift-cards/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveGiftCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeprecatedRetrieveInventoryAdjustment
		/// Deprecated version of [RetrieveInventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-adjustment) after the endpoint URL
		/// is updated to conform to the standard convention.
		/// DeprecatedRetrieveInventoryAdjustment v2/inventory/adjustment/{adjustment_id}
		/// </summary>
		/// <param name="adjustment_id">ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveInventoryAdjustmentResponse> DeprecatedRetrieveInventoryAdjustmentAsync(string adjustment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/adjustment/"+ (adjustment_id==null? "" : System.Uri.EscapeDataString(adjustment_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveInventoryAdjustmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveInventoryAdjustment
		/// Returns the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) object
		/// with the provided `adjustment_id`.
		/// RetrieveInventoryAdjustment v2/inventory/adjustments/{adjustment_id}
		/// </summary>
		/// <param name="adjustment_id">ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveInventoryAdjustmentResponse> RetrieveInventoryAdjustmentAsync(string adjustment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/adjustments/"+ (adjustment_id==null? "" : System.Uri.EscapeDataString(adjustment_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveInventoryAdjustmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeprecatedBatchChangeInventory
		/// Deprecated version of [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory) after the endpoint URL
		/// is updated to conform to the standard convention.
		/// DeprecatedBatchChangeInventory v2/inventory/batch-change
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchChangeInventoryResponse> DeprecatedBatchChangeInventoryAsync(BatchChangeInventoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/batch-change";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchChangeInventoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeprecatedBatchRetrieveInventoryChanges
		/// Deprecated version of [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes) after the endpoint URL
		/// is updated to conform to the standard convention.
		/// DeprecatedBatchRetrieveInventoryChanges v2/inventory/batch-retrieve-changes
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchRetrieveInventoryChangesResponse> DeprecatedBatchRetrieveInventoryChangesAsync(BatchRetrieveInventoryChangesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/batch-retrieve-changes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchRetrieveInventoryChangesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeprecatedBatchRetrieveInventoryCounts
		/// Deprecated version of [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts) after the endpoint URL
		/// is updated to conform to the standard convention.
		/// DeprecatedBatchRetrieveInventoryCounts v2/inventory/batch-retrieve-counts
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchRetrieveInventoryCountsResponse> DeprecatedBatchRetrieveInventoryCountsAsync(BatchRetrieveInventoryCountsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/batch-retrieve-counts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchRetrieveInventoryCountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// BatchChangeInventory
		/// Applies adjustments and counts to the provided item quantities.
		/// 
		/// On success: returns the current calculated counts for all objects
		/// referenced in the request.
		/// On failure: returns a list of related errors.
		/// BatchChangeInventory v2/inventory/changes/batch-create
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchChangeInventoryResponse> BatchChangeInventoryAsync(BatchChangeInventoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/changes/batch-create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchChangeInventoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// BatchRetrieveInventoryChanges
		/// Returns historical physical counts and adjustments based on the
		/// provided filter criteria.
		/// 
		/// Results are paginated and sorted in ascending order according their
		/// `occurred_at` timestamp (oldest first).
		/// 
		/// BatchRetrieveInventoryChanges is a catch-all query endpoint for queries
		/// that cannot be handled by other, simpler endpoints.
		/// BatchRetrieveInventoryChanges v2/inventory/changes/batch-retrieve
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchRetrieveInventoryChangesResponse> BatchRetrieveInventoryChangesAsync(BatchRetrieveInventoryChangesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/changes/batch-retrieve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchRetrieveInventoryChangesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// BatchRetrieveInventoryCounts
		/// Returns current counts for the provided
		/// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s at the requested
		/// [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.
		/// 
		/// Results are paginated and sorted in descending order according to their
		/// `calculated_at` timestamp (newest first).
		/// 
		/// When `updated_after` is specified, only counts that have changed since that
		/// time (based on the server timestamp for the most recent change) are
		/// returned. This allows clients to perform a "sync" operation, for example
		/// in response to receiving a Webhook notification.
		/// BatchRetrieveInventoryCounts v2/inventory/counts/batch-retrieve
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchRetrieveInventoryCountsResponse> BatchRetrieveInventoryCountsAsync(BatchRetrieveInventoryCountsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/counts/batch-retrieve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchRetrieveInventoryCountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeprecatedRetrieveInventoryPhysicalCount
		/// Deprecated version of [RetrieveInventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-physical-count) after the endpoint URL
		/// is updated to conform to the standard convention.
		/// DeprecatedRetrieveInventoryPhysicalCount v2/inventory/physical-count/{physical_count_id}
		/// </summary>
		/// <param name="physical_count_id">ID of the
		///[InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveInventoryPhysicalCountResponse> DeprecatedRetrieveInventoryPhysicalCountAsync(string physical_count_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/physical-count/"+ (physical_count_id==null? "" : System.Uri.EscapeDataString(physical_count_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveInventoryPhysicalCountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveInventoryPhysicalCount
		/// Returns the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount)
		/// object with the provided `physical_count_id`.
		/// RetrieveInventoryPhysicalCount v2/inventory/physical-counts/{physical_count_id}
		/// </summary>
		/// <param name="physical_count_id">ID of the
		///[InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveInventoryPhysicalCountResponse> RetrieveInventoryPhysicalCountAsync(string physical_count_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/physical-counts/"+ (physical_count_id==null? "" : System.Uri.EscapeDataString(physical_count_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveInventoryPhysicalCountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveInventoryTransfer
		/// Returns the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) object
		/// with the provided `transfer_id`.
		/// RetrieveInventoryTransfer v2/inventory/transfers/{transfer_id}
		/// </summary>
		/// <param name="transfer_id">ID of the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveInventoryTransferResponse> RetrieveInventoryTransferAsync(string transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/transfers/"+ (transfer_id==null? "" : System.Uri.EscapeDataString(transfer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveInventoryTransferResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveInventoryCount
		/// Retrieves the current calculated stock count for a given
		/// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at a given set of
		/// [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s. Responses are paginated and unsorted.
		/// For more sophisticated queries, use a batch endpoint.
		/// RetrieveInventoryCount v2/inventory/{catalog_object_id}
		/// </summary>
		/// <param name="catalog_object_id">ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve.</param>
		/// <param name="location_ids">The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
		///list. An empty list queries all locations.</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for the original query.
		///
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveInventoryCountResponse> RetrieveInventoryCountAsync(string catalog_object_id, string location_ids, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/"+ (catalog_object_id==null? "" : System.Uri.EscapeDataString(catalog_object_id))+"&location_ids=" + (location_ids==null? "" : System.Uri.EscapeDataString(location_ids))+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveInventoryCountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveInventoryChanges
		/// Returns a set of physical counts and inventory adjustments for the
		/// provided [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at the requested
		/// [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.
		/// 
		/// You can achieve the same result by calling [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes)
		/// and having the `catalog_object_ids` list contain a single element of the `CatalogObject` ID.
		/// 
		/// Results are paginated and sorted in descending order according to their
		/// `occurred_at` timestamp (newest first).
		/// 
		/// There are no limits on how far back the caller can page. This endpoint can be
		/// used to display recent changes for a specific item. For more
		/// sophisticated queries, use a batch endpoint.
		/// RetrieveInventoryChanges v2/inventory/{catalog_object_id}/changes
		/// </summary>
		/// <param name="catalog_object_id">ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve.</param>
		/// <param name="location_ids">The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
		///list. An empty list queries all locations.</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for the original query.
		///
		///See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveInventoryChangesResponse> RetrieveInventoryChangesAsync(string catalog_object_id, string location_ids, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/inventory/"+ (catalog_object_id==null? "" : System.Uri.EscapeDataString(catalog_object_id))+"/changes&location_ids=" + (location_ids==null? "" : System.Uri.EscapeDataString(location_ids))+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveInventoryChangesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListInvoices
		/// Returns a list of invoices for a given location. The response
		/// is paginated. If truncated, the response includes a `cursor` that you
		/// use in a subsequent request to retrieve the next set of invoices.
		/// ListInvoices v2/invoices
		/// </summary>
		/// <param name="location_id">The ID of the location for which to list invoices.</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. 
		///Provide this cursor to retrieve the next set of results for your original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).</param>
		/// <param name="limit">The maximum number of invoices to return (200 is the maximum `limit`). 
		///If not provided, the server uses a default limit of 100 invoices.</param>
		/// <returns>Success</returns>
		public async Task<ListInvoicesResponse> ListInvoicesAsync(string location_id, string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/invoices?location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInvoicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateInvoice
		/// Creates a draft [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice)
		/// for an order created using the Orders API.
		/// 
		/// A draft invoice remains in your account and no action is taken.
		/// You must publish the invoice before Square can process it (send it to the customer's email address or charge the customer’s card on file).
		/// CreateInvoice v2/invoices
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateInvoiceResponse> CreateInvoiceAsync(CreateInvoiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/invoices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateInvoiceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchInvoices
		/// Searches for invoices from a location specified in
		/// the filter. You can optionally specify customers in the filter for whom to
		/// retrieve invoices. In the current implementation, you can only specify one location and
		/// optionally one customer.
		/// 
		/// The response is paginated. If truncated, the response includes a `cursor`
		/// that you use in a subsequent request to retrieve the next set of invoices.
		/// SearchInvoices v2/invoices/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchInvoicesResponse> SearchInvoicesAsync(SearchInvoicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/invoices/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchInvoicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeleteInvoice
		/// Deletes the specified invoice. When an invoice is deleted, the
		/// associated order status changes to CANCELED. You can only delete a draft
		/// invoice (you cannot delete a published invoice, including one that is scheduled for processing).
		/// DeleteInvoice v2/invoices/{invoice_id}
		/// </summary>
		/// <param name="invoice_id">The ID of the invoice to delete.</param>
		/// <param name="version">The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to delete.
		///If you do not know the version, you can call [GetInvoice](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/get-invoice) or 
		///[ListInvoices](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/list-invoices).</param>
		/// <returns>Success</returns>
		public async Task<DeleteInvoiceResponse> DeleteInvoiceAsync(string invoice_id, int version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/invoices/"+ (invoice_id==null? "" : System.Uri.EscapeDataString(invoice_id))+"&version="+version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteInvoiceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetInvoice
		/// Retrieves an invoice by invoice ID.
		/// GetInvoice v2/invoices/{invoice_id}
		/// </summary>
		/// <param name="invoice_id">The ID of the invoice to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetInvoiceResponse> GetInvoiceAsync(string invoice_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/invoices/"+ (invoice_id==null? "" : System.Uri.EscapeDataString(invoice_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInvoiceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateInvoice
		/// Updates an invoice by modifying fields, clearing fields, or both. For most updates, you can use a sparse
		/// `Invoice` object to add fields or change values and use the `fields_to_clear` field to specify fields to clear.
		/// However, some restrictions apply. For example, you cannot change the `order_id` or `location_id` field and you
		/// must provide the complete `custom_fields` list to update a custom field. Published invoices have additional restrictions.
		/// UpdateInvoice v2/invoices/{invoice_id}
		/// </summary>
		/// <param name="invoice_id">The ID of the invoice to update.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateInvoiceResponse> UpdateInvoiceAsync(string invoice_id, UpdateInvoiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/invoices/"+ (invoice_id==null? "" : System.Uri.EscapeDataString(invoice_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateInvoiceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CancelInvoice
		/// Cancels an invoice. The seller cannot collect payments for
		/// the canceled invoice.
		/// 
		/// You cannot cancel an invoice in the `DRAFT` state or in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
		/// CancelInvoice v2/invoices/{invoice_id}/cancel
		/// </summary>
		/// <param name="invoice_id">The ID of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to cancel.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CancelInvoiceResponse> CancelInvoiceAsync(string invoice_id, CancelInvoiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/invoices/"+ (invoice_id==null? "" : System.Uri.EscapeDataString(invoice_id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelInvoiceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// PublishInvoice
		/// Publishes the specified draft invoice.
		/// 
		/// After an invoice is published, Square
		/// follows up based on the invoice configuration. For example, Square
		/// sends the invoice to the customer's email address, charges the customer's card on file, or does
		/// nothing. Square also makes the invoice available on a Square-hosted invoice page.
		/// 
		/// The invoice `status` also changes from `DRAFT` to a status
		/// based on the invoice configuration. For example, the status changes to `UNPAID` if
		/// Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the
		/// invoice amount.
		/// PublishInvoice v2/invoices/{invoice_id}/publish
		/// </summary>
		/// <param name="invoice_id">The ID of the invoice to publish.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<PublishInvoiceResponse> PublishInvoiceAsync(string invoice_id, PublishInvoiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/invoices/"+ (invoice_id==null? "" : System.Uri.EscapeDataString(invoice_id))+"/publish";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublishInvoiceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListBreakTypes
		/// Returns a paginated list of `BreakType` instances for a business.
		/// ListBreakTypes v2/labor/break-types
		/// </summary>
		/// <param name="location_id">Filter the returned `BreakType` results to only those that are associated with the
		///specified location.</param>
		/// <param name="limit">The maximum number of `BreakType` results to return per page. The number can range between 1
		///and 200. The default is 200.</param>
		/// <param name="cursor">A pointer to the next page of `BreakType` results to fetch.</param>
		/// <returns>Success</returns>
		public async Task<ListBreakTypesResponse> ListBreakTypesAsync(string location_id, int limit, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/break-types?location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"&limit="+limit+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBreakTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateBreakType
		/// Creates a new `BreakType`.
		/// 
		/// A `BreakType` is a template for creating `Break` objects.
		/// You must provide the following values in your request to this
		/// endpoint:
		/// 
		/// - `location_id`
		/// - `break_name`
		/// - `expected_duration`
		/// - `is_paid`
		/// 
		/// You can only have three `BreakType` instances per location. If you attempt to add a fourth
		/// `BreakType` for a location, an `INVALID_REQUEST_ERROR` "Exceeded limit of 3 breaks per location."
		/// is returned.
		/// CreateBreakType v2/labor/break-types
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateBreakTypeResponse> CreateBreakTypeAsync(CreateBreakTypeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/break-types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBreakTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeleteBreakType
		/// Deletes an existing `BreakType`.
		/// 
		/// A `BreakType` can be deleted even if it is referenced from a `Shift`.
		/// DeleteBreakType v2/labor/break-types/{id}
		/// </summary>
		/// <param name="id">The UUID for the `BreakType` being deleted.</param>
		/// <returns>Success</returns>
		public async Task<DeleteBreakTypeResponse> DeleteBreakTypeAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/break-types/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBreakTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetBreakType
		/// Returns a single `BreakType` specified by `id`.
		/// GetBreakType v2/labor/break-types/{id}
		/// </summary>
		/// <param name="id">The UUID for the `BreakType` being retrieved.</param>
		/// <returns>Success</returns>
		public async Task<GetBreakTypeResponse> GetBreakTypeAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/break-types/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBreakTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateBreakType
		/// Updates an existing `BreakType`.
		/// UpdateBreakType v2/labor/break-types/{id}
		/// </summary>
		/// <param name="id"> The UUID for the `BreakType` being updated.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateBreakTypeResponse> UpdateBreakTypeAsync(string id, UpdateBreakTypeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/break-types/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBreakTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListEmployeeWages
		/// Returns a paginated list of `EmployeeWage` instances for a business.
		/// ListEmployeeWages v2/labor/employee-wages
		/// </summary>
		/// <param name="employee_id">Filter the returned wages to only those that are associated with the specified employee.</param>
		/// <param name="limit">The maximum number of `EmployeeWage` results to return per page. The number can range between
		///1 and 200. The default is 200.</param>
		/// <param name="cursor">A pointer to the next page of `EmployeeWage` results to fetch.</param>
		/// <returns>Success</returns>
		public async Task<ListEmployeeWagesResponse> ListEmployeeWagesAsync(string employee_id, int limit, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/employee-wages?employee_id=" + (employee_id==null? "" : System.Uri.EscapeDataString(employee_id))+"&limit="+limit+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEmployeeWagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetEmployeeWage
		/// Returns a single `EmployeeWage` specified by `id`.
		/// GetEmployeeWage v2/labor/employee-wages/{id}
		/// </summary>
		/// <param name="id">The UUID for the `EmployeeWage` being retrieved.</param>
		/// <returns>Success</returns>
		public async Task<GetEmployeeWageResponse> GetEmployeeWageAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/employee-wages/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEmployeeWageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateShift
		/// Creates a new `Shift`.
		/// 
		/// A `Shift` represents a complete workday for a single employee.
		/// You must provide the following values in your request to this
		/// endpoint:
		/// 
		/// - `location_id`
		/// - `employee_id`
		/// - `start_at`
		/// 
		/// An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when:
		/// - The `status` of the new `Shift` is `OPEN` and the employee has another
		/// shift with an `OPEN` status.
		/// - The `start_at` date is in the future.
		/// - The `start_at` or `end_at` date overlaps another shift for the same employee.
		/// - The `Break` instances are set in the request and a break `start_at`
		/// is before the `Shift.start_at`, a break `end_at` is after
		/// the `Shift.end_at`, or both.
		/// CreateShift v2/labor/shifts
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateShiftResponse> CreateShiftAsync(CreateShiftRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/shifts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateShiftResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchShifts
		/// Returns a paginated list of `Shift` records for a business.
		/// The list to be returned can be filtered by:
		/// - Location IDs.
		/// - Employee IDs.
		/// - Shift status (`OPEN` and `CLOSED`).
		/// - Shift start.
		/// - Shift end.
		/// - Workday details.
		/// 
		/// The list can be sorted by:
		/// - `start_at`.
		/// - `end_at`.
		/// - `created_at`.
		/// - `updated_at`.
		/// SearchShifts v2/labor/shifts/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchShiftsResponse> SearchShiftsAsync(SearchShiftsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/shifts/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchShiftsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeleteShift
		/// Deletes a `Shift`.
		/// DeleteShift v2/labor/shifts/{id}
		/// </summary>
		/// <param name="id">The UUID for the `Shift` being deleted.</param>
		/// <returns>Success</returns>
		public async Task<DeleteShiftResponse> DeleteShiftAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/shifts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteShiftResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetShift
		/// Returns a single `Shift` specified by `id`.
		/// GetShift v2/labor/shifts/{id}
		/// </summary>
		/// <param name="id">The UUID for the `Shift` being retrieved.</param>
		/// <returns>Success</returns>
		public async Task<GetShiftResponse> GetShiftAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/shifts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetShiftResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateShift
		/// Updates an existing `Shift`.
		/// 
		/// When adding a `Break` to a `Shift`, any earlier `Break` instances in the `Shift` have
		/// the `end_at` property set to a valid RFC-3339 datetime string.
		/// 
		/// When closing a `Shift`, all `Break` instances in the `Shift` must be complete with `end_at`
		/// set on each `Break`.
		/// UpdateShift v2/labor/shifts/{id}
		/// </summary>
		/// <param name="id">The ID of the object being updated.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateShiftResponse> UpdateShiftAsync(string id, UpdateShiftRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/shifts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateShiftResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListTeamMemberWages
		/// Returns a paginated list of `TeamMemberWage` instances for a business.
		/// ListTeamMemberWages v2/labor/team-member-wages
		/// </summary>
		/// <param name="team_member_id">Filter the returned wages to only those that are associated with the
		///specified team member.</param>
		/// <param name="limit">The maximum number of `TeamMemberWage` results to return per page. The number can range between
		///1 and 200. The default is 200.</param>
		/// <param name="cursor">A pointer to the next page of `EmployeeWage` results to fetch.</param>
		/// <returns>Success</returns>
		public async Task<ListTeamMemberWagesResponse> ListTeamMemberWagesAsync(string team_member_id, int limit, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/team-member-wages?team_member_id=" + (team_member_id==null? "" : System.Uri.EscapeDataString(team_member_id))+"&limit="+limit+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTeamMemberWagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetTeamMemberWage
		/// Returns a single `TeamMemberWage` specified by `id `.
		/// GetTeamMemberWage v2/labor/team-member-wages/{id}
		/// </summary>
		/// <param name="id">The UUID for the `TeamMemberWage` being retrieved.</param>
		/// <returns>Success</returns>
		public async Task<GetTeamMemberWageResponse> GetTeamMemberWageAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/team-member-wages/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTeamMemberWageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListWorkweekConfigs
		/// Returns a list of `WorkweekConfig` instances for a business.
		/// ListWorkweekConfigs v2/labor/workweek-configs
		/// </summary>
		/// <param name="limit">The maximum number of `WorkweekConfigs` results to return per page.</param>
		/// <param name="cursor">A pointer to the next page of `WorkweekConfig` results to fetch.</param>
		/// <returns>Success</returns>
		public async Task<ListWorkweekConfigsResponse> ListWorkweekConfigsAsync(int limit, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/workweek-configs?limit="+limit+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkweekConfigsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateWorkweekConfig
		/// Updates a `WorkweekConfig`.
		/// UpdateWorkweekConfig v2/labor/workweek-configs/{id}
		/// </summary>
		/// <param name="id">The UUID for the `WorkweekConfig` object being updated.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateWorkweekConfigResponse> UpdateWorkweekConfigAsync(string id, UpdateWorkweekConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/labor/workweek-configs/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWorkweekConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListLocations
		/// Provides information of all locations of a business.
		/// 
		/// Many Square API endpoints require a `location_id` parameter.
		/// The `id` field of the [`Location`](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) objects returned by this
		/// endpoint correspond to that `location_id` parameter.
		/// ListLocations v2/locations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListLocationsResponse> ListLocationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateLocation
		/// Creates a location.
		/// CreateLocation v2/locations
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateLocationResponse> CreateLocationAsync(CreateLocationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveLocation
		/// Retrieves details of a location. You can specify "main"
		/// as the location ID to retrieve details of the
		/// main location.
		/// RetrieveLocation v2/locations/{location_id}
		/// </summary>
		/// <param name="location_id">The ID of the location to retrieve. If you specify the string "main",
		///then the endpoint returns the main location.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveLocationResponse> RetrieveLocationAsync(string location_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateLocation
		/// Updates a location.
		/// UpdateLocation v2/locations/{location_id}
		/// </summary>
		/// <param name="location_id">The ID of the location to update.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateLocationResponse> UpdateLocationAsync(string location_id, UpdateLocationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CreateCheckout
		/// Links a `checkoutId` to a `checkout_page_url` that customers are
		/// directed to in order to provide their payment information using a
		/// payment processing workflow hosted on connect.squareup.com.
		/// CreateCheckout v2/locations/{location_id}/checkouts
		/// </summary>
		/// <param name="location_id">The ID of the business location to associate the checkout with.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateCheckoutResponse> CreateCheckoutAsync(string location_id, CreateCheckoutRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/checkouts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCheckoutResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListRefunds
		/// Lists refunds for one of a business's locations.
		/// 
		/// In addition to full or partial tender refunds processed through Square APIs,
		/// refunds may result from itemized returns or exchanges through Square's
		/// Point of Sale applications.
		/// 
		/// Refunds with a `status` of `PENDING` are not currently included in this
		/// endpoint's response.
		/// 
		/// Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
		/// TransactionsGetByLocation_idAndBegin_timeAndEnd_timeAndSort_orderAndCursor v2/locations/{location_id}/refunds
		/// </summary>
		/// <param name="location_id">The ID of the location to list refunds for.</param>
		/// <param name="begin_time">The beginning of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time minus one year.</param>
		/// <param name="end_time">The end of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time.</param>
		/// <param name="sort_order">The order in which results are listed in the response (`ASC` for
		///oldest first, `DESC` for newest first).
		///
		///Default value: `DESC`</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.</param>
		/// <returns>Success</returns>
		public async Task<ListRefundsResponse> TransactionsGetByLocation_idAndBegin_timeAndEnd_timeAndSort_orderAndCursorAsync(string location_id, string begin_time, string end_time, string sort_order, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/refunds&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&sort_order=" + (sort_order==null? "" : System.Uri.EscapeDataString(sort_order))+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRefundsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListTransactions
		/// Lists transactions for a particular location.
		/// 
		/// Transactions include payment information from sales and exchanges and refund
		/// information from returns and exchanges.
		/// 
		/// Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
		/// ListTransactions v2/locations/{location_id}/transactions
		/// </summary>
		/// <param name="location_id">The ID of the location to list transactions for.</param>
		/// <param name="begin_time">The beginning of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time minus one year.</param>
		/// <param name="end_time">The end of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time.</param>
		/// <param name="sort_order">The order in which results are listed in the response (`ASC` for
		///oldest first, `DESC` for newest first).
		///
		///Default value: `DESC`</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.</param>
		/// <returns>Success</returns>
		public async Task<ListTransactionsResponse> ListTransactionsAsync(string location_id, string begin_time, string end_time, string sort_order, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&sort_order=" + (sort_order==null? "" : System.Uri.EscapeDataString(sort_order))+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTransactionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charge
		/// Charges a card represented by a card nonce or a customer's card on file.
		/// 
		/// Your request to this endpoint must include _either_:
		/// 
		/// - A value for the `card_nonce` parameter (to charge a card payment token generated
		/// with the Web Payments SDK)
		/// - Values for the `customer_card_id` and `customer_id` parameters (to charge
		/// a customer's card on file)
		/// 
		/// In order for an eCommerce payment to potentially qualify for
		/// [Square chargeback protection](https://squareup.com/help/article/5394), you
		/// _must_ provide values for the following parameters in your request:
		/// 
		/// - `buyer_email_address`
		/// - At least one of `billing_address` or `shipping_address`
		/// 
		/// When this response is returned, the amount of Square's processing fee might not yet be
		/// calculated. To obtain the processing fee, wait about ten seconds and call
		/// [RetrieveTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/retrieve-transaction). See the `processing_fee_money`
		/// field of each [Tender included](https://developer.squareup.com/reference/square_2021-08-18/objects/Tender) in the transaction.
		/// Charge v2/locations/{location_id}/transactions
		/// </summary>
		/// <param name="location_id">The ID of the location to associate the created transaction with.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<ChargeResponse> ChargeAsync(string location_id, ChargeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChargeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveTransaction
		/// Retrieves details for a single transaction.
		/// RetrieveTransaction v2/locations/{location_id}/transactions/{transaction_id}
		/// </summary>
		/// <param name="location_id">The ID of the transaction's associated location.</param>
		/// <param name="transaction_id">The ID of the transaction to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveTransactionResponse> RetrieveTransactionAsync(string location_id, string transaction_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveTransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CaptureTransaction
		/// Captures a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
		/// endpoint with a `delay_capture` value of `true`.
		/// 
		/// 
		/// See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
		/// for more information.
		/// CaptureTransaction v2/locations/{location_id}/transactions/{transaction_id}/capture
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CaptureTransactionResponse> CaptureTransactionAsync(string location_id, string transaction_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id))+"/capture";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaptureTransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateRefund
		/// Initiates a refund for a previously charged tender.
		/// 
		/// You must issue a refund within 120 days of the associated payment. See
		/// [this article](https://squareup.com/help/us/en/article/5060) for more information
		/// on refund behavior.
		/// 
		/// NOTE: Card-present transactions with Interac credit cards **cannot be
		/// refunded using the Connect API**. Interac transactions must refunded
		/// in-person (e.g., dipping the card using POS app).
		/// TransactionsPostByLocation_idAndTransaction_id v2/locations/{location_id}/transactions/{transaction_id}/refund
		/// </summary>
		/// <param name="location_id">The ID of the original transaction's associated location.</param>
		/// <param name="transaction_id">The ID of the original transaction that includes the tender to refund.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateRefundResponse> TransactionsPostByLocation_idAndTransaction_idAsync(string location_id, string transaction_id, CreateRefundRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id))+"/refund";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateRefundResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// VoidTransaction
		/// Cancels a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
		/// endpoint with a `delay_capture` value of `true`.
		/// 
		/// 
		/// See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
		/// for more information.
		/// VoidTransaction v2/locations/{location_id}/transactions/{transaction_id}/void
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VoidTransactionResponse> VoidTransactionAsync(string location_id, string transaction_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id))+"/void";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VoidTransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateLoyaltyAccount
		/// Creates a loyalty account. To create a loyalty account, you must provide the `program_id` and a `mapping` with the `phone_number` of the buyer.
		/// CreateLoyaltyAccount v2/loyalty/accounts
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateLoyaltyAccountResponse> CreateLoyaltyAccountAsync(CreateLoyaltyAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateLoyaltyAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchLoyaltyAccounts
		/// Searches for loyalty accounts in a loyalty program.
		/// 
		/// You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.
		/// 
		/// Search results are sorted by `created_at` in ascending order.
		/// SearchLoyaltyAccounts v2/loyalty/accounts/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchLoyaltyAccountsResponse> SearchLoyaltyAccountsAsync(SearchLoyaltyAccountsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/accounts/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchLoyaltyAccountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveLoyaltyAccount
		/// Retrieves a loyalty account.
		/// RetrieveLoyaltyAccount v2/loyalty/accounts/{account_id}
		/// </summary>
		/// <param name="account_id">The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveLoyaltyAccountResponse> RetrieveLoyaltyAccountAsync(string account_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/accounts/"+ (account_id==null? "" : System.Uri.EscapeDataString(account_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveLoyaltyAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// AccumulateLoyaltyPoints
		/// Adds points to a loyalty account.
		/// 
		/// - If you are using the Orders API to manage orders, you only provide the `order_id`.
		/// The endpoint reads the order to compute points to add to the buyer's account.
		/// - If you are not using the Orders API to manage orders,
		/// you first perform a client-side computation to compute the points.
		/// For spend-based and visit-based programs, you can first call
		/// [CalculateLoyaltyPoints](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/calculate-loyalty-points) to compute the points
		/// that you provide to this endpoint.
		/// 
		/// __Note:__ The country of the seller's Square account determines whether tax is included in the purchase amount when accruing points for spend-based and visit-based programs.
		/// For more information, see [Availability of Square Loyalty](https://developer.squareup.com/docs/loyalty-api/overview#loyalty-market-availability).
		/// AccumulateLoyaltyPoints v2/loyalty/accounts/{account_id}/accumulate
		/// </summary>
		/// <param name="account_id">The [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) ID to which to add the points.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<AccumulateLoyaltyPointsResponse> AccumulateLoyaltyPointsAsync(string account_id, AccumulateLoyaltyPointsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/accounts/"+ (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"/accumulate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccumulateLoyaltyPointsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// AdjustLoyaltyPoints
		/// Adds points to or subtracts points from a buyer's account.
		/// 
		/// Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call
		/// [AccumulateLoyaltyPoints](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/accumulate-loyalty-points)
		/// to add points when a buyer pays for the purchase.
		/// AdjustLoyaltyPoints v2/loyalty/accounts/{account_id}/adjust
		/// </summary>
		/// <param name="account_id">The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which to adjust the points.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<AdjustLoyaltyPointsResponse> AdjustLoyaltyPointsAsync(string account_id, AdjustLoyaltyPointsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/accounts/"+ (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"/adjust";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AdjustLoyaltyPointsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchLoyaltyEvents
		/// Searches for loyalty events.
		/// 
		/// A Square loyalty program maintains a ledger of events that occur during the lifetime of a
		/// buyer's loyalty account. Each change in the point balance
		/// (for example, points earned, points redeemed, and points expired) is
		/// recorded in the ledger. Using this endpoint, you can search the ledger for events.
		/// 
		/// Search results are sorted by `created_at` in descending order.
		/// SearchLoyaltyEvents v2/loyalty/events/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchLoyaltyEventsResponse> SearchLoyaltyEventsAsync(SearchLoyaltyEventsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/events/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchLoyaltyEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListLoyaltyPrograms
		/// Returns a list of loyalty programs in the seller's account.
		/// Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
		/// 
		/// 
		/// Replaced with [RetrieveLoyaltyProgram](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/retrieve-loyalty-program) when used with the keyword `main`.
		/// ListLoyaltyPrograms v2/loyalty/programs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListLoyaltyProgramsResponse> ListLoyaltyProgramsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/programs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLoyaltyProgramsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveLoyaltyProgram
		/// Retrieves the loyalty program in a seller's account, specified by the program ID or the keyword `main`.
		/// 
		/// Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
		/// RetrieveLoyaltyProgram v2/loyalty/programs/{program_id}
		/// </summary>
		/// <param name="program_id">The ID of the loyalty program or the keyword `main`. Either value can be used to retrieve the single loyalty program that belongs to the seller.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveLoyaltyProgramResponse> RetrieveLoyaltyProgramAsync(string program_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/programs/"+ (program_id==null? "" : System.Uri.EscapeDataString(program_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveLoyaltyProgramResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CalculateLoyaltyPoints
		/// Calculates the points a purchase earns.
		/// 
		/// - If you are using the Orders API to manage orders, you provide `order_id` in the request. The
		/// endpoint calculates the points by reading the order.
		/// - If you are not using the Orders API to manage orders, you provide the purchase amount in
		/// the request for the endpoint to calculate the points.
		/// 
		/// An application might call this endpoint to show the points that a buyer can earn with the
		/// specific purchase.
		/// 
		/// __Note:__ The country of the seller's Square account determines whether tax is included in the purchase amount when accruing points for spend-based and visit-based programs.
		/// For more information, see [Availability of Square Loyalty](https://developer.squareup.com/docs/loyalty-api/overview#loyalty-market-availability).
		/// CalculateLoyaltyPoints v2/loyalty/programs/{program_id}/calculate
		/// </summary>
		/// <param name="program_id">The [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) ID, which defines the rules for accruing points.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CalculateLoyaltyPointsResponse> CalculateLoyaltyPointsAsync(string program_id, CalculateLoyaltyPointsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/programs/"+ (program_id==null? "" : System.Uri.EscapeDataString(program_id))+"/calculate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalculateLoyaltyPointsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CreateLoyaltyReward
		/// Creates a loyalty reward. In the process, the endpoint does following:
		/// 
		/// - Uses the `reward_tier_id` in the request to determine the number of points
		/// to lock for this reward.
		/// - If the request includes `order_id`, it adds the reward and related discount to the order.
		/// 
		/// After a reward is created, the points are locked and
		/// not available for the buyer to redeem another reward.
		/// CreateLoyaltyReward v2/loyalty/rewards
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateLoyaltyRewardResponse> CreateLoyaltyRewardAsync(CreateLoyaltyRewardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/rewards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateLoyaltyRewardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchLoyaltyRewards
		/// Searches for loyalty rewards in a loyalty account.
		/// 
		/// In the current implementation, the endpoint supports search by the reward `status`.
		/// 
		/// If you know a reward ID, use the
		/// [RetrieveLoyaltyReward](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/retrieve-loyalty-reward) endpoint.
		/// 
		/// Search results are sorted by `updated_at` in descending order.
		/// SearchLoyaltyRewards v2/loyalty/rewards/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchLoyaltyRewardsResponse> SearchLoyaltyRewardsAsync(SearchLoyaltyRewardsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/rewards/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchLoyaltyRewardsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeleteLoyaltyReward
		/// Deletes a loyalty reward by doing the following:
		/// 
		/// - Returns the loyalty points back to the loyalty account.
		/// - If an order ID was specified when the reward was created
		/// (see [CreateLoyaltyReward](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/create-loyalty-reward)),
		/// it updates the order by removing the reward and related
		/// discounts.
		/// 
		/// You cannot delete a reward that has reached the terminal state (REDEEMED).
		/// DeleteLoyaltyReward v2/loyalty/rewards/{reward_id}
		/// </summary>
		/// <param name="reward_id">The ID of the [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward) to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteLoyaltyRewardResponse> DeleteLoyaltyRewardAsync(string reward_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/rewards/"+ (reward_id==null? "" : System.Uri.EscapeDataString(reward_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteLoyaltyRewardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveLoyaltyReward
		/// Retrieves a loyalty reward.
		/// RetrieveLoyaltyReward v2/loyalty/rewards/{reward_id}
		/// </summary>
		/// <param name="reward_id">The ID of the [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward) to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveLoyaltyRewardResponse> RetrieveLoyaltyRewardAsync(string reward_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/rewards/"+ (reward_id==null? "" : System.Uri.EscapeDataString(reward_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveLoyaltyRewardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RedeemLoyaltyReward
		/// Redeems a loyalty reward.
		/// 
		/// The endpoint sets the reward to the `REDEEMED` terminal state.
		/// 
		/// If you are using your own order processing system (not using the
		/// Orders API), you call this endpoint after the buyer paid for the
		/// purchase.
		/// 
		/// After the reward reaches the terminal state, it cannot be deleted.
		/// In other words, points used for the reward cannot be returned
		/// to the account.
		/// RedeemLoyaltyReward v2/loyalty/rewards/{reward_id}/redeem
		/// </summary>
		/// <param name="reward_id">The ID of the [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward) to redeem.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<RedeemLoyaltyRewardResponse> RedeemLoyaltyRewardAsync(string reward_id, RedeemLoyaltyRewardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/loyalty/rewards/"+ (reward_id==null? "" : System.Uri.EscapeDataString(reward_id))+"/redeem";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RedeemLoyaltyRewardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListMerchants
		/// Returns `Merchant` information for a given access token.
		/// 
		/// If you don't know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token.
		/// You can specify your personal access token to get your own merchant information or specify an OAuth token
		/// to get the information for the  merchant that granted you access.
		/// 
		/// If you know the merchant ID, you can also use the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant)
		/// endpoint to get the merchant information.
		/// ListMerchants v2/merchants
		/// </summary>
		/// <param name="cursor">The cursor generated by the previous response.</param>
		/// <returns>Success</returns>
		public async Task<ListMerchantsResponse> ListMerchantsAsync(int cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/merchants?cursor="+cursor;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMerchantsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveMerchant
		/// Retrieve a `Merchant` object for the given `merchant_id`.
		/// RetrieveMerchant v2/merchants/{merchant_id}
		/// </summary>
		/// <param name="merchant_id">The ID of the merchant to retrieve. If the string "me" is supplied as the ID,
		///then retrieve the merchant that is currently accessible to this call.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveMerchantResponse> RetrieveMerchantAsync(string merchant_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/merchants/"+ (merchant_id==null? "" : System.Uri.EscapeDataString(merchant_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveMerchantResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateOrder
		/// Creates a new [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that can include information about products for
		/// purchase and settings to apply to the purchase.
		/// 
		/// To pay for a created order, see
		/// [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
		/// 
		/// You can modify open orders using the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
		/// CreateOrder v2/orders
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateOrderResponse> CreateOrderAsync(CreateOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/orders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateOrderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// BatchRetrieveOrders
		/// Retrieves a set of [orders](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by their IDs.
		/// 
		/// If a given order ID does not exist, the ID is ignored instead of generating an error.
		/// BatchRetrieveOrders v2/orders/batch-retrieve
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchRetrieveOrdersResponse> BatchRetrieveOrdersAsync(BatchRetrieveOrdersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/orders/batch-retrieve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchRetrieveOrdersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CalculateOrder
		/// Enables applications to preview order pricing without creating an order.
		/// CalculateOrder v2/orders/calculate
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CalculateOrderResponse> CalculateOrderAsync(CalculateOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/orders/calculate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalculateOrderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchOrders
		/// Search all orders for one or more locations. Orders include all sales,
		/// returns, and exchanges regardless of how or when they entered the Square
		/// ecosystem (such as Point of Sale, Invoices, and Connect APIs).
		/// 
		/// `SearchOrders` requests need to specify which locations to search and define a
		/// [SearchOrdersQuery](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersQuery) object that controls
		/// how to sort or filter the results. Your `SearchOrdersQuery` can:
		/// 
		/// Set filter criteria.
		/// Set the sort order.
		/// Determine whether to return results as complete `Order` objects or as
		/// [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects.
		/// 
		/// Note that details for orders processed with Square Point of Sale while in
		/// offline mode might not be transmitted to Square for up to 72 hours. Offline
		/// orders have a `created_at` value that reflects the time the order was created,
		/// not the time it was subsequently transmitted to Square.
		/// SearchOrders v2/orders/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchOrdersResponse> SearchOrdersAsync(SearchOrdersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/orders/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchOrdersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveOrder
		/// Retrieves an [Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by ID.
		/// OrdersGetByOrder_id v2/orders/{order_id}
		/// </summary>
		/// <param name="order_id">The ID of the order to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveOrderResponse> OrdersGetByOrder_idAsync(string order_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/orders/"+ (order_id==null? "" : System.Uri.EscapeDataString(order_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveOrderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateOrder
		/// Updates an open [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by adding, replacing, or deleting
		/// fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.
		/// 
		/// An `UpdateOrder` request requires the following:
		/// 
		/// - The `order_id` in the endpoint path, identifying the order to update.
		/// - The latest `version` of the order to update.
		/// - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-objects)
		/// containing only the fields to update and the version to which the update is
		/// being applied.
		/// - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)
		/// identifying the fields to clear.
		/// 
		/// To pay for an order, see
		/// [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
		/// OrdersPutByOrder_id v2/orders/{order_id}
		/// </summary>
		/// <param name="order_id">The ID of the order to update.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateOrderResponse> OrdersPutByOrder_idAsync(string order_id, UpdateOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/orders/"+ (order_id==null? "" : System.Uri.EscapeDataString(order_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateOrderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// PayOrder
		/// Pay for an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) using one or more approved [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment)
		/// or settle an order with a total of `0`.
		/// 
		/// The total of the `payment_ids` listed in the request must be equal to the order
		/// total. Orders with a total amount of `0` can be marked as paid by specifying an empty
		/// array of `payment_ids` in the request.
		/// 
		/// To be used with `PayOrder`, a payment must:
		/// 
		/// - Reference the order by specifying the `order_id` when [creating the payment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
		/// Any approved payments that reference the same `order_id` not specified in the
		/// `payment_ids` is canceled.
		/// - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-payments#delayed-capture).
		/// Using a delayed capture payment with `PayOrder` completes the approved payment.
		/// PayOrder v2/orders/{order_id}/pay
		/// </summary>
		/// <param name="order_id">The ID of the order being paid.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<PayOrderResponse> PayOrderAsync(string order_id, PayOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/orders/"+ (order_id==null? "" : System.Uri.EscapeDataString(order_id))+"/pay";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayOrderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListPayments
		/// Retrieves a list of payments taken by the account making the request.
		/// 
		/// Results are eventually consistent, and new payments or changes to payments might take several
		/// seconds to appear.
		/// 
		/// The maximum results per page is 100.
		/// PaymentsGetByBegin_timeAndEnd_timeAndSort_orderAndCursorAndLocation_idAndTotalAndLast_4AndCard_brandAndLimit v2/payments
		/// </summary>
		/// <param name="begin_time">The timestamp for the beginning of the reporting period, in RFC 3339 format.
		///Inclusive. Default: The current time minus one year.</param>
		/// <param name="end_time">The timestamp for the end of the reporting period, in RFC 3339 format.
		///
		///Default: The current time.</param>
		/// <param name="sort_order">The order in which results are listed:
		///- `ASC` - Oldest to newest.
		///- `DESC` - Newest to oldest (default).</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).</param>
		/// <param name="location_id">Limit results to the location supplied. By default, results are returned
		///for the default (main) location associated with the seller.</param>
		/// <param name="total">The exact amount in the `total_money` for a payment.</param>
		/// <param name="last_4">The last four digits of a payment card.</param>
		/// <param name="card_brand">The brand of the payment card (for example, VISA).</param>
		/// <param name="limit">The maximum number of results to be returned in a single page.
		///It is possible to receive fewer results than the specified limit on a given page.
		///
		///The default value of 100 is also the maximum allowed value. If the provided value is 
		///greater than 100, it is ignored and the default value is used instead.
		///
		///Default: `100`</param>
		/// <returns>Success</returns>
		public async Task<ListPaymentsResponse> PaymentsGetByBegin_timeAndEnd_timeAndSort_orderAndCursorAndLocation_idAndTotalAndLast_4AndCard_brandAndLimitAsync(string begin_time, string end_time, string sort_order, string cursor, string location_id, long total, string last_4, string card_brand, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/payments?begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&sort_order=" + (sort_order==null? "" : System.Uri.EscapeDataString(sort_order))+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"&total="+total+"&last_4=" + (last_4==null? "" : System.Uri.EscapeDataString(last_4))+"&card_brand=" + (card_brand==null? "" : System.Uri.EscapeDataString(card_brand))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPaymentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreatePayment
		/// Creates a payment using the provided source. You can use this endpoint
		/// to charge a card (credit/debit card or
		/// Square gift card) or record a payment that the seller received outside of Square
		/// (cash payment from a buyer or a payment that an external entity
		/// processed on behalf of the seller).
		/// 
		/// The endpoint creates a
		/// `Payment` object and returns it in the response.
		/// CreatePayment v2/payments
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreatePaymentResponse> CreatePaymentAsync(CreatePaymentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePaymentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CancelPaymentByIdempotencyKey
		/// Cancels (voids) a payment identified by the idempotency key that is specified in the
		/// request.
		/// 
		/// Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a
		/// `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can
		/// direct Square to cancel the payment using this endpoint. In the request, you provide the same
		/// idempotency key that you provided in your `CreatePayment` request that you want to cancel. After
		/// canceling the payment, you can submit your `CreatePayment` request again.
		/// 
		/// Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint
		/// returns successfully.
		/// CancelPaymentByIdempotencyKey v2/payments/cancel
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CancelPaymentByIdempotencyKeyResponse> CancelPaymentByIdempotencyKeyAsync(CancelPaymentByIdempotencyKeyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/payments/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelPaymentByIdempotencyKeyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// GetPayment
		/// Retrieves details for a specific payment.
		/// GetPayment v2/payments/{payment_id}
		/// </summary>
		/// <param name="payment_id">A unique ID for the desired payment.</param>
		/// <returns>Success</returns>
		public async Task<GetPaymentResponse> GetPaymentAsync(string payment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/payments/"+ (payment_id==null? "" : System.Uri.EscapeDataString(payment_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPaymentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdatePayment
		/// Updates a payment with the APPROVED status.
		/// You can update the `amount_money` and `tip_money` using this endpoint.
		/// UpdatePayment v2/payments/{payment_id}
		/// </summary>
		/// <param name="payment_id">The ID of the payment to update.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdatePaymentResponse> UpdatePaymentAsync(string payment_id, UpdatePaymentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/payments/"+ (payment_id==null? "" : System.Uri.EscapeDataString(payment_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePaymentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CancelPayment
		/// Cancels (voids) a payment. You can use this endpoint to cancel a payment with
		/// the APPROVED `status`.
		/// CancelPayment v2/payments/{payment_id}/cancel
		/// </summary>
		/// <param name="payment_id">The ID of the payment to cancel.</param>
		/// <returns>Success</returns>
		public async Task<CancelPaymentResponse> CancelPaymentAsync(string payment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/payments/"+ (payment_id==null? "" : System.Uri.EscapeDataString(payment_id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelPaymentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CompletePayment
		/// Completes (captures) a payment.
		/// By default, payments are set to complete immediately after they are created.
		/// 
		/// You can use this endpoint to complete a payment with the APPROVED `status`.
		/// CompletePayment v2/payments/{payment_id}/complete
		/// </summary>
		/// <param name="payment_id">The unique ID identifying the payment to be completed.</param>
		/// <returns>Success</returns>
		public async Task<CompletePaymentResponse> CompletePaymentAsync(string payment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/payments/"+ (payment_id==null? "" : System.Uri.EscapeDataString(payment_id))+"/complete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompletePaymentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListPaymentRefunds
		/// Retrieves a list of refunds for the account making the request.
		/// 
		/// Results are eventually consistent, and new refunds or changes to refunds might take several
		/// seconds to appear.
		/// 
		/// The maximum results per page is 100.
		/// ListPaymentRefunds v2/refunds
		/// </summary>
		/// <param name="begin_time">The timestamp for the beginning of the requested reporting period, in RFC 3339 format.
		///
		///Default: The current time minus one year.</param>
		/// <param name="end_time">The timestamp for the end of the requested reporting period, in RFC 3339 format.
		///
		///Default: The current time.</param>
		/// <param name="sort_order">The order in which results are listed:
		///- `ASC` - Oldest to newest.
		///- `DESC` - Newest to oldest (default).</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this cursor to retrieve the next set of results for the original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).</param>
		/// <param name="location_id">Limit results to the location supplied. By default, results are returned
		///for all locations associated with the seller.</param>
		/// <param name="status">If provided, only refunds with the given status are returned.
		///For a list of refund status values, see [PaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/objects/PaymentRefund).
		///
		///Default: If omitted, refunds are returned regardless of their status.</param>
		/// <param name="source_type">If provided, only refunds with the given source type are returned.
		///- `CARD` - List refunds only for payments where `CARD` was specified as the payment
		///source.
		///
		///Default: If omitted, refunds are returned regardless of the source type.</param>
		/// <param name="limit">The maximum number of results to be returned in a single page.
		///
		///It is possible to receive fewer results than the specified limit on a given page.
		///
		///If the supplied value is greater than 100, no more than 100 results are returned.
		///
		///Default: 100</param>
		/// <returns>Success</returns>
		public async Task<ListPaymentRefundsResponse> ListPaymentRefundsAsync(string begin_time, string end_time, string sort_order, string cursor, string location_id, string status, string source_type, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/refunds?begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&sort_order=" + (sort_order==null? "" : System.Uri.EscapeDataString(sort_order))+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&source_type=" + (source_type==null? "" : System.Uri.EscapeDataString(source_type))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPaymentRefundsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RefundPayment
		/// Refunds a payment. You can refund the entire payment amount or a
		/// portion of it. You can use this endpoint to refund a card payment or record a
		/// refund of a cash or external payment. For more information, see
		/// [Refund Payment](https://developer.squareup.com/docs/payments-api/refund-payments).
		/// RefundPayment v2/refunds
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<RefundPaymentResponse> RefundPaymentAsync(RefundPaymentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/refunds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RefundPaymentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// GetPaymentRefund
		/// Retrieves a specific refund using the `refund_id`.
		/// GetPaymentRefund v2/refunds/{refund_id}
		/// </summary>
		/// <param name="refund_id">The unique ID for the desired `PaymentRefund`.</param>
		/// <returns>Success</returns>
		public async Task<GetPaymentRefundResponse> GetPaymentRefundAsync(string refund_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/refunds/"+ (refund_id==null? "" : System.Uri.EscapeDataString(refund_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPaymentRefundResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListSites
		/// Lists the Square Online sites that belong to a seller.
		/// 
		/// 
		/// __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
		/// ListSites v2/sites
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListSitesResponse> ListSitesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSitesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteSnippet
		/// Removes your snippet from a Square Online site.
		/// 
		/// You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.
		/// 
		/// 
		/// __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
		/// DeleteSnippet v2/sites/{site_id}/snippet
		/// </summary>
		/// <param name="site_id">The ID of the site that contains the snippet.</param>
		/// <returns>Success</returns>
		public async Task<DeleteSnippetResponse> DeleteSnippetAsync(string site_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sites/"+ (site_id==null? "" : System.Uri.EscapeDataString(site_id))+"/snippet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSnippetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RetrieveSnippet
		/// Retrieves your snippet from a Square Online site. A site can contain snippets from multiple snippet applications, but you can retrieve only the snippet that was added by your application.
		/// 
		/// You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.
		/// 
		/// 
		/// __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
		/// RetrieveSnippet v2/sites/{site_id}/snippet
		/// </summary>
		/// <param name="site_id">The ID of the site that contains the snippet.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveSnippetResponse> RetrieveSnippetAsync(string site_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sites/"+ (site_id==null? "" : System.Uri.EscapeDataString(site_id))+"/snippet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveSnippetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpsertSnippet
		/// Adds a snippet to a Square Online site or updates the existing snippet on the site.
		/// The snippet code is appended to the end of the `head` element on every page of the site, except checkout pages. A snippet application can add one snippet to a given site.
		/// 
		/// You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.
		/// 
		/// 
		/// __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
		/// UpsertSnippet v2/sites/{site_id}/snippet
		/// </summary>
		/// <param name="site_id">The ID of the site where you want to add or update the snippet.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpsertSnippetResponse> UpsertSnippetAsync(string site_id, UpsertSnippetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sites/"+ (site_id==null? "" : System.Uri.EscapeDataString(site_id))+"/snippet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpsertSnippetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CreateSubscription
		/// Creates a subscription for a customer to a subscription plan.
		/// 
		/// If you provide a card on file in the request, Square charges the card for
		/// the subscription. Otherwise, Square bills an invoice to the customer's email
		/// address. The subscription starts immediately, unless the request includes
		/// the optional `start_date`. Each individual subscription is associated with a particular location.
		/// CreateSubscription v2/subscriptions
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateSubscriptionResponse> CreateSubscriptionAsync(CreateSubscriptionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchSubscriptions
		/// Searches for subscriptions.
		/// Results are ordered chronologically by subscription creation date. If
		/// the request specifies more than one location ID,
		/// the endpoint orders the result
		/// by location ID, and then by creation date within each location. If no locations are given
		/// in the query, all locations are searched.
		/// 
		/// You can also optionally specify `customer_ids` to search by customer.
		/// If left unset, all customers
		/// associated with the specified locations are returned.
		/// If the request specifies customer IDs, the endpoint orders results
		/// first by location, within location by customer ID, and within
		/// customer by subscription creation date.
		/// 
		/// For more information, see
		/// [Retrieve subscriptions](https://developer.squareup.com/docs/subscriptions-api/overview#retrieve-subscriptions).
		/// SearchSubscriptions v2/subscriptions/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchSubscriptionsResponse> SearchSubscriptionsAsync(SearchSubscriptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/subscriptions/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchSubscriptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveSubscription
		/// Retrieves a subscription.
		/// RetrieveSubscription v2/subscriptions/{subscription_id}
		/// </summary>
		/// <param name="subscription_id">The ID of the subscription to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveSubscriptionResponse> RetrieveSubscriptionAsync(string subscription_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/subscriptions/"+ (subscription_id==null? "" : System.Uri.EscapeDataString(subscription_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateSubscription
		/// Updates a subscription. You can set, modify, and clear the
		/// `subscription` field values.
		/// UpdateSubscription v2/subscriptions/{subscription_id}
		/// </summary>
		/// <param name="subscription_id">The ID for the subscription to update.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateSubscriptionResponse> UpdateSubscriptionAsync(string subscription_id, UpdateSubscriptionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/subscriptions/"+ (subscription_id==null? "" : System.Uri.EscapeDataString(subscription_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CancelSubscription
		/// Sets the `canceled_date` field to the end of the active billing period.
		/// After this date, the status changes from ACTIVE to CANCELED.
		/// CancelSubscription v2/subscriptions/{subscription_id}/cancel
		/// </summary>
		/// <param name="subscription_id">The ID of the subscription to cancel.</param>
		/// <returns>Success</returns>
		public async Task<CancelSubscriptionResponse> CancelSubscriptionAsync(string subscription_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/subscriptions/"+ (subscription_id==null? "" : System.Uri.EscapeDataString(subscription_id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListSubscriptionEvents
		/// Lists all events for a specific subscription.
		/// In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
		/// ListSubscriptionEvents v2/subscriptions/{subscription_id}/events
		/// </summary>
		/// <param name="subscription_id">The ID of the subscription to retrieve the events for.</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for the original query.
		///
		///For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).</param>
		/// <param name="limit">The upper limit on the number of subscription events to return
		///in the response.
		///
		///Default: `200`</param>
		/// <returns>Success</returns>
		public async Task<ListSubscriptionEventsResponse> ListSubscriptionEventsAsync(string subscription_id, string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/subscriptions/"+ (subscription_id==null? "" : System.Uri.EscapeDataString(subscription_id))+"/events&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSubscriptionEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ResumeSubscription
		/// Resumes a deactivated subscription.
		/// ResumeSubscription v2/subscriptions/{subscription_id}/resume
		/// </summary>
		/// <param name="subscription_id">The ID of the subscription to resume.</param>
		/// <returns>Success</returns>
		public async Task<ResumeSubscriptionResponse> ResumeSubscriptionAsync(string subscription_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/subscriptions/"+ (subscription_id==null? "" : System.Uri.EscapeDataString(subscription_id))+"/resume";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResumeSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateTeamMember
		/// Creates a single `TeamMember` object. The `TeamMember` object is returned on successful creates.
		/// You must provide the following values in your request to this endpoint:
		/// - `given_name`
		/// - `family_name`
		/// 
		/// Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#createteammember).
		/// CreateTeamMember v2/team-members
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateTeamMemberResponse> CreateTeamMemberAsync(CreateTeamMemberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/team-members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTeamMemberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// BulkCreateTeamMembers
		/// Creates multiple `TeamMember` objects. The created `TeamMember` objects are returned on successful creates.
		/// This process is non-transactional and processes as much of the request as possible. If one of the creates in
		/// the request cannot be successfully processed, the request is not marked as failed, but the body of the response
		/// contains explicit error information for the failed create.
		/// 
		/// Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members).
		/// BulkCreateTeamMembers v2/team-members/bulk-create
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BulkCreateTeamMembersResponse> BulkCreateTeamMembersAsync(BulkCreateTeamMembersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/team-members/bulk-create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BulkCreateTeamMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// BulkUpdateTeamMembers
		/// Updates multiple `TeamMember` objects. The updated `TeamMember` objects are returned on successful updates.
		/// This process is non-transactional and processes as much of the request as possible. If one of the updates in
		/// the request cannot be successfully processed, the request is not marked as failed, but the body of the response
		/// contains explicit error information for the failed update.
		/// Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members).
		/// BulkUpdateTeamMembers v2/team-members/bulk-update
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BulkUpdateTeamMembersResponse> BulkUpdateTeamMembersAsync(BulkUpdateTeamMembersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/team-members/bulk-update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BulkUpdateTeamMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchTeamMembers
		/// Returns a paginated list of `TeamMember` objects for a business.
		/// The list can be filtered by the following:
		/// - location IDs
		/// - `status`
		/// SearchTeamMembers v2/team-members/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchTeamMembersResponse> SearchTeamMembersAsync(SearchTeamMembersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/team-members/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchTeamMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveTeamMember
		/// Retrieves a `TeamMember` object for the given `TeamMember.id`.
		/// Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member).
		/// RetrieveTeamMember v2/team-members/{team_member_id}
		/// </summary>
		/// <param name="team_member_id">The ID of the team member to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveTeamMemberResponse> RetrieveTeamMemberAsync(string team_member_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/team-members/"+ (team_member_id==null? "" : System.Uri.EscapeDataString(team_member_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveTeamMemberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateTeamMember
		/// Updates a single `TeamMember` object. The `TeamMember` object is returned on successful updates.
		/// Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member).
		/// UpdateTeamMember v2/team-members/{team_member_id}
		/// </summary>
		/// <param name="team_member_id">The ID of the team member to update.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateTeamMemberResponse> UpdateTeamMemberAsync(string team_member_id, UpdateTeamMemberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/team-members/"+ (team_member_id==null? "" : System.Uri.EscapeDataString(team_member_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTeamMemberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveWageSetting
		/// Retrieves a `WageSetting` object for a team member specified
		/// by `TeamMember.id`.
		/// Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrievewagesetting).
		/// RetrieveWageSetting v2/team-members/{team_member_id}/wage-setting
		/// </summary>
		/// <param name="team_member_id">The ID of the team member for which to retrieve the wage setting.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveWageSettingResponse> RetrieveWageSettingAsync(string team_member_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/team-members/"+ (team_member_id==null? "" : System.Uri.EscapeDataString(team_member_id))+"/wage-setting";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveWageSettingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateWageSetting
		/// Creates or updates a `WageSetting` object. The object is created if a
		/// `WageSetting` with the specified `team_member_id` does not exist. Otherwise,
		/// it fully replaces the `WageSetting` object for the team member.
		/// The `WageSetting` is returned on a successful update.
		/// Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#create-or-update-a-wage-setting).
		/// UpdateWageSetting v2/team-members/{team_member_id}/wage-setting
		/// </summary>
		/// <param name="team_member_id">The ID of the team member for which to update the `WageSetting` object.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateWageSettingResponse> UpdateWageSettingAsync(string team_member_id, UpdateWageSettingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/team-members/"+ (team_member_id==null? "" : System.Uri.EscapeDataString(team_member_id))+"/wage-setting";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWageSettingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CreateTerminalCheckout
		/// Creates a Terminal checkout request and sends it to the specified device to take a payment
		/// for the requested amount.
		/// CreateTerminalCheckout v2/terminals/checkouts
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateTerminalCheckoutResponse> CreateTerminalCheckoutAsync(CreateTerminalCheckoutRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/terminals/checkouts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTerminalCheckoutResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchTerminalCheckouts
		/// Retrieves a filtered list of Terminal checkout requests created by the account making the request.
		/// SearchTerminalCheckouts v2/terminals/checkouts/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchTerminalCheckoutsResponse> SearchTerminalCheckoutsAsync(SearchTerminalCheckoutsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/terminals/checkouts/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchTerminalCheckoutsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// GetTerminalCheckout
		/// Retrieves a Terminal checkout request by `checkout_id`.
		/// GetTerminalCheckout v2/terminals/checkouts/{checkout_id}
		/// </summary>
		/// <param name="checkout_id">The unique ID for the desired `TerminalCheckout`.</param>
		/// <returns>Success</returns>
		public async Task<GetTerminalCheckoutResponse> GetTerminalCheckoutAsync(string checkout_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/terminals/checkouts/"+ (checkout_id==null? "" : System.Uri.EscapeDataString(checkout_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTerminalCheckoutResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CancelTerminalCheckout
		/// Cancels a Terminal checkout request if the status of the request permits it.
		/// CancelTerminalCheckout v2/terminals/checkouts/{checkout_id}/cancel
		/// </summary>
		/// <param name="checkout_id">The unique ID for the desired `TerminalCheckout`.</param>
		/// <returns>Success</returns>
		public async Task<CancelTerminalCheckoutResponse> CancelTerminalCheckoutAsync(string checkout_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/terminals/checkouts/"+ (checkout_id==null? "" : System.Uri.EscapeDataString(checkout_id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelTerminalCheckoutResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateTerminalRefund
		/// Creates a request to refund an Interac payment completed on a Square Terminal.
		/// CreateTerminalRefund v2/terminals/refunds
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateTerminalRefundResponse> CreateTerminalRefundAsync(CreateTerminalRefundRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/terminals/refunds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTerminalRefundResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SearchTerminalRefunds
		/// Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request.
		/// SearchTerminalRefunds v2/terminals/refunds/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchTerminalRefundsResponse> SearchTerminalRefundsAsync(SearchTerminalRefundsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/terminals/refunds/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchTerminalRefundsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// GetTerminalRefund
		/// Retrieves an Interac Terminal refund object by ID.
		/// GetTerminalRefund v2/terminals/refunds/{terminal_refund_id}
		/// </summary>
		/// <param name="terminal_refund_id">The unique ID for the desired `TerminalRefund`.</param>
		/// <returns>Success</returns>
		public async Task<GetTerminalRefundResponse> GetTerminalRefundAsync(string terminal_refund_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/terminals/refunds/"+ (terminal_refund_id==null? "" : System.Uri.EscapeDataString(terminal_refund_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTerminalRefundResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CancelTerminalRefund
		/// Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
		/// CancelTerminalRefund v2/terminals/refunds/{terminal_refund_id}/cancel
		/// </summary>
		/// <param name="terminal_refund_id">The unique ID for the desired `TerminalRefund`.</param>
		/// <returns>Success</returns>
		public async Task<CancelTerminalRefundResponse> CancelTerminalRefundAsync(string terminal_refund_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/terminals/refunds/"+ (terminal_refund_id==null? "" : System.Uri.EscapeDataString(terminal_refund_id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelTerminalRefundResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
