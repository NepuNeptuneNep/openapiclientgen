//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The currency and value of the item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Amount
	{
		
		/// <summary>
		/// The three-letter ISO 4217 code representing the currency of the amount in the value field. Default: The currency of the authenticated user's country. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/bas:CurrencyCodeEnum'>eBay API documentation</a>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The monetary value, in the currency specified by the currency field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The details for the coupon available for the item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Coupon
	{
		
		/// <summary>
		/// The coupon code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionCode")]
		public string RedemptionCode { get; set; }
		
		/// <summary>
		/// The terms for the event, provided in a full-text description and summary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terms")]
		public Terms Terms { get; set; }
	}
	
	/// <summary>
	/// The terms for the event, provided in a full-text description and summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Terms
	{
		
		/// <summary>
		/// A full-text description of the terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullText")]
		public string FullText { get; set; }
		
		/// <summary>
		/// A summarized description of the terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	/// <summary>
	/// The detailed data returned for the deal item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DealItem
	{
		
		/// <summary>
		/// The additional images for the deal item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalImages")]
		public Image[] AdditionalImages { get; set; }
		
		/// <summary>
		/// The IDs of the ancestors for the primary category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryAncestorIds")]
		public string[] CategoryAncestorIds { get; set; }
		
		/// <summary>
		/// The ID of the leaf category for the deal item. A leaf category is the lowest level in a category and has no children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		/// <summary>
		/// A boolean value specifying whether the listing has commission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commissionable")]
		public System.Nullable<System.Boolean> Commissionable { get; set; }
		
		/// <summary>
		/// The deal associated with the item with affiliate attribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealAffiliateWebUrl")]
		public string DealAffiliateWebUrl { get; set; }
		
		/// <summary>
		/// The date after which the deal ends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealEndDate")]
		public string DealEndDate { get; set; }
		
		/// <summary>
		/// The date on which the deal starts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealStartDate")]
		public string DealStartDate { get; set; }
		
		/// <summary>
		/// The web URL for the deal associated with the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealWebUrl")]
		public string DealWebUrl { get; set; }
		
		/// <summary>
		/// A string value specifying the Energy Efficiency class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyEfficiencyClass")]
		public string EnergyEfficiencyClass { get; set; }
		
		/// <summary>
		/// The type that defines the details of an image, such as size and URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
		
		/// <summary>
		/// The item web URL with affiliate attribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemAffiliateWebUrl")]
		public string ItemAffiliateWebUrl { get; set; }
		
		/// <summary>
		/// The unique identifier for the deal item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupId")]
		public string ItemGroupId { get; set; }
		
		/// <summary>
		/// An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum'>eBay API documentation</a>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupType")]
		public string ItemGroupType { get; set; }
		
		/// <summary>
		/// The unique identifier for the deal item. Note: This field is only returned for single-SKU items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// The web URL for the deal item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemWebUrl")]
		public string ItemWebUrl { get; set; }
		
		/// <summary>
		/// The legacy item ID associated with the deal item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyItemId")]
		public string LegacyItemId { get; set; }
		
		/// <summary>
		/// A type that describes the seller discount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingPrice")]
		public MarketingPrice MarketingPrice { get; set; }
		
		/// <summary>
		/// The currency and value of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Amount Price { get; set; }
		
		/// <summary>
		/// A list of programs applicable to the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qualifiedPrograms")]
		public string[] QualifiedPrograms { get; set; }
		
		/// <summary>
		/// The cost required to ship the deal item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingOptions")]
		public ShippingOption[] ShippingOptions { get; set; }
		
		/// <summary>
		/// The title of the deal item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The currency and value of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public Amount UnitPrice { get; set; }
		
		/// <summary>
		/// The designation used to specify the quantity of the deal item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitPricingMeasure")]
		public string UnitPricingMeasure { get; set; }
	}
	
	/// <summary>
	/// The type that defines the details of an image, such as size and URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Image
	{
		
		/// <summary>
		/// The height of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public string Height { get; set; }
		
		/// <summary>
		/// The relative path to the image location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// The text associated with the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The width of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public string Width { get; set; }
	}
	
	/// <summary>
	/// A type that describes the seller discount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketingPrice
	{
		
		/// <summary>
		/// The currency and value of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountAmount")]
		public Amount DiscountAmount { get; set; }
		
		/// <summary>
		/// The percentage of the seller discount based on the value returned in the originalPrice field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountPercentage")]
		public string DiscountPercentage { get; set; }
		
		/// <summary>
		/// The currency and value of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalPrice")]
		public Amount OriginalPrice { get; set; }
		
		/// <summary>
		/// The pricing treatment (discount) that was applied to the price of the item. Note: The pricing treatment affects how and where the discounted price can be displayed. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:PriceTreatmentEnum'>eBay API documentation</a>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceTreatment")]
		public string PriceTreatment { get; set; }
	}
	
	/// <summary>
	/// The details provided for the shipping provider, such as shipping cost and type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShippingOption
	{
		
		/// <summary>
		/// The currency and value of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingCost")]
		public Amount ShippingCost { get; set; }
		
		/// <summary>
		/// The class of the shipping cost. Valid Values: FIXED or CALCULATED Code so that your app gracefully handles any future changes to this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingCostType")]
		public string ShippingCostType { get; set; }
	}
	
	/// <summary>
	/// The result set for the deal item search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DealItemSearchResponse
	{
		
		/// <summary>
		/// A list of deal items that match the search criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealItems")]
		public DealItem[] DealItems { get; set; }
		
		/// <summary>
		/// The relative path to the current set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The maximum number of items, from the current result set, returned on a single page. Default: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The relative path to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// The relative path to the previous set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
		
		/// <summary>
		/// The total number of matches for the search criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	/// <summary>
	/// This type defines the fields that can be returned in an error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Identifies the type of erro.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Name for the primary system where the error occurred. This is relevant for application errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// A unique number to identify the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorId")]
		public System.Nullable<System.Int32> ErrorId { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputRefIds")]
		public string[] InputRefIds { get; set; }
		
		/// <summary>
		/// A more detailed explanation of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longMessage")]
		public string LongMessage { get; set; }
		
		/// <summary>
		/// Information on how to correct the problem, in the end user's terms and language where applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputRefIds")]
		public string[] OutputRefIds { get; set; }
		
		/// <summary>
		/// An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ErrorParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subdomain")]
		public string Subdomain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorParameter
	{
		
		/// <summary>
		/// The object of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The result set for the event search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		/// <summary>
		/// A list of coupons associated with the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableCoupons")]
		public Coupon[] ApplicableCoupons { get; set; }
		
		/// <summary>
		/// The event description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The end date for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// The URL of the View Event page for the event, which includes the affiliate tracking ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventAffiliateWebUrl")]
		public string EventAffiliateWebUrl { get; set; }
		
		/// <summary>
		/// The unique identifier for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// The web URL for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventWebUrl")]
		public string EventWebUrl { get; set; }
		
		/// <summary>
		/// The images for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
		
		/// <summary>
		/// The start date for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// The terms for the event, provided in a full-text description and summary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terms")]
		public Terms Terms { get; set; }
		
		/// <summary>
		/// The title of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The detailed data returned for the event item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventItem
	{
		
		/// <summary>
		/// The additional images for the event item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalImages")]
		public Image[] AdditionalImages { get; set; }
		
		/// <summary>
		/// The IDs of the ancestors for the primary category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryAncestorIds")]
		public string[] CategoryAncestorIds { get; set; }
		
		/// <summary>
		/// The ID of the leaf category for the event item. A leaf category is the lowest level in a category and has no children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		/// <summary>
		/// A string value specifying the Energy Efficiency class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyEfficiencyClass")]
		public string EnergyEfficiencyClass { get; set; }
		
		/// <summary>
		/// The unique event identifier associated with the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// The type that defines the details of an image, such as size and URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
		
		/// <summary>
		/// The item web URL with affiliate attribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemAffiliateWebUrl")]
		public string ItemAffiliateWebUrl { get; set; }
		
		/// <summary>
		/// The unique identifier for the event item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupId")]
		public string ItemGroupId { get; set; }
		
		/// <summary>
		/// An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum'>eBay API documentation</a>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupType")]
		public string ItemGroupType { get; set; }
		
		/// <summary>
		/// The unique identifier for the event item. Note: This field is only returned for single-SKU items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// The web URL for the event item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemWebUrl")]
		public string ItemWebUrl { get; set; }
		
		/// <summary>
		/// The legacy item ID associated with the event item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyItemId")]
		public string LegacyItemId { get; set; }
		
		/// <summary>
		/// A type that describes the seller discount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingPrice")]
		public MarketingPrice MarketingPrice { get; set; }
		
		/// <summary>
		/// The currency and value of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Amount Price { get; set; }
		
		/// <summary>
		/// A list of programs applicable to the event item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qualifiedPrograms")]
		public string[] QualifiedPrograms { get; set; }
		
		/// <summary>
		/// The cost required to ship the event item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingOptions")]
		public ShippingOption[] ShippingOptions { get; set; }
		
		/// <summary>
		/// The title of the event item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The currency and value of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public Amount UnitPrice { get; set; }
		
		/// <summary>
		/// The designation used to specify the quantity of the event item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitPricingMeasure")]
		public string UnitPricingMeasure { get; set; }
	}
	
	/// <summary>
	/// The result set for the event item search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventItemSearchResponse
	{
		
		/// <summary>
		/// A list of event items that match the search criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventItems")]
		public EventItem[] EventItems { get; set; }
		
		/// <summary>
		/// The relative path to the current set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The maximum number of items, from the current result set, returned on a single page. Default: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The relative path to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// The relative path to the previous set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
		
		/// <summary>
		/// The total number of matches for the specified search criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	/// <summary>
	/// The result set for the specified event search criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventSearchResponse
	{
		
		/// <summary>
		/// A list of results that match the search criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Event[] Events { get; set; }
		
		/// <summary>
		/// The relative path to the current set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The maximum number of items, from the current result set, returned on a single page. Default: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The relative path to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// The relative path to the previous set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
		
		/// <summary>
		/// The total number of matches for the specified search criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This method retrieves a paginated set of deal items. The result set contains all deal items associated with the specified search criteria and marketplace ID. Request headers This method uses the X-EBAY-C-ENDUSERCTX request header to support revenue sharing for eBay Partner Networks and to improve the accuracy of shipping and delivery time estimations. For details see, Request headers in the Buying Integration Guide. Restrictions This method can return a maximum of 10,000 items. For a list of supported sites and other restrictions, see API Restrictions. eBay Partner Network: In order to receive a commission for your sales, you must use the URL returned in the itemAffiliateWebUrl field to forward your buyer to the ebay.com site.
		/// GetDealItems deal_item
		/// </summary>
		/// <param name="category_ids">The unique identifier of the eBay category for the search.</param>
		/// <param name="commissionable">A filter for commissionable deals. Restriction: This filter is currently only supported for the US marketplace.</param>
		/// <param name="delivery_country">A filter for items that can be shipped to the specified country.</param>
		/// <param name="limit">The maximum number of items, from the current result set, returned on a single page.</param>
		/// <param name="offset">The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0</param>
		/// <returns>OK</returns>
		public async Task<DealItemSearchResponse> GetDealItemsAsync(string category_ids, string commissionable, string delivery_country, string limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deal_item?category_ids=" + (category_ids==null? "" : System.Uri.EscapeDataString(category_ids))+"&commissionable=" + (commissionable==null? "" : System.Uri.EscapeDataString(commissionable))+"&delivery_country=" + (delivery_country==null? "" : System.Uri.EscapeDataString(delivery_country))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DealItemSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method returns paginated results containing all eBay events for the specified marketplace. Request headers This method uses the X-EBAY-C-ENDUSERCTX request header to support revenue sharing for eBay Partner Networks and to improve the accuracy of shipping and delivery time estimations. For details see, Request headers in the Buying Integration Guide. Restrictions This method can return a maximum of 10,000 items. For a list of supported sites and other restrictions, see API Restrictions. eBay Partner Network: In order to receive a commission for your sales, you must use the URL returned in the itemAffiliateWebUrl field to forward your buyer to the ebay.com site.
		/// GetEvents event
		/// </summary>
		/// <param name="limit">The maximum number of items, from the current result set, returned on a single page. Default: 20 Maximum Value: 100</param>
		/// <param name="offset">The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0</param>
		/// <returns>OK</returns>
		public async Task<EventSearchResponse> GetEventsAsync(string limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event?limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method retrieves the details for an eBay event. The result set contains detailed information associated with the specified event ID, such as applicable coupons, start and end dates, and event terms. Request headers This method uses the X-EBAY-C-ENDUSERCTX request header to support revenue sharing for eBay Partner Networks and to improve the accuracy of shipping and delivery time estimations. For details see, Request headers in the Buying Integration Guide. Restrictions This method can return a maximum of 10,000 items. For a list of supported sites and other restrictions, see API Restrictions. eBay Partner Network: In order to receive a commission for your sales, you must use the URL returned in the itemAffiliateWebUrl field to forward your buyer to the ebay.com site.
		/// GetEvent event/{event_id}
		/// </summary>
		/// <param name="event_id">The unique identifier for the eBay event.</param>
		/// <returns>OK</returns>
		public async Task<Event> GetEventAsync(string event_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_id==null? "" : System.Uri.EscapeDataString(event_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method returns a paginated set of event items. The result set contains all event items associated with the specified search criteria and marketplace ID. Request headers This method uses the X-EBAY-C-ENDUSERCTX request header to support revenue sharing for eBay Partner Networks and to improve the accuracy of shipping and delivery time estimations. For details see, Request headers in the Buying Integration Guide. Restrictions This method can return a maximum of 10,000 items. For a list of supported sites and other restrictions, see API Restrictions. eBay Partner Network: In order to receive a commission for your sales, you must use the URL returned in the itemAffiliateWebUrl field to forward your buyer to the ebay.com site.
		/// GetEventItems event_item
		/// </summary>
		/// <param name="category_ids">The unique identifier of the eBay category for the search. Maximum Value: 1</param>
		/// <param name="delivery_country">A filter for items that can be shipped to the specified country.</param>
		/// <param name="event_ids">The unique identifiers for the eBay events. Maximum Value: 1</param>
		/// <param name="limit">The maximum number of items, from the current result set, returned on a single page. Default: 20</param>
		/// <param name="offset">The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0</param>
		/// <returns>OK</returns>
		public async Task<EventItemSearchResponse> GetEventItemsAsync(string category_ids, string delivery_country, string event_ids, string limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event_item?category_ids=" + (category_ids==null? "" : System.Uri.EscapeDataString(category_ids))+"&delivery_country=" + (delivery_country==null? "" : System.Uri.EscapeDataString(delivery_country))+"&event_ids=" + (event_ids==null? "" : System.Uri.EscapeDataString(event_ids))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventItemSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
