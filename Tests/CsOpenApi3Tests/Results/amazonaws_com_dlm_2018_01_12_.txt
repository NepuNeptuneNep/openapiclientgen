//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLifecyclePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyTypeValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EBS_SNAPSHOT_MANAGEMENT")]
		EBS_SNAPSHOT_MANAGEMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMAGE_MANAGEMENT")]
		IMAGE_MANAGEMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVENT_BASED_POLICY")]
		EVENT_BASED_POLICY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceTypeValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOLUME")]
		VOLUME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTANCE")]
		INSTANCE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceLocationValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOUD")]
		CLOUD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUTPOST")]
		OUTPOST = 1,
	}
	
	/// <summary>
	/// Specifies a tag for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	///  <b>[Snapshot and AMI policies only]</b> Specifies a schedule for a snapshot or AMI lifecycle policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Schedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagsToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] VariableTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateRule CreateRule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetainRule RetainRule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FastRestoreRule FastRestoreRule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CrossRegionCopyRule[] CrossRegionCopyRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShareRule[] ShareRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeprecateRule DeprecateRule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ArchiveRule ArchiveRule { get; set; }
	}
	
	/// <summary>
	/// <p> <b>[Snapshot and AMI policies only]</b> Specifies when the policy should create snapshots or AMIs.</p> <note> <ul> <li> <p>You must specify either <b>CronExpression</b>, or <b>Interval</b>, <b>IntervalUnit</b>, and <b>Times</b>.</p> </li> <li> <p>If you need to specify an <a>ArchiveRule</a> for the schedule, then you must specify a creation frequency of at least 28 days.</p> </li> </ul> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LocationValues Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntervalUnitValues IntervalUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Times { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CronExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LocationValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOUD")]
		CLOUD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUTPOST_LOCAL")]
		OUTPOST_LOCAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IntervalUnitValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HOURS")]
		HOURS = 0,
	}
	
	/// <summary>
	/// <p> <b>[Snapshot and AMI policies only]</b> Specifies a retention rule for snapshots created by snapshot policies, or for AMIs created by AMI policies.</p> <note> <p>For snapshot policies that have an <a>ArchiveRule</a>, this retention rule applies to standard tier retention. When the retention threshold is met, snapshots are moved from the standard to the archive tier.</p> <p>For snapshot policies that do not have an <b>ArchiveRule</b>, snapshots are permanently deleted when this retention threshold is met.</p> </note> <p>You can retain snapshots based on either a count or a time interval.</p> <ul> <li> <p> <b>Count-based retention</b> </p> <p>You must specify <b>Count</b>. If you specify an <a>ArchiveRule</a> for the schedule, then you can specify a retention count of <code>0</code> to archive snapshots immediately after creation. If you specify a <a>FastRestoreRule</a>, <a>ShareRule</a>, or a <a>CrossRegionCopyRule</a>, then you must specify a retention count of <code>1</code> or more.</p> </li> <li> <p> <b>Age-based retention</b> </p> <p>You must specify <b>Interval</b> and <b>IntervalUnit</b>. If you specify an <a>ArchiveRule</a> for the schedule, then you can specify a retention interval of <code>0</code> days to archive snapshots immediately after creation. If you specify a <a>FastRestoreRule</a>, <a>ShareRule</a>, or a <a>CrossRegionCopyRule</a>, then you must specify a retention interval of <code>1</code> day or more.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetainRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionIntervalUnitValues IntervalUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RetentionIntervalUnitValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DAYS")]
		DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEEKS")]
		WEEKS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTHS")]
		MONTHS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YEARS")]
		YEARS = 3,
	}
	
	/// <summary>
	///  <b>[Snapshot policies only]</b> Specifies a rule for enabling fast snapshot restore for snapshots created by snapshot policies. You can enable fast snapshot restore based on either a count or a time interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FastRestoreRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionIntervalUnitValues IntervalUnit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
	}
	
	/// <summary>
	/// <p> <b>[Snapshot and AMI policies only]</b> Specifies a cross-Region copy rule for snapshot and AMI policies.</p> <note> <p>To specify a cross-Region copy action for event-based polices, use <a>CrossRegionCopyAction</a>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CrossRegionCopyRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CmkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CrossRegionCopyRetainRule RetainRule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CrossRegionCopyDeprecateRule DeprecateRule { get; set; }
	}
	
	/// <summary>
	/// Specifies a retention rule for cross-Region snapshot copies created by snapshot or event-based policies, or cross-Region AMI copies created by AMI policies. After the retention period expires, the cross-Region copy is deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CrossRegionCopyRetainRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionIntervalUnitValues IntervalUnit { get; set; }
	}
	
	/// <summary>
	///  <b>[AMI policies only]</b> Specifies an AMI deprecation rule for cross-Region AMI copies created by an AMI policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CrossRegionCopyDeprecateRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionIntervalUnitValues IntervalUnit { get; set; }
	}
	
	/// <summary>
	///  <b>[Snapshot policies only]</b> Specifies a rule for sharing snapshots across Amazon Web Services accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShareRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TargetAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UnshareInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionIntervalUnitValues UnshareIntervalUnit { get; set; }
	}
	
	/// <summary>
	/// <p> <b>[AMI policies only]</b> Specifies an AMI deprecation rule for AMIs created by an AMI lifecycle policy.</p> <p>For age-based schedules, you must specify <b>Interval</b> and <b>IntervalUnit</b>. For count-based schedules, you must specify <b>Count</b>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeprecateRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionIntervalUnitValues IntervalUnit { get; set; }
	}
	
	/// <summary>
	///  <b>[Snapshot policies only]</b> Specifies a snapshot archiving rule for a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchiveRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArchiveRetainRule RetainRule { get; set; }
	}
	
	/// <summary>
	///  <b>[Snapshot policies only]</b> Specifies information about the archive storage tier retention period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchiveRetainRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RetentionArchiveTier RetentionArchiveTier { get; set; }
	}
	
	/// <summary>
	/// <p> <b>[Snapshot policies only]</b> Describes the retention rule for archived snapshots. Once the archive retention threshold is met, the snapshots are permanently deleted from the archive tier.</p> <note> <p>The archive retention rule must retain snapshots in the archive tier for a minimum of 90 days.</p> </note> <p>For <b>count-based schedules</b>, you must specify <b>Count</b>. For <b>age-based schedules</b>, you must specify <b>Interval</b> and <b> IntervalUnit</b>.</p> <p>For more information about using snapshot archiving, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-ami-policy.html#dlm-archive">Considerations for snapshot lifecycle policies</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetentionArchiveTier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionIntervalUnitValues IntervalUnit { get; set; }
	}
	
	/// <summary>
	/// <p> <b>[Snapshot and AMI policies only]</b> Specifies optional parameters for snapshot and AMI policies. The set of valid parameters depends on the combination of policy type and target resource type.</p> <p>If you choose to exclude boot volumes and you specify tags that consequently exclude all of the additional data volumes attached to an instance, then Amazon Data Lifecycle Manager will not create any snapshots for the affected instance, and it will emit a <code>SnapshotsCreateFailed</code> Amazon CloudWatch metric. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitor-dlm-cw-metrics.html">Monitor your policies using Amazon CloudWatch</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Parameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExcludeBootVolume { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NoReboot { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] ExcludeDataVolumeTags { get; set; }
	}
	
	/// <summary>
	///  <b>[Event-based policies only]</b> Specifies an event that activates an event-based policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventSourceValues Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventParameters Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventSourceValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANAGED_CWE")]
		MANAGED_CWE = 0,
	}
	
	/// <summary>
	///  <b>[Event-based policies only]</b> Specifies an event that activates an event-based policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventParameters
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventTypeValues EventType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SnapshotOwner { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DescriptionRegex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventTypeValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shareSnapshot")]
		shareSnapshot = 0,
	}
	
	/// <summary>
	///  <b>[Event-based policies only]</b> Specifies an action for an event-based policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Action
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CrossRegionCopyAction[] CrossRegionCopy { get; set; }
	}
	
	/// <summary>
	/// <p> <b>[Event-based policies only]</b> Specifies a cross-Region copy action for event-based policies.</p> <note> <p>To specify a cross-Region copy rule for snapshot and AMI policies, use <a>CrossRegionCopyRule</a>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CrossRegionCopyAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Specifies a retention rule for cross-Region snapshot copies created by snapshot or event-based policies, or cross-Region AMI copies created by AMI policies. After the retention period expires, the cross-Region copy is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CrossRegionCopyRetainRule RetainRule { get; set; }
	}
	
	/// <summary>
	///  <b>[Event-based policies only]</b> Specifies the encryption settings for cross-Region snapshot copies created by event-based policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptionConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CmkArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLifecyclePolicyResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLifecyclePoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LifecyclePolicySummary[] Policies { get; set; }
	}
	
	/// <summary>
	/// Summary information about a lifecycle policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifecyclePolicySummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GettablePolicyStateValues State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyTypeValues PolicyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GettablePolicyStateValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLifecyclePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LifecyclePolicy Policy { get; set; }
	}
	
	/// <summary>
	///  <b>[All policy types]</b> Detailed information about a snapshot, AMI, or event-based lifecycle policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifecyclePolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GettablePolicyStateValues State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyDetails PolicyDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	/// <summary>
	///  <b>[All policy types]</b> Specifies the configuration of a lifecycle policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyTypeValues PolicyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTypeValues[] ResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocationValues[] ResourceLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TargetTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Schedule[] Schedules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventSource EventSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Action[] Actions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLifecyclePolicyResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SettablePolicyStateValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLifecyclePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionRoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SettablePolicyStateValues State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PolicyDetails PolicyDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLifecyclePolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLifecyclePoliciesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLifecyclePolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLifecyclePolicyRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SettablePolicyStateValues State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyDetails PolicyDetails { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a policy to manage the lifecycle of the specified Amazon Web Services resources. You can create up to 100 lifecycle policies.
		/// CreateLifecyclePolicy policies
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateLifecyclePolicyResponse> CreateLifecyclePolicyAsync(CreateLifecyclePolicyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateLifecyclePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets summary information about all or the specified data lifecycle policies.</p> <p>To get complete information about a policy, use <a>GetLifecyclePolicy</a>.</p>
		/// GetLifecyclePolicies policies
		/// </summary>
		/// <param name="policyIds">The identifiers of the data lifecycle policies.</param>
		/// <param name="state">The activation state.</param>
		/// <param name="resourceTypes">The resource type.
		/// Minimum items: 1
		/// Maximum items: 1
		// </param>
		/// <param name="targetTags"><p>The target tag for a policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p>
		/// Minimum items: 1
		/// Maximum items: 50
		// </param>
		/// <param name="tagsToAdd"><p>The tags to add to objects created by the policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p> <p>These user-defined tags are added in addition to the Amazon Web Services-added lifecycle tags.</p>
		/// Minimum items: 0
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<GetLifecyclePoliciesResponse> GetLifecyclePoliciesAsync(string[] policyIds, GettablePolicyStateValues state, ResourceTypeValues[] resourceTypes, string[] targetTags, string[] tagsToAdd, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies?"+string.Join("&", policyIds.Select(z => $"policyIds={System.Uri.EscapeDataString(z.ToString())}"))+"&state=" + state+"&"+string.Join("&", resourceTypes.Select(z => $"resourceTypes={z}"))+"&"+string.Join("&", targetTags.Select(z => $"targetTags={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tagsToAdd.Select(z => $"tagsToAdd={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLifecyclePoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified lifecycle policy and halts the automated operations that the policy specified.</p> <p>For more information about deleting a policy, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/view-modify-delete.html#delete">Delete lifecycle policies</a>.</p>
		/// DeleteLifecyclePolicy policies/{policyId}/
		/// </summary>
		/// <param name="policyId">The identifier of the lifecycle policy.
		/// Max length: 64
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteLifecyclePolicyResponse> DeleteLifecyclePolicyAsync(string policyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies/"+ (policyId==null? "" : System.Uri.EscapeDataString(policyId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteLifecyclePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets detailed information about the specified lifecycle policy.
		/// GetLifecyclePolicy policies/{policyId}/
		/// </summary>
		/// <param name="policyId">The identifier of the lifecycle policy.
		/// Max length: 64
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetLifecyclePolicyResponse> GetLifecyclePolicyAsync(string policyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies/"+ (policyId==null? "" : System.Uri.EscapeDataString(policyId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLifecyclePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags for the specified resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds the specified tags to the specified resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the specified resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="tagKeys">The tag keys.
		/// Minimum items: 1
		/// Maximum items: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified lifecycle policy.</p> <p>For more information about updating a policy, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/view-modify-delete.html#modify">Modify lifecycle policies</a>.</p>
		/// UpdateLifecyclePolicy policies/{policyId}
		/// </summary>
		/// <param name="policyId">The identifier of the lifecycle policy.
		/// Max length: 64
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateLifecyclePolicyResponse> UpdateLifecyclePolicyAsync(string policyId, UpdateLifecyclePolicyPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies/"+ (policyId==null? "" : System.Uri.EscapeDataString(policyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateLifecyclePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateLifecyclePolicyPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
		/// Required
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*")]
		public string ExecutionRoleArn { get; set; }
		
		/// <summary>
		/// A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.
		/// Required
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [0-9A-Za-z _-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9A-Za-z _-]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// The desired activation state of the lifecycle policy after creation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SettablePolicyStateValues State { get; set; }
		
		/// <summary>
		///  <b>[All policy types]</b> Specifies the configuration of a lifecycle policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateLifecyclePolicyPostBodyPolicyDetails PolicyDetails { get; set; }
		
		/// <summary>
		/// The tags to apply to the lifecycle policy during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateLifecyclePolicyPostBodyPolicyDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyTypeValues PolicyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTypeValues[] ResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocationValues[] ResourceLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TargetTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Schedule[] Schedules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventSource EventSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Action[] Actions { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// One or more tags.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdateLifecyclePolicyPatchBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*")]
		public string ExecutionRoleArn { get; set; }
		
		/// <summary>
		/// The desired activation state of the lifecycle policy after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SettablePolicyStateValues State { get; set; }
		
		/// <summary>
		/// A description of the lifecycle policy.
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [0-9A-Za-z _-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9A-Za-z _-]+")]
		public string Description { get; set; }
		
		/// <summary>
		///  <b>[All policy types]</b> Specifies the configuration of a lifecycle policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateLifecyclePolicyPatchBodyPolicyDetails PolicyDetails { get; set; }
	}
	
	public class UpdateLifecyclePolicyPatchBodyPolicyDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyTypeValues PolicyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTypeValues[] ResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocationValues[] ResourceLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TargetTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Schedule[] Schedules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventSource EventSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Action[] Actions { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
