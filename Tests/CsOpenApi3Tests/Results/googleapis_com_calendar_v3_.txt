//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Acl
	{
		
		/// <summary>
		/// ETag of the collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// List of rules on the access control list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AclRule[] Items { get; set; }
		
		/// <summary>
		/// Type of the collection ("calendar#acl").
		/// </summary>
		[System.ComponentModel.DefaultValue("calendar#acl")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "calendar#acl";
		
		/// <summary>
		/// Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextSyncToken")]
		public string NextSyncToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AclRule
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Identifier of the Access Control List (ACL) rule. See Sharing calendars.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Type of the resource ("calendar#aclRule").
		/// </summary>
		[System.ComponentModel.DefaultValue("calendar#aclRule")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "calendar#aclRule";
		
		/// <summary>
		/// The role assigned to the scope. Possible values are:  
		///- "none" - Provides no access. 
		///- "freeBusyReader" - Provides read access to free/busy information. 
		///- "reader" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
		///- "writer" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
		///- "owner" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// The extent to which calendar access is granted by this ACL rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public AclRuleScope Scope { get; set; }
	}
	
	public class AclRuleScope
	{
		
		/// <summary>
		/// The type of the scope. Possible values are:  
		///- "default" - The public scope. This is the default value. 
		///- "user" - Limits the scope to a single user. 
		///- "group" - Limits the scope to a group. 
		///- "domain" - Limits the scope to a domain.  Note: The permissions granted to the "default", or public, scope apply to any user, authenticated or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Calendar
	{
		
		[System.Runtime.Serialization.DataMember(Name="conferenceProperties")]
		public ConferenceProperties ConferenceProperties { get; set; }
		
		/// <summary>
		/// Description of the calendar. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Identifier of the calendar. To retrieve IDs call the calendarList.list() method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Type of the resource ("calendar#calendar").
		/// </summary>
		[System.ComponentModel.DefaultValue("calendar#calendar")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "calendar#calendar";
		
		/// <summary>
		/// Geographic location of the calendar as free-form text. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Title of the calendar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConferenceProperties
	{
		
		/// <summary>
		/// The types of conference solutions that are supported for this calendar.
		///The possible values are:  
		///- "eventHangout" 
		///- "eventNamedHangout" 
		///- "hangoutsMeet"  Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedConferenceSolutionTypes")]
		public string[] AllowedConferenceSolutionTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarList
	{
		
		/// <summary>
		/// ETag of the collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Calendars that are present on the user's calendar list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CalendarListEntry[] Items { get; set; }
		
		/// <summary>
		/// Type of the collection ("calendar#calendarList").
		/// </summary>
		[System.ComponentModel.DefaultValue("calendar#calendarList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "calendar#calendarList";
		
		/// <summary>
		/// Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextSyncToken")]
		public string NextSyncToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarListEntry
	{
		
		/// <summary>
		/// The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:  
		///- "freeBusyReader" - Provides read access to free/busy information. 
		///- "reader" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
		///- "writer" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
		///- "owner" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessRole")]
		public string AccessRole { get; set; }
		
		/// <summary>
		/// The main color of the calendar in the hexadecimal format "#0088aa". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public string BackgroundColor { get; set; }
		
		/// <summary>
		/// The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorId")]
		public string ColorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conferenceProperties")]
		public ConferenceProperties ConferenceProperties { get; set; }
		
		/// <summary>
		/// The default reminders that the authenticated user has for this calendar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultReminders")]
		public EventReminder[] DefaultReminders { get; set; }
		
		/// <summary>
		/// Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Description of the calendar. Optional. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The foreground color of the calendar in the hexadecimal format "#ffffff". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foregroundColor")]
		public string ForegroundColor { get; set; }
		
		/// <summary>
		/// Whether the calendar has been hidden from the list. Optional. The attribute is only returned when the calendar is hidden, in which case the value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// Identifier of the calendar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Type of the resource ("calendar#calendarListEntry").
		/// </summary>
		[System.ComponentModel.DefaultValue("calendar#calendarListEntry")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "calendar#calendarListEntry";
		
		/// <summary>
		/// Geographic location of the calendar as free-form text. Optional. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The notifications that the authenticated user is receiving for this calendar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationSettings")]
		public CalendarListEntryNotificationSettings NotificationSettings { get; set; }
		
		/// <summary>
		/// Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// Whether the calendar content shows up in the calendar UI. Optional. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selected")]
		public System.Nullable<System.Boolean> Selected { get; set; }
		
		/// <summary>
		/// Title of the calendar. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// The summary that the authenticated user has set for this calendar. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summaryOverride")]
		public string SummaryOverride { get; set; }
		
		/// <summary>
		/// The time zone of the calendar. Optional. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventReminder
	{
		
		/// <summary>
		/// The method used by this reminder. Possible values are:  
		///- "email" - Reminders are sent via email. 
		///- "popup" - Reminders are sent via a UI popup.  
		///Required when adding a reminder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes).
		///Required when adding a reminder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
	}
	
	public class CalendarListEntryNotificationSettings
	{
		
		/// <summary>
		/// The list of notifications set for this calendar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public CalendarNotification[] Notifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarNotification
	{
		
		/// <summary>
		/// The method used to deliver the notification. The possible value is:  
		///- "email" - Notifications are sent via email.  
		///Required when adding a notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The type of notification. Possible values are:  
		///- "eventCreation" - Notification sent when a new event is put on the calendar. 
		///- "eventChange" - Notification sent when an event is changed. 
		///- "eventCancellation" - Notification sent when an event is cancelled. 
		///- "eventResponse" - Notification sent when an attendee responds to the event invitation. 
		///- "agenda" - An agenda with the events of the day (sent out in the morning).  
		///Required when adding a notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		/// <summary>
		/// The address where notifications are delivered for this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public string Expiration { get; set; }
		
		/// <summary>
		/// A UUID or similar unique string that identifies this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies this as a notification channel used to watch for changes to a resource, which is "api#channel".
		/// </summary>
		[System.ComponentModel.DefaultValue("api#channel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "api#channel";
		
		/// <summary>
		/// Additional parameters controlling delivery channel behavior. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, string> Params { get; set; }
		
		/// <summary>
		/// A Boolean value to indicate whether payload is wanted. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public System.Nullable<System.Boolean> Payload { get; set; }
		
		/// <summary>
		/// An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// A version-specific identifier for the watched resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of delivery mechanism used for this channel. Valid values are "web_hook" (or "webhook"). Both values refer to a channel where Http requests are used to deliver messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ColorDefinition
	{
		
		/// <summary>
		/// The background color associated with this color definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="background")]
		public string Background { get; set; }
		
		/// <summary>
		/// The foreground color that can be used to write on top of a background with 'background' color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foreground")]
		public string Foreground { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Colors
	{
		
		/// <summary>
		/// A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendar")]
		public System.Collections.Generic.Dictionary<string, ColorDefinition> Calendar { get; set; }
		
		/// <summary>
		/// A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public System.Collections.Generic.Dictionary<string, ColorDefinition> Event { get; set; }
		
		/// <summary>
		/// Type of the resource ("calendar#colors").
		/// </summary>
		[System.ComponentModel.DefaultValue("calendar#colors")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "calendar#colors";
		
		/// <summary>
		/// Last modification time of the color palette (as a RFC3339 timestamp). Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConferenceData
	{
		
		/// <summary>
		/// The ID of the conference.
		///Can be used by developers to keep track of conferences, should not be displayed to users.
		///The ID value is formed differently for each conference solution type:  
		///- eventHangout: ID is not set. (This conference type is deprecated.)
		///- eventNamedHangout: ID is the name of the Hangout. (This conference type is deprecated.)
		///- hangoutsMeet: ID is the 10-letter meeting code, for example aaa-bbbb-ccc.
		///- addOn: ID is defined by the third-party provider.  Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conferenceId")]
		public string ConferenceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conferenceSolution")]
		public ConferenceSolution ConferenceSolution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createRequest")]
		public CreateConferenceRequest CreateRequest { get; set; }
		
		/// <summary>
		/// Information about individual conference entry points, such as URLs or phone numbers.
		///All of them must belong to the same conference.
		///Either conferenceSolution and at least one entryPoint, or createRequest is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryPoints")]
		public EntryPoint[] EntryPoints { get; set; }
		
		/// <summary>
		/// Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ConferenceParameters Parameters { get; set; }
		
		/// <summary>
		/// The signature of the conference data.
		///Generated on server side.
		///Unset for a conference with a failed create request.
		///Optional for a conference with a pending create request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConferenceSolution
	{
		
		/// <summary>
		/// The user-visible icon for this solution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUri")]
		public string IconUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public ConferenceSolutionKey Key { get; set; }
		
		/// <summary>
		/// The user-visible name of this solution. Not localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConferenceSolutionKey
	{
		
		/// <summary>
		/// The conference solution type.
		///If a client encounters an unfamiliar or empty type, it should still be able to display the entry points. However, it should disallow modifications.
		///The possible values are:  
		///- "eventHangout" for Hangouts for consumers (deprecated; existing events may show this conference solution type but new conferences cannot be created)
		///- "eventNamedHangout" for classic Hangouts for Google Workspace users (deprecated; existing events may show this conference solution type but new conferences cannot be created)
		///- "hangoutsMeet" for Google Meet (http://meet.google.com)
		///- "addOn" for 3P conference providers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConferenceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="conferenceSolutionKey")]
		public ConferenceSolutionKey ConferenceSolutionKey { get; set; }
		
		/// <summary>
		/// The client-generated unique ID for this request.
		///Clients should regenerate this ID for every new request. If an ID provided is the same as for the previous request, the request is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ConferenceRequestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConferenceRequestStatus
	{
		
		/// <summary>
		/// The current status of the conference create request. Read-only.
		///The possible values are:  
		///- "pending": the conference create request is still being processed.
		///- "success": the conference create request succeeded, the entry points are populated.
		///- "failure": the conference create request failed, there are no entry points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public string StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntryPoint
	{
		
		/// <summary>
		/// The access code to access the conference. The maximum length is 128 characters.
		///When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
		///Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessCode")]
		public string AccessCode { get; set; }
		
		/// <summary>
		/// Features of the entry point, such as being toll or toll-free. One entry point can have multiple features. However, toll and toll-free cannot be both set on the same entry point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryPointFeatures")]
		public string[] EntryPointFeatures { get; set; }
		
		/// <summary>
		/// The type of the conference entry point.
		///Possible values are:  
		///- "video" - joining a conference over HTTP. A conference can have zero or one video entry point.
		///- "phone" - joining a conference by dialing a phone number. A conference can have zero or more phone entry points.
		///- "sip" - joining a conference over SIP. A conference can have zero or one sip entry point.
		///- "more" - further conference joining instructions, for example additional phone numbers. A conference can have zero or one more entry point. A conference with only a more entry point is not a valid conference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryPointType")]
		public string EntryPointType { get; set; }
		
		/// <summary>
		/// The label for the URI. Visible to end users. Not localized. The maximum length is 512 characters.
		///Examples:  
		///- for video: meet.google.com/aaa-bbbb-ccc
		///- for phone: +1 123 268 2601
		///- for sip: 12345678@altostrat.com
		///- for more: should not be filled  
		///Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The meeting code to access the conference. The maximum length is 128 characters.
		///When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
		///Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingCode")]
		public string MeetingCode { get; set; }
		
		/// <summary>
		/// The passcode to access the conference. The maximum length is 128 characters.
		///When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passcode")]
		public string Passcode { get; set; }
		
		/// <summary>
		/// The password to access the conference. The maximum length is 128 characters.
		///When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
		///Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The PIN to access the conference. The maximum length is 128 characters.
		///When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
		///Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
		
		/// <summary>
		/// The CLDR/ISO 3166 region code for the country associated with this phone access. Example: "SE" for Sweden.
		///Calendar backend will populate this field only for EntryPointType.PHONE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// The URI of the entry point. The maximum length is 1300 characters.
		///Format:  
		///- for video, http: or https: schema is required.
		///- for phone, tel: schema is required. The URI should include the entire dial sequence (e.g., tel:+12345678900,,,123456789;1234).
		///- for sip, sip: schema is required, e.g., sip:12345678@myprovider.com.
		///- for more, http: or https: schema is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConferenceParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="addOnParameters")]
		public ConferenceParametersAddOnParameters AddOnParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConferenceParametersAddOnParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Domain, or broad category, of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Specific reason for the error. Some of the possible values are:  
		///- "groupTooBig" - The group of users requested is too large for a single query. 
		///- "tooManyCalendarsRequested" - The number of calendars requested is too large for a single query. 
		///- "notFound" - The requested resource was not found. 
		///- "internalError" - The API service has encountered an internal error.  Additional error types may be added in the future, so clients should gracefully handle additional error statuses not included in this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		/// <summary>
		/// Whether anyone can invite themselves to the event (deprecated). Optional. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="anyoneCanAddSelf")]
		public System.Nullable<System.Boolean> AnyoneCanAddSelf { get; set; }
		
		/// <summary>
		/// File attachments for the event.
		///In order to modify attachments the supportsAttachments request parameter should be set to true.
		///There can be at most 25 attachments per event,
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public EventAttachment[] Attachments { get; set; }
		
		/// <summary>
		/// The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users. Service accounts need to use domain-wide delegation of authority to populate the attendee list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attendees")]
		public EventAttendee[] Attendees { get; set; }
		
		/// <summary>
		/// Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attendeesOmitted")]
		public System.Nullable<System.Boolean> AttendeesOmitted { get; set; }
		
		/// <summary>
		/// The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorId")]
		public string ColorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conferenceData")]
		public ConferenceData ConferenceData { get; set; }
		
		/// <summary>
		/// Creation time of the event (as a RFC3339 timestamp). Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The creator of the event. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public EventCreator Creator { get; set; }
		
		/// <summary>
		/// Description of the event. Can contain HTML. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public EventDateTime End { get; set; }
		
		/// <summary>
		/// Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeUnspecified")]
		public System.Nullable<System.Boolean> EndTimeUnspecified { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specific type of the event. This cannot be modified after the event is created. Possible values are:  
		///- "default" - A regular event or not further specified. 
		///- "outOfOffice" - An out-of-office event. 
		///- "focusTime" - A focus-time event. 
		///- "workingLocation" - A working location event.  Currently, only "default " and "workingLocation" events can be created using the API. Extended support for other event types will be made available in later releases.
		/// </summary>
		[System.ComponentModel.DefaultValue("default")]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; } = "default";
		
		/// <summary>
		/// Extended properties of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedProperties")]
		public EventExtendedProperties ExtendedProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="focusTimeProperties")]
		public EventFocusTimeProperties FocusTimeProperties { get; set; }
		
		/// <summary>
		/// A gadget that extends this event. Gadgets are deprecated; this structure is instead only used for returning birthday calendar metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gadget")]
		public EventGadget Gadget { get; set; }
		
		/// <summary>
		/// Whether attendees other than the organizer can invite others to the event. Optional. The default is True.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestsCanInviteOthers")]
		public System.Nullable<System.Boolean> GuestsCanInviteOthers { get; set; }
		
		/// <summary>
		/// Whether attendees other than the organizer can modify the event. Optional. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestsCanModify")]
		public System.Nullable<System.Boolean> GuestsCanModify { get; set; }
		
		/// <summary>
		/// Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestsCanSeeOtherGuests")]
		public System.Nullable<System.Boolean> GuestsCanSeeOtherGuests { get; set; }
		
		/// <summary>
		/// An absolute link to the Google Hangout associated with this event. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hangoutLink")]
		public string HangoutLink { get; set; }
		
		/// <summary>
		/// An absolute link to this event in the Google Calendar Web UI. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlLink")]
		public string HtmlLink { get; set; }
		
		/// <summary>
		/// Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method.
		///Note that the iCalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same iCalUIDs. To retrieve an event using its iCalUID, call the events.list method using the iCalUID parameter. To retrieve an event using its id, call the events.get method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iCalUID")]
		public string ICalUID { get; set; }
		
		/// <summary>
		/// Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:  
		///- characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938 
		///- the length of the ID must be between 5 and 1024 characters 
		///- the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.
		///If you do not specify an ID, it will be automatically generated by the server.
		///Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Type of the resource ("calendar#event").
		/// </summary>
		[System.ComponentModel.DefaultValue("calendar#event")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "calendar#event";
		
		/// <summary>
		/// Geographic location of the event as free-form text. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Whether this is a locked event copy where no changes can be made to the main event fields "summary", "description", "location", "start", "end" or "recurrence". The default is False. Read-Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locked")]
		public System.Nullable<System.Boolean> Locked { get; set; }
		
		/// <summary>
		/// The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizer")]
		public EventOrganizer Organizer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalStartTime")]
		public EventDateTime OriginalStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outOfOfficeProperties")]
		public EventOutOfOfficeProperties OutOfOfficeProperties { get; set; }
		
		/// <summary>
		/// If set to True, Event propagation is disabled. Note that it is not the same thing as Private event properties. Optional. Immutable. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCopy")]
		public System.Nullable<System.Boolean> PrivateCopy { get; set; }
		
		/// <summary>
		/// List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrence")]
		public string[] Recurrence { get; set; }
		
		/// <summary>
		/// For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurringEventId")]
		public string RecurringEventId { get; set; }
		
		/// <summary>
		/// Information about the event's reminders for the authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reminders")]
		public EventReminders Reminders { get; set; }
		
		/// <summary>
		/// Sequence number as per iCalendar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequence")]
		public System.Nullable<System.Int32> Sequence { get; set; }
		
		/// <summary>
		/// Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public EventSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public EventDateTime Start { get; set; }
		
		/// <summary>
		/// Status of the event. Optional. Possible values are:  
		///- "confirmed" - The event is confirmed. This is the default status. 
		///- "tentative" - The event is tentatively confirmed. 
		///- "cancelled" - The event is cancelled (deleted). The list method returns cancelled events only on incremental sync (when syncToken or updatedMin are specified) or if the showDeleted flag is set to true. The get method always returns them.
		///A cancelled status represents two different states depending on the event type:  
		///- Cancelled exceptions of an uncancelled recurring event indicate that this instance should no longer be presented to the user. Clients should store these events for the lifetime of the parent recurring event.
		///Cancelled exceptions are only guaranteed to have values for the id, recurringEventId and originalStartTime fields populated. The other fields might be empty.  
		///- All other cancelled events represent deleted events. Clients should remove their locally synced copies. Such cancelled events will eventually disappear, so do not rely on them being available indefinitely.
		///Deleted events are only guaranteed to have the id field populated.   On the organizer's calendar, cancelled events continue to expose event details (summary, location, etc.) so that they can be restored (undeleted). Similarly, the events to which the user was invited and that they manually removed continue to provide details. However, incremental sync requests with showDeleted set to false will not return these details.
		///If an event changes its organizer (for example via the move operation) and the original organizer is not on the attendee list, it will leave behind a cancelled event where only the id field is guaranteed to be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Title of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Whether the event blocks time on the calendar. Optional. Possible values are:  
		///- "opaque" - Default value. The event does block time on the calendar. This is equivalent to setting Show me as to Busy in the Calendar UI. 
		///- "transparent" - The event does not block time on the calendar. This is equivalent to setting Show me as to Available in the Calendar UI.
		/// </summary>
		[System.ComponentModel.DefaultValue("opaque")]
		[System.Runtime.Serialization.DataMember(Name="transparency")]
		public string Transparency { get; set; } = "opaque";
		
		/// <summary>
		/// Last modification time of the event (as a RFC3339 timestamp). Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// Visibility of the event. Optional. Possible values are:  
		///- "default" - Uses the default visibility for events on the calendar. This is the default value. 
		///- "public" - The event is public and event details are visible to all readers of the calendar. 
		///- "private" - The event is private and only event attendees may view event details. 
		///- "confidential" - The event is private. This value is provided for compatibility reasons.
		/// </summary>
		[System.ComponentModel.DefaultValue("default")]
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public string Visibility { get; set; } = "default";
		
		[System.Runtime.Serialization.DataMember(Name="workingLocationProperties")]
		public EventWorkingLocationProperties WorkingLocationProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventAttachment
	{
		
		/// <summary>
		/// ID of the attached file. Read-only.
		///For Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public string FileId { get; set; }
		
		/// <summary>
		/// URL link to the attachment.
		///For adding Google Drive file attachments use the same format as in alternateLink property of the Files resource in the Drive API.
		///Required when adding an attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUrl")]
		public string FileUrl { get; set; }
		
		/// <summary>
		/// URL link to the attachment's icon. This field can only be modified for custom third-party attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconLink")]
		public string IconLink { get; set; }
		
		/// <summary>
		/// Internet media type (MIME type) of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Attachment title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventAttendee
	{
		
		/// <summary>
		/// Number of additional guests. Optional. The default is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalGuests")]
		public System.Nullable<System.Int32> AdditionalGuests { get; set; }
		
		/// <summary>
		/// The attendee's response comment. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// The attendee's name, if available. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322.
		///Required when adding an attendee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The attendee's Profile ID, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this is an optional attendee. Optional. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<System.Boolean> Optional { get; set; }
		
		/// <summary>
		/// Whether the attendee is the organizer of the event. Read-only. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizer")]
		public System.Nullable<System.Boolean> Organizer { get; set; }
		
		/// <summary>
		/// Whether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public System.Nullable<System.Boolean> Resource { get; set; }
		
		/// <summary>
		/// The attendee's response status. Possible values are:  
		///- "needsAction" - The attendee has not responded to the invitation (recommended for new events). 
		///- "declined" - The attendee has declined the invitation. 
		///- "tentative" - The attendee has tentatively accepted the invitation. 
		///- "accepted" - The attendee has accepted the invitation.  Warning: If you add an event using the values declined, tentative, or accepted, attendees with the "Add invitations to my calendar" setting set to "When I respond to invitation in email" won't see an event on their calendar unless they choose to change their invitation response in the event invitation email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseStatus")]
		public string ResponseStatus { get; set; }
		
		/// <summary>
		/// Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public System.Nullable<System.Boolean> Self { get; set; }
	}
	
	public class EventCreator
	{
		
		/// <summary>
		/// The creator's name, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The creator's email address, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The creator's Profile ID, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the creator corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public System.Nullable<System.Boolean> Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventDateTime
	{
		
		/// <summary>
		/// The date, in the format "yyyy-mm-dd", if this is an all-day event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTime")]
		public System.Nullable<System.DateTimeOffset> DateTime { get; set; }
		
		/// <summary>
		/// The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	public class EventExtendedProperties
	{
		
		/// <summary>
		/// Properties that are private to the copy of the event that appears on this calendar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="private")]
		public System.Collections.Generic.Dictionary<string, string> Private { get; set; }
		
		/// <summary>
		/// Properties that are shared between copies of the event on other attendees' calendars.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shared")]
		public System.Collections.Generic.Dictionary<string, string> Shared { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventFocusTimeProperties
	{
		
		/// <summary>
		/// Whether to decline meeting invitations which overlap Focus Time events. Valid values are declineNone, meaning that no meeting invitations are declined; declineAllConflictingInvitations, meaning that all conflicting meeting invitations that conflict with the event are declined; and declineOnlyNewConflictingInvitations, meaning that only new conflicting meeting invitations which arrive while the Focus Time event is present are to be declined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDeclineMode")]
		public string AutoDeclineMode { get; set; }
		
		/// <summary>
		/// The status to mark the user in Chat and related products. This can be available or doNotDisturb.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chatStatus")]
		public string ChatStatus { get; set; }
		
		/// <summary>
		/// Response message to set if an existing event or new invitation is automatically declined by Calendar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="declineMessage")]
		public string DeclineMessage { get; set; }
	}
	
	public class EventGadget
	{
		
		/// <summary>
		/// The gadget's display mode. Deprecated. Possible values are:  
		///- "icon" - The gadget displays next to the event's title in the calendar view. 
		///- "chip" - The gadget displays when the event is clicked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public string Display { get; set; }
		
		/// <summary>
		/// The gadget's height in pixels. The height must be an integer greater than 0. Optional. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The gadget's icon URL. The URL scheme must be HTTPS. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconLink")]
		public string IconLink { get; set; }
		
		/// <summary>
		/// The gadget's URL. The URL scheme must be HTTPS. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Preferences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public System.Collections.Generic.Dictionary<string, string> Preferences { get; set; }
		
		/// <summary>
		/// The gadget's title. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The gadget's type. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The gadget's width in pixels. The width must be an integer greater than 0. Optional. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class EventOrganizer
	{
		
		/// <summary>
		/// The organizer's name, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The organizer's email address, if available. It must be a valid email address as per RFC5322.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The organizer's Profile ID, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public System.Nullable<System.Boolean> Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventOutOfOfficeProperties
	{
		
		/// <summary>
		/// Whether to decline meeting invitations which overlap Out of office events. Valid values are declineNone, meaning that no meeting invitations are declined; declineAllConflictingInvitations, meaning that all conflicting meeting invitations that conflict with the event are declined; and declineOnlyNewConflictingInvitations, meaning that only new conflicting meeting invitations which arrive while the Out of office event is present are to be declined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDeclineMode")]
		public string AutoDeclineMode { get; set; }
		
		/// <summary>
		/// Response message to set if an existing event or new invitation is automatically declined by Calendar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="declineMessage")]
		public string DeclineMessage { get; set; }
	}
	
	public class EventReminders
	{
		
		/// <summary>
		/// If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public EventReminder[] Overrides { get; set; }
		
		/// <summary>
		/// Whether the default reminders of the calendar apply to the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useDefault")]
		public System.Nullable<System.Boolean> UseDefault { get; set; }
	}
	
	public class EventSource
	{
		
		/// <summary>
		/// Title of the source; for example a title of a web page or an email subject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// URL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventWorkingLocationProperties
	{
		
		/// <summary>
		/// If present, specifies that the user is working from a custom location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLocation")]
		public EventWorkingLocationPropertiesCustomLocation CustomLocation { get; set; }
		
		/// <summary>
		/// If present, specifies that the user is working at home.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeOffice")]
		public object HomeOffice { get; set; }
		
		/// <summary>
		/// If present, specifies that the user is working from an office.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="officeLocation")]
		public EventWorkingLocationPropertiesOfficeLocation OfficeLocation { get; set; }
		
		/// <summary>
		/// Type of the working location. Possible values are:  
		///- "homeOffice" - The user is working at home. 
		///- "officeLocation" - The user is working from an office. 
		///- "customLocation" - The user is working from a custom location.  Any details are specified in a sub-field of the specified name, but this field may be missing if empty. Any other fields are ignored.
		///Required when adding working location properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class EventWorkingLocationPropertiesCustomLocation
	{
		
		/// <summary>
		/// An optional extra label for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	public class EventWorkingLocationPropertiesOfficeLocation
	{
		
		/// <summary>
		/// An optional building identifier. This should reference a building ID in the organization's Resources database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildingId")]
		public string BuildingId { get; set; }
		
		/// <summary>
		/// An optional desk identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deskId")]
		public string DeskId { get; set; }
		
		/// <summary>
		/// An optional floor identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorId")]
		public string FloorId { get; set; }
		
		/// <summary>
		/// An optional floor section identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorSectionId")]
		public string FloorSectionId { get; set; }
		
		/// <summary>
		/// The office name that's displayed in Calendar Web and Mobile clients. We recommend you reference a building name in the organization's Resources database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Events
	{
		
		/// <summary>
		/// The user's access role for this calendar. Read-only. Possible values are:  
		///- "none" - The user has no access. 
		///- "freeBusyReader" - The user has read access to free/busy information. 
		///- "reader" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
		///- "writer" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
		///- "owner" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessRole")]
		public string AccessRole { get; set; }
		
		/// <summary>
		/// The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultReminders")]
		public EventReminder[] DefaultReminders { get; set; }
		
		/// <summary>
		/// Description of the calendar. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// ETag of the collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// List of events on the calendar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Event[] Items { get; set; }
		
		/// <summary>
		/// Type of the collection ("calendar#events").
		/// </summary>
		[System.ComponentModel.DefaultValue("calendar#events")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "calendar#events";
		
		/// <summary>
		/// Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextSyncToken")]
		public string NextSyncToken { get; set; }
		
		/// <summary>
		/// Title of the calendar. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// The time zone of the calendar. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// Last modification time of the calendar (as a RFC3339 timestamp). Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FreeBusyCalendar
	{
		
		/// <summary>
		/// List of time ranges during which this calendar should be regarded as busy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="busy")]
		public TimePeriod[] Busy { get; set; }
		
		/// <summary>
		/// Optional error(s) (if computation for the calendar failed).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimePeriod
	{
		
		/// <summary>
		/// The (exclusive) end of the time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		/// <summary>
		/// The (inclusive) start of the time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FreeBusyGroup
	{
		
		/// <summary>
		/// List of calendars' identifiers within a group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendars")]
		public string[] Calendars { get; set; }
		
		/// <summary>
		/// Optional error(s) (if computation for the group failed).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FreeBusyRequest
	{
		
		/// <summary>
		/// Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendarExpansionMax")]
		public System.Nullable<System.Int32> CalendarExpansionMax { get; set; }
		
		/// <summary>
		/// Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupExpansionMax")]
		public System.Nullable<System.Int32> GroupExpansionMax { get; set; }
		
		/// <summary>
		/// List of calendars and/or groups to query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public FreeBusyRequestItem[] Items { get; set; }
		
		/// <summary>
		/// The end of the interval for the query formatted as per RFC3339.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeMax")]
		public System.Nullable<System.DateTimeOffset> TimeMax { get; set; }
		
		/// <summary>
		/// The start of the interval for the query formatted as per RFC3339.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeMin")]
		public System.Nullable<System.DateTimeOffset> TimeMin { get; set; }
		
		/// <summary>
		/// Time zone used in the response. Optional. The default is UTC.
		/// </summary>
		[System.ComponentModel.DefaultValue("UTC")]
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; } = "UTC";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FreeBusyRequestItem
	{
		
		/// <summary>
		/// The identifier of a calendar or a group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FreeBusyResponse
	{
		
		/// <summary>
		/// List of free/busy information for calendars.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendars")]
		public System.Collections.Generic.Dictionary<string, FreeBusyCalendar> Calendars { get; set; }
		
		/// <summary>
		/// Expansion of groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public System.Collections.Generic.Dictionary<string, FreeBusyGroup> Groups { get; set; }
		
		/// <summary>
		/// Type of the resource ("calendar#freeBusy").
		/// </summary>
		[System.ComponentModel.DefaultValue("calendar#freeBusy")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "calendar#freeBusy";
		
		/// <summary>
		/// The end of the interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeMax")]
		public System.Nullable<System.DateTimeOffset> TimeMax { get; set; }
		
		/// <summary>
		/// The start of the interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeMin")]
		public System.Nullable<System.DateTimeOffset> TimeMin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Setting
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The id of the user setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Type of the resource ("calendar#setting").
		/// </summary>
		[System.ComponentModel.DefaultValue("calendar#setting")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "calendar#setting";
		
		/// <summary>
		/// Value of the user setting. The format of the value depends on the ID of the setting. It must always be a UTF-8 string of length up to 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Settings
	{
		
		/// <summary>
		/// Etag of the collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// List of user settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Setting[] Items { get; set; }
		
		/// <summary>
		/// Type of the collection ("calendar#settings").
		/// </summary>
		[System.ComponentModel.DefaultValue("calendar#settings")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "calendar#settings";
		
		/// <summary>
		/// Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextSyncToken")]
		public string NextSyncToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a secondary calendar.
		/// Calendar_calendars_insert calendars
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Calendar> Calendar_calendars_insertAsync(Calendar requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Calendar>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.
		/// Calendar_calendars_delete calendars/{calendarId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <returns>Successful response</returns>
		public async Task Calendar_calendars_deleteAsync(string calendarId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata for a calendar.
		/// Calendar_calendars_get calendars/{calendarId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <returns>Successful response</returns>
		public async Task<Calendar> Calendar_calendars_getAsync(string calendarId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Calendar>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates metadata for a calendar. This method supports patch semantics.
		/// Calendar_calendars_patch calendars/{calendarId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <returns>Successful response</returns>
		public async Task<Calendar> Calendar_calendars_patchAsync(string calendarId, Calendar requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Calendar>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates metadata for a calendar.
		/// Calendar_calendars_update calendars/{calendarId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <returns>Successful response</returns>
		public async Task<Calendar> Calendar_calendars_updateAsync(string calendarId, Calendar requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Calendar>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the rules in the access control list for the calendar.
		/// Calendar_acl_list calendars/{calendarId}/acl
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="maxResults">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</param>
		/// <param name="pageToken">Token specifying which result page to return. Optional.</param>
		/// <param name="showDeleted">Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.</param>
		/// <param name="syncToken">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
		///If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
		///Learn more about incremental synchronization.
		///Optional. The default is to return all entries.</param>
		/// <returns>Successful response</returns>
		public async Task<Acl> Calendar_acl_listAsync(string calendarId, int maxResults, string pageToken, bool showDeleted, string syncToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/acl&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&showDeleted="+showDeleted+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Acl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an access control rule.
		/// Calendar_acl_insert calendars/{calendarId}/acl
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="sendNotifications">Whether to send notifications about the calendar sharing change. Optional. The default is True.</param>
		/// <returns>Successful response</returns>
		public async Task<AclRule> Calendar_acl_insertAsync(string calendarId, bool sendNotifications, AclRule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/acl&sendNotifications="+sendNotifications;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AclRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Watch for changes to ACL resources.
		/// Calendar_acl_watch calendars/{calendarId}/acl/watch
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="maxResults">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</param>
		/// <param name="pageToken">Token specifying which result page to return. Optional.</param>
		/// <param name="showDeleted">Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.</param>
		/// <param name="syncToken">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
		///If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
		///Learn more about incremental synchronization.
		///Optional. The default is to return all entries.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Calendar_acl_watchAsync(string calendarId, int maxResults, string pageToken, bool showDeleted, string syncToken, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/acl/watch&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&showDeleted="+showDeleted+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an access control rule.
		/// Calendar_acl_delete calendars/{calendarId}/acl/{ruleId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="ruleId">ACL rule identifier.</param>
		/// <returns>Successful response</returns>
		public async Task Calendar_acl_deleteAsync(string calendarId, string ruleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/acl/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an access control rule.
		/// Calendar_acl_get calendars/{calendarId}/acl/{ruleId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="ruleId">ACL rule identifier.</param>
		/// <returns>Successful response</returns>
		public async Task<AclRule> Calendar_acl_getAsync(string calendarId, string ruleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/acl/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AclRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an access control rule. This method supports patch semantics.
		/// Calendar_acl_patch calendars/{calendarId}/acl/{ruleId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="ruleId">ACL rule identifier.</param>
		/// <param name="sendNotifications">Whether to send notifications about the calendar sharing change. Note that there are no notifications on access removal. Optional. The default is True.</param>
		/// <returns>Successful response</returns>
		public async Task<AclRule> Calendar_acl_patchAsync(string calendarId, string ruleId, bool sendNotifications, AclRule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/acl/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId))+"&sendNotifications="+sendNotifications;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AclRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an access control rule.
		/// Calendar_acl_update calendars/{calendarId}/acl/{ruleId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="ruleId">ACL rule identifier.</param>
		/// <param name="sendNotifications">Whether to send notifications about the calendar sharing change. Note that there are no notifications on access removal. Optional. The default is True.</param>
		/// <returns>Successful response</returns>
		public async Task<AclRule> Calendar_acl_updateAsync(string calendarId, string ruleId, bool sendNotifications, AclRule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/acl/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId))+"&sendNotifications="+sendNotifications;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AclRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.
		/// Calendar_calendars_clear calendars/{calendarId}/clear
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <returns>Successful response</returns>
		public async Task Calendar_calendars_clearAsync(string calendarId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/clear";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns events on the specified calendar.
		/// Calendar_events_list calendars/{calendarId}/events
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="alwaysIncludeEmail">Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).</param>
		/// <param name="eventTypes">Event types to return. Optional. Possible values are: 
		///- "default" 
		///- "focusTime" 
		///- "outOfOffice" 
		///- "workingLocation"This parameter can be repeated multiple times to return events of different types. The default is ["default", "focusTime", "outOfOffice"].</param>
		/// <param name="iCalUID">Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID.</param>
		/// <param name="maxAttendees">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</param>
		/// <param name="maxResults">Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</param>
		/// <param name="orderBy">The order of the events returned in the result. Optional. The default is an unspecified, stable order.</param>
		/// <param name="pageToken">Token specifying which result page to return. Optional.</param>
		/// <param name="privateExtendedProperty">Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.</param>
		/// <param name="q">Free text search terms to find events that match these terms in the following fields:
		///
		///- summary 
		///- description 
		///- location 
		///- attendee's displayName 
		///- attendee's email 
		///- workingLocationProperties.officeLocation.buildingId 
		///- workingLocationProperties.officeLocation.deskId 
		///- workingLocationProperties.officeLocation.label 
		///- workingLocationProperties.customLocation.label 
		///These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for "Office" or "Bureau" returns working location events of type officeLocation, whereas searching for "Out of office" or "Abwesend" returns out-of-office events. Optional.</param>
		/// <param name="sharedExtendedProperty">Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.</param>
		/// <param name="showDeleted">Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.</param>
		/// <param name="showHiddenInvitations">Whether to include hidden invitations in the result. Optional. The default is False.</param>
		/// <param name="singleEvents">Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.</param>
		/// <param name="syncToken">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
		///There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.
		///
		///These are: 
		///- iCalUID 
		///- orderBy 
		///- privateExtendedProperty 
		///- q 
		///- sharedExtendedProperty 
		///- timeMin 
		///- timeMax 
		///- updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
		///Learn more about incremental synchronization.
		///Optional. The default is to return all entries.</param>
		/// <param name="timeMax">Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.</param>
		/// <param name="timeMin">Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax.</param>
		/// <param name="timeZone">Time zone used in the response. Optional. The default is the time zone of the calendar.</param>
		/// <param name="updatedMin">Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.</param>
		/// <returns>Successful response</returns>
		public async Task<Events> Calendar_events_listAsync(
					string calendarId, 
					bool alwaysIncludeEmail, 
					string[] eventTypes, 
					string iCalUID, 
					int maxAttendees, 
					int maxResults, 
					Calendar_events_listOrderBy orderBy, 
					string pageToken, 
					string[] privateExtendedProperty, 
					string q, 
					string[] sharedExtendedProperty, 
					bool showDeleted, 
					bool showHiddenInvitations, 
					bool singleEvents, 
					string syncToken, 
					string timeMax, 
					string timeMin, 
					string timeZone, 
					string updatedMin, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/events&alwaysIncludeEmail="+alwaysIncludeEmail+"&"+string.Join("&", eventTypes.Select(z => $"eventTypes={System.Uri.EscapeDataString(z.ToString())}"))+"&iCalUID=" + (iCalUID==null? "" : System.Uri.EscapeDataString(iCalUID))+"&maxAttendees="+maxAttendees+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&"+string.Join("&", privateExtendedProperty.Select(z => $"privateExtendedProperty={System.Uri.EscapeDataString(z.ToString())}"))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&"+string.Join("&", sharedExtendedProperty.Select(z => $"sharedExtendedProperty={System.Uri.EscapeDataString(z.ToString())}"))+"&showDeleted="+showDeleted+"&showHiddenInvitations="+showHiddenInvitations+"&singleEvents="+singleEvents+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken))+"&timeMax=" + (timeMax==null? "" : System.Uri.EscapeDataString(timeMax))+"&timeMin=" + (timeMin==null? "" : System.Uri.EscapeDataString(timeMin))+"&timeZone=" + (timeZone==null? "" : System.Uri.EscapeDataString(timeZone))+"&updatedMin=" + (updatedMin==null? "" : System.Uri.EscapeDataString(updatedMin));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Events>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an event.
		/// Calendar_events_insert calendars/{calendarId}/events
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="conferenceDataVersion">Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.</param>
		/// <param name="maxAttendees">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</param>
		/// <param name="sendNotifications">Deprecated. Please use sendUpdates instead.
		///
		///Whether to send notifications about the creation of the new event. Note that some emails might still be sent even if you set the value to false. The default is false.</param>
		/// <param name="sendUpdates">Whether to send notifications about the creation of the new event. Note that some emails might still be sent. The default is false.</param>
		/// <param name="supportsAttachments">Whether API client performing operation supports event attachments. Optional. The default is False.</param>
		/// <returns>Successful response</returns>
		public async Task<Event> Calendar_events_insertAsync(string calendarId, int conferenceDataVersion, int maxAttendees, bool sendNotifications, Calendar_events_insertSendUpdates sendUpdates, bool supportsAttachments, Event requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/events&conferenceDataVersion="+conferenceDataVersion+"&maxAttendees="+maxAttendees+"&sendNotifications="+sendNotifications+"&sendUpdates=" + sendUpdates+"&supportsAttachments="+supportsAttachments;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Imports an event. This operation is used to add a private copy of an existing event to a calendar.
		/// Calendar_events_import calendars/{calendarId}/events/import
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="conferenceDataVersion">Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.</param>
		/// <param name="supportsAttachments">Whether API client performing operation supports event attachments. Optional. The default is False.</param>
		/// <returns>Successful response</returns>
		public async Task<Event> Calendar_events_importAsync(string calendarId, int conferenceDataVersion, bool supportsAttachments, Event requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/events/import&conferenceDataVersion="+conferenceDataVersion+"&supportsAttachments="+supportsAttachments;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an event based on a simple text string.
		/// Calendar_events_quickAdd calendars/{calendarId}/events/quickAdd
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="text">The text describing the event to be created.</param>
		/// <param name="sendNotifications">Deprecated. Please use sendUpdates instead.
		///
		///Whether to send notifications about the creation of the event. Note that some emails might still be sent even if you set the value to false. The default is false.</param>
		/// <param name="sendUpdates">Guests who should receive notifications about the creation of the new event.</param>
		/// <returns>Successful response</returns>
		public async Task<Event> Calendar_events_quickAddAsync(string calendarId, string text, bool sendNotifications, Calendar_events_insertSendUpdates sendUpdates, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/events/quickAdd&text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&sendNotifications="+sendNotifications+"&sendUpdates=" + sendUpdates;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Watch for changes to Events resources.
		/// Calendar_events_watch calendars/{calendarId}/events/watch
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="alwaysIncludeEmail">Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).</param>
		/// <param name="eventTypes">Event types to return. Optional. Possible values are: 
		///- "default" 
		///- "focusTime" 
		///- "outOfOffice" 
		///- "workingLocation"This parameter can be repeated multiple times to return events of different types. The default is ["default", "focusTime", "outOfOffice"].</param>
		/// <param name="iCalUID">Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID.</param>
		/// <param name="maxAttendees">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</param>
		/// <param name="maxResults">Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</param>
		/// <param name="orderBy">The order of the events returned in the result. Optional. The default is an unspecified, stable order.</param>
		/// <param name="pageToken">Token specifying which result page to return. Optional.</param>
		/// <param name="privateExtendedProperty">Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.</param>
		/// <param name="q">Free text search terms to find events that match these terms in the following fields:
		///
		///- summary 
		///- description 
		///- location 
		///- attendee's displayName 
		///- attendee's email 
		///- workingLocationProperties.officeLocation.buildingId 
		///- workingLocationProperties.officeLocation.deskId 
		///- workingLocationProperties.officeLocation.label 
		///- workingLocationProperties.customLocation.label 
		///These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for "Office" or "Bureau" returns working location events of type officeLocation, whereas searching for "Out of office" or "Abwesend" returns out-of-office events. Optional.</param>
		/// <param name="sharedExtendedProperty">Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.</param>
		/// <param name="showDeleted">Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.</param>
		/// <param name="showHiddenInvitations">Whether to include hidden invitations in the result. Optional. The default is False.</param>
		/// <param name="singleEvents">Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.</param>
		/// <param name="syncToken">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
		///There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.
		///
		///These are: 
		///- iCalUID 
		///- orderBy 
		///- privateExtendedProperty 
		///- q 
		///- sharedExtendedProperty 
		///- timeMin 
		///- timeMax 
		///- updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
		///Learn more about incremental synchronization.
		///Optional. The default is to return all entries.</param>
		/// <param name="timeMax">Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.</param>
		/// <param name="timeMin">Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax.</param>
		/// <param name="timeZone">Time zone used in the response. Optional. The default is the time zone of the calendar.</param>
		/// <param name="updatedMin">Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Calendar_events_watchAsync(
					string calendarId, 
					bool alwaysIncludeEmail, 
					string[] eventTypes, 
					string iCalUID, 
					int maxAttendees, 
					int maxResults, 
					Calendar_events_listOrderBy orderBy, 
					string pageToken, 
					string[] privateExtendedProperty, 
					string q, 
					string[] sharedExtendedProperty, 
					bool showDeleted, 
					bool showHiddenInvitations, 
					bool singleEvents, 
					string syncToken, 
					string timeMax, 
					string timeMin, 
					string timeZone, 
					string updatedMin, 
					Channel requestBody, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/events/watch&alwaysIncludeEmail="+alwaysIncludeEmail+"&"+string.Join("&", eventTypes.Select(z => $"eventTypes={System.Uri.EscapeDataString(z.ToString())}"))+"&iCalUID=" + (iCalUID==null? "" : System.Uri.EscapeDataString(iCalUID))+"&maxAttendees="+maxAttendees+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&"+string.Join("&", privateExtendedProperty.Select(z => $"privateExtendedProperty={System.Uri.EscapeDataString(z.ToString())}"))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&"+string.Join("&", sharedExtendedProperty.Select(z => $"sharedExtendedProperty={System.Uri.EscapeDataString(z.ToString())}"))+"&showDeleted="+showDeleted+"&showHiddenInvitations="+showHiddenInvitations+"&singleEvents="+singleEvents+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken))+"&timeMax=" + (timeMax==null? "" : System.Uri.EscapeDataString(timeMax))+"&timeMin=" + (timeMin==null? "" : System.Uri.EscapeDataString(timeMin))+"&timeZone=" + (timeZone==null? "" : System.Uri.EscapeDataString(timeZone))+"&updatedMin=" + (updatedMin==null? "" : System.Uri.EscapeDataString(updatedMin));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an event.
		/// Calendar_events_delete calendars/{calendarId}/events/{eventId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="eventId">Event identifier.</param>
		/// <param name="sendNotifications">Deprecated. Please use sendUpdates instead.
		///
		///Whether to send notifications about the deletion of the event. Note that some emails might still be sent even if you set the value to false. The default is false.</param>
		/// <param name="sendUpdates">Guests who should receive notifications about the deletion of the event.</param>
		/// <returns>Successful response</returns>
		public async Task Calendar_events_deleteAsync(string calendarId, string eventId, bool sendNotifications, Calendar_events_insertSendUpdates sendUpdates, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"&sendNotifications="+sendNotifications+"&sendUpdates=" + sendUpdates;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
		/// Calendar_events_get calendars/{calendarId}/events/{eventId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="eventId">Event identifier.</param>
		/// <param name="alwaysIncludeEmail">Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).</param>
		/// <param name="maxAttendees">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</param>
		/// <param name="timeZone">Time zone used in the response. Optional. The default is the time zone of the calendar.</param>
		/// <returns>Successful response</returns>
		public async Task<Event> Calendar_events_getAsync(string calendarId, string eventId, bool alwaysIncludeEmail, int maxAttendees, string timeZone, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"&alwaysIncludeEmail="+alwaysIncludeEmail+"&maxAttendees="+maxAttendees+"&timeZone=" + (timeZone==null? "" : System.Uri.EscapeDataString(timeZone));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an event. This method supports patch semantics.
		/// Calendar_events_patch calendars/{calendarId}/events/{eventId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="eventId">Event identifier.</param>
		/// <param name="alwaysIncludeEmail">Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).</param>
		/// <param name="conferenceDataVersion">Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.</param>
		/// <param name="maxAttendees">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</param>
		/// <param name="sendNotifications">Deprecated. Please use sendUpdates instead.
		///
		///Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false.</param>
		/// <param name="sendUpdates">Guests who should receive notifications about the event update (for example, title changes, etc.).</param>
		/// <param name="supportsAttachments">Whether API client performing operation supports event attachments. Optional. The default is False.</param>
		/// <returns>Successful response</returns>
		public async Task<Event> Calendar_events_patchAsync(string calendarId, string eventId, bool alwaysIncludeEmail, int conferenceDataVersion, int maxAttendees, bool sendNotifications, Calendar_events_insertSendUpdates sendUpdates, bool supportsAttachments, Event requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"&alwaysIncludeEmail="+alwaysIncludeEmail+"&conferenceDataVersion="+conferenceDataVersion+"&maxAttendees="+maxAttendees+"&sendNotifications="+sendNotifications+"&sendUpdates=" + sendUpdates+"&supportsAttachments="+supportsAttachments;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an event.
		/// Calendar_events_update calendars/{calendarId}/events/{eventId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="eventId">Event identifier.</param>
		/// <param name="alwaysIncludeEmail">Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).</param>
		/// <param name="conferenceDataVersion">Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.</param>
		/// <param name="maxAttendees">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</param>
		/// <param name="sendNotifications">Deprecated. Please use sendUpdates instead.
		///
		///Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false.</param>
		/// <param name="sendUpdates">Guests who should receive notifications about the event update (for example, title changes, etc.).</param>
		/// <param name="supportsAttachments">Whether API client performing operation supports event attachments. Optional. The default is False.</param>
		/// <returns>Successful response</returns>
		public async Task<Event> Calendar_events_updateAsync(string calendarId, string eventId, bool alwaysIncludeEmail, int conferenceDataVersion, int maxAttendees, bool sendNotifications, Calendar_events_insertSendUpdates sendUpdates, bool supportsAttachments, Event requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"&alwaysIncludeEmail="+alwaysIncludeEmail+"&conferenceDataVersion="+conferenceDataVersion+"&maxAttendees="+maxAttendees+"&sendNotifications="+sendNotifications+"&sendUpdates=" + sendUpdates+"&supportsAttachments="+supportsAttachments;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns instances of the specified recurring event.
		/// Calendar_events_instances calendars/{calendarId}/events/{eventId}/instances
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="eventId">Recurring event identifier.</param>
		/// <param name="alwaysIncludeEmail">Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).</param>
		/// <param name="maxAttendees">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</param>
		/// <param name="maxResults">Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</param>
		/// <param name="originalStart">The original start time of the instance in the result. Optional.</param>
		/// <param name="pageToken">Token specifying which result page to return. Optional.</param>
		/// <param name="showDeleted">Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.</param>
		/// <param name="timeMax">Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.</param>
		/// <param name="timeMin">Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.</param>
		/// <param name="timeZone">Time zone used in the response. Optional. The default is the time zone of the calendar.</param>
		/// <returns>Successful response</returns>
		public async Task<Events> Calendar_events_instancesAsync(string calendarId, string eventId, bool alwaysIncludeEmail, int maxAttendees, int maxResults, string originalStart, string pageToken, bool showDeleted, string timeMax, string timeMin, string timeZone, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/instances&alwaysIncludeEmail="+alwaysIncludeEmail+"&maxAttendees="+maxAttendees+"&maxResults="+maxResults+"&originalStart=" + (originalStart==null? "" : System.Uri.EscapeDataString(originalStart))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&showDeleted="+showDeleted+"&timeMax=" + (timeMax==null? "" : System.Uri.EscapeDataString(timeMax))+"&timeMin=" + (timeMin==null? "" : System.Uri.EscapeDataString(timeMin))+"&timeZone=" + (timeZone==null? "" : System.Uri.EscapeDataString(timeZone));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Events>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Moves an event to another calendar, i.e. changes an event's organizer. Note that only default events can be moved; outOfOffice, focusTime and workingLocation events cannot be moved.
		/// Calendar_events_move calendars/{calendarId}/events/{eventId}/move
		/// </summary>
		/// <param name="calendarId">Calendar identifier of the source calendar where the event currently is on.</param>
		/// <param name="eventId">Event identifier.</param>
		/// <param name="destination">Calendar identifier of the target calendar where the event is to be moved to.</param>
		/// <param name="sendNotifications">Deprecated. Please use sendUpdates instead.
		///
		///Whether to send notifications about the change of the event's organizer. Note that some emails might still be sent even if you set the value to false. The default is false.</param>
		/// <param name="sendUpdates">Guests who should receive notifications about the change of the event's organizer.</param>
		/// <returns>Successful response</returns>
		public async Task<Event> Calendar_events_moveAsync(string calendarId, string eventId, string destination, bool sendNotifications, Calendar_events_insertSendUpdates sendUpdates, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"/events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/move&destination=" + (destination==null? "" : System.Uri.EscapeDataString(destination))+"&sendNotifications="+sendNotifications+"&sendUpdates=" + sendUpdates;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop watching resources through this channel
		/// Calendar_channels_stop channels/stop
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Calendar_channels_stopAsync(Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the color definitions for calendars and events.
		/// Calendar_colors_get colors
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Colors> Calendar_colors_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "colors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Colors>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns free/busy information for a set of calendars.
		/// Calendar_freebusy_query freeBusy
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<FreeBusyResponse> Calendar_freebusy_queryAsync(FreeBusyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "freeBusy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FreeBusyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the calendars on the user's calendar list.
		/// Calendar_calendarList_list users/me/calendarList
		/// </summary>
		/// <param name="maxResults">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</param>
		/// <param name="minAccessRole">The minimum access role for the user in the returned entries. Optional. The default is no restriction.</param>
		/// <param name="pageToken">Token specifying which result page to return. Optional.</param>
		/// <param name="showDeleted">Whether to include deleted calendar list entries in the result. Optional. The default is False.</param>
		/// <param name="showHidden">Whether to show hidden entries. Optional. The default is False.</param>
		/// <param name="syncToken">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
		///To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.
		///If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
		///Learn more about incremental synchronization.
		///Optional. The default is to return all entries.</param>
		/// <returns>Successful response</returns>
		public async Task<CalendarList> Calendar_calendarList_listAsync(int maxResults, Calendar_calendarList_listMinAccessRole minAccessRole, string pageToken, bool showDeleted, bool showHidden, string syncToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/me/calendarList?maxResults="+maxResults+"&minAccessRole=" + minAccessRole+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&showDeleted="+showDeleted+"&showHidden="+showHidden+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an existing calendar into the user's calendar list.
		/// Calendar_calendarList_insert users/me/calendarList
		/// </summary>
		/// <param name="colorRgbFormat">Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.</param>
		/// <returns>Successful response</returns>
		public async Task<CalendarListEntry> Calendar_calendarList_insertAsync(bool colorRgbFormat, CalendarListEntry requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/me/calendarList?colorRgbFormat="+colorRgbFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarListEntry>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Watch for changes to CalendarList resources.
		/// Calendar_calendarList_watch users/me/calendarList/watch
		/// </summary>
		/// <param name="maxResults">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</param>
		/// <param name="minAccessRole">The minimum access role for the user in the returned entries. Optional. The default is no restriction.</param>
		/// <param name="pageToken">Token specifying which result page to return. Optional.</param>
		/// <param name="showDeleted">Whether to include deleted calendar list entries in the result. Optional. The default is False.</param>
		/// <param name="showHidden">Whether to show hidden entries. Optional. The default is False.</param>
		/// <param name="syncToken">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
		///To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.
		///If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
		///Learn more about incremental synchronization.
		///Optional. The default is to return all entries.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Calendar_calendarList_watchAsync(int maxResults, Calendar_calendarList_listMinAccessRole minAccessRole, string pageToken, bool showDeleted, bool showHidden, string syncToken, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/me/calendarList/watch?maxResults="+maxResults+"&minAccessRole=" + minAccessRole+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&showDeleted="+showDeleted+"&showHidden="+showHidden+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a calendar from the user's calendar list.
		/// Calendar_calendarList_delete users/me/calendarList/{calendarId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <returns>Successful response</returns>
		public async Task Calendar_calendarList_deleteAsync(string calendarId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/me/calendarList/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a calendar from the user's calendar list.
		/// Calendar_calendarList_get users/me/calendarList/{calendarId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <returns>Successful response</returns>
		public async Task<CalendarListEntry> Calendar_calendarList_getAsync(string calendarId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/me/calendarList/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarListEntry>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing calendar on the user's calendar list. This method supports patch semantics.
		/// Calendar_calendarList_patch users/me/calendarList/{calendarId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="colorRgbFormat">Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.</param>
		/// <returns>Successful response</returns>
		public async Task<CalendarListEntry> Calendar_calendarList_patchAsync(string calendarId, bool colorRgbFormat, CalendarListEntry requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/me/calendarList/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"&colorRgbFormat="+colorRgbFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarListEntry>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing calendar on the user's calendar list.
		/// Calendar_calendarList_update users/me/calendarList/{calendarId}
		/// </summary>
		/// <param name="calendarId">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</param>
		/// <param name="colorRgbFormat">Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.</param>
		/// <returns>Successful response</returns>
		public async Task<CalendarListEntry> Calendar_calendarList_updateAsync(string calendarId, bool colorRgbFormat, CalendarListEntry requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/me/calendarList/"+ (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"&colorRgbFormat="+colorRgbFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarListEntry>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns all user settings for the authenticated user.
		/// Calendar_settings_list users/me/settings
		/// </summary>
		/// <param name="maxResults">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</param>
		/// <param name="pageToken">Token specifying which result page to return. Optional.</param>
		/// <param name="syncToken">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
		///If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
		///Learn more about incremental synchronization.
		///Optional. The default is to return all entries.</param>
		/// <returns>Successful response</returns>
		public async Task<Settings> Calendar_settings_listAsync(int maxResults, string pageToken, string syncToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/me/settings?maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Settings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Watch for changes to Settings resources.
		/// Calendar_settings_watch users/me/settings/watch
		/// </summary>
		/// <param name="maxResults">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</param>
		/// <param name="pageToken">Token specifying which result page to return. Optional.</param>
		/// <param name="syncToken">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
		///If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
		///Learn more about incremental synchronization.
		///Optional. The default is to return all entries.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Calendar_settings_watchAsync(int maxResults, string pageToken, string syncToken, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/me/settings/watch?maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a single user setting.
		/// Calendar_settings_get users/me/settings/{setting}
		/// </summary>
		/// <param name="setting">The id of the user setting.</param>
		/// <returns>Successful response</returns>
		public async Task<Setting> Calendar_settings_getAsync(string setting, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/me/settings/"+ (setting==null? "" : System.Uri.EscapeDataString(setting));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Setting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Calendar_events_listOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		startTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		updated = 1,
	}
	
	public enum Calendar_events_insertSendUpdates
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		externalOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 2,
	}
	
	public enum Calendar_calendarList_listMinAccessRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		freeBusyReader = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		owner = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reader = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		writer = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
