//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AccountEventType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		account = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		messageStatus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		messageIncoming = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountEventPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Double> Balance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<AttributeFilterComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AttributeFilterComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Campaign
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CampaignRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public CampaignRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trigger")]
		public CampaignRequestTrigger Trigger { get; set; }
	}
	
	public class CampaignRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public string[] Contacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	public class CampaignRequestTrigger
	{
		
		/// <summary>
		/// Campaign type specifies how it sources contacts and what event triggers its execution  Sort order
		///  * `M` - Manual
		///  * `S` - Scheduled
		///  * `FU` - File Upload
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<CampaignRequestTriggerCode> Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CampaignRequestTriggerCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		M = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FU = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CampaignResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Campaign Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CampaignsResponse : PaginatedResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Campaign[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Contact : ContactRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public Updated Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public Updated Updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public System.Nullable<System.Boolean> Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Updated
	{
		
		[System.Runtime.Serialization.DataMember(Name="at")]
		public System.Nullable<System.DateTimeOffset> At { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by")]
		public UpdatedBy By { get; set; }
	}
	
	public class UpdatedBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactIdentifiers
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public ContactIdentifiersMobile Mobile { get; set; }
	}
	
	public class ContactIdentifiersMobile
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactRequest : ContactIdentifiers
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Contact Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactUploadResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ContactUploadResponseData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class ContactUploadResponseData
	{
		
		/// <summary>
		/// Uploaded contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public Contact[] Contacts { get; set; }
		
		/// <summary>
		/// Contacts that failed validation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Contact[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inserted")]
		public System.Nullable<System.Int32> Inserted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="submitted")]
		public System.Nullable<System.Int32> Submitted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Int32> Success { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.Int32> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactsResponse : PaginatedResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Contact[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Conversation
	{
		
		[System.Runtime.Serialization.DataMember(Name="closed")]
		public System.Nullable<System.Boolean> Closed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactIdentifiers Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public Updated Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastMessage")]
		public Message LastMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public PhoneNumber PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unread")]
		public string[] Unread { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public Updated Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message
	{
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactIdentifiers Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversation")]
		public MessageConversation Conversation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public Updated Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List of media objects attached to message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media")]
		public MessageMedia[] MessageMedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outgoing")]
		public System.Nullable<System.Boolean> Outgoing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="read")]
		public System.Nullable<System.Boolean> Read { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public System.Nullable<System.Double> Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public Updated Updated { get; set; }
	}
	
	public class MessageConversation
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class MessageMedia
	{
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhoneNumber
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Conversation Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationsResponse : PaginatedResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Conversation[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorResponseError Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class ErrorResponseError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AccountEventPayload Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AccountEventType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		account = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		messageStatus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		messageIncoming = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageEventPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactIdentifiers Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Message Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessagesResponse : PaginatedResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Message[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaginatedResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public PaginatedResponseError Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public PaginatedResponsePagination Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class PaginatedResponseError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class PaginatedResponsePagination
	{
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendMessagesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public ContactRequest[] Contacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationStrategy")]
		public string ConversationStrategy { get; set; }
		
		/// <summary>
		/// List of conversation ids to send messages to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversations")]
		public string[] Conversations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public SendMessagesRequestFilters Filters { get; set; }
		
		/// <summary>
		/// List of media objects to attach to message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media")]
		public SendMessagesRequestMedia[] SendMessagesRequestMedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumberFilter")]
		public SendMessagesRequestPhoneNumberFilter PhoneNumberFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SendMessagesRequestType> Type { get; set; }
	}
	
	public class SendMessagesRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	public class SendMessagesRequestMedia
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class SendMessagesRequestPhoneNumberFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public SendMessagesRequestPhoneNumberFilterGroup Group { get; set; }
	}
	
	public class SendMessagesRequestPhoneNumberFilterGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SendMessagesRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MMS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendMessagesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SendMessagesResponseData Data { get; set; }
	}
	
	public class SendMessagesResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="estimatedPrice")]
		public System.Nullable<System.Double> EstimatedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invalid")]
		public Contact[] Invalid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requested")]
		public System.Nullable<System.Int32> Requested { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public System.Nullable<System.Int32> Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShareFileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ShareFileResponseData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class ShareFileResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public System.Nullable<System.DateTimeOffset> Expires { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Template : TemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TemplateRequestType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TemplateRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Web = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Template Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TemplatesResponse : PaginatedResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Template[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TokenRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		public string Client_secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grant_type")]
		public string Grant_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TokenResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string Token_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook
	{
		
		[System.Runtime.Serialization.DataMember(Name="eventTypes")]
		public string[] EventTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebhookResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Webhook Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebhooksResponse : PaginatedResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Webhook[] Data { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get token for accessing APIs
		/// Auth_token oauth2/token
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<TokenResponse> Auth_tokenAsync(TokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth2/token";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TokenResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch campaigns
		/// Campaigns_fetchAll v1/accounts/{accountId}/campaigns
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="offset">Results to skip when paginating through a result set
		/// Minimum: 0
		// </param>
		/// <param name="limit">Maximum number of results to return
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="name">Filter by name or part of</param>
		/// <returns>successful operation</returns>
		public async Task<CampaignsResponse> Campaigns_fetchAllAsync(string accountId, long offset, long limit, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/campaigns&offset="+offset+"&limit="+limit+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create campaign
		/// Campaigns_create v1/accounts/{accountId}/campaigns
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		public async Task Campaigns_createAsync(string accountId, CampaignRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/campaigns";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a campaign
		/// Campaigns_remove v1/accounts/{accountId}/campaigns/{campaignId}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="campaignId">Campaign id to delete</param>
		/// <returns>successful operation</returns>
		public async Task<Campaigns_removeReturn> Campaigns_removeAsync(string accountId, string campaignId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/campaigns/"+ (campaignId==null? "" : System.Uri.EscapeDataString(campaignId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Campaigns_removeReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch campaign by ID
		/// Campaigns_fetch v1/accounts/{accountId}/campaigns/{campaignId}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="campaignId">ID of campaign to return</param>
		/// <returns>successful operation</returns>
		public async Task<CampaignResponse> Campaigns_fetchAsync(string accountId, string campaignId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/campaigns/"+ (campaignId==null? "" : System.Uri.EscapeDataString(campaignId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a campaign
		/// Campaigns_update v1/accounts/{accountId}/campaigns/{campaignId}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="campaignId">ID of campaign</param>
		/// <returns>successful operation</returns>
		public async Task<CampaignResponse> Campaigns_updateAsync(string accountId, string campaignId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/campaigns/"+ (campaignId==null? "" : System.Uri.EscapeDataString(campaignId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch contacts
		/// Contacts_fetchAll v1/accounts/{accountId}/contacts
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="offset">Results to skip when paginating through a result set
		/// Minimum: 0
		// </param>
		/// <param name="limit">Maximum number of results to return
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="firstName">Filter by first name or part of</param>
		/// <param name="lastName">Filter by last name or part of</param>
		/// <param name="mobile">Filter by mobile or part of</param>
		/// <param name="email">Filter by email or part of</param>
		/// <param name="tags">Filter by tag(s)</param>
		/// <returns>successful operation</returns>
		public async Task<ContactsResponse> Contacts_fetchAllAsync(string accountId, long offset, long limit, string firstName, string lastName, string mobile, string email, string tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/contacts&offset="+offset+"&limit="+limit+"&firstName=" + (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"&lastName=" + (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"&mobile=" + (mobile==null? "" : System.Uri.EscapeDataString(mobile))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create contact
		/// Contacts_create v1/accounts/{accountId}/contacts
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="mergeStrategy">Determines how existing contacts with matching mobile numbers are treated</param>
		public async Task Contacts_createAsync(string accountId, Contacts_createMergeStrategy mergeStrategy, ContactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/contacts&mergeStrategy=" + mergeStrategy;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a contact
		/// Contacts_remove v1/accounts/{accountId}/contacts/{contactId}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="contactId">Contact id to delete</param>
		/// <returns>successful operation</returns>
		public async Task<Contacts_removeReturn> Contacts_removeAsync(string accountId, string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/contacts/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Contacts_removeReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch contact by ID
		/// Contacts_fetch v1/accounts/{accountId}/contacts/{contactId}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="contactId">ID of contact to return</param>
		/// <returns>successful operation</returns>
		public async Task<ContactResponse> Contacts_fetchAsync(string accountId, string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/contacts/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a contact
		/// Contacts_update v1/accounts/{accountId}/contacts/{contactId}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="contactId">ID of contact</param>
		/// <returns>successful operation</returns>
		public async Task<ContactResponse> Contacts_updateAsync(string accountId, string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/contacts/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch conversations
		/// Conversations_fetchAll v1/accounts/{accountId}/conversations
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="offset">Results to skip when paginating through a result set
		/// Minimum: 0
		// </param>
		/// <param name="limit">Maximum number of results to return
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>successful operation</returns>
		public async Task<ConversationsResponse> Conversations_fetchAllAsync(string accountId, long offset, long limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/conversations&offset="+offset+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConversationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch conversation by ID
		/// Conversations_fetch v1/accounts/{accountId}/conversations/{conversationId}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="conversationId">ID of template to return</param>
		/// <returns>successful operation</returns>
		public async Task<ConversationResponse> Conversations_fetchAsync(string accountId, string conversationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/conversations/"+ (conversationId==null? "" : System.Uri.EscapeDataString(conversationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConversationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Closes a conversation
		/// Conversations_close v1/accounts/{accountId}/conversations/{conversationId}/close
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="conversationId">ID of conversation</param>
		/// <returns>successful operation</returns>
		public async Task<ConversationResponse> Conversations_closeAsync(string accountId, string conversationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/conversations/"+ (conversationId==null? "" : System.Uri.EscapeDataString(conversationId))+"/close";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConversationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch messages
		/// Messages_fetchAll v1/accounts/{accountId}/messages
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="offset">Results to skip when paginating through a result set
		/// Minimum: 0
		// </param>
		/// <param name="limit">Maximum number of results to return
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="contactId">ID of contact</param>
		/// <param name="conversationId">ID of conversation</param>
		/// <returns>successful operation</returns>
		public async Task<MessagesResponse> Messages_fetchAllAsync(string accountId, long offset, long limit, string contactId, string conversationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/messages&offset="+offset+"&limit="+limit+"&contactId=" + (contactId==null? "" : System.Uri.EscapeDataString(contactId))+"&conversationId=" + (conversationId==null? "" : System.Uri.EscapeDataString(conversationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MessagesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send Messages
		/// Messages_send v1/accounts/{accountId}/messages
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <returns>successful operation</returns>
		public async Task<SendMessagesResponse> Messages_sendAsync(string accountId, SendMessagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/messages";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SendMessagesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch message by id
		/// Returns a single messag
		/// Messages_fetch v1/accounts/{accountId}/messages/{messageId}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="messageId">ID of message to return</param>
		/// <returns>successful operation</returns>
		public async Task<MessageResponse> Messages_fetchAsync(string accountId, string messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/messages/"+ (messageId==null? "" : System.Uri.EscapeDataString(messageId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MessageResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch templates
		/// Templates_fetchAll v1/accounts/{accountId}/templates
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="offset">Results to skip when paginating through a result set
		/// Minimum: 0
		// </param>
		/// <param name="limit">Maximum number of results to return
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="name">Filter by name or part of</param>
		/// <returns>successful operation</returns>
		public async Task<TemplatesResponse> Templates_fetchAllAsync(string accountId, long offset, long limit, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/templates&offset="+offset+"&limit="+limit+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TemplatesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create template
		/// Templates_create v1/accounts/{accountId}/templates
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		public async Task Templates_createAsync(string accountId, TemplateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/templates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a template
		/// Templates_remove v1/accounts/{accountId}/templates/{templateId}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="templateId">Template id to delete</param>
		/// <returns>successful operation</returns>
		public async Task<Templates_removeReturn> Templates_removeAsync(string accountId, string templateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/templates/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Templates_removeReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch template by ID
		/// Templates_fetch v1/accounts/{accountId}/templates/{templateId}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="templateId">ID of template to return</param>
		/// <returns>successful operation</returns>
		public async Task<TemplateResponse> Templates_fetchAsync(string accountId, string templateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/templates/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TemplateResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a template
		/// Templates_update v1/accounts/{accountId}/templates/{templateId}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="templateId">ID of template</param>
		/// <returns>successful operation</returns>
		public async Task<TemplateResponse> Templates_updateAsync(string accountId, string templateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/templates/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TemplateResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch active webhooks
		/// When messages are acknowledge by carriers, a notification is sent to the specified URL
		/// Webhooks_fetchAll v1/accounts/{accountId}/webhooks
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <returns>successful operation</returns>
		public async Task<WebhooksResponse> Webhooks_fetchAllAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webhooks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<WebhooksResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Subscribe to message events
		/// When messages are acknowledge by carriers, a notification is sent to the specified URL
		/// Webhooks_subscribe v1/accounts/{accountId}/webhooks
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <returns>successful operation</returns>
		public async Task<WebhookResponse> Webhooks_subscribeAsync(string accountId, Webhooks_subscribePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webhooks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<WebhookResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Unsubscribe to message events
		/// Delete subscription for receiving notifications
		/// Webhooks_unsubscribe v1/accounts/{accountId}/webhooks/{url}
		/// </summary>
		/// <param name="accountId">Account to apply operations to</param>
		/// <param name="url">Account to apply operations to</param>
		public async Task Webhooks_unsubscribeAsync(string accountId, string url, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webhooks/"+ (url==null? "" : System.Uri.EscapeDataString(url));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class Campaigns_removeReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public enum Contacts_createMergeStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		append = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		core = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remove = 2,
	}
	
	public class Contacts_removeReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class Templates_removeReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class Webhooks_subscribePostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="eventTypes")]
		public string[] EventTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
