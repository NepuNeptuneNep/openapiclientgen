//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// An error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// An HTTP status code
		/// Minimum: 100
		/// Maximum: 599
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.Range(100, 599)]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// A UTC ISO timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// A Canadian holiday. Includes a name, the literal date of the holiday, the observed date of the holiday (ie, accommodating for weekends), and a list of regions that observe this holiday.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Holiday
	{
		
		/// <summary>
		/// ISO date: the literal date of the holiday
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.DateOnly Date { get; set; }
		
		/// <summary>
		/// Whether this holiday is observed by federally-regulated industries.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="federal")]
		public HolidayFederal Federal { get; set; }
		
		/// <summary>
		/// Primary key for a holiday
		/// Required
		/// Minimum: 1
		/// Maximum: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.Range(1, 32)]
		public int Id { get; set; }
		
		/// <summary>
		/// English name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameEn")]
		public string NameEn { get; set; }
		
		/// <summary>
		/// French name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameFr")]
		public string NameFr { get; set; }
		
		/// <summary>
		/// ISO date: when this holiday is observed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="observedDate")]
		public System.DateOnly ObservedDate { get; set; }
		
		/// <summary>
		/// Whether this is a province-wide statutory holiday, or one that is optional for employers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<HolidayOptional> Optional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provinces")]
		public Province[] Provinces { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HolidayFederal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HolidayOptional
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	/// <summary>
	/// A Canadian province or territory 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Province
	{
		
		/// <summary>
		/// Canadian province abbreviations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public ProvinceId Id { get; set; }
		
		/// <summary>
		/// English name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameEn")]
		public string NameEn { get; set; }
		
		/// <summary>
		/// French name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameFr")]
		public string NameFr { get; set; }
		
		/// <summary>
		/// A Canadian holiday. Includes a name, the literal date of the holiday, the observed date of the holiday (ie, accommodating for weekends), and a list of regions that observe this holiday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextHoliday")]
		public Holiday NextHoliday { get; set; }
		
		/// <summary>
		/// Whether this province optionally observes a given holiday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<ProvinceOptional> Optional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provinces")]
		public Holiday[] Provinces { get; set; }
		
		/// <summary>
		/// Name of reference page with public holidays for this region
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceEn")]
		public string SourceEn { get; set; }
		
		/// <summary>
		/// URL to public holidays reference for this region
		/// Required
		/// Pattern: https+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceLink")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"https+")]
		public string SourceLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProvinceId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NB = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NU = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QC = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SK = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YT = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProvinceOptional
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// root
		/// Returns a welcome message.
		/// Root api/v1
		/// </summary>
		/// <returns>OK</returns>
		public async Task<RootReturn> RootAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RootReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all holidays
		/// Returns Canadian public holidays. Each holiday lists the regions that observe it.
		/// Holidays api/v1/holidays
		/// </summary>
		/// <param name="year">A calendar year
		/// Minimum: 2016
		/// Maximum: 2029
		// </param>
		/// <param name="federal">A boolean parameter. If true or 1, will return only federal holidays. If false or 0, will return no federal holidays.</param>
		/// <param name="optional">A boolean parameter. If false or 0 (default), will return only legislated holidays. If true or 1, will return optional holidays from Alberta and BC.</param>
		/// <returns>OK</returns>
		public async Task<HolidaysReturn> HolidaysAsync(int year, HolidaysFederal federal, HolidaysOptional optional, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/holidays?year="+year+"&federal=" + federal+"&optional=" + optional;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HolidaysReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a holiday by id
		/// Returns one Canadian statutory holiday by integer id. Returns a 404 response for invalid ids.
		/// Holiday api/v1/holidays/{holidayId}
		/// </summary>
		/// <param name="year">A calendar year
		/// Minimum: 2016
		/// Maximum: 2029
		// </param>
		/// <param name="optional">A boolean parameter. If false or 0 (default), will return provinces for which this is a legislated holiday. If true or 1, will return provinces which optionally celebrate this holiday.</param>
		/// <returns>OK</returns>
		public async Task<HolidayReturn> HolidayAsync(int year, HolidayOptional optional, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/holidays/{holidayId}?year="+year+"&optional=" + optional;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HolidayReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all provinces
		/// Returns provinces and territories in Canada. Each province or territory lists its associated holidays.
		/// Provinces api/v1/provinces
		/// </summary>
		/// <param name="year">A calendar year
		/// Minimum: 2016
		/// Maximum: 2029
		// </param>
		/// <param name="optional">A boolean parameter. If false or 0 (default), will return only legislated holidays. If true or 1, will return optional holidays from Alberta and BC.</param>
		/// <returns>OK</returns>
		public async Task<ProvincesReturn> ProvincesAsync(int year, ProvincesOptional optional, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/provinces?year="+year+"&optional=" + optional;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProvincesReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a province or territory by abbreviation
		/// Returns a Canadian province or territory with its associated holidays. Returns a 404 response for invalid abbreviations.
		/// Province api/v1/provinces/{provinceId}
		/// </summary>
		/// <param name="year">A calendar year
		/// Minimum: 2016
		/// Maximum: 2029
		// </param>
		/// <param name="optional">A boolean parameter (AB and BC only). If false or 0 (default), will return only legislated holidays. If true or 1, will return optional holidays from Alberta and BC.</param>
		/// <returns>OK</returns>
		public async Task<ProvinceReturn> ProvinceAsync(int year, ProvinceOptional optional, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/provinces/{provinceId}?year="+year+"&optional=" + optional;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProvinceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get JSON schema
		/// Gets the schema for the JSON API as a yaml file.
		/// Spec api/v1/spec
		/// </summary>
		/// <returns>OK</returns>
		public async Task SpecAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/spec";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class RootReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RootReturn_links _links { get; set; }
		
		/// <summary>
		/// A welcome message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class RootReturn_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="holidays")]
		public RootReturn_linksHolidays Holidays { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provinces")]
		public RootReturn_linksProvinces Provinces { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public RootReturn_linksSelf Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public RootReturn_linksSpec Spec { get; set; }
	}
	
	public class RootReturn_linksHolidays
	{
		
		/// <summary>
		/// Domain to get all holidays
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class RootReturn_linksProvinces
	{
		
		/// <summary>
		/// Domain to get all provinces
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class RootReturn_linksSelf
	{
		
		/// <summary>
		/// Root domain
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class RootReturn_linksSpec
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public enum HolidaysFederal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 3,
	}
	
	public enum HolidaysOptional
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 3,
	}
	
	public class HolidaysReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="holidays")]
		public Holiday[] Holidays { get; set; }
	}
	
	public class HolidayReturn
	{
		
		/// <summary>
		/// A Canadian holiday. Includes a name, the literal date of the holiday, the observed date of the holiday (ie, accommodating for weekends), and a list of regions that observe this holiday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holiday")]
		public Holiday Holiday { get; set; }
	}
	
	public enum ProvincesOptional
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 3,
	}
	
	public class ProvincesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="provinces")]
		public Province[] Provinces { get; set; }
	}
	
	public class ProvinceReturn
	{
		
		/// <summary>
		/// A Canadian province or territory 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="province")]
		public Province Province { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
