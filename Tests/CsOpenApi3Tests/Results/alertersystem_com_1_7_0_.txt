//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The AlertLog resource is a chronological record of all the alerts that have been triggered, including the status of each alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertLog_get
	{
		
		/// <summary>
		/// The reason why the dispatch of the alert failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertLogErrorMessage")]
		public string AlertLogErrorMessage { get; set; }
		
		/// <summary>
		/// The id of the successfully dispatched message as received from the transport that was used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertLogMessageId")]
		public string AlertLogMessageId { get; set; }
		
		/// <summary>
		/// The status of the alert log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertLogStatusCode")]
		public string AlertLogStatusCode { get; set; }
		
		/// <summary>
		/// The alert service that is related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertService")]
		public string AlertService { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The monitor that is related to this resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public string Monitor { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The ping that triggered this resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ping")]
		public string Ping { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The response body returned by a successful request to a webhook URL. Length limited to 1,000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookResponseBody")]
		public string WebhookResponseBody { get; set; }
		
		/// <summary>
		/// The response headers returned by a successful request to a webhook URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookResponseHeaders")]
		public string[] WebhookResponseHeaders { get; set; }
	}
	
	/// <summary>
	/// The AlertLog resource is a chronological record of all the alerts that have been triggered, including the status of each alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertLogjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The reason why the dispatch of the alert failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertLogErrorMessage")]
		public string AlertLogErrorMessage { get; set; }
		
		/// <summary>
		/// The id of the successfully dispatched message as received from the transport that was used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertLogMessageId")]
		public string AlertLogMessageId { get; set; }
		
		/// <summary>
		/// The status of the alert log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertLogStatusCode")]
		public string AlertLogStatusCode { get; set; }
		
		/// <summary>
		/// The alert service that is related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertService")]
		public string AlertService { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The monitor that is related to this resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public string Monitor { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The ping that triggered this resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ping")]
		public string Ping { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The response body returned by a successful request to a webhook URL. Length limited to 1,000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookResponseBody")]
		public string WebhookResponseBody { get; set; }
		
		/// <summary>
		/// The response headers returned by a successful request to a webhook URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookResponseHeaders")]
		public string[] WebhookResponseHeaders { get; set; }
	}
	
	/// <summary>
	/// The AlertLogStatusCode resource is a set of codes that describes the outcomes of the dispatching of an alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertLogStatusCode_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The AlertLogStatusCode resource is a set of codes that describes the outcomes of the dispatching of an alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertLogStatusCodejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertService_get
	{
		
		/// <summary>
		/// The name of the alert service. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertServiceName { get; set; }
		
		/// <summary>
		/// Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServiceNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string AlertServiceNotes { get; set; }
		
		/// <summary>
		/// The transport of the alert service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertServiceTransportCode")]
		public string AlertServiceTransportCode { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsPerTransportAlert")]
		public System.Nullable<System.Int32> CreditsPerTransportAlert { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Media objects that must be sent with each alert. Only applicable when you use your own email alert services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaObjects")]
		public string[] MediaObjects { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The email address where alerts will be sent.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientEmailAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientEmailAddress { get; set; }
		
		/// <summary>
		/// The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientPhoneNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientPhoneNumber { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAlerta")]
		public string TransportAlerta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAllMySms")]
		public string TransportAllMySms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAmazonSns")]
		public string TransportAmazonSns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportBandwidth")]
		public string TransportBandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportChatwork")]
		public string TransportChatwork { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickSend")]
		public string TransportClickSend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickatell")]
		public string TransportClickatell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportContactEveryone")]
		public string TransportContactEveryone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportDiscord")]
		public string TransportDiscord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEmail")]
		public string TransportEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEngagespot")]
		public string TransportEngagespot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEsendex")]
		public string TransportEsendex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportExpo")]
		public string TransportExpo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFirebase")]
		public string TransportFirebase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFortySixElks")]
		public string TransportFortySixElks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreeMobile")]
		public string TransportFreeMobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreshdesk")]
		public string TransportFreshdesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGatewayApi")]
		public string TransportGatewayApi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGitter")]
		public string TransportGitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGoogleChat")]
		public string TransportGoogleChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGotify")]
		public string TransportGotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportHelpScout")]
		public string TransportHelpScout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportInfobip")]
		public string TransportInfobip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportIqsms")]
		public string TransportIqsms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportKazInfoTeh")]
		public string TransportKazInfoTeh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLightSms")]
		public string TransportLightSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLineNotify")]
		public string TransportLineNotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLinkedIn")]
		public string TransportLinkedIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMailjet")]
		public string TransportMailjet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMastodon")]
		public string TransportMastodon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMattermost")]
		public string TransportMattermost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMercure")]
		public string TransportMercure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageBird")]
		public string TransportMessageBird { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageMedia")]
		public string TransportMessageMedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMicrosoftTeams")]
		public string TransportMicrosoftTeams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMobyt")]
		public string TransportMobyt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOctopush")]
		public string TransportOctopush { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOneSignal")]
		public string TransportOneSignal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOpsgenie")]
		public string TransportOpsgenie { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOrangeSms")]
		public string TransportOrangeSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOvhCloud")]
		public string TransportOvhCloud { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerDuty")]
		public string TransportPagerDuty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerTree")]
		public string TransportPagerTree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPlivo")]
		public string TransportPlivo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushbullet")]
		public string TransportPushbullet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushover")]
		public string TransportPushover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushy")]
		public string TransportPushy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRingCentral")]
		public string TransportRingCentral { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRocketChat")]
		public string TransportRocketChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendberry")]
		public string TransportSendberry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendinblue")]
		public string TransportSendinblue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSimpleTextin")]
		public string TransportSimpleTextin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSinch")]
		public string TransportSinch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSlack")]
		public string TransportSlack { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSms77")]
		public string TransportSms77 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsBiuras")]
		public string TransportSmsBiuras { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsFactor")]
		public string TransportSmsFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsapi")]
		public string TransportSmsapi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsc")]
		public string TransportSmsc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsmode")]
		public string TransportSmsmode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSpotHit")]
		public string TransportSpotHit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelegram")]
		public string TransportTelegram { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelnyx")]
		public string TransportTelnyx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTermii")]
		public string TransportTermii { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTrello")]
		public string TransportTrello { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTurboSms")]
		public string TransportTurboSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwilio")]
		public string TransportTwilio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwitter")]
		public string TransportTwitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportVonage")]
		public string TransportVonage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportWebhook")]
		public string TransportWebhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportYunpian")]
		public string TransportYunpian { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZendesk")]
		public string TransportZendesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZulip")]
		public string TransportZulip { get; set; }
	}
	
	/// <summary>
	/// The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertService_patch
	{
		
		/// <summary>
		/// The name of the alert service. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertServiceName { get; set; }
		
		/// <summary>
		/// Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServiceNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string AlertServiceNotes { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// Media objects that must be sent with each alert. Only applicable when you use your own email alert services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaObjects")]
		public string[] MediaObjects { get; set; }
		
		/// <summary>
		/// The email address where alerts will be sent.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientEmailAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientEmailAddress { get; set; }
		
		/// <summary>
		/// The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientPhoneNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAlerta")]
		public string TransportAlerta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAllMySms")]
		public string TransportAllMySms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAmazonSns")]
		public string TransportAmazonSns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportBandwidth")]
		public string TransportBandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportChatwork")]
		public string TransportChatwork { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickSend")]
		public string TransportClickSend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickatell")]
		public string TransportClickatell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportContactEveryone")]
		public string TransportContactEveryone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportDiscord")]
		public string TransportDiscord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEmail")]
		public string TransportEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEngagespot")]
		public string TransportEngagespot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEsendex")]
		public string TransportEsendex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportExpo")]
		public string TransportExpo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFirebase")]
		public string TransportFirebase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFortySixElks")]
		public string TransportFortySixElks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreeMobile")]
		public string TransportFreeMobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreshdesk")]
		public string TransportFreshdesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGatewayApi")]
		public string TransportGatewayApi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGitter")]
		public string TransportGitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGoogleChat")]
		public string TransportGoogleChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGotify")]
		public string TransportGotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportHelpScout")]
		public string TransportHelpScout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportInfobip")]
		public string TransportInfobip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportIqsms")]
		public string TransportIqsms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportKazInfoTeh")]
		public string TransportKazInfoTeh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLightSms")]
		public string TransportLightSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLineNotify")]
		public string TransportLineNotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLinkedIn")]
		public string TransportLinkedIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMailjet")]
		public string TransportMailjet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMastodon")]
		public string TransportMastodon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMattermost")]
		public string TransportMattermost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMercure")]
		public string TransportMercure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageBird")]
		public string TransportMessageBird { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageMedia")]
		public string TransportMessageMedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMicrosoftTeams")]
		public string TransportMicrosoftTeams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMobyt")]
		public string TransportMobyt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOctopush")]
		public string TransportOctopush { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOneSignal")]
		public string TransportOneSignal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOpsgenie")]
		public string TransportOpsgenie { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOrangeSms")]
		public string TransportOrangeSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOvhCloud")]
		public string TransportOvhCloud { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerDuty")]
		public string TransportPagerDuty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerTree")]
		public string TransportPagerTree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPlivo")]
		public string TransportPlivo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushbullet")]
		public string TransportPushbullet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushover")]
		public string TransportPushover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushy")]
		public string TransportPushy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRingCentral")]
		public string TransportRingCentral { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRocketChat")]
		public string TransportRocketChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendberry")]
		public string TransportSendberry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendinblue")]
		public string TransportSendinblue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSimpleTextin")]
		public string TransportSimpleTextin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSinch")]
		public string TransportSinch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSlack")]
		public string TransportSlack { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSms77")]
		public string TransportSms77 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsBiuras")]
		public string TransportSmsBiuras { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsFactor")]
		public string TransportSmsFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsapi")]
		public string TransportSmsapi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsc")]
		public string TransportSmsc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsmode")]
		public string TransportSmsmode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSpotHit")]
		public string TransportSpotHit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelegram")]
		public string TransportTelegram { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelnyx")]
		public string TransportTelnyx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTermii")]
		public string TransportTermii { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTrello")]
		public string TransportTrello { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTurboSms")]
		public string TransportTurboSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwilio")]
		public string TransportTwilio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwitter")]
		public string TransportTwitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportVonage")]
		public string TransportVonage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportWebhook")]
		public string TransportWebhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportYunpian")]
		public string TransportYunpian { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZendesk")]
		public string TransportZendesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZulip")]
		public string TransportZulip { get; set; }
	}
	
	/// <summary>
	/// The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertService_post
	{
		
		/// <summary>
		/// The name of the alert service. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertServiceName { get; set; }
		
		/// <summary>
		/// Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServiceNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string AlertServiceNotes { get; set; }
		
		/// <summary>
		/// The transport of the alert service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertServiceTransportCode")]
		public string AlertServiceTransportCode { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// Media objects that must be sent with each alert. Only applicable when you use your own email alert services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaObjects")]
		public string[] MediaObjects { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The email address where alerts will be sent.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientEmailAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientEmailAddress { get; set; }
		
		/// <summary>
		/// The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientPhoneNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAlerta")]
		public string TransportAlerta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAllMySms")]
		public string TransportAllMySms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAmazonSns")]
		public string TransportAmazonSns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportBandwidth")]
		public string TransportBandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportChatwork")]
		public string TransportChatwork { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickSend")]
		public string TransportClickSend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickatell")]
		public string TransportClickatell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportContactEveryone")]
		public string TransportContactEveryone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportDiscord")]
		public string TransportDiscord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEmail")]
		public string TransportEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEngagespot")]
		public string TransportEngagespot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEsendex")]
		public string TransportEsendex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportExpo")]
		public string TransportExpo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFirebase")]
		public string TransportFirebase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFortySixElks")]
		public string TransportFortySixElks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreeMobile")]
		public string TransportFreeMobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreshdesk")]
		public string TransportFreshdesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGatewayApi")]
		public string TransportGatewayApi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGitter")]
		public string TransportGitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGoogleChat")]
		public string TransportGoogleChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGotify")]
		public string TransportGotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportHelpScout")]
		public string TransportHelpScout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportInfobip")]
		public string TransportInfobip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportIqsms")]
		public string TransportIqsms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportKazInfoTeh")]
		public string TransportKazInfoTeh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLightSms")]
		public string TransportLightSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLineNotify")]
		public string TransportLineNotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLinkedIn")]
		public string TransportLinkedIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMailjet")]
		public string TransportMailjet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMastodon")]
		public string TransportMastodon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMattermost")]
		public string TransportMattermost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMercure")]
		public string TransportMercure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageBird")]
		public string TransportMessageBird { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageMedia")]
		public string TransportMessageMedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMicrosoftTeams")]
		public string TransportMicrosoftTeams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMobyt")]
		public string TransportMobyt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOctopush")]
		public string TransportOctopush { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOneSignal")]
		public string TransportOneSignal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOpsgenie")]
		public string TransportOpsgenie { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOrangeSms")]
		public string TransportOrangeSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOvhCloud")]
		public string TransportOvhCloud { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerDuty")]
		public string TransportPagerDuty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerTree")]
		public string TransportPagerTree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPlivo")]
		public string TransportPlivo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushbullet")]
		public string TransportPushbullet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushover")]
		public string TransportPushover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushy")]
		public string TransportPushy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRingCentral")]
		public string TransportRingCentral { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRocketChat")]
		public string TransportRocketChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendberry")]
		public string TransportSendberry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendinblue")]
		public string TransportSendinblue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSimpleTextin")]
		public string TransportSimpleTextin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSinch")]
		public string TransportSinch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSlack")]
		public string TransportSlack { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSms77")]
		public string TransportSms77 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsBiuras")]
		public string TransportSmsBiuras { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsFactor")]
		public string TransportSmsFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsapi")]
		public string TransportSmsapi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsc")]
		public string TransportSmsc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsmode")]
		public string TransportSmsmode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSpotHit")]
		public string TransportSpotHit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelegram")]
		public string TransportTelegram { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelnyx")]
		public string TransportTelnyx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTermii")]
		public string TransportTermii { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTrello")]
		public string TransportTrello { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTurboSms")]
		public string TransportTurboSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwilio")]
		public string TransportTwilio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwitter")]
		public string TransportTwitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportVonage")]
		public string TransportVonage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportWebhook")]
		public string TransportWebhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportYunpian")]
		public string TransportYunpian { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZendesk")]
		public string TransportZendesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZulip")]
		public string TransportZulip { get; set; }
	}
	
	/// <summary>
	/// The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertService_put
	{
		
		/// <summary>
		/// The name of the alert service. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertServiceName { get; set; }
		
		/// <summary>
		/// Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServiceNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string AlertServiceNotes { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// Media objects that must be sent with each alert. Only applicable when you use your own email alert services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaObjects")]
		public string[] MediaObjects { get; set; }
		
		/// <summary>
		/// The email address where alerts will be sent.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientEmailAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientEmailAddress { get; set; }
		
		/// <summary>
		/// The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientPhoneNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAlerta")]
		public string TransportAlerta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAllMySms")]
		public string TransportAllMySms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAmazonSns")]
		public string TransportAmazonSns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportBandwidth")]
		public string TransportBandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportChatwork")]
		public string TransportChatwork { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickSend")]
		public string TransportClickSend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickatell")]
		public string TransportClickatell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportContactEveryone")]
		public string TransportContactEveryone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportDiscord")]
		public string TransportDiscord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEmail")]
		public string TransportEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEngagespot")]
		public string TransportEngagespot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEsendex")]
		public string TransportEsendex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportExpo")]
		public string TransportExpo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFirebase")]
		public string TransportFirebase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFortySixElks")]
		public string TransportFortySixElks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreeMobile")]
		public string TransportFreeMobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreshdesk")]
		public string TransportFreshdesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGatewayApi")]
		public string TransportGatewayApi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGitter")]
		public string TransportGitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGoogleChat")]
		public string TransportGoogleChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGotify")]
		public string TransportGotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportHelpScout")]
		public string TransportHelpScout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportInfobip")]
		public string TransportInfobip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportIqsms")]
		public string TransportIqsms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportKazInfoTeh")]
		public string TransportKazInfoTeh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLightSms")]
		public string TransportLightSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLineNotify")]
		public string TransportLineNotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLinkedIn")]
		public string TransportLinkedIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMailjet")]
		public string TransportMailjet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMastodon")]
		public string TransportMastodon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMattermost")]
		public string TransportMattermost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMercure")]
		public string TransportMercure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageBird")]
		public string TransportMessageBird { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageMedia")]
		public string TransportMessageMedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMicrosoftTeams")]
		public string TransportMicrosoftTeams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMobyt")]
		public string TransportMobyt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOctopush")]
		public string TransportOctopush { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOneSignal")]
		public string TransportOneSignal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOpsgenie")]
		public string TransportOpsgenie { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOrangeSms")]
		public string TransportOrangeSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOvhCloud")]
		public string TransportOvhCloud { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerDuty")]
		public string TransportPagerDuty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerTree")]
		public string TransportPagerTree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPlivo")]
		public string TransportPlivo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushbullet")]
		public string TransportPushbullet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushover")]
		public string TransportPushover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushy")]
		public string TransportPushy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRingCentral")]
		public string TransportRingCentral { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRocketChat")]
		public string TransportRocketChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendberry")]
		public string TransportSendberry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendinblue")]
		public string TransportSendinblue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSimpleTextin")]
		public string TransportSimpleTextin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSinch")]
		public string TransportSinch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSlack")]
		public string TransportSlack { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSms77")]
		public string TransportSms77 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsBiuras")]
		public string TransportSmsBiuras { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsFactor")]
		public string TransportSmsFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsapi")]
		public string TransportSmsapi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsc")]
		public string TransportSmsc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsmode")]
		public string TransportSmsmode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSpotHit")]
		public string TransportSpotHit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelegram")]
		public string TransportTelegram { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelnyx")]
		public string TransportTelnyx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTermii")]
		public string TransportTermii { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTrello")]
		public string TransportTrello { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTurboSms")]
		public string TransportTurboSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwilio")]
		public string TransportTwilio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwitter")]
		public string TransportTwitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportVonage")]
		public string TransportVonage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportWebhook")]
		public string TransportWebhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportYunpian")]
		public string TransportYunpian { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZendesk")]
		public string TransportZendesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZulip")]
		public string TransportZulip { get; set; }
	}
	
	/// <summary>
	/// The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertServicejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The name of the alert service. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertServiceName { get; set; }
		
		/// <summary>
		/// Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServiceNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string AlertServiceNotes { get; set; }
		
		/// <summary>
		/// The transport of the alert service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertServiceTransportCode")]
		public string AlertServiceTransportCode { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsPerTransportAlert")]
		public System.Nullable<System.Int32> CreditsPerTransportAlert { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Media objects that must be sent with each alert. Only applicable when you use your own email alert services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaObjects")]
		public string[] MediaObjects { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The email address where alerts will be sent.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientEmailAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientEmailAddress { get; set; }
		
		/// <summary>
		/// The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientPhoneNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientPhoneNumber { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAlerta")]
		public string TransportAlerta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAllMySms")]
		public string TransportAllMySms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAmazonSns")]
		public string TransportAmazonSns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportBandwidth")]
		public string TransportBandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportChatwork")]
		public string TransportChatwork { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickSend")]
		public string TransportClickSend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickatell")]
		public string TransportClickatell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportContactEveryone")]
		public string TransportContactEveryone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportDiscord")]
		public string TransportDiscord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEmail")]
		public string TransportEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEngagespot")]
		public string TransportEngagespot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEsendex")]
		public string TransportEsendex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportExpo")]
		public string TransportExpo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFirebase")]
		public string TransportFirebase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFortySixElks")]
		public string TransportFortySixElks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreeMobile")]
		public string TransportFreeMobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreshdesk")]
		public string TransportFreshdesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGatewayApi")]
		public string TransportGatewayApi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGitter")]
		public string TransportGitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGoogleChat")]
		public string TransportGoogleChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGotify")]
		public string TransportGotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportHelpScout")]
		public string TransportHelpScout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportInfobip")]
		public string TransportInfobip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportIqsms")]
		public string TransportIqsms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportKazInfoTeh")]
		public string TransportKazInfoTeh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLightSms")]
		public string TransportLightSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLineNotify")]
		public string TransportLineNotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLinkedIn")]
		public string TransportLinkedIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMailjet")]
		public string TransportMailjet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMastodon")]
		public string TransportMastodon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMattermost")]
		public string TransportMattermost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMercure")]
		public string TransportMercure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageBird")]
		public string TransportMessageBird { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageMedia")]
		public string TransportMessageMedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMicrosoftTeams")]
		public string TransportMicrosoftTeams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMobyt")]
		public string TransportMobyt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOctopush")]
		public string TransportOctopush { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOneSignal")]
		public string TransportOneSignal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOpsgenie")]
		public string TransportOpsgenie { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOrangeSms")]
		public string TransportOrangeSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOvhCloud")]
		public string TransportOvhCloud { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerDuty")]
		public string TransportPagerDuty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerTree")]
		public string TransportPagerTree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPlivo")]
		public string TransportPlivo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushbullet")]
		public string TransportPushbullet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushover")]
		public string TransportPushover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushy")]
		public string TransportPushy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRingCentral")]
		public string TransportRingCentral { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRocketChat")]
		public string TransportRocketChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendberry")]
		public string TransportSendberry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendinblue")]
		public string TransportSendinblue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSimpleTextin")]
		public string TransportSimpleTextin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSinch")]
		public string TransportSinch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSlack")]
		public string TransportSlack { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSms77")]
		public string TransportSms77 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsBiuras")]
		public string TransportSmsBiuras { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsFactor")]
		public string TransportSmsFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsapi")]
		public string TransportSmsapi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsc")]
		public string TransportSmsc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsmode")]
		public string TransportSmsmode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSpotHit")]
		public string TransportSpotHit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelegram")]
		public string TransportTelegram { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelnyx")]
		public string TransportTelnyx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTermii")]
		public string TransportTermii { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTrello")]
		public string TransportTrello { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTurboSms")]
		public string TransportTurboSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwilio")]
		public string TransportTwilio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwitter")]
		public string TransportTwitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportVonage")]
		public string TransportVonage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportWebhook")]
		public string TransportWebhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportYunpian")]
		public string TransportYunpian { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZendesk")]
		public string TransportZendesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZulip")]
		public string TransportZulip { get; set; }
	}
	
	/// <summary>
	/// The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertServicejsonld_post
	{
		
		/// <summary>
		/// The name of the alert service. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertServiceName { get; set; }
		
		/// <summary>
		/// Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServiceNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string AlertServiceNotes { get; set; }
		
		/// <summary>
		/// The transport of the alert service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertServiceTransportCode")]
		public string AlertServiceTransportCode { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// Media objects that must be sent with each alert. Only applicable when you use your own email alert services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaObjects")]
		public string[] MediaObjects { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The email address where alerts will be sent.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientEmailAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientEmailAddress { get; set; }
		
		/// <summary>
		/// The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientPhoneNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAlerta")]
		public string TransportAlerta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAllMySms")]
		public string TransportAllMySms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAmazonSns")]
		public string TransportAmazonSns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportBandwidth")]
		public string TransportBandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportChatwork")]
		public string TransportChatwork { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickSend")]
		public string TransportClickSend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickatell")]
		public string TransportClickatell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportContactEveryone")]
		public string TransportContactEveryone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportDiscord")]
		public string TransportDiscord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEmail")]
		public string TransportEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEngagespot")]
		public string TransportEngagespot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEsendex")]
		public string TransportEsendex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportExpo")]
		public string TransportExpo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFirebase")]
		public string TransportFirebase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFortySixElks")]
		public string TransportFortySixElks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreeMobile")]
		public string TransportFreeMobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreshdesk")]
		public string TransportFreshdesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGatewayApi")]
		public string TransportGatewayApi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGitter")]
		public string TransportGitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGoogleChat")]
		public string TransportGoogleChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGotify")]
		public string TransportGotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportHelpScout")]
		public string TransportHelpScout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportInfobip")]
		public string TransportInfobip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportIqsms")]
		public string TransportIqsms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportKazInfoTeh")]
		public string TransportKazInfoTeh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLightSms")]
		public string TransportLightSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLineNotify")]
		public string TransportLineNotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLinkedIn")]
		public string TransportLinkedIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMailjet")]
		public string TransportMailjet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMastodon")]
		public string TransportMastodon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMattermost")]
		public string TransportMattermost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMercure")]
		public string TransportMercure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageBird")]
		public string TransportMessageBird { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageMedia")]
		public string TransportMessageMedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMicrosoftTeams")]
		public string TransportMicrosoftTeams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMobyt")]
		public string TransportMobyt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOctopush")]
		public string TransportOctopush { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOneSignal")]
		public string TransportOneSignal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOpsgenie")]
		public string TransportOpsgenie { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOrangeSms")]
		public string TransportOrangeSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOvhCloud")]
		public string TransportOvhCloud { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerDuty")]
		public string TransportPagerDuty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerTree")]
		public string TransportPagerTree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPlivo")]
		public string TransportPlivo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushbullet")]
		public string TransportPushbullet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushover")]
		public string TransportPushover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushy")]
		public string TransportPushy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRingCentral")]
		public string TransportRingCentral { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRocketChat")]
		public string TransportRocketChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendberry")]
		public string TransportSendberry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendinblue")]
		public string TransportSendinblue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSimpleTextin")]
		public string TransportSimpleTextin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSinch")]
		public string TransportSinch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSlack")]
		public string TransportSlack { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSms77")]
		public string TransportSms77 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsBiuras")]
		public string TransportSmsBiuras { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsFactor")]
		public string TransportSmsFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsapi")]
		public string TransportSmsapi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsc")]
		public string TransportSmsc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsmode")]
		public string TransportSmsmode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSpotHit")]
		public string TransportSpotHit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelegram")]
		public string TransportTelegram { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelnyx")]
		public string TransportTelnyx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTermii")]
		public string TransportTermii { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTrello")]
		public string TransportTrello { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTurboSms")]
		public string TransportTurboSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwilio")]
		public string TransportTwilio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwitter")]
		public string TransportTwitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportVonage")]
		public string TransportVonage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportWebhook")]
		public string TransportWebhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportYunpian")]
		public string TransportYunpian { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZendesk")]
		public string TransportZendesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZulip")]
		public string TransportZulip { get; set; }
	}
	
	/// <summary>
	/// The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertServicejsonld_put
	{
		
		/// <summary>
		/// The name of the alert service. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertServiceName { get; set; }
		
		/// <summary>
		/// Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServiceNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string AlertServiceNotes { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// Media objects that must be sent with each alert. Only applicable when you use your own email alert services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaObjects")]
		public string[] MediaObjects { get; set; }
		
		/// <summary>
		/// The email address where alerts will be sent.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientEmailAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientEmailAddress { get; set; }
		
		/// <summary>
		/// The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipientPhoneNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipientPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAlerta")]
		public string TransportAlerta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAllMySms")]
		public string TransportAllMySms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportAmazonSns")]
		public string TransportAmazonSns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportBandwidth")]
		public string TransportBandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportChatwork")]
		public string TransportChatwork { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickSend")]
		public string TransportClickSend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportClickatell")]
		public string TransportClickatell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportContactEveryone")]
		public string TransportContactEveryone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportDiscord")]
		public string TransportDiscord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEmail")]
		public string TransportEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEngagespot")]
		public string TransportEngagespot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportEsendex")]
		public string TransportEsendex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportExpo")]
		public string TransportExpo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFirebase")]
		public string TransportFirebase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFortySixElks")]
		public string TransportFortySixElks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreeMobile")]
		public string TransportFreeMobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportFreshdesk")]
		public string TransportFreshdesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGatewayApi")]
		public string TransportGatewayApi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGitter")]
		public string TransportGitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGoogleChat")]
		public string TransportGoogleChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportGotify")]
		public string TransportGotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportHelpScout")]
		public string TransportHelpScout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportInfobip")]
		public string TransportInfobip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportIqsms")]
		public string TransportIqsms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportKazInfoTeh")]
		public string TransportKazInfoTeh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLightSms")]
		public string TransportLightSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLineNotify")]
		public string TransportLineNotify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportLinkedIn")]
		public string TransportLinkedIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMailjet")]
		public string TransportMailjet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMastodon")]
		public string TransportMastodon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMattermost")]
		public string TransportMattermost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMercure")]
		public string TransportMercure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageBird")]
		public string TransportMessageBird { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMessageMedia")]
		public string TransportMessageMedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMicrosoftTeams")]
		public string TransportMicrosoftTeams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportMobyt")]
		public string TransportMobyt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOctopush")]
		public string TransportOctopush { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOneSignal")]
		public string TransportOneSignal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOpsgenie")]
		public string TransportOpsgenie { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOrangeSms")]
		public string TransportOrangeSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportOvhCloud")]
		public string TransportOvhCloud { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerDuty")]
		public string TransportPagerDuty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPagerTree")]
		public string TransportPagerTree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPlivo")]
		public string TransportPlivo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushbullet")]
		public string TransportPushbullet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushover")]
		public string TransportPushover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportPushy")]
		public string TransportPushy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRingCentral")]
		public string TransportRingCentral { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportRocketChat")]
		public string TransportRocketChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendberry")]
		public string TransportSendberry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSendinblue")]
		public string TransportSendinblue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSimpleTextin")]
		public string TransportSimpleTextin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSinch")]
		public string TransportSinch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSlack")]
		public string TransportSlack { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSms77")]
		public string TransportSms77 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsBiuras")]
		public string TransportSmsBiuras { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsFactor")]
		public string TransportSmsFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsapi")]
		public string TransportSmsapi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsc")]
		public string TransportSmsc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSmsmode")]
		public string TransportSmsmode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportSpotHit")]
		public string TransportSpotHit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelegram")]
		public string TransportTelegram { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTelnyx")]
		public string TransportTelnyx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTermii")]
		public string TransportTermii { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTrello")]
		public string TransportTrello { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTurboSms")]
		public string TransportTurboSms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwilio")]
		public string TransportTwilio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportTwitter")]
		public string TransportTwitter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportVonage")]
		public string TransportVonage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportWebhook")]
		public string TransportWebhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportYunpian")]
		public string TransportYunpian { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZendesk")]
		public string TransportZendesk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transportZulip")]
		public string TransportZulip { get; set; }
	}
	
	/// <summary>
	/// The AlertServiceTransportCode resource is a set of codes that describes the type of transport that is used by an alert service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertServiceTransportCode_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="codeName")]
		public string CodeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The AlertServiceTransportCode resource is a set of codes that describes the type of transport that is used by an alert service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlertServiceTransportCodejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeName")]
		public string CodeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The CreditsConsumption resource is a chronological record of all the credits that have been consumed, including the reason for the consumption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreditsConsumption_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The type of event that consumed the credits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsConsumptionEventCode")]
		public string CreditsConsumptionEventCode { get; set; }
		
		/// <summary>
		/// Notes that add additional information to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsConsumptionNotes")]
		public string CreditsConsumptionNotes { get; set; }
		
		/// <summary>
		/// The ID of the event (Ping resource or AlertLog resource) that consumed the credits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsEventId")]
		public string CreditsEventId { get; set; }
		
		/// <summary>
		/// The IRI of the event that is related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsEventIri")]
		public string CreditsEventIri { get; set; }
		
		/// <summary>
		/// The number of credits that were consumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsUsed")]
		public string CreditsUsed { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The CreditsConsumption resource is a chronological record of all the credits that have been consumed, including the reason for the consumption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreditsConsumptionjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The type of event that consumed the credits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsConsumptionEventCode")]
		public string CreditsConsumptionEventCode { get; set; }
		
		/// <summary>
		/// Notes that add additional information to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsConsumptionNotes")]
		public string CreditsConsumptionNotes { get; set; }
		
		/// <summary>
		/// The ID of the event (Ping resource or AlertLog resource) that consumed the credits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsEventId")]
		public string CreditsEventId { get; set; }
		
		/// <summary>
		/// The IRI of the event that is related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsEventIri")]
		public string CreditsEventIri { get; set; }
		
		/// <summary>
		/// The number of credits that were consumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsUsed")]
		public string CreditsUsed { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The HttpMethodCode resource is a set of codes that describes the possible methods that can used used when making an HTTP request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpMethodCode_get
	{
		
		/// <summary>
		/// The name of the code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeName")]
		public string CodeName { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The HttpMethodCode resource is a set of codes that describes the possible methods that can used used when making an HTTP request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpMethodCodejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The name of the code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeName")]
		public string CodeName { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The MediaObject resource is a collection of media objects that can be attached to alerts that are dispatched via an email transport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediaObject_get
	{
		
		/// <summary>
		/// Where the media file can be accessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUrl")]
		public string ContentUrl { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The size of the media file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSize")]
		public System.Nullable<System.Int32> FileSize { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A string of keywords that can be used to search for a resource. Max 100 characters.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Keywords { get; set; }
		
		/// <summary>
		/// The mime type of the media file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The original name of the media file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalName")]
		public string OriginalName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
	}
	
	/// <summary>
	/// The MediaObject resource is a collection of media objects that can be attached to alerts that are dispatched via an email transport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediaObjectjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// Where the media file can be accessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUrl")]
		public string ContentUrl { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The size of the media file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSize")]
		public System.Nullable<System.Int32> FileSize { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A string of keywords that can be used to search for a resource. Max 100 characters.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Keywords { get; set; }
		
		/// <summary>
		/// The mime type of the media file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The original name of the media file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalName")]
		public string OriginalName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
	}
	
	/// <summary>
	/// The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Monitor_get
	{
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		/// Max length: 2100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadExtended")]
		[System.ComponentModel.DataAnnotations.MaxLength(2100000)]
		public string AlertPayloadExtended { get; set; }
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadShort")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AlertPayloadShort { get; set; }
		
		/// <summary>
		/// The alert services that are related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServices")]
		public string[] AlertServices { get; set; }
		
		/// <summary>
		/// Indicates that the monitor will accept pings that are not OAuth authenticated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowUnauthenticatedPings")]
		public System.Nullable<System.Boolean> AllowUnauthenticatedPings { get; set; }
		
		/// <summary>
		/// Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckMustNotExist")]
		public System.Nullable<System.Boolean> ContentCheckMustNotExist { get; set; }
		
		/// <summary>
		/// The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckText")]
		public string ContentCheckText { get; set; }
		
		/// <summary>
		/// The URL that the Web Content monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckUrl")]
		public string ContentCheckUrl { get; set; }
		
		/// <summary>
		/// The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckXpathFilter")]
		public string ContentCheckXpathFilter { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graceSeconds")]
		public System.Nullable<System.Int32> GraceSeconds { get; set; }
		
		/// <summary>
		/// The expected ping / run interval of this monitor in human readable form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="humanizedInterval")]
		public string HumanizedInterval { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The internal name of the monitor. This name is used in alerts when you use the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. The monitorName field is used when you use your own alert services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalMonitorName")]
		public string InternalMonitorName { get; set; }
		
		/// <summary>
		/// The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalDays")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalDays { get; set; }
		
		/// <summary>
		/// The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalHours")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalHours { get; set; }
		
		/// <summary>
		/// The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMinutes { get; set; }
		
		/// <summary>
		/// The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMonths")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMonths { get; set; }
		
		/// <summary>
		/// The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalSeconds { get; set; }
		
		/// <summary>
		/// The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalYears")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalYears { get; set; }
		
		/// <summary>
		/// Indicates that the monitor is paused and will not send alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMonitorPaused")]
		public System.Nullable<System.Boolean> IsMonitorPaused { get; set; }
		
		/// <summary>
		/// When the last ping was received. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPingAt")]
		public System.Nullable<System.DateTimeOffset> LastPingAt { get; set; }
		
		/// <summary>
		/// The name of the monitor. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitorName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MonitorName { get; set; }
		
		/// <summary>
		/// Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string MonitorNotes { get; set; }
		
		/// <summary>
		/// The status of the monitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorStatusCode")]
		public string MonitorStatusCode { get; set; }
		
		/// <summary>
		/// The type of the monitor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitorTypeCode")]
		public string MonitorTypeCode { get; set; }
		
		/// <summary>
		/// When the next ping is expected. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPingAt")]
		public System.Nullable<System.DateTimeOffset> NextPingAt { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// A secret key that can be sent in the X_PING_SECRET HTTP request header of a ping for additional security. Sending the secret is recommended for unauthenticated ping requests. It is redundant for OAuth authenticated ping requests that have the "Authorization: Bearer" header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingSecret")]
		public string PingSecret { get; set; }
		
		/// <summary>
		/// A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PublicDescription { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMonitorAt")]
		public System.Nullable<System.DateTimeOffset> StartMonitorAt { get; set; }
		
		/// <summary>
		/// The startMonitorAt date-time in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMonitorAtUtc")]
		public System.Nullable<System.DateTimeOffset> StartMonitorAtUtc { get; set; }
		
		/// <summary>
		/// Service notes regarding the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemMessages")]
		public string[] SystemMessages { get; set; }
		
		/// <summary>
		/// The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timezoneCode")]
		public string TimezoneCode { get; set; }
		
		/// <summary>
		/// The time in seconds that the Web Response monitor type must allow for the web page to respond.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseSecondsLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> WebResponseSecondsLimit { get; set; }
		
		/// <summary>
		/// The URL that the Web Response monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseUrl")]
		public string WebResponseUrl { get; set; }
	}
	
	/// <summary>
	/// The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Monitor_patch
	{
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		/// Max length: 2100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadExtended")]
		[System.ComponentModel.DataAnnotations.MaxLength(2100000)]
		public string AlertPayloadExtended { get; set; }
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadShort")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AlertPayloadShort { get; set; }
		
		/// <summary>
		/// The alert services that are related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServices")]
		public string[] AlertServices { get; set; }
		
		/// <summary>
		/// Indicates that the monitor will accept pings that are not OAuth authenticated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowUnauthenticatedPings")]
		public System.Nullable<System.Boolean> AllowUnauthenticatedPings { get; set; }
		
		/// <summary>
		/// Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckMustNotExist")]
		public System.Nullable<System.Boolean> ContentCheckMustNotExist { get; set; }
		
		/// <summary>
		/// The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckText")]
		public string ContentCheckText { get; set; }
		
		/// <summary>
		/// The URL that the Web Content monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckUrl")]
		public string ContentCheckUrl { get; set; }
		
		/// <summary>
		/// The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckXpathFilter")]
		public string ContentCheckXpathFilter { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graceSeconds")]
		public System.Nullable<System.Int32> GraceSeconds { get; set; }
		
		/// <summary>
		/// The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalDays")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalDays { get; set; }
		
		/// <summary>
		/// The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalHours")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalHours { get; set; }
		
		/// <summary>
		/// The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMinutes { get; set; }
		
		/// <summary>
		/// The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMonths")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMonths { get; set; }
		
		/// <summary>
		/// The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalSeconds { get; set; }
		
		/// <summary>
		/// The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalYears")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalYears { get; set; }
		
		/// <summary>
		/// Indicates that the monitor is paused and will not send alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMonitorPaused")]
		public System.Nullable<System.Boolean> IsMonitorPaused { get; set; }
		
		/// <summary>
		/// The name of the monitor. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitorName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MonitorName { get; set; }
		
		/// <summary>
		/// Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string MonitorNotes { get; set; }
		
		/// <summary>
		/// A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PublicDescription { get; set; }
		
		/// <summary>
		/// When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMonitorAt")]
		public System.Nullable<System.DateTimeOffset> StartMonitorAt { get; set; }
		
		/// <summary>
		/// The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timezoneCode")]
		public string TimezoneCode { get; set; }
		
		/// <summary>
		/// The time in seconds that the Web Response monitor type must allow for the web page to respond.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseSecondsLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> WebResponseSecondsLimit { get; set; }
		
		/// <summary>
		/// The URL that the Web Response monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseUrl")]
		public string WebResponseUrl { get; set; }
	}
	
	/// <summary>
	/// The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Monitor_post
	{
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		/// Max length: 2100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadExtended")]
		[System.ComponentModel.DataAnnotations.MaxLength(2100000)]
		public string AlertPayloadExtended { get; set; }
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadShort")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AlertPayloadShort { get; set; }
		
		/// <summary>
		/// The alert services that are related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServices")]
		public string[] AlertServices { get; set; }
		
		/// <summary>
		/// Indicates that the monitor will accept pings that are not OAuth authenticated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowUnauthenticatedPings")]
		public System.Nullable<System.Boolean> AllowUnauthenticatedPings { get; set; }
		
		/// <summary>
		/// Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckMustNotExist")]
		public System.Nullable<System.Boolean> ContentCheckMustNotExist { get; set; }
		
		/// <summary>
		/// The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckText")]
		public string ContentCheckText { get; set; }
		
		/// <summary>
		/// The URL that the Web Content monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckUrl")]
		public string ContentCheckUrl { get; set; }
		
		/// <summary>
		/// The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckXpathFilter")]
		public string ContentCheckXpathFilter { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graceSeconds")]
		public System.Nullable<System.Int32> GraceSeconds { get; set; }
		
		/// <summary>
		/// The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalDays")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalDays { get; set; }
		
		/// <summary>
		/// The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalHours")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalHours { get; set; }
		
		/// <summary>
		/// The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMinutes { get; set; }
		
		/// <summary>
		/// The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMonths")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMonths { get; set; }
		
		/// <summary>
		/// The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalSeconds { get; set; }
		
		/// <summary>
		/// The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalYears")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalYears { get; set; }
		
		/// <summary>
		/// Indicates that the monitor is paused and will not send alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMonitorPaused")]
		public System.Nullable<System.Boolean> IsMonitorPaused { get; set; }
		
		/// <summary>
		/// The name of the monitor. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitorName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MonitorName { get; set; }
		
		/// <summary>
		/// Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string MonitorNotes { get; set; }
		
		/// <summary>
		/// The type of the monitor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitorTypeCode")]
		public string MonitorTypeCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PublicDescription { get; set; }
		
		/// <summary>
		/// When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMonitorAt")]
		public System.Nullable<System.DateTimeOffset> StartMonitorAt { get; set; }
		
		/// <summary>
		/// The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timezoneCode")]
		public string TimezoneCode { get; set; }
		
		/// <summary>
		/// The time in seconds that the Web Response monitor type must allow for the web page to respond.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseSecondsLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> WebResponseSecondsLimit { get; set; }
		
		/// <summary>
		/// The URL that the Web Response monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseUrl")]
		public string WebResponseUrl { get; set; }
	}
	
	/// <summary>
	/// The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Monitor_put
	{
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		/// Max length: 2100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadExtended")]
		[System.ComponentModel.DataAnnotations.MaxLength(2100000)]
		public string AlertPayloadExtended { get; set; }
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadShort")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AlertPayloadShort { get; set; }
		
		/// <summary>
		/// The alert services that are related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServices")]
		public string[] AlertServices { get; set; }
		
		/// <summary>
		/// Indicates that the monitor will accept pings that are not OAuth authenticated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowUnauthenticatedPings")]
		public System.Nullable<System.Boolean> AllowUnauthenticatedPings { get; set; }
		
		/// <summary>
		/// Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckMustNotExist")]
		public System.Nullable<System.Boolean> ContentCheckMustNotExist { get; set; }
		
		/// <summary>
		/// The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckText")]
		public string ContentCheckText { get; set; }
		
		/// <summary>
		/// The URL that the Web Content monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckUrl")]
		public string ContentCheckUrl { get; set; }
		
		/// <summary>
		/// The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckXpathFilter")]
		public string ContentCheckXpathFilter { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graceSeconds")]
		public System.Nullable<System.Int32> GraceSeconds { get; set; }
		
		/// <summary>
		/// The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalDays")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalDays { get; set; }
		
		/// <summary>
		/// The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalHours")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalHours { get; set; }
		
		/// <summary>
		/// The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMinutes { get; set; }
		
		/// <summary>
		/// The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMonths")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMonths { get; set; }
		
		/// <summary>
		/// The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalSeconds { get; set; }
		
		/// <summary>
		/// The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalYears")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalYears { get; set; }
		
		/// <summary>
		/// Indicates that the monitor is paused and will not send alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMonitorPaused")]
		public System.Nullable<System.Boolean> IsMonitorPaused { get; set; }
		
		/// <summary>
		/// The name of the monitor. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitorName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MonitorName { get; set; }
		
		/// <summary>
		/// Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string MonitorNotes { get; set; }
		
		/// <summary>
		/// A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PublicDescription { get; set; }
		
		/// <summary>
		/// When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMonitorAt")]
		public System.Nullable<System.DateTimeOffset> StartMonitorAt { get; set; }
		
		/// <summary>
		/// The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timezoneCode")]
		public string TimezoneCode { get; set; }
		
		/// <summary>
		/// The time in seconds that the Web Response monitor type must allow for the web page to respond.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseSecondsLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> WebResponseSecondsLimit { get; set; }
		
		/// <summary>
		/// The URL that the Web Response monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseUrl")]
		public string WebResponseUrl { get; set; }
	}
	
	/// <summary>
	/// The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Monitorjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		/// Max length: 2100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadExtended")]
		[System.ComponentModel.DataAnnotations.MaxLength(2100000)]
		public string AlertPayloadExtended { get; set; }
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadShort")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AlertPayloadShort { get; set; }
		
		/// <summary>
		/// The alert services that are related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServices")]
		public string[] AlertServices { get; set; }
		
		/// <summary>
		/// Indicates that the monitor will accept pings that are not OAuth authenticated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowUnauthenticatedPings")]
		public System.Nullable<System.Boolean> AllowUnauthenticatedPings { get; set; }
		
		/// <summary>
		/// Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckMustNotExist")]
		public System.Nullable<System.Boolean> ContentCheckMustNotExist { get; set; }
		
		/// <summary>
		/// The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckText")]
		public string ContentCheckText { get; set; }
		
		/// <summary>
		/// The URL that the Web Content monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckUrl")]
		public string ContentCheckUrl { get; set; }
		
		/// <summary>
		/// The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckXpathFilter")]
		public string ContentCheckXpathFilter { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graceSeconds")]
		public System.Nullable<System.Int32> GraceSeconds { get; set; }
		
		/// <summary>
		/// The expected ping / run interval of this monitor in human readable form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="humanizedInterval")]
		public string HumanizedInterval { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The internal name of the monitor. This name is used in alerts when you use the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. The monitorName field is used when you use your own alert services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalMonitorName")]
		public string InternalMonitorName { get; set; }
		
		/// <summary>
		/// The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalDays")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalDays { get; set; }
		
		/// <summary>
		/// The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalHours")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalHours { get; set; }
		
		/// <summary>
		/// The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMinutes { get; set; }
		
		/// <summary>
		/// The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMonths")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMonths { get; set; }
		
		/// <summary>
		/// The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalSeconds { get; set; }
		
		/// <summary>
		/// The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalYears")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalYears { get; set; }
		
		/// <summary>
		/// Indicates that the monitor is paused and will not send alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMonitorPaused")]
		public System.Nullable<System.Boolean> IsMonitorPaused { get; set; }
		
		/// <summary>
		/// When the last ping was received. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPingAt")]
		public System.Nullable<System.DateTimeOffset> LastPingAt { get; set; }
		
		/// <summary>
		/// The name of the monitor. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitorName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MonitorName { get; set; }
		
		/// <summary>
		/// Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string MonitorNotes { get; set; }
		
		/// <summary>
		/// The status of the monitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorStatusCode")]
		public string MonitorStatusCode { get; set; }
		
		/// <summary>
		/// The type of the monitor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitorTypeCode")]
		public string MonitorTypeCode { get; set; }
		
		/// <summary>
		/// When the next ping is expected. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPingAt")]
		public System.Nullable<System.DateTimeOffset> NextPingAt { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// A secret key that can be sent in the X_PING_SECRET HTTP request header of a ping for additional security. Sending the secret is recommended for unauthenticated ping requests. It is redundant for OAuth authenticated ping requests that have the "Authorization: Bearer" header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingSecret")]
		public string PingSecret { get; set; }
		
		/// <summary>
		/// A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PublicDescription { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMonitorAt")]
		public System.Nullable<System.DateTimeOffset> StartMonitorAt { get; set; }
		
		/// <summary>
		/// The startMonitorAt date-time in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMonitorAtUtc")]
		public System.Nullable<System.DateTimeOffset> StartMonitorAtUtc { get; set; }
		
		/// <summary>
		/// Service notes regarding the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemMessages")]
		public string[] SystemMessages { get; set; }
		
		/// <summary>
		/// The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timezoneCode")]
		public string TimezoneCode { get; set; }
		
		/// <summary>
		/// The time in seconds that the Web Response monitor type must allow for the web page to respond.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseSecondsLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> WebResponseSecondsLimit { get; set; }
		
		/// <summary>
		/// The URL that the Web Response monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseUrl")]
		public string WebResponseUrl { get; set; }
	}
	
	/// <summary>
	/// The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Monitorjsonld_post
	{
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		/// Max length: 2100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadExtended")]
		[System.ComponentModel.DataAnnotations.MaxLength(2100000)]
		public string AlertPayloadExtended { get; set; }
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadShort")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AlertPayloadShort { get; set; }
		
		/// <summary>
		/// The alert services that are related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServices")]
		public string[] AlertServices { get; set; }
		
		/// <summary>
		/// Indicates that the monitor will accept pings that are not OAuth authenticated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowUnauthenticatedPings")]
		public System.Nullable<System.Boolean> AllowUnauthenticatedPings { get; set; }
		
		/// <summary>
		/// Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckMustNotExist")]
		public System.Nullable<System.Boolean> ContentCheckMustNotExist { get; set; }
		
		/// <summary>
		/// The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckText")]
		public string ContentCheckText { get; set; }
		
		/// <summary>
		/// The URL that the Web Content monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckUrl")]
		public string ContentCheckUrl { get; set; }
		
		/// <summary>
		/// The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckXpathFilter")]
		public string ContentCheckXpathFilter { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graceSeconds")]
		public System.Nullable<System.Int32> GraceSeconds { get; set; }
		
		/// <summary>
		/// The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalDays")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalDays { get; set; }
		
		/// <summary>
		/// The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalHours")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalHours { get; set; }
		
		/// <summary>
		/// The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMinutes { get; set; }
		
		/// <summary>
		/// The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMonths")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMonths { get; set; }
		
		/// <summary>
		/// The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalSeconds { get; set; }
		
		/// <summary>
		/// The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalYears")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalYears { get; set; }
		
		/// <summary>
		/// Indicates that the monitor is paused and will not send alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMonitorPaused")]
		public System.Nullable<System.Boolean> IsMonitorPaused { get; set; }
		
		/// <summary>
		/// The name of the monitor. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitorName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MonitorName { get; set; }
		
		/// <summary>
		/// Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string MonitorNotes { get; set; }
		
		/// <summary>
		/// The type of the monitor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitorTypeCode")]
		public string MonitorTypeCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PublicDescription { get; set; }
		
		/// <summary>
		/// When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMonitorAt")]
		public System.Nullable<System.DateTimeOffset> StartMonitorAt { get; set; }
		
		/// <summary>
		/// The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timezoneCode")]
		public string TimezoneCode { get; set; }
		
		/// <summary>
		/// The time in seconds that the Web Response monitor type must allow for the web page to respond.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseSecondsLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> WebResponseSecondsLimit { get; set; }
		
		/// <summary>
		/// The URL that the Web Response monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseUrl")]
		public string WebResponseUrl { get; set; }
	}
	
	/// <summary>
	/// The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Monitorjsonld_put
	{
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		/// Max length: 2100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadExtended")]
		[System.ComponentModel.DataAnnotations.MaxLength(2100000)]
		public string AlertPayloadExtended { get; set; }
		
		/// <summary>
		/// Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertPayloadShort")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AlertPayloadShort { get; set; }
		
		/// <summary>
		/// The alert services that are related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServices")]
		public string[] AlertServices { get; set; }
		
		/// <summary>
		/// Indicates that the monitor will accept pings that are not OAuth authenticated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowUnauthenticatedPings")]
		public System.Nullable<System.Boolean> AllowUnauthenticatedPings { get; set; }
		
		/// <summary>
		/// Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckMustNotExist")]
		public System.Nullable<System.Boolean> ContentCheckMustNotExist { get; set; }
		
		/// <summary>
		/// The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckText")]
		public string ContentCheckText { get; set; }
		
		/// <summary>
		/// The URL that the Web Content monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckUrl")]
		public string ContentCheckUrl { get; set; }
		
		/// <summary>
		/// The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCheckXpathFilter")]
		public string ContentCheckXpathFilter { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graceSeconds")]
		public System.Nullable<System.Int32> GraceSeconds { get; set; }
		
		/// <summary>
		/// The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalDays")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalDays { get; set; }
		
		/// <summary>
		/// The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalHours")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalHours { get; set; }
		
		/// <summary>
		/// The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMinutes { get; set; }
		
		/// <summary>
		/// The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalMonths")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalMonths { get; set; }
		
		/// <summary>
		/// The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalSeconds { get; set; }
		
		/// <summary>
		/// The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalYears")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IntervalYears { get; set; }
		
		/// <summary>
		/// Indicates that the monitor is paused and will not send alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMonitorPaused")]
		public System.Nullable<System.Boolean> IsMonitorPaused { get; set; }
		
		/// <summary>
		/// The name of the monitor. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitorName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MonitorName { get; set; }
		
		/// <summary>
		/// Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string MonitorNotes { get; set; }
		
		/// <summary>
		/// A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PublicDescription { get; set; }
		
		/// <summary>
		/// When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMonitorAt")]
		public System.Nullable<System.DateTimeOffset> StartMonitorAt { get; set; }
		
		/// <summary>
		/// The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timezoneCode")]
		public string TimezoneCode { get; set; }
		
		/// <summary>
		/// The time in seconds that the Web Response monitor type must allow for the web page to respond.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseSecondsLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> WebResponseSecondsLimit { get; set; }
		
		/// <summary>
		/// The URL that the Web Response monitor type must evaluate for the specified conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webResponseUrl")]
		public string WebResponseUrl { get; set; }
	}
	
	/// <summary>
	/// The MonitorStatusCode resource is a set of codes that describes the possible statuses of a monitor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MonitorStatusCode_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="codeDescription")]
		public string CodeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The MonitorStatusCode resource is a set of codes that describes the possible statuses of a monitor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MonitorStatusCodejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeDescription")]
		public string CodeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The MonitorStatusLog resource is a chronological record of all the changes in status that monitors have undergone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MonitorStatusLog_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The monitor that is related to this resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public string Monitor { get; set; }
		
		/// <summary>
		/// The status of the monitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorStatusCode")]
		public string MonitorStatusCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The ping that triggered this resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ping")]
		public string Ping { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
	}
	
	/// <summary>
	/// The MonitorStatusLog resource is a chronological record of all the changes in status that monitors have undergone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MonitorStatusLogjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The monitor that is related to this resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public string Monitor { get; set; }
		
		/// <summary>
		/// The status of the monitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorStatusCode")]
		public string MonitorStatusCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The ping that triggered this resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ping")]
		public string Ping { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
	}
	
	/// <summary>
	/// The MonitorTypeCode resource is a set of codes that describes the different types of monitors that are available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MonitorTypeCode_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="codeDescription")]
		public string CodeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeDescriptionExpanded")]
		public string CodeDescriptionExpanded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The MonitorTypeCode resource is a set of codes that describes the different types of monitors that are available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MonitorTypeCodejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeDescription")]
		public string CodeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeDescriptionExpanded")]
		public string CodeDescriptionExpanded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The Partition resource is a collection of siloed monitor and alert environments in the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Partition_get
	{
		
		/// <summary>
		/// The alert services that are related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServices")]
		public string[] AlertServices { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The monitors that are associated with this partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitors")]
		public string[] Monitors { get; set; }
		
		/// <summary>
		/// The name of the partition. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partitionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PartitionName { get; set; }
		
		/// <summary>
		/// Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PartitionNotes { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The team invitations that are related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamInvitations")]
		public string[] TeamInvitations { get; set; }
		
		/// <summary>
		/// The team members of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamMembers")]
		public string[] TeamMembers { get; set; }
	}
	
	/// <summary>
	/// The Partition resource is a collection of siloed monitor and alert environments in the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Partition_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the partition. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partitionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PartitionName { get; set; }
		
		/// <summary>
		/// Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PartitionNotes { get; set; }
	}
	
	/// <summary>
	/// The Partition resource is a collection of siloed monitor and alert environments in the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Partition_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the partition. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partitionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PartitionName { get; set; }
		
		/// <summary>
		/// Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PartitionNotes { get; set; }
	}
	
	/// <summary>
	/// The Partition resource is a collection of siloed monitor and alert environments in the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Partition_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the partition. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partitionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PartitionName { get; set; }
		
		/// <summary>
		/// Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PartitionNotes { get; set; }
	}
	
	/// <summary>
	/// The Partition resource is a collection of siloed monitor and alert environments in the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Partitionjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The alert services that are related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertServices")]
		public string[] AlertServices { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The monitors that are associated with this partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitors")]
		public string[] Monitors { get; set; }
		
		/// <summary>
		/// The name of the partition. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partitionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PartitionName { get; set; }
		
		/// <summary>
		/// Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PartitionNotes { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The team invitations that are related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamInvitations")]
		public string[] TeamInvitations { get; set; }
		
		/// <summary>
		/// The team members of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamMembers")]
		public string[] TeamMembers { get; set; }
	}
	
	/// <summary>
	/// The Partition resource is a collection of siloed monitor and alert environments in the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Partitionjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the partition. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partitionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PartitionName { get; set; }
		
		/// <summary>
		/// Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PartitionNotes { get; set; }
	}
	
	/// <summary>
	/// The Partition resource is a collection of siloed monitor and alert environments in the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Partitionjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the partition. Max 255 characters.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partitionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PartitionName { get; set; }
		
		/// <summary>
		/// Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionNotes")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string PartitionNotes { get; set; }
	}
	
	/// <summary>
	/// The Ping resource is a collection of pings that have been sent to monitors in the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Ping_get
	{
		
		/// <summary>
		/// The alert logs that are related to this resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertLogs")]
		public string[] AlertLogs { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectNextPingAt")]
		public System.Nullable<System.DateTimeOffset> ExpectNextPingAt { get; set; }
		
		/// <summary>
		/// When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectNextPingAtEpoch")]
		public System.Nullable<System.Int32> ExpectNextPingAtEpoch { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The IP address where this resource originated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The monitor that is related to this resource instance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public string Monitor { get; set; }
		
		/// <summary>
		/// The monitor status that resulted from the ping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorStatusLog")]
		public string MonitorStatusLog { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingCustomCode")]
		public string PingCustomCode { get; set; }
		
		/// <summary>
		/// The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingCustomPayload")]
		public string PingCustomPayload { get; set; }
		
		/// <summary>
		/// The method of the ping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingMethodCode")]
		public string PingMethodCode { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
	}
	
	/// <summary>
	/// The Ping resource is a collection of pings that have been sent to monitors in the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Ping_post
	{
		
		/// <summary>
		/// When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectNextPingAt")]
		public System.Nullable<System.DateTimeOffset> ExpectNextPingAt { get; set; }
		
		/// <summary>
		/// When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectNextPingAtEpoch")]
		public System.Nullable<System.Int32> ExpectNextPingAtEpoch { get; set; }
		
		/// <summary>
		/// The monitor that is related to this resource instance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public string Monitor { get; set; }
		
		/// <summary>
		/// The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingCustomCode")]
		public string PingCustomCode { get; set; }
		
		/// <summary>
		/// The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingCustomPayload")]
		public string PingCustomPayload { get; set; }
	}
	
	/// <summary>
	/// The Ping resource is a collection of pings that have been sent to monitors in the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pingjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The alert logs that are related to this resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertLogs")]
		public string[] AlertLogs { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectNextPingAt")]
		public System.Nullable<System.DateTimeOffset> ExpectNextPingAt { get; set; }
		
		/// <summary>
		/// When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectNextPingAtEpoch")]
		public System.Nullable<System.Int32> ExpectNextPingAtEpoch { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The IP address where this resource originated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The monitor that is related to this resource instance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public string Monitor { get; set; }
		
		/// <summary>
		/// The monitor status that resulted from the ping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorStatusLog")]
		public string MonitorStatusLog { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingCustomCode")]
		public string PingCustomCode { get; set; }
		
		/// <summary>
		/// The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingCustomPayload")]
		public string PingCustomPayload { get; set; }
		
		/// <summary>
		/// The method of the ping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingMethodCode")]
		public string PingMethodCode { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
	}
	
	/// <summary>
	/// The Ping resource is a collection of pings that have been sent to monitors in the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pingjsonld_post
	{
		
		/// <summary>
		/// When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectNextPingAt")]
		public System.Nullable<System.DateTimeOffset> ExpectNextPingAt { get; set; }
		
		/// <summary>
		/// When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectNextPingAtEpoch")]
		public System.Nullable<System.Int32> ExpectNextPingAtEpoch { get; set; }
		
		/// <summary>
		/// The monitor that is related to this resource instance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public string Monitor { get; set; }
		
		/// <summary>
		/// The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingCustomCode")]
		public string PingCustomCode { get; set; }
		
		/// <summary>
		/// The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pingCustomPayload")]
		public string PingCustomPayload { get; set; }
	}
	
	/// <summary>
	/// The PingMethodCode resource is a set of codes that describes the different methods of sending pings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PingMethodCode_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="codeName")]
		public string CodeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The PingMethodCode resource is a set of codes that describes the different methods of sending pings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PingMethodCodejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeName")]
		public string CodeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamInvitation_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The email address of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeEmail")]
		public string InviteeEmail { get; set; }
		
		/// <summary>
		/// The first name of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeFirstName")]
		public string InviteeFirstName { get; set; }
		
		/// <summary>
		/// The last name of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeLastName")]
		public string InviteeLastName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// When the current status too effect. This date-time is in the UTC timezone. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusAt")]
		public System.Nullable<System.DateTimeOffset> StatusAt { get; set; }
		
		/// <summary>
		/// The current status of the invitation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamInvitationStatus")]
		public string TeamInvitationStatus { get; set; }
		
		/// <summary>
		/// The role of the team member on the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamMemberRoleCode")]
		public string TeamMemberRoleCode { get; set; }
	}
	
	/// <summary>
	/// The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamInvitation_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The email address of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeEmail")]
		public string InviteeEmail { get; set; }
		
		/// <summary>
		/// The first name of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeFirstName")]
		public string InviteeFirstName { get; set; }
		
		/// <summary>
		/// The last name of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeLastName")]
		public string InviteeLastName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The role of the team member on the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamMemberRoleCode")]
		public string TeamMemberRoleCode { get; set; }
	}
	
	/// <summary>
	/// The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamInvitationjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The email address of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeEmail")]
		public string InviteeEmail { get; set; }
		
		/// <summary>
		/// The first name of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeFirstName")]
		public string InviteeFirstName { get; set; }
		
		/// <summary>
		/// The last name of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeLastName")]
		public string InviteeLastName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// When the current status too effect. This date-time is in the UTC timezone. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusAt")]
		public System.Nullable<System.DateTimeOffset> StatusAt { get; set; }
		
		/// <summary>
		/// The current status of the invitation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamInvitationStatus")]
		public string TeamInvitationStatus { get; set; }
		
		/// <summary>
		/// The role of the team member on the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamMemberRoleCode")]
		public string TeamMemberRoleCode { get; set; }
	}
	
	/// <summary>
	/// The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamInvitationjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The email address of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeEmail")]
		public string InviteeEmail { get; set; }
		
		/// <summary>
		/// The first name of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeFirstName")]
		public string InviteeFirstName { get; set; }
		
		/// <summary>
		/// The last name of the person that is being invited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inviteeLastName")]
		public string InviteeLastName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The role of the team member on the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamMemberRoleCode")]
		public string TeamMemberRoleCode { get; set; }
	}
	
	/// <summary>
	/// The TeamMember resource is a collection of active team members of the partitions in a user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamMember_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The role of the team member on the team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamMemberRoleCode")]
		public string TeamMemberRoleCode { get; set; }
		
		/// <summary>
		/// The user account that is related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAccount")]
		public string UserAccount { get; set; }
	}
	
	/// <summary>
	/// The TeamMember resource is a collection of active team members of the partitions in a user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamMember_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The role of the team member on the team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamMemberRoleCode")]
		public string TeamMemberRoleCode { get; set; }
	}
	
	/// <summary>
	/// The TeamMember resource is a collection of active team members of the partitions in a user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamMember_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The role of the team member on the team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamMemberRoleCode")]
		public string TeamMemberRoleCode { get; set; }
	}
	
	/// <summary>
	/// The TeamMember resource is a collection of active team members of the partitions in a user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamMemberjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The role of the team member on the team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamMemberRoleCode")]
		public string TeamMemberRoleCode { get; set; }
		
		/// <summary>
		/// The user account that is related to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAccount")]
		public string UserAccount { get; set; }
	}
	
	/// <summary>
	/// The TeamMember resource is a collection of active team members of the partitions in a user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamMemberjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The role of the team member on the team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamMemberRoleCode")]
		public string TeamMemberRoleCode { get; set; }
	}
	
	/// <summary>
	/// The TeamMemberRoleCode resource is a set of codes that describes the different roles that can be assigned to team members of partitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamMemberRoleCode_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="codeDescription")]
		public string CodeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The TeamMemberRoleCode resource is a set of codes that describes the different roles that can be assigned to team members of partitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamMemberRoleCodejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeDescription")]
		public string CodeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The TimezoneCode resource is a set of codes that describes the different international timezones.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimezoneCode_get
	{
		
		/// <summary>
		/// The name of the code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeName")]
		public string CodeName { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The numeric offset from the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetFromUtc")]
		public System.Nullable<System.Double> OffsetFromUtc { get; set; }
		
		/// <summary>
		/// The text offset from the UTC timezone that forms part of the ISO 8601 date time format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezoneDateString")]
		public string TimezoneDateString { get; set; }
	}
	
	/// <summary>
	/// The TimezoneCode resource is a set of codes that describes the different international timezones.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimezoneCodejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The name of the code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeName")]
		public string CodeName { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The numeric offset from the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetFromUtc")]
		public System.Nullable<System.Double> OffsetFromUtc { get; set; }
		
		/// <summary>
		/// The text offset from the UTC timezone that forms part of the ISO 8601 date time format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezoneDateString")]
		public string TimezoneDateString { get; set; }
	}
	
	/// <summary>
	/// The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAlerta_get
	{
		
		/// <summary>
		/// The API key for the Alerta service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AlertaApiKey { get; set; }
		
		/// <summary>
		/// The comma-separated list of related event names for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaCorrelate")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaCorrelate { get; set; }
		
		/// <summary>
		/// The environment value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaEnvironment")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEnvironment { get; set; }
		
		/// <summary>
		/// The event value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaEvent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEvent { get; set; }
		
		/// <summary>
		/// The group value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaGroup { get; set; }
		
		/// <summary>
		/// The host name for the Alerta service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaHost")]
		public string AlertaHost { get; set; }
		
		/// <summary>
		/// The origin value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaOrigin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaOrigin { get; set; }
		
		/// <summary>
		/// The resource value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaResource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaResource { get; set; }
		
		/// <summary>
		/// The comma-separated list of affected services for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaService")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaService { get; set; }
		
		/// <summary>
		/// The severity value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaSeverity { get; set; }
		
		/// <summary>
		/// The status value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaStatus")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaStatus { get; set; }
		
		/// <summary>
		/// The comma-separated list of tags for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaTags")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaTags { get; set; }
		
		/// <summary>
		/// The type value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaType { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAlerta_patch
	{
		
		/// <summary>
		/// The API key for the Alerta service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AlertaApiKey { get; set; }
		
		/// <summary>
		/// The comma-separated list of related event names for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaCorrelate")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaCorrelate { get; set; }
		
		/// <summary>
		/// The environment value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaEnvironment")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEnvironment { get; set; }
		
		/// <summary>
		/// The event value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaEvent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEvent { get; set; }
		
		/// <summary>
		/// The group value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaGroup { get; set; }
		
		/// <summary>
		/// The host name for the Alerta service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaHost")]
		public string AlertaHost { get; set; }
		
		/// <summary>
		/// The origin value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaOrigin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaOrigin { get; set; }
		
		/// <summary>
		/// The resource value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaResource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaResource { get; set; }
		
		/// <summary>
		/// The comma-separated list of affected services for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaService")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaService { get; set; }
		
		/// <summary>
		/// The severity value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaSeverity { get; set; }
		
		/// <summary>
		/// The status value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaStatus")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaStatus { get; set; }
		
		/// <summary>
		/// The comma-separated list of tags for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaTags")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaTags { get; set; }
		
		/// <summary>
		/// The type value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaType { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAlerta_post
	{
		
		/// <summary>
		/// The API key for the Alerta service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AlertaApiKey { get; set; }
		
		/// <summary>
		/// The comma-separated list of related event names for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaCorrelate")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaCorrelate { get; set; }
		
		/// <summary>
		/// The environment value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaEnvironment")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEnvironment { get; set; }
		
		/// <summary>
		/// The event value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaEvent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEvent { get; set; }
		
		/// <summary>
		/// The group value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaGroup { get; set; }
		
		/// <summary>
		/// The host name for the Alerta service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaHost")]
		public string AlertaHost { get; set; }
		
		/// <summary>
		/// The origin value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaOrigin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaOrigin { get; set; }
		
		/// <summary>
		/// The resource value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaResource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaResource { get; set; }
		
		/// <summary>
		/// The comma-separated list of affected services for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaService")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaService { get; set; }
		
		/// <summary>
		/// The severity value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaSeverity { get; set; }
		
		/// <summary>
		/// The status value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaStatus")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaStatus { get; set; }
		
		/// <summary>
		/// The comma-separated list of tags for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaTags")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaTags { get; set; }
		
		/// <summary>
		/// The type value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaType { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAlerta_put
	{
		
		/// <summary>
		/// The API key for the Alerta service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AlertaApiKey { get; set; }
		
		/// <summary>
		/// The comma-separated list of related event names for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaCorrelate")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaCorrelate { get; set; }
		
		/// <summary>
		/// The environment value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaEnvironment")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEnvironment { get; set; }
		
		/// <summary>
		/// The event value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaEvent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEvent { get; set; }
		
		/// <summary>
		/// The group value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaGroup { get; set; }
		
		/// <summary>
		/// The host name for the Alerta service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaHost")]
		public string AlertaHost { get; set; }
		
		/// <summary>
		/// The origin value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaOrigin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaOrigin { get; set; }
		
		/// <summary>
		/// The resource value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaResource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaResource { get; set; }
		
		/// <summary>
		/// The comma-separated list of affected services for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaService")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaService { get; set; }
		
		/// <summary>
		/// The severity value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaSeverity { get; set; }
		
		/// <summary>
		/// The status value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaStatus")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaStatus { get; set; }
		
		/// <summary>
		/// The comma-separated list of tags for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaTags")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaTags { get; set; }
		
		/// <summary>
		/// The type value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaType { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAlertajsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The API key for the Alerta service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AlertaApiKey { get; set; }
		
		/// <summary>
		/// The comma-separated list of related event names for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaCorrelate")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaCorrelate { get; set; }
		
		/// <summary>
		/// The environment value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaEnvironment")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEnvironment { get; set; }
		
		/// <summary>
		/// The event value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaEvent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEvent { get; set; }
		
		/// <summary>
		/// The group value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaGroup { get; set; }
		
		/// <summary>
		/// The host name for the Alerta service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaHost")]
		public string AlertaHost { get; set; }
		
		/// <summary>
		/// The origin value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaOrigin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaOrigin { get; set; }
		
		/// <summary>
		/// The resource value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaResource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaResource { get; set; }
		
		/// <summary>
		/// The comma-separated list of affected services for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaService")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaService { get; set; }
		
		/// <summary>
		/// The severity value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaSeverity { get; set; }
		
		/// <summary>
		/// The status value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaStatus")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaStatus { get; set; }
		
		/// <summary>
		/// The comma-separated list of tags for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaTags")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaTags { get; set; }
		
		/// <summary>
		/// The type value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaType { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAlertajsonld_post
	{
		
		/// <summary>
		/// The API key for the Alerta service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AlertaApiKey { get; set; }
		
		/// <summary>
		/// The comma-separated list of related event names for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaCorrelate")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaCorrelate { get; set; }
		
		/// <summary>
		/// The environment value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaEnvironment")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEnvironment { get; set; }
		
		/// <summary>
		/// The event value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaEvent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEvent { get; set; }
		
		/// <summary>
		/// The group value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaGroup { get; set; }
		
		/// <summary>
		/// The host name for the Alerta service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaHost")]
		public string AlertaHost { get; set; }
		
		/// <summary>
		/// The origin value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaOrigin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaOrigin { get; set; }
		
		/// <summary>
		/// The resource value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaResource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaResource { get; set; }
		
		/// <summary>
		/// The comma-separated list of affected services for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaService")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaService { get; set; }
		
		/// <summary>
		/// The severity value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaSeverity { get; set; }
		
		/// <summary>
		/// The status value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaStatus")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaStatus { get; set; }
		
		/// <summary>
		/// The comma-separated list of tags for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaTags")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaTags { get; set; }
		
		/// <summary>
		/// The type value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaType { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAlertajsonld_put
	{
		
		/// <summary>
		/// The API key for the Alerta service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AlertaApiKey { get; set; }
		
		/// <summary>
		/// The comma-separated list of related event names for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaCorrelate")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaCorrelate { get; set; }
		
		/// <summary>
		/// The environment value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaEnvironment")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEnvironment { get; set; }
		
		/// <summary>
		/// The event value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaEvent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaEvent { get; set; }
		
		/// <summary>
		/// The group value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaGroup { get; set; }
		
		/// <summary>
		/// The host name for the Alerta service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaHost")]
		public string AlertaHost { get; set; }
		
		/// <summary>
		/// The origin value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaOrigin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaOrigin { get; set; }
		
		/// <summary>
		/// The resource value for the Alerta service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertaResource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaResource { get; set; }
		
		/// <summary>
		/// The comma-separated list of affected services for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaService")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaService { get; set; }
		
		/// <summary>
		/// The severity value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaSeverity { get; set; }
		
		/// <summary>
		/// The status value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaStatus")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaStatus { get; set; }
		
		/// <summary>
		/// The comma-separated list of tags for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaTags")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaTags { get; set; }
		
		/// <summary>
		/// The type value for the Alerta service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertaType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AlertaType { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAllMySms_get
	{
		
		/// <summary>
		/// The API key for the Allmysms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AllMySmsApiKey { get; set; }
		
		/// <summary>
		/// The sender value (default 36180) for the Allmysms service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allMySmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsFrom { get; set; }
		
		/// <summary>
		/// The login credential for the Allmysms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsLogin { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAllMySms_patch
	{
		
		/// <summary>
		/// The API key for the Allmysms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AllMySmsApiKey { get; set; }
		
		/// <summary>
		/// The sender value (default 36180) for the Allmysms service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allMySmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsFrom { get; set; }
		
		/// <summary>
		/// The login credential for the Allmysms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsLogin { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAllMySms_post
	{
		
		/// <summary>
		/// The API key for the Allmysms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AllMySmsApiKey { get; set; }
		
		/// <summary>
		/// The sender value (default 36180) for the Allmysms service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allMySmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsFrom { get; set; }
		
		/// <summary>
		/// The login credential for the Allmysms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsLogin { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAllMySms_put
	{
		
		/// <summary>
		/// The API key for the Allmysms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AllMySmsApiKey { get; set; }
		
		/// <summary>
		/// The sender value (default 36180) for the Allmysms service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allMySmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsFrom { get; set; }
		
		/// <summary>
		/// The login credential for the Allmysms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsLogin { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAllMySmsjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The API key for the Allmysms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AllMySmsApiKey { get; set; }
		
		/// <summary>
		/// The sender value (default 36180) for the Allmysms service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allMySmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsFrom { get; set; }
		
		/// <summary>
		/// The login credential for the Allmysms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsLogin { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAllMySmsjsonld_post
	{
		
		/// <summary>
		/// The API key for the Allmysms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AllMySmsApiKey { get; set; }
		
		/// <summary>
		/// The sender value (default 36180) for the Allmysms service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allMySmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsFrom { get; set; }
		
		/// <summary>
		/// The login credential for the Allmysms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsLogin { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAllMySmsjsonld_put
	{
		
		/// <summary>
		/// The API key for the Allmysms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AllMySmsApiKey { get; set; }
		
		/// <summary>
		/// The sender value (default 36180) for the Allmysms service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allMySmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsFrom { get; set; }
		
		/// <summary>
		/// The login credential for the Allmysms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allMySmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AllMySmsLogin { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAmazonSns_get
	{
		
		/// <summary>
		/// The access key for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsAccessKey { get; set; }
		
		/// <summary>
		/// The region for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsRegion")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsRegion { get; set; }
		
		/// <summary>
		/// The secret key for the Amazon SNS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsSecretKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AmazonSnsSecretKey { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAmazonSns_patch
	{
		
		/// <summary>
		/// The access key for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsAccessKey { get; set; }
		
		/// <summary>
		/// The region for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsRegion")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsRegion { get; set; }
		
		/// <summary>
		/// The secret key for the Amazon SNS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsSecretKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AmazonSnsSecretKey { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAmazonSns_post
	{
		
		/// <summary>
		/// The access key for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsAccessKey { get; set; }
		
		/// <summary>
		/// The region for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsRegion")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsRegion { get; set; }
		
		/// <summary>
		/// The secret key for the Amazon SNS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsSecretKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AmazonSnsSecretKey { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAmazonSns_put
	{
		
		/// <summary>
		/// The access key for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsAccessKey { get; set; }
		
		/// <summary>
		/// The region for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsRegion")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsRegion { get; set; }
		
		/// <summary>
		/// The secret key for the Amazon SNS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsSecretKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AmazonSnsSecretKey { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAmazonSnsjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The access key for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsAccessKey { get; set; }
		
		/// <summary>
		/// The region for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsRegion")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsRegion { get; set; }
		
		/// <summary>
		/// The secret key for the Amazon SNS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsSecretKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AmazonSnsSecretKey { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAmazonSnsjsonld_post
	{
		
		/// <summary>
		/// The access key for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsAccessKey { get; set; }
		
		/// <summary>
		/// The region for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsRegion")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsRegion { get; set; }
		
		/// <summary>
		/// The secret key for the Amazon SNS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsSecretKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AmazonSnsSecretKey { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportAmazonSnsjsonld_put
	{
		
		/// <summary>
		/// The access key for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsAccessKey { get; set; }
		
		/// <summary>
		/// The region for the Amazon SNS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsRegion")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AmazonSnsRegion { get; set; }
		
		/// <summary>
		/// The secret key for the Amazon SNS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amazonSnsSecretKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AmazonSnsSecretKey { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportBandwidth_get
	{
		
		/// <summary>
		/// The account ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthAccountId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthAccountId { get; set; }
		
		/// <summary>
		/// The application ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthApplicationId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthApplicationId { get; set; }
		
		/// <summary>
		/// The from value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthFrom { get; set; }
		
		/// <summary>
		/// The password for the Bandwidth service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string BandwidthPassword { get; set; }
		
		/// <summary>
		/// The username for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthUsername { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportBandwidth_patch
	{
		
		/// <summary>
		/// The account ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthAccountId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthAccountId { get; set; }
		
		/// <summary>
		/// The application ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthApplicationId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthApplicationId { get; set; }
		
		/// <summary>
		/// The from value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthFrom { get; set; }
		
		/// <summary>
		/// The password for the Bandwidth service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string BandwidthPassword { get; set; }
		
		/// <summary>
		/// The username for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthUsername { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportBandwidth_post
	{
		
		/// <summary>
		/// The account ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthAccountId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthAccountId { get; set; }
		
		/// <summary>
		/// The application ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthApplicationId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthApplicationId { get; set; }
		
		/// <summary>
		/// The from value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthFrom { get; set; }
		
		/// <summary>
		/// The password for the Bandwidth service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string BandwidthPassword { get; set; }
		
		/// <summary>
		/// The username for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthUsername { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportBandwidth_put
	{
		
		/// <summary>
		/// The account ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthAccountId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthAccountId { get; set; }
		
		/// <summary>
		/// The application ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthApplicationId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthApplicationId { get; set; }
		
		/// <summary>
		/// The from value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthFrom { get; set; }
		
		/// <summary>
		/// The password for the Bandwidth service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string BandwidthPassword { get; set; }
		
		/// <summary>
		/// The username for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthUsername { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportBandwidthjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The account ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthAccountId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthAccountId { get; set; }
		
		/// <summary>
		/// The application ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthApplicationId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthApplicationId { get; set; }
		
		/// <summary>
		/// The from value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthFrom { get; set; }
		
		/// <summary>
		/// The password for the Bandwidth service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string BandwidthPassword { get; set; }
		
		/// <summary>
		/// The username for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthUsername { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportBandwidthjsonld_post
	{
		
		/// <summary>
		/// The account ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthAccountId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthAccountId { get; set; }
		
		/// <summary>
		/// The application ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthApplicationId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthApplicationId { get; set; }
		
		/// <summary>
		/// The from value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthFrom { get; set; }
		
		/// <summary>
		/// The password for the Bandwidth service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string BandwidthPassword { get; set; }
		
		/// <summary>
		/// The username for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthUsername { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportBandwidthjsonld_put
	{
		
		/// <summary>
		/// The account ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthAccountId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthAccountId { get; set; }
		
		/// <summary>
		/// The application ID value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthApplicationId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthApplicationId { get; set; }
		
		/// <summary>
		/// The from value for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthFrom { get; set; }
		
		/// <summary>
		/// The password for the Bandwidth service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string BandwidthPassword { get; set; }
		
		/// <summary>
		/// The username for the Bandwidth service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BandwidthUsername { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportChatwork_get
	{
		
		/// <summary>
		/// The API token for the Chatwork service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ChatworkApiToken { get; set; }
		
		/// <summary>
		/// The room ID for the Chatwork service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ChatworkRoomId { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportChatwork_patch
	{
		
		/// <summary>
		/// The API token for the Chatwork service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ChatworkApiToken { get; set; }
		
		/// <summary>
		/// The room ID for the Chatwork service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ChatworkRoomId { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportChatwork_post
	{
		
		/// <summary>
		/// The API token for the Chatwork service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ChatworkApiToken { get; set; }
		
		/// <summary>
		/// The room ID for the Chatwork service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ChatworkRoomId { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportChatwork_put
	{
		
		/// <summary>
		/// The API token for the Chatwork service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ChatworkApiToken { get; set; }
		
		/// <summary>
		/// The room ID for the Chatwork service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ChatworkRoomId { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportChatworkjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The API token for the Chatwork service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ChatworkApiToken { get; set; }
		
		/// <summary>
		/// The room ID for the Chatwork service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ChatworkRoomId { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportChatworkjsonld_post
	{
		
		/// <summary>
		/// The API token for the Chatwork service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ChatworkApiToken { get; set; }
		
		/// <summary>
		/// The room ID for the Chatwork service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ChatworkRoomId { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportChatworkjsonld_put
	{
		
		/// <summary>
		/// The API token for the Chatwork service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ChatworkApiToken { get; set; }
		
		/// <summary>
		/// The room ID for the Chatwork service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chatworkRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ChatworkRoomId { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickSend_get
	{
		
		/// <summary>
		/// The API key for the ClickSend service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickSendApiKey { get; set; }
		
		/// <summary>
		/// The API username for the ClickSend service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendApiUsername { get; set; }
		
		/// <summary>
		/// The from value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFrom { get; set; }
		
		/// <summary>
		/// The from email value where replies must be emailed for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFromEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFromEmail { get; set; }
		
		/// <summary>
		/// The recipient list ID value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendListId { get; set; }
		
		/// <summary>
		/// The source method of sending value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendSource { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickSend_patch
	{
		
		/// <summary>
		/// The API key for the ClickSend service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickSendApiKey { get; set; }
		
		/// <summary>
		/// The API username for the ClickSend service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendApiUsername { get; set; }
		
		/// <summary>
		/// The from value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFrom { get; set; }
		
		/// <summary>
		/// The from email value where replies must be emailed for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFromEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFromEmail { get; set; }
		
		/// <summary>
		/// The recipient list ID value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendListId { get; set; }
		
		/// <summary>
		/// The source method of sending value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendSource { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickSend_post
	{
		
		/// <summary>
		/// The API key for the ClickSend service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickSendApiKey { get; set; }
		
		/// <summary>
		/// The API username for the ClickSend service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendApiUsername { get; set; }
		
		/// <summary>
		/// The from value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFrom { get; set; }
		
		/// <summary>
		/// The from email value where replies must be emailed for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFromEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFromEmail { get; set; }
		
		/// <summary>
		/// The recipient list ID value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendListId { get; set; }
		
		/// <summary>
		/// The source method of sending value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendSource { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickSend_put
	{
		
		/// <summary>
		/// The API key for the ClickSend service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickSendApiKey { get; set; }
		
		/// <summary>
		/// The API username for the ClickSend service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendApiUsername { get; set; }
		
		/// <summary>
		/// The from value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFrom { get; set; }
		
		/// <summary>
		/// The from email value where replies must be emailed for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFromEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFromEmail { get; set; }
		
		/// <summary>
		/// The recipient list ID value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendListId { get; set; }
		
		/// <summary>
		/// The source method of sending value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendSource { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickSendjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The API key for the ClickSend service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickSendApiKey { get; set; }
		
		/// <summary>
		/// The API username for the ClickSend service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendApiUsername { get; set; }
		
		/// <summary>
		/// The from value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFrom { get; set; }
		
		/// <summary>
		/// The from email value where replies must be emailed for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFromEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFromEmail { get; set; }
		
		/// <summary>
		/// The recipient list ID value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendListId { get; set; }
		
		/// <summary>
		/// The source method of sending value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendSource { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickSendjsonld_post
	{
		
		/// <summary>
		/// The API key for the ClickSend service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickSendApiKey { get; set; }
		
		/// <summary>
		/// The API username for the ClickSend service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendApiUsername { get; set; }
		
		/// <summary>
		/// The from value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFrom { get; set; }
		
		/// <summary>
		/// The from email value where replies must be emailed for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFromEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFromEmail { get; set; }
		
		/// <summary>
		/// The recipient list ID value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendListId { get; set; }
		
		/// <summary>
		/// The source method of sending value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendSource { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickSendjsonld_put
	{
		
		/// <summary>
		/// The API key for the ClickSend service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickSendApiKey { get; set; }
		
		/// <summary>
		/// The API username for the ClickSend service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSendApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendApiUsername { get; set; }
		
		/// <summary>
		/// The from value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFrom { get; set; }
		
		/// <summary>
		/// The from email value where replies must be emailed for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendFromEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendFromEmail { get; set; }
		
		/// <summary>
		/// The recipient list ID value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendListId { get; set; }
		
		/// <summary>
		/// The source method of sending value for the ClickSend service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSendSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickSendSource { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickatell_get
	{
		
		/// <summary>
		/// The access token for the Clickatell service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickatellAccessToken { get; set; }
		
		/// <summary>
		/// The from value for the Clickatell service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickatellFrom { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickatell_patch
	{
		
		/// <summary>
		/// The access token for the Clickatell service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickatellAccessToken { get; set; }
		
		/// <summary>
		/// The from value for the Clickatell service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickatellFrom { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickatell_post
	{
		
		/// <summary>
		/// The access token for the Clickatell service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickatellAccessToken { get; set; }
		
		/// <summary>
		/// The from value for the Clickatell service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickatellFrom { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickatell_put
	{
		
		/// <summary>
		/// The access token for the Clickatell service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickatellAccessToken { get; set; }
		
		/// <summary>
		/// The from value for the Clickatell service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickatellFrom { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickatelljsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The access token for the Clickatell service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickatellAccessToken { get; set; }
		
		/// <summary>
		/// The from value for the Clickatell service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickatellFrom { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickatelljsonld_post
	{
		
		/// <summary>
		/// The access token for the Clickatell service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickatellAccessToken { get; set; }
		
		/// <summary>
		/// The from value for the Clickatell service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickatellFrom { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportClickatelljsonld_put
	{
		
		/// <summary>
		/// The access token for the Clickatell service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ClickatellAccessToken { get; set; }
		
		/// <summary>
		/// The from value for the Clickatell service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickatellFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClickatellFrom { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportContactEveryone_get
	{
		
		/// <summary>
		/// The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneCategory")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneCategory { get; set; }
		
		/// <summary>
		/// The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneDiffusionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneDiffusionName { get; set; }
		
		/// <summary>
		/// The token for the Contact Everyone service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ContactEveryoneToken { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportContactEveryone_patch
	{
		
		/// <summary>
		/// The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneCategory")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneCategory { get; set; }
		
		/// <summary>
		/// The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneDiffusionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneDiffusionName { get; set; }
		
		/// <summary>
		/// The token for the Contact Everyone service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ContactEveryoneToken { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportContactEveryone_post
	{
		
		/// <summary>
		/// The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneCategory")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneCategory { get; set; }
		
		/// <summary>
		/// The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneDiffusionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneDiffusionName { get; set; }
		
		/// <summary>
		/// The token for the Contact Everyone service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ContactEveryoneToken { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportContactEveryone_put
	{
		
		/// <summary>
		/// The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneCategory")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneCategory { get; set; }
		
		/// <summary>
		/// The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneDiffusionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneDiffusionName { get; set; }
		
		/// <summary>
		/// The token for the Contact Everyone service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ContactEveryoneToken { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportContactEveryonejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneCategory")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneCategory { get; set; }
		
		/// <summary>
		/// The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneDiffusionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneDiffusionName { get; set; }
		
		/// <summary>
		/// The token for the Contact Everyone service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ContactEveryoneToken { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportContactEveryonejsonld_post
	{
		
		/// <summary>
		/// The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneCategory")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneCategory { get; set; }
		
		/// <summary>
		/// The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneDiffusionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneDiffusionName { get; set; }
		
		/// <summary>
		/// The token for the Contact Everyone service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ContactEveryoneToken { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportContactEveryonejsonld_put
	{
		
		/// <summary>
		/// The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneCategory")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneCategory { get; set; }
		
		/// <summary>
		/// The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneDiffusionName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContactEveryoneDiffusionName { get; set; }
		
		/// <summary>
		/// The token for the Contact Everyone service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactEveryoneToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ContactEveryoneToken { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportDiscord_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Discord service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string DiscordToken { get; set; }
		
		/// <summary>
		/// The webhook ID for the Discord service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordWebhookId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DiscordWebhookId { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportDiscord_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Discord service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string DiscordToken { get; set; }
		
		/// <summary>
		/// The webhook ID for the Discord service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordWebhookId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DiscordWebhookId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportDiscord_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Discord service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string DiscordToken { get; set; }
		
		/// <summary>
		/// The webhook ID for the Discord service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordWebhookId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DiscordWebhookId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportDiscord_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Discord service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string DiscordToken { get; set; }
		
		/// <summary>
		/// The webhook ID for the Discord service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordWebhookId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DiscordWebhookId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportDiscordjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Discord service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string DiscordToken { get; set; }
		
		/// <summary>
		/// The webhook ID for the Discord service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordWebhookId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DiscordWebhookId { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportDiscordjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Discord service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string DiscordToken { get; set; }
		
		/// <summary>
		/// The webhook ID for the Discord service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordWebhookId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DiscordWebhookId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportDiscordjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Discord service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string DiscordToken { get; set; }
		
		/// <summary>
		/// The webhook ID for the Discord service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discordWebhookId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DiscordWebhookId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEmail_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender email address for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromAddress { get; set; }
		
		/// <summary>
		/// The sender name for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromName { get; set; }
		
		/// <summary>
		/// The password for the SMTP Email service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EmailPassword { get; set; }
		
		/// <summary>
		/// The port for the SMTP Email service.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPort")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> EmailPort { get; set; }
		
		/// <summary>
		/// The server for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailServer")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailServer { get; set; }
		
		/// <summary>
		/// The username for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailUsername { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEmail_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender email address for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromAddress { get; set; }
		
		/// <summary>
		/// The sender name for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromName { get; set; }
		
		/// <summary>
		/// The password for the SMTP Email service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EmailPassword { get; set; }
		
		/// <summary>
		/// The port for the SMTP Email service.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPort")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> EmailPort { get; set; }
		
		/// <summary>
		/// The server for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailServer")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailServer { get; set; }
		
		/// <summary>
		/// The username for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEmail_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender email address for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromAddress { get; set; }
		
		/// <summary>
		/// The sender name for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromName { get; set; }
		
		/// <summary>
		/// The password for the SMTP Email service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EmailPassword { get; set; }
		
		/// <summary>
		/// The port for the SMTP Email service.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPort")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> EmailPort { get; set; }
		
		/// <summary>
		/// The server for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailServer")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailServer { get; set; }
		
		/// <summary>
		/// The username for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailUsername { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEmail_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender email address for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromAddress { get; set; }
		
		/// <summary>
		/// The sender name for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromName { get; set; }
		
		/// <summary>
		/// The password for the SMTP Email service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EmailPassword { get; set; }
		
		/// <summary>
		/// The port for the SMTP Email service.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPort")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> EmailPort { get; set; }
		
		/// <summary>
		/// The server for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailServer")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailServer { get; set; }
		
		/// <summary>
		/// The username for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEmailjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender email address for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromAddress { get; set; }
		
		/// <summary>
		/// The sender name for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromName { get; set; }
		
		/// <summary>
		/// The password for the SMTP Email service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EmailPassword { get; set; }
		
		/// <summary>
		/// The port for the SMTP Email service.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPort")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> EmailPort { get; set; }
		
		/// <summary>
		/// The server for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailServer")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailServer { get; set; }
		
		/// <summary>
		/// The username for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailUsername { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEmailjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender email address for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromAddress { get; set; }
		
		/// <summary>
		/// The sender name for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromName { get; set; }
		
		/// <summary>
		/// The password for the SMTP Email service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EmailPassword { get; set; }
		
		/// <summary>
		/// The port for the SMTP Email service.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPort")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> EmailPort { get; set; }
		
		/// <summary>
		/// The server for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailServer")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailServer { get; set; }
		
		/// <summary>
		/// The username for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailUsername { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEmailjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender email address for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromAddress { get; set; }
		
		/// <summary>
		/// The sender name for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailFromName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailFromName { get; set; }
		
		/// <summary>
		/// The password for the SMTP Email service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EmailPassword { get; set; }
		
		/// <summary>
		/// The port for the SMTP Email service.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailPort")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> EmailPort { get; set; }
		
		/// <summary>
		/// The server for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailServer")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailServer { get; set; }
		
		/// <summary>
		/// The username for the SMTP Email service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEngagespot_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the EngageSpot service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EngagespotApiKey { get; set; }
		
		/// <summary>
		/// The campaign name for the EngageSpot service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotCampaignName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EngagespotCampaignName { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEngagespot_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the EngageSpot service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EngagespotApiKey { get; set; }
		
		/// <summary>
		/// The campaign name for the EngageSpot service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotCampaignName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EngagespotCampaignName { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEngagespot_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the EngageSpot service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EngagespotApiKey { get; set; }
		
		/// <summary>
		/// The campaign name for the EngageSpot service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotCampaignName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EngagespotCampaignName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEngagespot_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the EngageSpot service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EngagespotApiKey { get; set; }
		
		/// <summary>
		/// The campaign name for the EngageSpot service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotCampaignName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EngagespotCampaignName { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEngagespotjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the EngageSpot service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EngagespotApiKey { get; set; }
		
		/// <summary>
		/// The campaign name for the EngageSpot service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotCampaignName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EngagespotCampaignName { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEngagespotjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the EngageSpot service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EngagespotApiKey { get; set; }
		
		/// <summary>
		/// The campaign name for the EngageSpot service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotCampaignName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EngagespotCampaignName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEngagespotjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the EngageSpot service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EngagespotApiKey { get; set; }
		
		/// <summary>
		/// The campaign name for the EngageSpot service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engagespotCampaignName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EngagespotCampaignName { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEsendex_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The account reference that the message should be sent from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexAccountReference")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexAccountReference { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexFrom { get; set; }
		
		/// <summary>
		/// The API password for the Esendex service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EsendexPassword { get; set; }
		
		/// <summary>
		/// The account email for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexUsername { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEsendex_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The account reference that the message should be sent from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexAccountReference")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexAccountReference { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexFrom { get; set; }
		
		/// <summary>
		/// The API password for the Esendex service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EsendexPassword { get; set; }
		
		/// <summary>
		/// The account email for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEsendex_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The account reference that the message should be sent from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexAccountReference")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexAccountReference { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexFrom { get; set; }
		
		/// <summary>
		/// The API password for the Esendex service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EsendexPassword { get; set; }
		
		/// <summary>
		/// The account email for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexUsername { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEsendex_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The account reference that the message should be sent from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexAccountReference")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexAccountReference { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexFrom { get; set; }
		
		/// <summary>
		/// The API password for the Esendex service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EsendexPassword { get; set; }
		
		/// <summary>
		/// The account email for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEsendexjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The account reference that the message should be sent from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexAccountReference")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexAccountReference { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexFrom { get; set; }
		
		/// <summary>
		/// The API password for the Esendex service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EsendexPassword { get; set; }
		
		/// <summary>
		/// The account email for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexUsername { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEsendexjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The account reference that the message should be sent from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexAccountReference")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexAccountReference { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexFrom { get; set; }
		
		/// <summary>
		/// The API password for the Esendex service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EsendexPassword { get; set; }
		
		/// <summary>
		/// The account email for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexUsername { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportEsendexjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The account reference that the message should be sent from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexAccountReference")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexAccountReference { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexFrom { get; set; }
		
		/// <summary>
		/// The API password for the Esendex service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string EsendexPassword { get; set; }
		
		/// <summary>
		/// The account email for the Esendex service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="esendexUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EsendexUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportExpo_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Expo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expoToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ExpoToken { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportExpo_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Expo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expoToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ExpoToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportExpo_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Expo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expoToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ExpoToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportExpo_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Expo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expoToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ExpoToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportExpojsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Expo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expoToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ExpoToken { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportExpojsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Expo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expoToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ExpoToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportExpojsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The token for the Expo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expoToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ExpoToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFirebase_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The password for the Firebase service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebasePassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FirebasePassword { get; set; }
		
		/// <summary>
		/// The username for the Firebase service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebaseUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirebaseUsername { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFirebase_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The password for the Firebase service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebasePassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FirebasePassword { get; set; }
		
		/// <summary>
		/// The username for the Firebase service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebaseUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirebaseUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFirebase_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The password for the Firebase service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebasePassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FirebasePassword { get; set; }
		
		/// <summary>
		/// The username for the Firebase service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebaseUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirebaseUsername { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFirebase_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The password for the Firebase service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebasePassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FirebasePassword { get; set; }
		
		/// <summary>
		/// The username for the Firebase service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebaseUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirebaseUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFirebasejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The password for the Firebase service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebasePassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FirebasePassword { get; set; }
		
		/// <summary>
		/// The username for the Firebase service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebaseUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirebaseUsername { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFirebasejsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The password for the Firebase service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebasePassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FirebasePassword { get; set; }
		
		/// <summary>
		/// The username for the Firebase service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebaseUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirebaseUsername { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFirebasejsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The password for the Firebase service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebasePassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FirebasePassword { get; set; }
		
		/// <summary>
		/// The username for the Firebase service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firebaseUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirebaseUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFortySixElks_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API password for the 46elks service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FortySixElksApiPassword { get; set; }
		
		/// <summary>
		/// The API username for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksApiUsername { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksFrom { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFortySixElks_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API password for the 46elks service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FortySixElksApiPassword { get; set; }
		
		/// <summary>
		/// The API username for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksApiUsername { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFortySixElks_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API password for the 46elks service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FortySixElksApiPassword { get; set; }
		
		/// <summary>
		/// The API username for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksApiUsername { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksFrom { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFortySixElks_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API password for the 46elks service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FortySixElksApiPassword { get; set; }
		
		/// <summary>
		/// The API username for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksApiUsername { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFortySixElksjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API password for the 46elks service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FortySixElksApiPassword { get; set; }
		
		/// <summary>
		/// The API username for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksApiUsername { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksFrom { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFortySixElksjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API password for the 46elks service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FortySixElksApiPassword { get; set; }
		
		/// <summary>
		/// The API username for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksApiUsername { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksFrom { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFortySixElksjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API password for the 46elks service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FortySixElksApiPassword { get; set; }
		
		/// <summary>
		/// The API username for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksApiUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksApiUsername { get; set; }
		
		/// <summary>
		/// The alphanumeric originator for the message to appear to originate from for the 46elks service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fortySixElksFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FortySixElksFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreeMobile_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Free Mobile service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreeMobileApiKey { get; set; }
		
		/// <summary>
		/// The login for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobileLogin { get; set; }
		
		/// <summary>
		/// The phone number for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobilePhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobilePhone { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreeMobile_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Free Mobile service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreeMobileApiKey { get; set; }
		
		/// <summary>
		/// The login for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobileLogin { get; set; }
		
		/// <summary>
		/// The phone number for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobilePhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobilePhone { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreeMobile_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Free Mobile service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreeMobileApiKey { get; set; }
		
		/// <summary>
		/// The login for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobileLogin { get; set; }
		
		/// <summary>
		/// The phone number for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobilePhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobilePhone { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreeMobile_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Free Mobile service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreeMobileApiKey { get; set; }
		
		/// <summary>
		/// The login for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobileLogin { get; set; }
		
		/// <summary>
		/// The phone number for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobilePhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobilePhone { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreeMobilejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Free Mobile service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreeMobileApiKey { get; set; }
		
		/// <summary>
		/// The login for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobileLogin { get; set; }
		
		/// <summary>
		/// The phone number for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobilePhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobilePhone { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreeMobilejsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Free Mobile service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreeMobileApiKey { get; set; }
		
		/// <summary>
		/// The login for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobileLogin { get; set; }
		
		/// <summary>
		/// The phone number for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobilePhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobilePhone { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreeMobilejsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Free Mobile service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreeMobileApiKey { get; set; }
		
		/// <summary>
		/// The login for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobileLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobileLogin { get; set; }
		
		/// <summary>
		/// The phone number for the Free Mobile service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeMobilePhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreeMobilePhone { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreshdesk_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Freshdesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreshdeskApiKey { get; set; }
		
		/// <summary>
		/// The requester email address for the Freshdesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Freshdesk service (domain.freshdesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskHost { get; set; }
		
		/// <summary>
		/// The ticket priority for the Freshdesk service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskPriority")]
		public string FreshdeskPriority { get; set; }
		
		/// <summary>
		/// The ticket type for the Freshdesk service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskType { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreshdesk_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Freshdesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreshdeskApiKey { get; set; }
		
		/// <summary>
		/// The requester email address for the Freshdesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Freshdesk service (domain.freshdesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskHost { get; set; }
		
		/// <summary>
		/// The ticket priority for the Freshdesk service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskPriority")]
		public string FreshdeskPriority { get; set; }
		
		/// <summary>
		/// The ticket type for the Freshdesk service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskType { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreshdesk_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Freshdesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreshdeskApiKey { get; set; }
		
		/// <summary>
		/// The requester email address for the Freshdesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Freshdesk service (domain.freshdesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskHost { get; set; }
		
		/// <summary>
		/// The ticket priority for the Freshdesk service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskPriority")]
		public string FreshdeskPriority { get; set; }
		
		/// <summary>
		/// The ticket type for the Freshdesk service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskType { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreshdesk_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Freshdesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreshdeskApiKey { get; set; }
		
		/// <summary>
		/// The requester email address for the Freshdesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Freshdesk service (domain.freshdesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskHost { get; set; }
		
		/// <summary>
		/// The ticket priority for the Freshdesk service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskPriority")]
		public string FreshdeskPriority { get; set; }
		
		/// <summary>
		/// The ticket type for the Freshdesk service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskType { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreshdeskjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Freshdesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreshdeskApiKey { get; set; }
		
		/// <summary>
		/// The requester email address for the Freshdesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Freshdesk service (domain.freshdesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskHost { get; set; }
		
		/// <summary>
		/// The ticket priority for the Freshdesk service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskPriority")]
		public string FreshdeskPriority { get; set; }
		
		/// <summary>
		/// The ticket type for the Freshdesk service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskType { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreshdeskjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Freshdesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreshdeskApiKey { get; set; }
		
		/// <summary>
		/// The requester email address for the Freshdesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Freshdesk service (domain.freshdesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskHost { get; set; }
		
		/// <summary>
		/// The ticket priority for the Freshdesk service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskPriority")]
		public string FreshdeskPriority { get; set; }
		
		/// <summary>
		/// The ticket type for the Freshdesk service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskType { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportFreshdeskjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Freshdesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FreshdeskApiKey { get; set; }
		
		/// <summary>
		/// The requester email address for the Freshdesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Freshdesk service (domain.freshdesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freshdeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskHost { get; set; }
		
		/// <summary>
		/// The ticket priority for the Freshdesk service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskPriority")]
		public string FreshdeskPriority { get; set; }
		
		/// <summary>
		/// The ticket type for the Freshdesk service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshdeskType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FreshdeskType { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGatewayApi_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender name for the Gateway API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GatewayApiFrom { get; set; }
		
		/// <summary>
		/// The token for the Gateway API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GatewayApiToken { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGatewayApi_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender name for the Gateway API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GatewayApiFrom { get; set; }
		
		/// <summary>
		/// The token for the Gateway API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GatewayApiToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGatewayApi_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender name for the Gateway API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GatewayApiFrom { get; set; }
		
		/// <summary>
		/// The token for the Gateway API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GatewayApiToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGatewayApi_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender name for the Gateway API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GatewayApiFrom { get; set; }
		
		/// <summary>
		/// The token for the Gateway API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GatewayApiToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGatewayApijsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender name for the Gateway API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GatewayApiFrom { get; set; }
		
		/// <summary>
		/// The token for the Gateway API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GatewayApiToken { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGatewayApijsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender name for the Gateway API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GatewayApiFrom { get; set; }
		
		/// <summary>
		/// The token for the Gateway API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GatewayApiToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGatewayApijsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender name for the Gateway API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GatewayApiFrom { get; set; }
		
		/// <summary>
		/// The token for the Gateway API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewayApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GatewayApiToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGitter_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The room ID for the Gitter service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GitterRoomId { get; set; }
		
		/// <summary>
		/// The token for the Gitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GitterToken { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGitter_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The room ID for the Gitter service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GitterRoomId { get; set; }
		
		/// <summary>
		/// The token for the Gitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GitterToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGitter_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The room ID for the Gitter service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GitterRoomId { get; set; }
		
		/// <summary>
		/// The token for the Gitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GitterToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGitter_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The room ID for the Gitter service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GitterRoomId { get; set; }
		
		/// <summary>
		/// The token for the Gitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GitterToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGitterjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The room ID for the Gitter service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GitterRoomId { get; set; }
		
		/// <summary>
		/// The token for the Gitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GitterToken { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGitterjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The room ID for the Gitter service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GitterRoomId { get; set; }
		
		/// <summary>
		/// The token for the Gitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GitterToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGitterjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The room ID for the Gitter service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterRoomId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GitterRoomId { get; set; }
		
		/// <summary>
		/// The token for the Gitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitterToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GitterToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGoogleChat_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access key for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatAccessKey { get; set; }
		
		/// <summary>
		/// The access token for the Google Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GoogleChatAccessToken { get; set; }
		
		/// <summary>
		/// The space name for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatSpace")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatSpace { get; set; }
		
		/// <summary>
		/// The optional thread key for the Google Chat service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleChatThreadKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatThreadKey { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGoogleChat_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access key for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatAccessKey { get; set; }
		
		/// <summary>
		/// The access token for the Google Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GoogleChatAccessToken { get; set; }
		
		/// <summary>
		/// The space name for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatSpace")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatSpace { get; set; }
		
		/// <summary>
		/// The optional thread key for the Google Chat service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleChatThreadKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatThreadKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGoogleChat_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access key for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatAccessKey { get; set; }
		
		/// <summary>
		/// The access token for the Google Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GoogleChatAccessToken { get; set; }
		
		/// <summary>
		/// The space name for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatSpace")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatSpace { get; set; }
		
		/// <summary>
		/// The optional thread key for the Google Chat service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleChatThreadKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatThreadKey { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGoogleChat_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access key for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatAccessKey { get; set; }
		
		/// <summary>
		/// The access token for the Google Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GoogleChatAccessToken { get; set; }
		
		/// <summary>
		/// The space name for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatSpace")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatSpace { get; set; }
		
		/// <summary>
		/// The optional thread key for the Google Chat service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleChatThreadKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatThreadKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGoogleChatjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access key for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatAccessKey { get; set; }
		
		/// <summary>
		/// The access token for the Google Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GoogleChatAccessToken { get; set; }
		
		/// <summary>
		/// The space name for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatSpace")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatSpace { get; set; }
		
		/// <summary>
		/// The optional thread key for the Google Chat service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleChatThreadKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatThreadKey { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGoogleChatjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access key for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatAccessKey { get; set; }
		
		/// <summary>
		/// The access token for the Google Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GoogleChatAccessToken { get; set; }
		
		/// <summary>
		/// The space name for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatSpace")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatSpace { get; set; }
		
		/// <summary>
		/// The optional thread key for the Google Chat service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleChatThreadKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatThreadKey { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGoogleChatjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access key for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatAccessKey { get; set; }
		
		/// <summary>
		/// The access token for the Google Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GoogleChatAccessToken { get; set; }
		
		/// <summary>
		/// The space name for the Google Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="googleChatSpace")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatSpace { get; set; }
		
		/// <summary>
		/// The optional thread key for the Google Chat service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleChatThreadKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GoogleChatThreadKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGotify_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyApiUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GotifyApiUrl { get; set; }
		
		/// <summary>
		/// The app token for the Gotify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GotifyAppToken { get; set; }
		
		/// <summary>
		/// The priority for the Gotify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gotifyPriority")]
		public string GotifyPriority { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGotify_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyApiUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GotifyApiUrl { get; set; }
		
		/// <summary>
		/// The app token for the Gotify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GotifyAppToken { get; set; }
		
		/// <summary>
		/// The priority for the Gotify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gotifyPriority")]
		public string GotifyPriority { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGotify_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyApiUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GotifyApiUrl { get; set; }
		
		/// <summary>
		/// The app token for the Gotify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GotifyAppToken { get; set; }
		
		/// <summary>
		/// The priority for the Gotify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gotifyPriority")]
		public string GotifyPriority { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGotify_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyApiUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GotifyApiUrl { get; set; }
		
		/// <summary>
		/// The app token for the Gotify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GotifyAppToken { get; set; }
		
		/// <summary>
		/// The priority for the Gotify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gotifyPriority")]
		public string GotifyPriority { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGotifyjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyApiUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GotifyApiUrl { get; set; }
		
		/// <summary>
		/// The app token for the Gotify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GotifyAppToken { get; set; }
		
		/// <summary>
		/// The priority for the Gotify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gotifyPriority")]
		public string GotifyPriority { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGotifyjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyApiUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GotifyApiUrl { get; set; }
		
		/// <summary>
		/// The app token for the Gotify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GotifyAppToken { get; set; }
		
		/// <summary>
		/// The priority for the Gotify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gotifyPriority")]
		public string GotifyPriority { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportGotifyjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyApiUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GotifyApiUrl { get; set; }
		
		/// <summary>
		/// The app token for the Gotify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gotifyAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string GotifyAppToken { get; set; }
		
		/// <summary>
		/// The priority for the Gotify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gotifyPriority")]
		public string GotifyPriority { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportHelpScout_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The requester customer email address for the HelpScout service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutCustomerEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string HelpScoutCustomerEmail { get; set; }
		
		/// <summary>
		/// The mailbox ID for the HelpScout service.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpScoutMailboxId")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> HelpScoutMailboxId { get; set; }
		
		/// <summary>
		/// The OAuth token for the HelpScout service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutOauthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string HelpScoutOauthToken { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportHelpScout_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The requester customer email address for the HelpScout service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutCustomerEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string HelpScoutCustomerEmail { get; set; }
		
		/// <summary>
		/// The mailbox ID for the HelpScout service.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpScoutMailboxId")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> HelpScoutMailboxId { get; set; }
		
		/// <summary>
		/// The OAuth token for the HelpScout service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutOauthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string HelpScoutOauthToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportHelpScout_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The requester customer email address for the HelpScout service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutCustomerEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string HelpScoutCustomerEmail { get; set; }
		
		/// <summary>
		/// The mailbox ID for the HelpScout service.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpScoutMailboxId")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> HelpScoutMailboxId { get; set; }
		
		/// <summary>
		/// The OAuth token for the HelpScout service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutOauthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string HelpScoutOauthToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportHelpScout_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The requester customer email address for the HelpScout service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutCustomerEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string HelpScoutCustomerEmail { get; set; }
		
		/// <summary>
		/// The mailbox ID for the HelpScout service.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpScoutMailboxId")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> HelpScoutMailboxId { get; set; }
		
		/// <summary>
		/// The OAuth token for the HelpScout service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutOauthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string HelpScoutOauthToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportHelpScoutjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The requester customer email address for the HelpScout service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutCustomerEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string HelpScoutCustomerEmail { get; set; }
		
		/// <summary>
		/// The mailbox ID for the HelpScout service.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpScoutMailboxId")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> HelpScoutMailboxId { get; set; }
		
		/// <summary>
		/// The OAuth token for the HelpScout service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutOauthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string HelpScoutOauthToken { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportHelpScoutjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The requester customer email address for the HelpScout service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutCustomerEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string HelpScoutCustomerEmail { get; set; }
		
		/// <summary>
		/// The mailbox ID for the HelpScout service.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpScoutMailboxId")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> HelpScoutMailboxId { get; set; }
		
		/// <summary>
		/// The OAuth token for the HelpScout service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutOauthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string HelpScoutOauthToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportHelpScoutjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The requester customer email address for the HelpScout service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutCustomerEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string HelpScoutCustomerEmail { get; set; }
		
		/// <summary>
		/// The mailbox ID for the HelpScout service.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpScoutMailboxId")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> HelpScoutMailboxId { get; set; }
		
		/// <summary>
		/// The OAuth token for the HelpScout service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="helpScoutOauthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string HelpScoutOauthToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportInfobip_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The auth token for the Infobip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string InfobipAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipFrom { get; set; }
		
		/// <summary>
		/// The host for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipHost { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportInfobip_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth token for the Infobip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string InfobipAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipFrom { get; set; }
		
		/// <summary>
		/// The host for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipHost { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportInfobip_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth token for the Infobip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string InfobipAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipFrom { get; set; }
		
		/// <summary>
		/// The host for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipHost { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportInfobip_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth token for the Infobip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string InfobipAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipFrom { get; set; }
		
		/// <summary>
		/// The host for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipHost { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportInfobipjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The auth token for the Infobip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string InfobipAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipFrom { get; set; }
		
		/// <summary>
		/// The host for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipHost { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportInfobipjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth token for the Infobip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string InfobipAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipFrom { get; set; }
		
		/// <summary>
		/// The host for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipHost { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportInfobipjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth token for the Infobip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string InfobipAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipFrom { get; set; }
		
		/// <summary>
		/// The host for the Infobip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infobipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string InfobipHost { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportIqsms_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The sender value for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsFrom { get; set; }
		
		/// <summary>
		/// The login for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsLogin { get; set; }
		
		/// <summary>
		/// The password for the Iqsms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string IqsmsPassword { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportIqsms_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender value for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsFrom { get; set; }
		
		/// <summary>
		/// The login for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsLogin { get; set; }
		
		/// <summary>
		/// The password for the Iqsms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string IqsmsPassword { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportIqsms_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender value for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsFrom { get; set; }
		
		/// <summary>
		/// The login for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsLogin { get; set; }
		
		/// <summary>
		/// The password for the Iqsms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string IqsmsPassword { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportIqsms_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender value for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsFrom { get; set; }
		
		/// <summary>
		/// The login for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsLogin { get; set; }
		
		/// <summary>
		/// The password for the Iqsms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string IqsmsPassword { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportIqsmsjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The sender value for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsFrom { get; set; }
		
		/// <summary>
		/// The login for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsLogin { get; set; }
		
		/// <summary>
		/// The password for the Iqsms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string IqsmsPassword { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportIqsmsjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender value for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsFrom { get; set; }
		
		/// <summary>
		/// The login for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsLogin { get; set; }
		
		/// <summary>
		/// The password for the Iqsms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string IqsmsPassword { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportIqsmsjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender value for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsFrom { get; set; }
		
		/// <summary>
		/// The login for the Iqsms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string IqsmsLogin { get; set; }
		
		/// <summary>
		/// The password for the Iqsms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iqsmsPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string IqsmsPassword { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportKazInfoTeh_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The from value for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehFrom { get; set; }
		
		/// <summary>
		/// The password for the KazInfoTeh service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string KazInfoTehPassword { get; set; }
		
		/// <summary>
		/// The username for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehUsername { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportKazInfoTeh_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The from value for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehFrom { get; set; }
		
		/// <summary>
		/// The password for the KazInfoTeh service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string KazInfoTehPassword { get; set; }
		
		/// <summary>
		/// The username for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportKazInfoTeh_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The from value for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehFrom { get; set; }
		
		/// <summary>
		/// The password for the KazInfoTeh service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string KazInfoTehPassword { get; set; }
		
		/// <summary>
		/// The username for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehUsername { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportKazInfoTeh_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The from value for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehFrom { get; set; }
		
		/// <summary>
		/// The password for the KazInfoTeh service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string KazInfoTehPassword { get; set; }
		
		/// <summary>
		/// The username for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportKazInfoTehjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The from value for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehFrom { get; set; }
		
		/// <summary>
		/// The password for the KazInfoTeh service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string KazInfoTehPassword { get; set; }
		
		/// <summary>
		/// The username for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehUsername { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportKazInfoTehjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The from value for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehFrom { get; set; }
		
		/// <summary>
		/// The password for the KazInfoTeh service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string KazInfoTehPassword { get; set; }
		
		/// <summary>
		/// The username for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehUsername { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportKazInfoTehjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The from value for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehFrom { get; set; }
		
		/// <summary>
		/// The password for the KazInfoTeh service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string KazInfoTehPassword { get; set; }
		
		/// <summary>
		/// The username for the KazInfoTeh service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kazInfoTehUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string KazInfoTehUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLightSms_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The login for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsLogin { get; set; }
		
		/// <summary>
		/// The sender phone number for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsPhone { get; set; }
		
		/// <summary>
		/// The token for the LightSMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LightSmsToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLightSms_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The login for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsLogin { get; set; }
		
		/// <summary>
		/// The sender phone number for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsPhone { get; set; }
		
		/// <summary>
		/// The token for the LightSMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LightSmsToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLightSms_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The login for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsLogin { get; set; }
		
		/// <summary>
		/// The sender phone number for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsPhone { get; set; }
		
		/// <summary>
		/// The token for the LightSMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LightSmsToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLightSms_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The login for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsLogin { get; set; }
		
		/// <summary>
		/// The sender phone number for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsPhone { get; set; }
		
		/// <summary>
		/// The token for the LightSMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LightSmsToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLightSmsjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The login for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsLogin { get; set; }
		
		/// <summary>
		/// The sender phone number for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsPhone { get; set; }
		
		/// <summary>
		/// The token for the LightSMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LightSmsToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLightSmsjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The login for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsLogin { get; set; }
		
		/// <summary>
		/// The sender phone number for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsPhone { get; set; }
		
		/// <summary>
		/// The token for the LightSMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LightSmsToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLightSmsjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The login for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsLogin { get; set; }
		
		/// <summary>
		/// The sender phone number for the LightSMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LightSmsPhone { get; set; }
		
		/// <summary>
		/// The token for the LightSMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightSmsToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LightSmsToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLineNotify_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the LINE Notify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lineNotifyAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LineNotifyAccessToken { get; set; }
		
		/// <summary>
		/// The sticker ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerId")]
		public string LineNotifyStickerId { get; set; }
		
		/// <summary>
		/// The sticker package ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerPackageId")]
		public string LineNotifyStickerPackageId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLineNotify_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the LINE Notify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lineNotifyAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LineNotifyAccessToken { get; set; }
		
		/// <summary>
		/// The sticker ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerId")]
		public string LineNotifyStickerId { get; set; }
		
		/// <summary>
		/// The sticker package ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerPackageId")]
		public string LineNotifyStickerPackageId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLineNotify_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the LINE Notify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lineNotifyAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LineNotifyAccessToken { get; set; }
		
		/// <summary>
		/// The sticker ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerId")]
		public string LineNotifyStickerId { get; set; }
		
		/// <summary>
		/// The sticker package ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerPackageId")]
		public string LineNotifyStickerPackageId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLineNotify_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the LINE Notify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lineNotifyAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LineNotifyAccessToken { get; set; }
		
		/// <summary>
		/// The sticker ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerId")]
		public string LineNotifyStickerId { get; set; }
		
		/// <summary>
		/// The sticker package ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerPackageId")]
		public string LineNotifyStickerPackageId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLineNotifyjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the LINE Notify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lineNotifyAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LineNotifyAccessToken { get; set; }
		
		/// <summary>
		/// The sticker ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerId")]
		public string LineNotifyStickerId { get; set; }
		
		/// <summary>
		/// The sticker package ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerPackageId")]
		public string LineNotifyStickerPackageId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLineNotifyjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the LINE Notify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lineNotifyAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LineNotifyAccessToken { get; set; }
		
		/// <summary>
		/// The sticker ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerId")]
		public string LineNotifyStickerId { get; set; }
		
		/// <summary>
		/// The sticker package ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerPackageId")]
		public string LineNotifyStickerPackageId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLineNotifyjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the LINE Notify service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lineNotifyAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LineNotifyAccessToken { get; set; }
		
		/// <summary>
		/// The sticker ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerId")]
		public string LineNotifyStickerId { get; set; }
		
		/// <summary>
		/// The sticker package ID value for the LINE Notify service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNotifyStickerPackageId")]
		public string LineNotifyStickerPackageId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLinkedIn_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the LinkedIn service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LinkedInToken { get; set; }
		
		/// <summary>
		/// The user ID for the LinkedIn service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LinkedInUserId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLinkedIn_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the LinkedIn service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LinkedInToken { get; set; }
		
		/// <summary>
		/// The user ID for the LinkedIn service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LinkedInUserId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLinkedIn_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the LinkedIn service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LinkedInToken { get; set; }
		
		/// <summary>
		/// The user ID for the LinkedIn service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LinkedInUserId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLinkedIn_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the LinkedIn service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LinkedInToken { get; set; }
		
		/// <summary>
		/// The user ID for the LinkedIn service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LinkedInUserId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLinkedInjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the LinkedIn service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LinkedInToken { get; set; }
		
		/// <summary>
		/// The user ID for the LinkedIn service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LinkedInUserId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLinkedInjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the LinkedIn service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LinkedInToken { get; set; }
		
		/// <summary>
		/// The user ID for the LinkedIn service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LinkedInUserId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportLinkedInjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the LinkedIn service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LinkedInToken { get; set; }
		
		/// <summary>
		/// The user ID for the LinkedIn service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedInUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LinkedInUserId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMailjet_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The alphanumeric sender ID for the MailJet service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MailjetFrom { get; set; }
		
		/// <summary>
		/// The SMS auth token for the MailJet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MailjetToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMailjet_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The alphanumeric sender ID for the MailJet service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MailjetFrom { get; set; }
		
		/// <summary>
		/// The SMS auth token for the MailJet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MailjetToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMailjet_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The alphanumeric sender ID for the MailJet service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MailjetFrom { get; set; }
		
		/// <summary>
		/// The SMS auth token for the MailJet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MailjetToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMailjet_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The alphanumeric sender ID for the MailJet service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MailjetFrom { get; set; }
		
		/// <summary>
		/// The SMS auth token for the MailJet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MailjetToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMailjetjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The alphanumeric sender ID for the MailJet service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MailjetFrom { get; set; }
		
		/// <summary>
		/// The SMS auth token for the MailJet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MailjetToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMailjetjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The alphanumeric sender ID for the MailJet service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MailjetFrom { get; set; }
		
		/// <summary>
		/// The SMS auth token for the MailJet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MailjetToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMailjetjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The alphanumeric sender ID for the MailJet service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MailjetFrom { get; set; }
		
		/// <summary>
		/// The SMS auth token for the MailJet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailjetToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MailjetToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMastodon_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the Mastodon service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MastodonAccessToken { get; set; }
		
		/// <summary>
		/// The host name for the Mastodon service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonHost")]
		public string MastodonHost { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMastodon_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mastodon service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MastodonAccessToken { get; set; }
		
		/// <summary>
		/// The host name for the Mastodon service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonHost")]
		public string MastodonHost { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMastodon_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mastodon service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MastodonAccessToken { get; set; }
		
		/// <summary>
		/// The host name for the Mastodon service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonHost")]
		public string MastodonHost { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMastodon_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mastodon service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MastodonAccessToken { get; set; }
		
		/// <summary>
		/// The host name for the Mastodon service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonHost")]
		public string MastodonHost { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMastodonjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the Mastodon service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MastodonAccessToken { get; set; }
		
		/// <summary>
		/// The host name for the Mastodon service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonHost")]
		public string MastodonHost { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMastodonjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mastodon service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MastodonAccessToken { get; set; }
		
		/// <summary>
		/// The host name for the Mastodon service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonHost")]
		public string MastodonHost { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMastodonjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mastodon service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MastodonAccessToken { get; set; }
		
		/// <summary>
		/// The host name for the Mastodon service (omit the "https://" part).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mastodonHost")]
		public string MastodonHost { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMattermost_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the Mattermost service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MattermostAccessToken { get; set; }
		
		/// <summary>
		/// The default channel ID for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostChannel { get; set; }
		
		/// <summary>
		/// The host for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostHost { get; set; }
		
		/// <summary>
		/// The optional path for the Mattermost service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mattermostPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostPath { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMattermost_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mattermost service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MattermostAccessToken { get; set; }
		
		/// <summary>
		/// The default channel ID for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostChannel { get; set; }
		
		/// <summary>
		/// The host for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostHost { get; set; }
		
		/// <summary>
		/// The optional path for the Mattermost service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mattermostPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostPath { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMattermost_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mattermost service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MattermostAccessToken { get; set; }
		
		/// <summary>
		/// The default channel ID for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostChannel { get; set; }
		
		/// <summary>
		/// The host for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostHost { get; set; }
		
		/// <summary>
		/// The optional path for the Mattermost service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mattermostPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostPath { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMattermost_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mattermost service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MattermostAccessToken { get; set; }
		
		/// <summary>
		/// The default channel ID for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostChannel { get; set; }
		
		/// <summary>
		/// The host for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostHost { get; set; }
		
		/// <summary>
		/// The optional path for the Mattermost service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mattermostPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostPath { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMattermostjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the Mattermost service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MattermostAccessToken { get; set; }
		
		/// <summary>
		/// The default channel ID for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostChannel { get; set; }
		
		/// <summary>
		/// The host for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostHost { get; set; }
		
		/// <summary>
		/// The optional path for the Mattermost service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mattermostPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostPath { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMattermostjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mattermost service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MattermostAccessToken { get; set; }
		
		/// <summary>
		/// The default channel ID for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostChannel { get; set; }
		
		/// <summary>
		/// The host for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostHost { get; set; }
		
		/// <summary>
		/// The optional path for the Mattermost service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mattermostPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostPath { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMattermostjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mattermost service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MattermostAccessToken { get; set; }
		
		/// <summary>
		/// The default channel ID for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostChannel { get; set; }
		
		/// <summary>
		/// The host for the Mattermost service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mattermostHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostHost { get; set; }
		
		/// <summary>
		/// The optional path for the Mattermost service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mattermostPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MattermostPath { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMercure_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The JWT token for the hub for the Mercure service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mercureHubJwtToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MercureHubJwtToken { get; set; }
		
		/// <summary>
		/// The URL for the hub for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureHubUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureHubUrl { get; set; }
		
		/// <summary>
		/// The optional topic for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureTopic")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureTopic { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMercure_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The JWT token for the hub for the Mercure service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mercureHubJwtToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MercureHubJwtToken { get; set; }
		
		/// <summary>
		/// The URL for the hub for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureHubUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureHubUrl { get; set; }
		
		/// <summary>
		/// The optional topic for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureTopic")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureTopic { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMercure_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The JWT token for the hub for the Mercure service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mercureHubJwtToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MercureHubJwtToken { get; set; }
		
		/// <summary>
		/// The URL for the hub for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureHubUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureHubUrl { get; set; }
		
		/// <summary>
		/// The optional topic for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureTopic")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureTopic { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMercure_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The JWT token for the hub for the Mercure service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mercureHubJwtToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MercureHubJwtToken { get; set; }
		
		/// <summary>
		/// The URL for the hub for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureHubUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureHubUrl { get; set; }
		
		/// <summary>
		/// The optional topic for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureTopic")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureTopic { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMercurejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The JWT token for the hub for the Mercure service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mercureHubJwtToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MercureHubJwtToken { get; set; }
		
		/// <summary>
		/// The URL for the hub for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureHubUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureHubUrl { get; set; }
		
		/// <summary>
		/// The optional topic for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureTopic")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureTopic { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMercurejsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The JWT token for the hub for the Mercure service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mercureHubJwtToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MercureHubJwtToken { get; set; }
		
		/// <summary>
		/// The URL for the hub for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureHubUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureHubUrl { get; set; }
		
		/// <summary>
		/// The optional topic for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureTopic")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureTopic { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMercurejsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The JWT token for the hub for the Mercure service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mercureHubJwtToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MercureHubJwtToken { get; set; }
		
		/// <summary>
		/// The URL for the hub for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureHubUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureHubUrl { get; set; }
		
		/// <summary>
		/// The optional topic for the Mercure service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mercureTopic")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MercureTopic { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageBird_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The sender value for the MessageBird service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageBirdFrom { get; set; }
		
		/// <summary>
		/// The token for the MessageBird service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageBirdToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageBird_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender value for the MessageBird service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageBirdFrom { get; set; }
		
		/// <summary>
		/// The token for the MessageBird service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageBirdToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageBird_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender value for the MessageBird service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageBirdFrom { get; set; }
		
		/// <summary>
		/// The token for the MessageBird service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageBirdToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageBird_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender value for the MessageBird service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageBirdFrom { get; set; }
		
		/// <summary>
		/// The token for the MessageBird service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageBirdToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageBirdjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The sender value for the MessageBird service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageBirdFrom { get; set; }
		
		/// <summary>
		/// The token for the MessageBird service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageBirdToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageBirdjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender value for the MessageBird service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageBirdFrom { get; set; }
		
		/// <summary>
		/// The token for the MessageBird service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageBirdToken { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageBirdjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender value for the MessageBird service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageBirdFrom { get; set; }
		
		/// <summary>
		/// The token for the MessageBird service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageBirdToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageBirdToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageMedia_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The API key for the MessageMedia service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaApiKey { get; set; }
		
		/// <summary>
		/// The API secret for the MessageMedia service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageMediaApiSecret { get; set; }
		
		/// <summary>
		/// The optional registered sender ID for the MessageMedia service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageMediaFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaFrom { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageMedia_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the MessageMedia service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaApiKey { get; set; }
		
		/// <summary>
		/// The API secret for the MessageMedia service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageMediaApiSecret { get; set; }
		
		/// <summary>
		/// The optional registered sender ID for the MessageMedia service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageMediaFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageMedia_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the MessageMedia service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaApiKey { get; set; }
		
		/// <summary>
		/// The API secret for the MessageMedia service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageMediaApiSecret { get; set; }
		
		/// <summary>
		/// The optional registered sender ID for the MessageMedia service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageMediaFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaFrom { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageMedia_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the MessageMedia service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaApiKey { get; set; }
		
		/// <summary>
		/// The API secret for the MessageMedia service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageMediaApiSecret { get; set; }
		
		/// <summary>
		/// The optional registered sender ID for the MessageMedia service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageMediaFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageMediajsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The API key for the MessageMedia service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaApiKey { get; set; }
		
		/// <summary>
		/// The API secret for the MessageMedia service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageMediaApiSecret { get; set; }
		
		/// <summary>
		/// The optional registered sender ID for the MessageMedia service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageMediaFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaFrom { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageMediajsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the MessageMedia service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaApiKey { get; set; }
		
		/// <summary>
		/// The API secret for the MessageMedia service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageMediaApiSecret { get; set; }
		
		/// <summary>
		/// The optional registered sender ID for the MessageMedia service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageMediaFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaFrom { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMessageMediajsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the MessageMedia service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaApiKey { get; set; }
		
		/// <summary>
		/// The API secret for the MessageMedia service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageMediaApiSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MessageMediaApiSecret { get; set; }
		
		/// <summary>
		/// The optional registered sender ID for the MessageMedia service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageMediaFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MessageMediaFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMicrosoftTeams_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="microsoftTeamsPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MicrosoftTeamsPath { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMicrosoftTeams_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="microsoftTeamsPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MicrosoftTeamsPath { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMicrosoftTeams_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="microsoftTeamsPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MicrosoftTeamsPath { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMicrosoftTeams_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="microsoftTeamsPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MicrosoftTeamsPath { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMicrosoftTeamsjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="microsoftTeamsPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MicrosoftTeamsPath { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMicrosoftTeamsjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="microsoftTeamsPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MicrosoftTeamsPath { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMicrosoftTeamsjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="microsoftTeamsPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MicrosoftTeamsPath { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMobyt_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the Mobyt service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MobytAccessToken { get; set; }
		
		/// <summary>
		/// The sender for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytFrom { get; set; }
		
		/// <summary>
		/// The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytTypeQuality")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytTypeQuality { get; set; }
		
		/// <summary>
		/// The user key for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytUserKey { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMobyt_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mobyt service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MobytAccessToken { get; set; }
		
		/// <summary>
		/// The sender for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytFrom { get; set; }
		
		/// <summary>
		/// The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytTypeQuality")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytTypeQuality { get; set; }
		
		/// <summary>
		/// The user key for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytUserKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMobyt_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mobyt service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MobytAccessToken { get; set; }
		
		/// <summary>
		/// The sender for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytFrom { get; set; }
		
		/// <summary>
		/// The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytTypeQuality")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytTypeQuality { get; set; }
		
		/// <summary>
		/// The user key for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytUserKey { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMobyt_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mobyt service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MobytAccessToken { get; set; }
		
		/// <summary>
		/// The sender for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytFrom { get; set; }
		
		/// <summary>
		/// The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytTypeQuality")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytTypeQuality { get; set; }
		
		/// <summary>
		/// The user key for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytUserKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMobytjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the Mobyt service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MobytAccessToken { get; set; }
		
		/// <summary>
		/// The sender for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytFrom { get; set; }
		
		/// <summary>
		/// The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytTypeQuality")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytTypeQuality { get; set; }
		
		/// <summary>
		/// The user key for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytUserKey { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMobytjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mobyt service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MobytAccessToken { get; set; }
		
		/// <summary>
		/// The sender for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytFrom { get; set; }
		
		/// <summary>
		/// The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytTypeQuality")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytTypeQuality { get; set; }
		
		/// <summary>
		/// The user key for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytUserKey { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportMobytjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Mobyt service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MobytAccessToken { get; set; }
		
		/// <summary>
		/// The sender for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytFrom { get; set; }
		
		/// <summary>
		/// The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytTypeQuality")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytTypeQuality { get; set; }
		
		/// <summary>
		/// The user key for the Mobyt service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobytUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobytUserKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOctopush_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The API key for the Octopush service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OctopushApiKey { get; set; }
		
		/// <summary>
		/// The sender value for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushFrom { get; set; }
		
		/// <summary>
		/// The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushType { get; set; }
		
		/// <summary>
		/// The user login (email) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushUserLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushUserLogin { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOctopush_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Octopush service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OctopushApiKey { get; set; }
		
		/// <summary>
		/// The sender value for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushFrom { get; set; }
		
		/// <summary>
		/// The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushType { get; set; }
		
		/// <summary>
		/// The user login (email) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushUserLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushUserLogin { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOctopush_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Octopush service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OctopushApiKey { get; set; }
		
		/// <summary>
		/// The sender value for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushFrom { get; set; }
		
		/// <summary>
		/// The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushType { get; set; }
		
		/// <summary>
		/// The user login (email) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushUserLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushUserLogin { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOctopush_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Octopush service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OctopushApiKey { get; set; }
		
		/// <summary>
		/// The sender value for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushFrom { get; set; }
		
		/// <summary>
		/// The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushType { get; set; }
		
		/// <summary>
		/// The user login (email) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushUserLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushUserLogin { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOctopushjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The API key for the Octopush service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OctopushApiKey { get; set; }
		
		/// <summary>
		/// The sender value for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushFrom { get; set; }
		
		/// <summary>
		/// The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushType { get; set; }
		
		/// <summary>
		/// The user login (email) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushUserLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushUserLogin { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOctopushjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Octopush service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OctopushApiKey { get; set; }
		
		/// <summary>
		/// The sender value for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushFrom { get; set; }
		
		/// <summary>
		/// The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushType { get; set; }
		
		/// <summary>
		/// The user login (email) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushUserLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushUserLogin { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOctopushjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Octopush service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OctopushApiKey { get; set; }
		
		/// <summary>
		/// The sender value for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushFrom { get; set; }
		
		/// <summary>
		/// The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushType { get; set; }
		
		/// <summary>
		/// The user login (email) for the Octopush service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="octopushUserLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OctopushUserLogin { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOneSignal_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The API (auth) key for the One Signal service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OneSignalApiKey { get; set; }
		
		/// <summary>
		/// The App ID for the One Signal service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalAppId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalAppId { get; set; }
		
		/// <summary>
		/// The optional default recipient ID for the One Signal service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneSignalDefaultRecipientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalDefaultRecipientId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOneSignal_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API (auth) key for the One Signal service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OneSignalApiKey { get; set; }
		
		/// <summary>
		/// The App ID for the One Signal service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalAppId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalAppId { get; set; }
		
		/// <summary>
		/// The optional default recipient ID for the One Signal service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneSignalDefaultRecipientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalDefaultRecipientId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOneSignal_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API (auth) key for the One Signal service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OneSignalApiKey { get; set; }
		
		/// <summary>
		/// The App ID for the One Signal service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalAppId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalAppId { get; set; }
		
		/// <summary>
		/// The optional default recipient ID for the One Signal service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneSignalDefaultRecipientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalDefaultRecipientId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOneSignal_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API (auth) key for the One Signal service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OneSignalApiKey { get; set; }
		
		/// <summary>
		/// The App ID for the One Signal service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalAppId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalAppId { get; set; }
		
		/// <summary>
		/// The optional default recipient ID for the One Signal service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneSignalDefaultRecipientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalDefaultRecipientId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOneSignaljsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The API (auth) key for the One Signal service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OneSignalApiKey { get; set; }
		
		/// <summary>
		/// The App ID for the One Signal service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalAppId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalAppId { get; set; }
		
		/// <summary>
		/// The optional default recipient ID for the One Signal service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneSignalDefaultRecipientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalDefaultRecipientId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOneSignaljsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API (auth) key for the One Signal service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OneSignalApiKey { get; set; }
		
		/// <summary>
		/// The App ID for the One Signal service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalAppId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalAppId { get; set; }
		
		/// <summary>
		/// The optional default recipient ID for the One Signal service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneSignalDefaultRecipientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalDefaultRecipientId { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOneSignaljsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API (auth) key for the One Signal service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OneSignalApiKey { get; set; }
		
		/// <summary>
		/// The App ID for the One Signal service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oneSignalAppId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalAppId { get; set; }
		
		/// <summary>
		/// The optional default recipient ID for the One Signal service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneSignalDefaultRecipientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OneSignalDefaultRecipientId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOpsgenie_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The alias for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieAlias")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieAlias { get; set; }
		
		/// <summary>
		/// The API key for the Opsgenie service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="opsgenieApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OpsgenieApiKey { get; set; }
		
		/// <summary>
		/// The entity for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieEntity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieEntity { get; set; }
		
		/// <summary>
		/// The note for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieNote")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieNote { get; set; }
		
		/// <summary>
		/// The priority for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgeniePriority")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgeniePriority { get; set; }
		
		/// <summary>
		/// The user for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieUser")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieUser { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOpsgenie_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The alias for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieAlias")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieAlias { get; set; }
		
		/// <summary>
		/// The API key for the Opsgenie service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="opsgenieApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OpsgenieApiKey { get; set; }
		
		/// <summary>
		/// The entity for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieEntity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieEntity { get; set; }
		
		/// <summary>
		/// The note for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieNote")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieNote { get; set; }
		
		/// <summary>
		/// The priority for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgeniePriority")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgeniePriority { get; set; }
		
		/// <summary>
		/// The user for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieUser")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieUser { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOpsgenie_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The alias for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieAlias")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieAlias { get; set; }
		
		/// <summary>
		/// The API key for the Opsgenie service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="opsgenieApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OpsgenieApiKey { get; set; }
		
		/// <summary>
		/// The entity for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieEntity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieEntity { get; set; }
		
		/// <summary>
		/// The note for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieNote")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieNote { get; set; }
		
		/// <summary>
		/// The priority for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgeniePriority")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgeniePriority { get; set; }
		
		/// <summary>
		/// The user for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieUser")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieUser { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOpsgenie_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The alias for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieAlias")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieAlias { get; set; }
		
		/// <summary>
		/// The API key for the Opsgenie service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="opsgenieApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OpsgenieApiKey { get; set; }
		
		/// <summary>
		/// The entity for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieEntity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieEntity { get; set; }
		
		/// <summary>
		/// The note for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieNote")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieNote { get; set; }
		
		/// <summary>
		/// The priority for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgeniePriority")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgeniePriority { get; set; }
		
		/// <summary>
		/// The user for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieUser")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieUser { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOpsgeniejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The alias for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieAlias")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieAlias { get; set; }
		
		/// <summary>
		/// The API key for the Opsgenie service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="opsgenieApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OpsgenieApiKey { get; set; }
		
		/// <summary>
		/// The entity for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieEntity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieEntity { get; set; }
		
		/// <summary>
		/// The note for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieNote")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieNote { get; set; }
		
		/// <summary>
		/// The priority for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgeniePriority")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgeniePriority { get; set; }
		
		/// <summary>
		/// The user for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieUser")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieUser { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOpsgeniejsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The alias for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieAlias")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieAlias { get; set; }
		
		/// <summary>
		/// The API key for the Opsgenie service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="opsgenieApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OpsgenieApiKey { get; set; }
		
		/// <summary>
		/// The entity for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieEntity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieEntity { get; set; }
		
		/// <summary>
		/// The note for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieNote")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieNote { get; set; }
		
		/// <summary>
		/// The priority for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgeniePriority")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgeniePriority { get; set; }
		
		/// <summary>
		/// The user for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieUser")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieUser { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOpsgeniejsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The alias for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieAlias")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieAlias { get; set; }
		
		/// <summary>
		/// The API key for the Opsgenie service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="opsgenieApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OpsgenieApiKey { get; set; }
		
		/// <summary>
		/// The entity for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieEntity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieEntity { get; set; }
		
		/// <summary>
		/// The note for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieNote")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieNote { get; set; }
		
		/// <summary>
		/// The priority for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgeniePriority")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgeniePriority { get; set; }
		
		/// <summary>
		/// The user for the Opsgenie service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opsgenieUser")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OpsgenieUser { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOrangeSms_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The app client ID for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsClientId { get; set; }
		
		/// <summary>
		/// The app client secret for the Orange SMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OrangeSmsClientSecret { get; set; }
		
		/// <summary>
		/// The sender phone number for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsFrom { get; set; }
		
		/// <summary>
		/// The sender name for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsSenderName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsSenderName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOrangeSms_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The app client ID for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsClientId { get; set; }
		
		/// <summary>
		/// The app client secret for the Orange SMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OrangeSmsClientSecret { get; set; }
		
		/// <summary>
		/// The sender phone number for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsFrom { get; set; }
		
		/// <summary>
		/// The sender name for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsSenderName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsSenderName { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOrangeSms_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The app client ID for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsClientId { get; set; }
		
		/// <summary>
		/// The app client secret for the Orange SMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OrangeSmsClientSecret { get; set; }
		
		/// <summary>
		/// The sender phone number for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsFrom { get; set; }
		
		/// <summary>
		/// The sender name for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsSenderName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsSenderName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOrangeSms_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The app client ID for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsClientId { get; set; }
		
		/// <summary>
		/// The app client secret for the Orange SMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OrangeSmsClientSecret { get; set; }
		
		/// <summary>
		/// The sender phone number for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsFrom { get; set; }
		
		/// <summary>
		/// The sender name for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsSenderName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsSenderName { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOrangeSmsjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The app client ID for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsClientId { get; set; }
		
		/// <summary>
		/// The app client secret for the Orange SMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OrangeSmsClientSecret { get; set; }
		
		/// <summary>
		/// The sender phone number for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsFrom { get; set; }
		
		/// <summary>
		/// The sender name for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsSenderName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsSenderName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOrangeSmsjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The app client ID for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsClientId { get; set; }
		
		/// <summary>
		/// The app client secret for the Orange SMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OrangeSmsClientSecret { get; set; }
		
		/// <summary>
		/// The sender phone number for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsFrom { get; set; }
		
		/// <summary>
		/// The sender name for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsSenderName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsSenderName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOrangeSmsjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The app client ID for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsClientId { get; set; }
		
		/// <summary>
		/// The app client secret for the Orange SMS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsClientSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OrangeSmsClientSecret { get; set; }
		
		/// <summary>
		/// The sender phone number for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsFrom { get; set; }
		
		/// <summary>
		/// The sender name for the Orange SMS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orangeSmsSenderName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OrangeSmsSenderName { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOvhCloud_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The application key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudApplicationKey { get; set; }
		
		/// <summary>
		/// The application secret for the OVHcloud service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OvhCloudApplicationSecret { get; set; }
		
		/// <summary>
		/// The consumer key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudConsumerKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudConsumerKey { get; set; }
		
		/// <summary>
		/// The optional sender for the OVHcloud service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ovhCloudSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudSender { get; set; }
		
		/// <summary>
		/// The service name for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudServiceName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOvhCloud_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The application key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudApplicationKey { get; set; }
		
		/// <summary>
		/// The application secret for the OVHcloud service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OvhCloudApplicationSecret { get; set; }
		
		/// <summary>
		/// The consumer key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudConsumerKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudConsumerKey { get; set; }
		
		/// <summary>
		/// The optional sender for the OVHcloud service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ovhCloudSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudSender { get; set; }
		
		/// <summary>
		/// The service name for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudServiceName { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOvhCloud_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The application key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudApplicationKey { get; set; }
		
		/// <summary>
		/// The application secret for the OVHcloud service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OvhCloudApplicationSecret { get; set; }
		
		/// <summary>
		/// The consumer key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudConsumerKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudConsumerKey { get; set; }
		
		/// <summary>
		/// The optional sender for the OVHcloud service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ovhCloudSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudSender { get; set; }
		
		/// <summary>
		/// The service name for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudServiceName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOvhCloud_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The application key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudApplicationKey { get; set; }
		
		/// <summary>
		/// The application secret for the OVHcloud service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OvhCloudApplicationSecret { get; set; }
		
		/// <summary>
		/// The consumer key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudConsumerKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudConsumerKey { get; set; }
		
		/// <summary>
		/// The optional sender for the OVHcloud service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ovhCloudSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudSender { get; set; }
		
		/// <summary>
		/// The service name for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudServiceName { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOvhCloudjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The application key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudApplicationKey { get; set; }
		
		/// <summary>
		/// The application secret for the OVHcloud service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OvhCloudApplicationSecret { get; set; }
		
		/// <summary>
		/// The consumer key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudConsumerKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudConsumerKey { get; set; }
		
		/// <summary>
		/// The optional sender for the OVHcloud service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ovhCloudSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudSender { get; set; }
		
		/// <summary>
		/// The service name for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudServiceName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOvhCloudjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The application key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudApplicationKey { get; set; }
		
		/// <summary>
		/// The application secret for the OVHcloud service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OvhCloudApplicationSecret { get; set; }
		
		/// <summary>
		/// The consumer key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudConsumerKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudConsumerKey { get; set; }
		
		/// <summary>
		/// The optional sender for the OVHcloud service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ovhCloudSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudSender { get; set; }
		
		/// <summary>
		/// The service name for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudServiceName { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportOvhCloudjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The application key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudApplicationKey { get; set; }
		
		/// <summary>
		/// The application secret for the OVHcloud service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudApplicationSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string OvhCloudApplicationSecret { get; set; }
		
		/// <summary>
		/// The consumer key for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudConsumerKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudConsumerKey { get; set; }
		
		/// <summary>
		/// The optional sender for the OVHcloud service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ovhCloudSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudSender { get; set; }
		
		/// <summary>
		/// The service name for the OVHcloud service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ovhCloudServiceName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string OvhCloudServiceName { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerDuty_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The API token for the Pager Duty service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerDutyApiToken { get; set; }
		
		/// <summary>
		/// The dedup key for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyDedupKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyDedupKey { get; set; }
		
		/// <summary>
		/// The event action for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyEventAction")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyEventAction { get; set; }
		
		/// <summary>
		/// The payload class for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadClass")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadClass { get; set; }
		
		/// <summary>
		/// The payload component for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadComponent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadComponent { get; set; }
		
		/// <summary>
		/// The payload group for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadGroup { get; set; }
		
		/// <summary>
		/// The payload severity for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSeverity { get; set; }
		
		/// <summary>
		/// The payload source for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSource { get; set; }
		
		/// <summary>
		/// The routing key for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyRoutingKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyRoutingKey { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerDuty_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API token for the Pager Duty service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerDutyApiToken { get; set; }
		
		/// <summary>
		/// The dedup key for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyDedupKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyDedupKey { get; set; }
		
		/// <summary>
		/// The event action for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyEventAction")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyEventAction { get; set; }
		
		/// <summary>
		/// The payload class for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadClass")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadClass { get; set; }
		
		/// <summary>
		/// The payload component for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadComponent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadComponent { get; set; }
		
		/// <summary>
		/// The payload group for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadGroup { get; set; }
		
		/// <summary>
		/// The payload severity for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSeverity { get; set; }
		
		/// <summary>
		/// The payload source for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSource { get; set; }
		
		/// <summary>
		/// The routing key for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyRoutingKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyRoutingKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerDuty_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API token for the Pager Duty service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerDutyApiToken { get; set; }
		
		/// <summary>
		/// The dedup key for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyDedupKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyDedupKey { get; set; }
		
		/// <summary>
		/// The event action for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyEventAction")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyEventAction { get; set; }
		
		/// <summary>
		/// The payload class for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadClass")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadClass { get; set; }
		
		/// <summary>
		/// The payload component for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadComponent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadComponent { get; set; }
		
		/// <summary>
		/// The payload group for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadGroup { get; set; }
		
		/// <summary>
		/// The payload severity for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSeverity { get; set; }
		
		/// <summary>
		/// The payload source for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSource { get; set; }
		
		/// <summary>
		/// The routing key for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyRoutingKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyRoutingKey { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerDuty_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API token for the Pager Duty service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerDutyApiToken { get; set; }
		
		/// <summary>
		/// The dedup key for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyDedupKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyDedupKey { get; set; }
		
		/// <summary>
		/// The event action for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyEventAction")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyEventAction { get; set; }
		
		/// <summary>
		/// The payload class for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadClass")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadClass { get; set; }
		
		/// <summary>
		/// The payload component for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadComponent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadComponent { get; set; }
		
		/// <summary>
		/// The payload group for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadGroup { get; set; }
		
		/// <summary>
		/// The payload severity for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSeverity { get; set; }
		
		/// <summary>
		/// The payload source for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSource { get; set; }
		
		/// <summary>
		/// The routing key for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyRoutingKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyRoutingKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerDutyjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The API token for the Pager Duty service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerDutyApiToken { get; set; }
		
		/// <summary>
		/// The dedup key for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyDedupKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyDedupKey { get; set; }
		
		/// <summary>
		/// The event action for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyEventAction")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyEventAction { get; set; }
		
		/// <summary>
		/// The payload class for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadClass")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadClass { get; set; }
		
		/// <summary>
		/// The payload component for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadComponent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadComponent { get; set; }
		
		/// <summary>
		/// The payload group for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadGroup { get; set; }
		
		/// <summary>
		/// The payload severity for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSeverity { get; set; }
		
		/// <summary>
		/// The payload source for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSource { get; set; }
		
		/// <summary>
		/// The routing key for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyRoutingKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyRoutingKey { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerDutyjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API token for the Pager Duty service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerDutyApiToken { get; set; }
		
		/// <summary>
		/// The dedup key for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyDedupKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyDedupKey { get; set; }
		
		/// <summary>
		/// The event action for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyEventAction")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyEventAction { get; set; }
		
		/// <summary>
		/// The payload class for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadClass")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadClass { get; set; }
		
		/// <summary>
		/// The payload component for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadComponent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadComponent { get; set; }
		
		/// <summary>
		/// The payload group for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadGroup { get; set; }
		
		/// <summary>
		/// The payload severity for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSeverity { get; set; }
		
		/// <summary>
		/// The payload source for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSource { get; set; }
		
		/// <summary>
		/// The routing key for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyRoutingKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyRoutingKey { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerDutyjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API token for the Pager Duty service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerDutyApiToken { get; set; }
		
		/// <summary>
		/// The dedup key for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyDedupKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyDedupKey { get; set; }
		
		/// <summary>
		/// The event action for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyEventAction")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyEventAction { get; set; }
		
		/// <summary>
		/// The payload class for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadClass")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadClass { get; set; }
		
		/// <summary>
		/// The payload component for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadComponent")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadComponent { get; set; }
		
		/// <summary>
		/// The payload group for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadGroup { get; set; }
		
		/// <summary>
		/// The payload severity for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSeverity { get; set; }
		
		/// <summary>
		/// The payload source for the Pager Duty service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerDutyPayloadSource")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyPayloadSource { get; set; }
		
		/// <summary>
		/// The routing key for the Pager Duty service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyRoutingKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerDutyRoutingKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerTree_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the Pager Tree service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerTreeAccessToken { get; set; }
		
		/// <summary>
		/// The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccountUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeAccountUserId { get; set; }
		
		/// <summary>
		/// The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeRouterId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeRouterId { get; set; }
		
		/// <summary>
		/// The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeTeamId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeTeamId { get; set; }
		
		/// <summary>
		/// The urgency for the Pager Tree service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeUrgency")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeUrgency { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerTree_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Pager Tree service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerTreeAccessToken { get; set; }
		
		/// <summary>
		/// The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccountUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeAccountUserId { get; set; }
		
		/// <summary>
		/// The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeRouterId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeRouterId { get; set; }
		
		/// <summary>
		/// The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeTeamId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeTeamId { get; set; }
		
		/// <summary>
		/// The urgency for the Pager Tree service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeUrgency")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeUrgency { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerTree_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Pager Tree service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerTreeAccessToken { get; set; }
		
		/// <summary>
		/// The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccountUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeAccountUserId { get; set; }
		
		/// <summary>
		/// The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeRouterId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeRouterId { get; set; }
		
		/// <summary>
		/// The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeTeamId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeTeamId { get; set; }
		
		/// <summary>
		/// The urgency for the Pager Tree service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeUrgency")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeUrgency { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerTree_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Pager Tree service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerTreeAccessToken { get; set; }
		
		/// <summary>
		/// The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccountUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeAccountUserId { get; set; }
		
		/// <summary>
		/// The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeRouterId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeRouterId { get; set; }
		
		/// <summary>
		/// The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeTeamId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeTeamId { get; set; }
		
		/// <summary>
		/// The urgency for the Pager Tree service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeUrgency")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeUrgency { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerTreejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The access token for the Pager Tree service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerTreeAccessToken { get; set; }
		
		/// <summary>
		/// The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccountUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeAccountUserId { get; set; }
		
		/// <summary>
		/// The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeRouterId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeRouterId { get; set; }
		
		/// <summary>
		/// The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeTeamId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeTeamId { get; set; }
		
		/// <summary>
		/// The urgency for the Pager Tree service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeUrgency")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeUrgency { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerTreejsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Pager Tree service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerTreeAccessToken { get; set; }
		
		/// <summary>
		/// The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccountUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeAccountUserId { get; set; }
		
		/// <summary>
		/// The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeRouterId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeRouterId { get; set; }
		
		/// <summary>
		/// The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeTeamId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeTeamId { get; set; }
		
		/// <summary>
		/// The urgency for the Pager Tree service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeUrgency")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeUrgency { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPagerTreejsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Pager Tree service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PagerTreeAccessToken { get; set; }
		
		/// <summary>
		/// The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeAccountUserId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeAccountUserId { get; set; }
		
		/// <summary>
		/// The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeRouterId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeRouterId { get; set; }
		
		/// <summary>
		/// The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagerTreeTeamId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeTeamId { get; set; }
		
		/// <summary>
		/// The urgency for the Pager Tree service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerTreeUrgency")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PagerTreeUrgency { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPlivo_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The auth ID for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoAuthId { get; set; }
		
		/// <summary>
		/// The auth token for the Plivo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PlivoAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoFrom { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPlivo_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth ID for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoAuthId { get; set; }
		
		/// <summary>
		/// The auth token for the Plivo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PlivoAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPlivo_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The auth ID for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoAuthId { get; set; }
		
		/// <summary>
		/// The auth token for the Plivo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PlivoAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPlivo_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth ID for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoAuthId { get; set; }
		
		/// <summary>
		/// The auth token for the Plivo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PlivoAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPlivojsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The auth ID for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoAuthId { get; set; }
		
		/// <summary>
		/// The auth token for the Plivo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PlivoAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoFrom { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPlivojsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The auth ID for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoAuthId { get; set; }
		
		/// <summary>
		/// The auth token for the Plivo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PlivoAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPlivojsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth ID for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoAuthId { get; set; }
		
		/// <summary>
		/// The auth token for the Plivo service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PlivoAuthToken { get; set; }
		
		/// <summary>
		/// The sender value for the Plivo service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plivoFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PlivoFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushbullet_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The access token for the Pushbullet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushbulletAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushbulletAccessToken { get; set; }
		
		/// <summary>
		/// The recipient email for the Pushbullet service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushbulletEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushbulletEmail { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushbullet_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Pushbullet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushbulletAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushbulletAccessToken { get; set; }
		
		/// <summary>
		/// The recipient email for the Pushbullet service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushbulletEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushbulletEmail { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushbullet_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The access token for the Pushbullet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushbulletAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushbulletAccessToken { get; set; }
		
		/// <summary>
		/// The recipient email for the Pushbullet service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushbulletEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushbulletEmail { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushbullet_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Pushbullet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushbulletAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushbulletAccessToken { get; set; }
		
		/// <summary>
		/// The recipient email for the Pushbullet service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushbulletEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushbulletEmail { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushbulletjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The access token for the Pushbullet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushbulletAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushbulletAccessToken { get; set; }
		
		/// <summary>
		/// The recipient email for the Pushbullet service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushbulletEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushbulletEmail { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushbulletjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The access token for the Pushbullet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushbulletAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushbulletAccessToken { get; set; }
		
		/// <summary>
		/// The recipient email for the Pushbullet service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushbulletEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushbulletEmail { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushbulletjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The access token for the Pushbullet service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushbulletAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushbulletAccessToken { get; set; }
		
		/// <summary>
		/// The recipient email for the Pushbullet service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushbulletEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushbulletEmail { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushover_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The app token for the Pushover service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushoverAppToken { get; set; }
		
		/// <summary>
		/// The user key for the Pushover service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushoverUserKey { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushover_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The app token for the Pushover service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushoverAppToken { get; set; }
		
		/// <summary>
		/// The user key for the Pushover service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushoverUserKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushover_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The app token for the Pushover service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushoverAppToken { get; set; }
		
		/// <summary>
		/// The user key for the Pushover service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushoverUserKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushover_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The app token for the Pushover service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushoverAppToken { get; set; }
		
		/// <summary>
		/// The user key for the Pushover service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushoverUserKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushoverjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The app token for the Pushover service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushoverAppToken { get; set; }
		
		/// <summary>
		/// The user key for the Pushover service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushoverUserKey { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushoverjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The app token for the Pushover service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushoverAppToken { get; set; }
		
		/// <summary>
		/// The user key for the Pushover service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushoverUserKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushoverjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The app token for the Pushover service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverAppToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushoverAppToken { get; set; }
		
		/// <summary>
		/// The user key for the Pushover service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushoverUserKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushoverUserKey { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushy_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Pushy service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushyApiKey { get; set; }
		
		/// <summary>
		/// The recipient ID for the Pushy service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyTo")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushyTo { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushy_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Pushy service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushyApiKey { get; set; }
		
		/// <summary>
		/// The recipient ID for the Pushy service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyTo")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushyTo { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushy_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Pushy service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushyApiKey { get; set; }
		
		/// <summary>
		/// The recipient ID for the Pushy service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyTo")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushyTo { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushy_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Pushy service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushyApiKey { get; set; }
		
		/// <summary>
		/// The recipient ID for the Pushy service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyTo")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushyTo { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushyjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Pushy service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushyApiKey { get; set; }
		
		/// <summary>
		/// The recipient ID for the Pushy service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyTo")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushyTo { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushyjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Pushy service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushyApiKey { get; set; }
		
		/// <summary>
		/// The recipient ID for the Pushy service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyTo")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushyTo { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportPushyjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Pushy service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PushyApiKey { get; set; }
		
		/// <summary>
		/// The recipient ID for the Pushy service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pushyTo")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PushyTo { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRingCentral_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API token for the Ring Central service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RingCentralApiToken { get; set; }
		
		/// <summary>
		/// The sender value for the Ring Central service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RingCentralFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRingCentral_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API token for the Ring Central service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RingCentralApiToken { get; set; }
		
		/// <summary>
		/// The sender value for the Ring Central service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RingCentralFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRingCentral_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API token for the Ring Central service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RingCentralApiToken { get; set; }
		
		/// <summary>
		/// The sender value for the Ring Central service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RingCentralFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRingCentral_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API token for the Ring Central service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RingCentralApiToken { get; set; }
		
		/// <summary>
		/// The sender value for the Ring Central service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RingCentralFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRingCentraljsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API token for the Ring Central service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RingCentralApiToken { get; set; }
		
		/// <summary>
		/// The sender value for the Ring Central service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RingCentralFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRingCentraljsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API token for the Ring Central service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RingCentralApiToken { get; set; }
		
		/// <summary>
		/// The sender value for the Ring Central service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RingCentralFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRingCentraljsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API token for the Ring Central service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RingCentralApiToken { get; set; }
		
		/// <summary>
		/// The sender value for the Ring Central service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ringCentralFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RingCentralFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRocketChat_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The channel for the Rocket Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RocketChatChannel { get; set; }
		
		/// <summary>
		/// The access token for the Rocket Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RocketChatToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRocketChat_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The channel for the Rocket Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RocketChatChannel { get; set; }
		
		/// <summary>
		/// The access token for the Rocket Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RocketChatToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRocketChat_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The channel for the Rocket Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RocketChatChannel { get; set; }
		
		/// <summary>
		/// The access token for the Rocket Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RocketChatToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRocketChat_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The channel for the Rocket Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RocketChatChannel { get; set; }
		
		/// <summary>
		/// The access token for the Rocket Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RocketChatToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRocketChatjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The channel for the Rocket Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RocketChatChannel { get; set; }
		
		/// <summary>
		/// The access token for the Rocket Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RocketChatToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRocketChatjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The channel for the Rocket Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RocketChatChannel { get; set; }
		
		/// <summary>
		/// The access token for the Rocket Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RocketChatToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportRocketChatjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The channel for the Rocket Chat service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RocketChatChannel { get; set; }
		
		/// <summary>
		/// The access token for the Rocket Chat service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rocketChatToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string RocketChatToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendberry_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The auth key for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryAuthKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryAuthKey { get; set; }
		
		/// <summary>
		/// The sender name or phone number for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryFrom { get; set; }
		
		/// <summary>
		/// The password for the Sendberry service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendberryPassword { get; set; }
		
		/// <summary>
		/// The username for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendberry_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth key for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryAuthKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryAuthKey { get; set; }
		
		/// <summary>
		/// The sender name or phone number for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryFrom { get; set; }
		
		/// <summary>
		/// The password for the Sendberry service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendberryPassword { get; set; }
		
		/// <summary>
		/// The username for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendberry_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The auth key for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryAuthKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryAuthKey { get; set; }
		
		/// <summary>
		/// The sender name or phone number for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryFrom { get; set; }
		
		/// <summary>
		/// The password for the Sendberry service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendberryPassword { get; set; }
		
		/// <summary>
		/// The username for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendberry_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth key for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryAuthKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryAuthKey { get; set; }
		
		/// <summary>
		/// The sender name or phone number for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryFrom { get; set; }
		
		/// <summary>
		/// The password for the Sendberry service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendberryPassword { get; set; }
		
		/// <summary>
		/// The username for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendberryjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The auth key for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryAuthKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryAuthKey { get; set; }
		
		/// <summary>
		/// The sender name or phone number for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryFrom { get; set; }
		
		/// <summary>
		/// The password for the Sendberry service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendberryPassword { get; set; }
		
		/// <summary>
		/// The username for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendberryjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The auth key for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryAuthKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryAuthKey { get; set; }
		
		/// <summary>
		/// The sender name or phone number for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryFrom { get; set; }
		
		/// <summary>
		/// The password for the Sendberry service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendberryPassword { get; set; }
		
		/// <summary>
		/// The username for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendberryjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth key for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryAuthKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryAuthKey { get; set; }
		
		/// <summary>
		/// The sender name or phone number for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryFrom { get; set; }
		
		/// <summary>
		/// The password for the Sendberry service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendberryPassword { get; set; }
		
		/// <summary>
		/// The username for the Sendberry service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendberryUsername")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendberryUsername { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendinblue_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the Sendinblue service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendinblueApiKey { get; set; }
		
		/// <summary>
		/// The sender phone number for the Sendinblue service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueSenderPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendinblueSenderPhone { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendinblue_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Sendinblue service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendinblueApiKey { get; set; }
		
		/// <summary>
		/// The sender phone number for the Sendinblue service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueSenderPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendinblueSenderPhone { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendinblue_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Sendinblue service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendinblueApiKey { get; set; }
		
		/// <summary>
		/// The sender phone number for the Sendinblue service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueSenderPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendinblueSenderPhone { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendinblue_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Sendinblue service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendinblueApiKey { get; set; }
		
		/// <summary>
		/// The sender phone number for the Sendinblue service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueSenderPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendinblueSenderPhone { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendinbluejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the Sendinblue service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendinblueApiKey { get; set; }
		
		/// <summary>
		/// The sender phone number for the Sendinblue service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueSenderPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendinblueSenderPhone { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendinbluejsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Sendinblue service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendinblueApiKey { get; set; }
		
		/// <summary>
		/// The sender phone number for the Sendinblue service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueSenderPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendinblueSenderPhone { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSendinbluejsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Sendinblue service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SendinblueApiKey { get; set; }
		
		/// <summary>
		/// The sender phone number for the Sendinblue service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendinblueSenderPhone")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SendinblueSenderPhone { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSimpleTextin_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the SimpleTextin service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="simpleTextinApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SimpleTextinApiKey { get; set; }
		
		/// <summary>
		/// The from value for the SimpleTextin service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simpleTextinFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SimpleTextinFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSimpleTextin_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the SimpleTextin service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="simpleTextinApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SimpleTextinApiKey { get; set; }
		
		/// <summary>
		/// The from value for the SimpleTextin service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simpleTextinFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SimpleTextinFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSimpleTextin_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the SimpleTextin service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="simpleTextinApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SimpleTextinApiKey { get; set; }
		
		/// <summary>
		/// The from value for the SimpleTextin service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simpleTextinFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SimpleTextinFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSimpleTextin_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the SimpleTextin service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="simpleTextinApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SimpleTextinApiKey { get; set; }
		
		/// <summary>
		/// The from value for the SimpleTextin service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simpleTextinFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SimpleTextinFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSimpleTextinjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the SimpleTextin service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="simpleTextinApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SimpleTextinApiKey { get; set; }
		
		/// <summary>
		/// The from value for the SimpleTextin service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simpleTextinFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SimpleTextinFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSimpleTextinjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the SimpleTextin service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="simpleTextinApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SimpleTextinApiKey { get; set; }
		
		/// <summary>
		/// The from value for the SimpleTextin service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simpleTextinFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SimpleTextinFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSimpleTextinjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the SimpleTextin service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="simpleTextinApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SimpleTextinApiKey { get; set; }
		
		/// <summary>
		/// The from value for the SimpleTextin service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simpleTextinFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SimpleTextinFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSinch_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The auth token for the Sinch service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SinchAuthToken { get; set; }
		
		/// <summary>
		/// The sender for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchFrom { get; set; }
		
		/// <summary>
		/// The service plan ID for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchServicePlanId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchServicePlanId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSinch_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth token for the Sinch service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SinchAuthToken { get; set; }
		
		/// <summary>
		/// The sender for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchFrom { get; set; }
		
		/// <summary>
		/// The service plan ID for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchServicePlanId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchServicePlanId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSinch_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The auth token for the Sinch service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SinchAuthToken { get; set; }
		
		/// <summary>
		/// The sender for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchFrom { get; set; }
		
		/// <summary>
		/// The service plan ID for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchServicePlanId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchServicePlanId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSinch_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth token for the Sinch service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SinchAuthToken { get; set; }
		
		/// <summary>
		/// The sender for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchFrom { get; set; }
		
		/// <summary>
		/// The service plan ID for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchServicePlanId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchServicePlanId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSinchjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The auth token for the Sinch service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SinchAuthToken { get; set; }
		
		/// <summary>
		/// The sender for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchFrom { get; set; }
		
		/// <summary>
		/// The service plan ID for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchServicePlanId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchServicePlanId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSinchjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The auth token for the Sinch service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SinchAuthToken { get; set; }
		
		/// <summary>
		/// The sender for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchFrom { get; set; }
		
		/// <summary>
		/// The service plan ID for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchServicePlanId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchServicePlanId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSinchjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The auth token for the Sinch service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SinchAuthToken { get; set; }
		
		/// <summary>
		/// The sender for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchFrom { get; set; }
		
		/// <summary>
		/// The service plan ID for the Sinch service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinchServicePlanId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SinchServicePlanId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSlack_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SlackChannel { get; set; }
		
		/// <summary>
		/// The token for the Slack service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SlackToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSlack_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SlackChannel { get; set; }
		
		/// <summary>
		/// The token for the Slack service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SlackToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSlack_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SlackChannel { get; set; }
		
		/// <summary>
		/// The token for the Slack service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SlackToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSlack_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SlackChannel { get; set; }
		
		/// <summary>
		/// The token for the Slack service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SlackToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSlackjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SlackChannel { get; set; }
		
		/// <summary>
		/// The token for the Slack service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SlackToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSlackjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SlackChannel { get; set; }
		
		/// <summary>
		/// The token for the Slack service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SlackToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSlackjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SlackChannel { get; set; }
		
		/// <summary>
		/// The token for the Slack service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SlackToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSms77_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the Sms77 service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sms77ApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Sms77ApiKey { get; set; }
		
		/// <summary>
		/// The optional sender for the Sms77 service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sms77From")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Sms77From { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSms77_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Sms77 service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sms77ApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Sms77ApiKey { get; set; }
		
		/// <summary>
		/// The optional sender for the Sms77 service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sms77From")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Sms77From { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSms77_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Sms77 service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sms77ApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Sms77ApiKey { get; set; }
		
		/// <summary>
		/// The optional sender for the Sms77 service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sms77From")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Sms77From { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSms77_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Sms77 service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sms77ApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Sms77ApiKey { get; set; }
		
		/// <summary>
		/// The optional sender for the Sms77 service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sms77From")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Sms77From { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSms77jsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the Sms77 service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sms77ApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Sms77ApiKey { get; set; }
		
		/// <summary>
		/// The optional sender for the Sms77 service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sms77From")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Sms77From { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSms77jsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Sms77 service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sms77ApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Sms77ApiKey { get; set; }
		
		/// <summary>
		/// The optional sender for the Sms77 service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sms77From")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Sms77From { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSms77jsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Sms77 service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sms77ApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Sms77ApiKey { get; set; }
		
		/// <summary>
		/// The optional sender for the Sms77 service.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sms77From")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Sms77From { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsBiuras_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the SMSBIURAS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsBiurasApiKey { get; set; }
		
		/// <summary>
		/// The sender for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasFrom { get; set; }
		
		/// <summary>
		/// The client code for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasUid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasUid { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsBiuras_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the SMSBIURAS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsBiurasApiKey { get; set; }
		
		/// <summary>
		/// The sender for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasFrom { get; set; }
		
		/// <summary>
		/// The client code for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasUid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasUid { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsBiuras_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the SMSBIURAS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsBiurasApiKey { get; set; }
		
		/// <summary>
		/// The sender for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasFrom { get; set; }
		
		/// <summary>
		/// The client code for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasUid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasUid { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsBiuras_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the SMSBIURAS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsBiurasApiKey { get; set; }
		
		/// <summary>
		/// The sender for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasFrom { get; set; }
		
		/// <summary>
		/// The client code for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasUid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasUid { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsBiurasjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the SMSBIURAS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsBiurasApiKey { get; set; }
		
		/// <summary>
		/// The sender for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasFrom { get; set; }
		
		/// <summary>
		/// The client code for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasUid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasUid { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsBiurasjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the SMSBIURAS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsBiurasApiKey { get; set; }
		
		/// <summary>
		/// The sender for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasFrom { get; set; }
		
		/// <summary>
		/// The client code for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasUid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasUid { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsBiurasjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the SMSBIURAS service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsBiurasApiKey { get; set; }
		
		/// <summary>
		/// The sender for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasFrom { get; set; }
		
		/// <summary>
		/// The client code for the SMSBIURAS service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsBiurasUid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsBiurasUid { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsFactor_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The push type for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorPushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorPushType { get; set; }
		
		/// <summary>
		/// The sender value for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorSender { get; set; }
		
		/// <summary>
		/// The token for the SMSFactor service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsFactorToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsFactor_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The push type for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorPushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorPushType { get; set; }
		
		/// <summary>
		/// The sender value for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorSender { get; set; }
		
		/// <summary>
		/// The token for the SMSFactor service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsFactorToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsFactor_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The push type for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorPushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorPushType { get; set; }
		
		/// <summary>
		/// The sender value for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorSender { get; set; }
		
		/// <summary>
		/// The token for the SMSFactor service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsFactorToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsFactor_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The push type for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorPushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorPushType { get; set; }
		
		/// <summary>
		/// The sender value for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorSender { get; set; }
		
		/// <summary>
		/// The token for the SMSFactor service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsFactorToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsFactorjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The push type for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorPushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorPushType { get; set; }
		
		/// <summary>
		/// The sender value for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorSender { get; set; }
		
		/// <summary>
		/// The token for the SMSFactor service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsFactorToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsFactorjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The push type for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorPushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorPushType { get; set; }
		
		/// <summary>
		/// The sender value for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorSender { get; set; }
		
		/// <summary>
		/// The token for the SMSFactor service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsFactorToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsFactorjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The push type for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorPushType")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorPushType { get; set; }
		
		/// <summary>
		/// The sender value for the SMSFactor service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorSender")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsFactorSender { get; set; }
		
		/// <summary>
		/// The token for the SMSFactor service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsFactorToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsFactorToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsapi_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The sender name for the SMS API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsapiFrom { get; set; }
		
		/// <summary>
		/// The API token for the SMS API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsapiToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsapi_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender name for the SMS API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsapiFrom { get; set; }
		
		/// <summary>
		/// The API token for the SMS API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsapiToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsapi_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The sender name for the SMS API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsapiFrom { get; set; }
		
		/// <summary>
		/// The API token for the SMS API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsapiToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsapi_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender name for the SMS API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsapiFrom { get; set; }
		
		/// <summary>
		/// The API token for the SMS API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsapiToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsapijsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The sender name for the SMS API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsapiFrom { get; set; }
		
		/// <summary>
		/// The API token for the SMS API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsapiToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsapijsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The sender name for the SMS API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsapiFrom { get; set; }
		
		/// <summary>
		/// The API token for the SMS API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsapiToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsapijsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender name for the SMS API service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsapiFrom { get; set; }
		
		/// <summary>
		/// The API token for the SMS API service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsapiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsapiToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsc_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The sender (NB: text identity, not a phone number) for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscFrom { get; set; }
		
		/// <summary>
		/// The login for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscLogin { get; set; }
		
		/// <summary>
		/// The API password for the Smsc service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmscPassword { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsc_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender (NB: text identity, not a phone number) for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscFrom { get; set; }
		
		/// <summary>
		/// The login for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscLogin { get; set; }
		
		/// <summary>
		/// The API password for the Smsc service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmscPassword { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsc_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The sender (NB: text identity, not a phone number) for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscFrom { get; set; }
		
		/// <summary>
		/// The login for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscLogin { get; set; }
		
		/// <summary>
		/// The API password for the Smsc service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmscPassword { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsc_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender (NB: text identity, not a phone number) for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscFrom { get; set; }
		
		/// <summary>
		/// The login for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscLogin { get; set; }
		
		/// <summary>
		/// The API password for the Smsc service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmscPassword { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmscjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The sender (NB: text identity, not a phone number) for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscFrom { get; set; }
		
		/// <summary>
		/// The login for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscLogin { get; set; }
		
		/// <summary>
		/// The API password for the Smsc service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmscPassword { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmscjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The sender (NB: text identity, not a phone number) for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscFrom { get; set; }
		
		/// <summary>
		/// The login for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscLogin { get; set; }
		
		/// <summary>
		/// The API password for the Smsc service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmscPassword { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmscjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender (NB: text identity, not a phone number) for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscFrom { get; set; }
		
		/// <summary>
		/// The login for the Smsc service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscLogin")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmscLogin { get; set; }
		
		/// <summary>
		/// The API password for the Smsc service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smscPassword")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmscPassword { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsmode_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the Smsmode service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsmodeApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Smsmode service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsmodeFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsmode_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Smsmode service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsmodeApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Smsmode service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsmodeFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsmode_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Smsmode service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsmodeApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Smsmode service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsmodeFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsmode_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Smsmode service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsmodeApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Smsmode service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsmodeFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsmodejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the Smsmode service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsmodeApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Smsmode service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsmodeFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsmodejsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Smsmode service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsmodeApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Smsmode service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsmodeFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSmsmodejsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Smsmode service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SmsmodeApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Smsmode service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsmodeFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SmsmodeFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSpotHit_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SpotHitFrom { get; set; }
		
		/// <summary>
		/// The API token for the Spot-Hit service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SpotHitToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSpotHit_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SpotHitFrom { get; set; }
		
		/// <summary>
		/// The API token for the Spot-Hit service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SpotHitToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSpotHit_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SpotHitFrom { get; set; }
		
		/// <summary>
		/// The API token for the Spot-Hit service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SpotHitToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSpotHit_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SpotHitFrom { get; set; }
		
		/// <summary>
		/// The API token for the Spot-Hit service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SpotHitToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSpotHitjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SpotHitFrom { get; set; }
		
		/// <summary>
		/// The API token for the Spot-Hit service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SpotHitToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSpotHitjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SpotHitFrom { get; set; }
		
		/// <summary>
		/// The API token for the Spot-Hit service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SpotHitToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportSpotHitjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SpotHitFrom { get; set; }
		
		/// <summary>
		/// The API token for the Spot-Hit service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spotHitToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string SpotHitToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelegram_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The chat ID for the Telegram service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramChatId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelegramChatId { get; set; }
		
		/// <summary>
		/// The token for the Telegram service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelegramToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelegram_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The chat ID for the Telegram service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramChatId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelegramChatId { get; set; }
		
		/// <summary>
		/// The token for the Telegram service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelegramToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelegram_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The chat ID for the Telegram service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramChatId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelegramChatId { get; set; }
		
		/// <summary>
		/// The token for the Telegram service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelegramToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelegram_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The chat ID for the Telegram service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramChatId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelegramChatId { get; set; }
		
		/// <summary>
		/// The token for the Telegram service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelegramToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelegramjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The chat ID for the Telegram service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramChatId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelegramChatId { get; set; }
		
		/// <summary>
		/// The token for the Telegram service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelegramToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelegramjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The chat ID for the Telegram service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramChatId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelegramChatId { get; set; }
		
		/// <summary>
		/// The token for the Telegram service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelegramToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelegramjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The chat ID for the Telegram service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramChatId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelegramChatId { get; set; }
		
		/// <summary>
		/// The token for the Telegram service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telegramToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelegramToken { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelnyx_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the Telnyx service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelnyxApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxFrom { get; set; }
		
		/// <summary>
		/// The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxMessagingProfileId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxMessagingProfileId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelnyx_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Telnyx service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelnyxApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxFrom { get; set; }
		
		/// <summary>
		/// The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxMessagingProfileId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxMessagingProfileId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelnyx_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Telnyx service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelnyxApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxFrom { get; set; }
		
		/// <summary>
		/// The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxMessagingProfileId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxMessagingProfileId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelnyx_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Telnyx service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelnyxApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxFrom { get; set; }
		
		/// <summary>
		/// The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxMessagingProfileId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxMessagingProfileId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelnyxjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the Telnyx service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelnyxApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxFrom { get; set; }
		
		/// <summary>
		/// The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxMessagingProfileId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxMessagingProfileId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelnyxjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Telnyx service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelnyxApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxFrom { get; set; }
		
		/// <summary>
		/// The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxMessagingProfileId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxMessagingProfileId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTelnyxjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Telnyx service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TelnyxApiKey { get; set; }
		
		/// <summary>
		/// The from value for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxFrom { get; set; }
		
		/// <summary>
		/// The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="telnyxMessagingProfileId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TelnyxMessagingProfileId { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTermii_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the Termii service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TermiiApiKey { get; set; }
		
		/// <summary>
		/// The channel for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiChannel { get; set; }
		
		/// <summary>
		/// The sender value for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTermii_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Termii service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TermiiApiKey { get; set; }
		
		/// <summary>
		/// The channel for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiChannel { get; set; }
		
		/// <summary>
		/// The sender value for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTermii_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Termii service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TermiiApiKey { get; set; }
		
		/// <summary>
		/// The channel for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiChannel { get; set; }
		
		/// <summary>
		/// The sender value for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTermii_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Termii service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TermiiApiKey { get; set; }
		
		/// <summary>
		/// The channel for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiChannel { get; set; }
		
		/// <summary>
		/// The sender value for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTermiijsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The API key for the Termii service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TermiiApiKey { get; set; }
		
		/// <summary>
		/// The channel for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiChannel { get; set; }
		
		/// <summary>
		/// The sender value for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTermiijsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The API key for the Termii service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TermiiApiKey { get; set; }
		
		/// <summary>
		/// The channel for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiChannel { get; set; }
		
		/// <summary>
		/// The sender value for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTermiijsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The API key for the Termii service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TermiiApiKey { get; set; }
		
		/// <summary>
		/// The channel for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiChannel { get; set; }
		
		/// <summary>
		/// The sender value for the Termii service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="termiiFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TermiiFrom { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
	}
	
	/// <summary>
	/// The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTrello_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloApiKey { get; set; }
		
		/// <summary>
		/// The API token for the Trello service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TrelloApiToken { get; set; }
		
		/// <summary>
		/// The list ID for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloListId { get; set; }
	}
	
	/// <summary>
	/// The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTrello_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloApiKey { get; set; }
		
		/// <summary>
		/// The API token for the Trello service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TrelloApiToken { get; set; }
		
		/// <summary>
		/// The list ID for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloListId { get; set; }
	}
	
	/// <summary>
	/// The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTrello_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloApiKey { get; set; }
		
		/// <summary>
		/// The API token for the Trello service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TrelloApiToken { get; set; }
		
		/// <summary>
		/// The list ID for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloListId { get; set; }
	}
	
	/// <summary>
	/// The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTrello_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloApiKey { get; set; }
		
		/// <summary>
		/// The API token for the Trello service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TrelloApiToken { get; set; }
		
		/// <summary>
		/// The list ID for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloListId { get; set; }
	}
	
	/// <summary>
	/// The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTrellojsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloApiKey { get; set; }
		
		/// <summary>
		/// The API token for the Trello service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TrelloApiToken { get; set; }
		
		/// <summary>
		/// The list ID for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloListId { get; set; }
	}
	
	/// <summary>
	/// The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTrellojsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloApiKey { get; set; }
		
		/// <summary>
		/// The API token for the Trello service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TrelloApiToken { get; set; }
		
		/// <summary>
		/// The list ID for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloListId { get; set; }
	}
	
	/// <summary>
	/// The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTrellojsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloApiKey { get; set; }
		
		/// <summary>
		/// The API token for the Trello service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloApiToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TrelloApiToken { get; set; }
		
		/// <summary>
		/// The list ID for the Trello service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trelloListId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TrelloListId { get; set; }
	}
	
	/// <summary>
	/// The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTurboSms_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The auth token for the TurboSms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TurboSmsAuthToken { get; set; }
		
		/// <summary>
		/// The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TurboSmsFrom { get; set; }
	}
	
	/// <summary>
	/// The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTurboSms_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The auth token for the TurboSms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TurboSmsAuthToken { get; set; }
		
		/// <summary>
		/// The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TurboSmsFrom { get; set; }
	}
	
	/// <summary>
	/// The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTurboSms_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The auth token for the TurboSms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TurboSmsAuthToken { get; set; }
		
		/// <summary>
		/// The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TurboSmsFrom { get; set; }
	}
	
	/// <summary>
	/// The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTurboSms_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The auth token for the TurboSms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TurboSmsAuthToken { get; set; }
		
		/// <summary>
		/// The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TurboSmsFrom { get; set; }
	}
	
	/// <summary>
	/// The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTurboSmsjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The auth token for the TurboSms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TurboSmsAuthToken { get; set; }
		
		/// <summary>
		/// The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TurboSmsFrom { get; set; }
	}
	
	/// <summary>
	/// The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTurboSmsjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The auth token for the TurboSms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TurboSmsAuthToken { get; set; }
		
		/// <summary>
		/// The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TurboSmsFrom { get; set; }
	}
	
	/// <summary>
	/// The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTurboSmsjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The auth token for the TurboSms service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsAuthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TurboSmsAuthToken { get; set; }
		
		/// <summary>
		/// The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turboSmsFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TurboSmsFrom { get; set; }
	}
	
	/// <summary>
	/// The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwilio_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioFrom { get; set; }
		
		/// <summary>
		/// The SID for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioSid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioSid { get; set; }
		
		/// <summary>
		/// The token for the Twilio service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwilioToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwilio_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioFrom { get; set; }
		
		/// <summary>
		/// The SID for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioSid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioSid { get; set; }
		
		/// <summary>
		/// The token for the Twilio service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwilioToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwilio_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioFrom { get; set; }
		
		/// <summary>
		/// The SID for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioSid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioSid { get; set; }
		
		/// <summary>
		/// The token for the Twilio service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwilioToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwilio_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioFrom { get; set; }
		
		/// <summary>
		/// The SID for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioSid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioSid { get; set; }
		
		/// <summary>
		/// The token for the Twilio service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwilioToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwiliojsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioFrom { get; set; }
		
		/// <summary>
		/// The SID for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioSid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioSid { get; set; }
		
		/// <summary>
		/// The token for the Twilio service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwilioToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwiliojsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioFrom { get; set; }
		
		/// <summary>
		/// The SID for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioSid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioSid { get; set; }
		
		/// <summary>
		/// The token for the Twilio service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwilioToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwiliojsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioFrom { get; set; }
		
		/// <summary>
		/// The SID for the Twilio service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioSid")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TwilioSid { get; set; }
		
		/// <summary>
		/// The token for the Twilio service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twilioToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwilioToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwitter_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The access token for the Twitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twitterAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwitterAccessToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwitter_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The access token for the Twitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twitterAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwitterAccessToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwitter_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The access token for the Twitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twitterAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwitterAccessToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwitter_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The access token for the Twitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twitterAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwitterAccessToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwitterjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The access token for the Twitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twitterAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwitterAccessToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwitterjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The access token for the Twitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twitterAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwitterAccessToken { get; set; }
	}
	
	/// <summary>
	/// The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportTwitterjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The access token for the Twitter service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="twitterAccessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string TwitterAccessToken { get; set; }
	}
	
	/// <summary>
	/// The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportVonage_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageFrom { get; set; }
		
		/// <summary>
		/// The key for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageKey { get; set; }
		
		/// <summary>
		/// The secret for the Vonage service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string VonageSecret { get; set; }
	}
	
	/// <summary>
	/// The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportVonage_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageFrom { get; set; }
		
		/// <summary>
		/// The key for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageKey { get; set; }
		
		/// <summary>
		/// The secret for the Vonage service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string VonageSecret { get; set; }
	}
	
	/// <summary>
	/// The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportVonage_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageFrom { get; set; }
		
		/// <summary>
		/// The key for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageKey { get; set; }
		
		/// <summary>
		/// The secret for the Vonage service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string VonageSecret { get; set; }
	}
	
	/// <summary>
	/// The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportVonage_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageFrom { get; set; }
		
		/// <summary>
		/// The key for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageKey { get; set; }
		
		/// <summary>
		/// The secret for the Vonage service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string VonageSecret { get; set; }
	}
	
	/// <summary>
	/// The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportVonagejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageFrom { get; set; }
		
		/// <summary>
		/// The key for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageKey { get; set; }
		
		/// <summary>
		/// The secret for the Vonage service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string VonageSecret { get; set; }
	}
	
	/// <summary>
	/// The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportVonagejsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageFrom { get; set; }
		
		/// <summary>
		/// The key for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageKey { get; set; }
		
		/// <summary>
		/// The secret for the Vonage service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string VonageSecret { get; set; }
	}
	
	/// <summary>
	/// The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportVonagejsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The sender for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageFrom")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageFrom { get; set; }
		
		/// <summary>
		/// The key for the Vonage service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VonageKey { get; set; }
		
		/// <summary>
		/// The secret for the Vonage service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vonageSecret")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string VonageSecret { get; set; }
	}
	
	/// <summary>
	/// The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportWebhook_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The HTTP request method that must be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="httpMethodCode")]
		public string HttpMethodCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustBeEncryptedValue")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MustBeEncryptedValue { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookHeaders")]
		public string[] WebhookHeaders { get; set; }
		
		/// <summary>
		/// The URL for the Webhook service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string WebhookUrl { get; set; }
	}
	
	/// <summary>
	/// The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportWebhook_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The HTTP request method that must be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="httpMethodCode")]
		public string HttpMethodCode { get; set; }
		
		/// <summary>
		/// An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustBeEncryptedValue")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MustBeEncryptedValue { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookHeaders")]
		public string[] WebhookHeaders { get; set; }
		
		/// <summary>
		/// The URL for the Webhook service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string WebhookUrl { get; set; }
	}
	
	/// <summary>
	/// The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportWebhook_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The HTTP request method that must be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="httpMethodCode")]
		public string HttpMethodCode { get; set; }
		
		/// <summary>
		/// An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustBeEncryptedValue")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MustBeEncryptedValue { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookHeaders")]
		public string[] WebhookHeaders { get; set; }
		
		/// <summary>
		/// The URL for the Webhook service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string WebhookUrl { get; set; }
	}
	
	/// <summary>
	/// The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportWebhook_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The HTTP request method that must be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="httpMethodCode")]
		public string HttpMethodCode { get; set; }
		
		/// <summary>
		/// An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustBeEncryptedValue")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MustBeEncryptedValue { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookHeaders")]
		public string[] WebhookHeaders { get; set; }
		
		/// <summary>
		/// The URL for the Webhook service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string WebhookUrl { get; set; }
	}
	
	/// <summary>
	/// The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportWebhookjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The HTTP request method that must be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="httpMethodCode")]
		public string HttpMethodCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustBeEncryptedValue")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MustBeEncryptedValue { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookHeaders")]
		public string[] WebhookHeaders { get; set; }
		
		/// <summary>
		/// The URL for the Webhook service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string WebhookUrl { get; set; }
	}
	
	/// <summary>
	/// The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportWebhookjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The HTTP request method that must be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="httpMethodCode")]
		public string HttpMethodCode { get; set; }
		
		/// <summary>
		/// An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustBeEncryptedValue")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MustBeEncryptedValue { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookHeaders")]
		public string[] WebhookHeaders { get; set; }
		
		/// <summary>
		/// The URL for the Webhook service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string WebhookUrl { get; set; }
	}
	
	/// <summary>
	/// The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportWebhookjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The HTTP request method that must be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="httpMethodCode")]
		public string HttpMethodCode { get; set; }
		
		/// <summary>
		/// An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustBeEncryptedValue")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string MustBeEncryptedValue { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookHeaders")]
		public string[] WebhookHeaders { get; set; }
		
		/// <summary>
		/// The URL for the Webhook service.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string WebhookUrl { get; set; }
	}
	
	/// <summary>
	/// The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportYunpian_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Yunpian service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yunpianApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string YunpianApiKey { get; set; }
	}
	
	/// <summary>
	/// The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportYunpian_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Yunpian service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yunpianApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string YunpianApiKey { get; set; }
	}
	
	/// <summary>
	/// The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportYunpian_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Yunpian service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yunpianApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string YunpianApiKey { get; set; }
	}
	
	/// <summary>
	/// The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportYunpian_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Yunpian service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yunpianApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string YunpianApiKey { get; set; }
	}
	
	/// <summary>
	/// The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportYunpianjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Yunpian service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yunpianApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string YunpianApiKey { get; set; }
	}
	
	/// <summary>
	/// The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportYunpianjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Yunpian service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yunpianApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string YunpianApiKey { get; set; }
	}
	
	/// <summary>
	/// The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportYunpianjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The API key for the Yunpian service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yunpianApiKey")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string YunpianApiKey { get; set; }
	}
	
	/// <summary>
	/// The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZendesk_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The login email address for the Zendesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Zendesk service (domain.zendesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskHost { get; set; }
		
		/// <summary>
		/// The token for the Zendesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZendeskToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZendesk_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The login email address for the Zendesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Zendesk service (domain.zendesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskHost { get; set; }
		
		/// <summary>
		/// The token for the Zendesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZendeskToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZendesk_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The login email address for the Zendesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Zendesk service (domain.zendesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskHost { get; set; }
		
		/// <summary>
		/// The token for the Zendesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZendeskToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZendesk_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The login email address for the Zendesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Zendesk service (domain.zendesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskHost { get; set; }
		
		/// <summary>
		/// The token for the Zendesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZendeskToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZendeskjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The login email address for the Zendesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Zendesk service (domain.zendesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskHost { get; set; }
		
		/// <summary>
		/// The token for the Zendesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZendeskToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZendeskjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The login email address for the Zendesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Zendesk service (domain.zendesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskHost { get; set; }
		
		/// <summary>
		/// The token for the Zendesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZendeskToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZendeskjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The login email address for the Zendesk service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskEmail { get; set; }
		
		/// <summary>
		/// The host name for the Zendesk service (domain.zendesk.com).
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZendeskHost { get; set; }
		
		/// <summary>
		/// The token for the Zendesk service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zendeskToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZendeskToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZulip_get
	{
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The channel for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipChannel { get; set; }
		
		/// <summary>
		/// The email for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipEmail { get; set; }
		
		/// <summary>
		/// The host for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipHost { get; set; }
		
		/// <summary>
		/// The token for the Zulip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZulipToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZulip_patch
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The channel for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipChannel { get; set; }
		
		/// <summary>
		/// The email for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipEmail { get; set; }
		
		/// <summary>
		/// The host for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipHost { get; set; }
		
		/// <summary>
		/// The token for the Zulip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZulipToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZulip_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The channel for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipChannel { get; set; }
		
		/// <summary>
		/// The email for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipEmail { get; set; }
		
		/// <summary>
		/// The host for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipHost { get; set; }
		
		/// <summary>
		/// The token for the Zulip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZulipToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZulip_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The channel for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipChannel { get; set; }
		
		/// <summary>
		/// The email for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipEmail { get; set; }
		
		/// <summary>
		/// The host for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipHost { get; set; }
		
		/// <summary>
		/// The token for the Zulip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZulipToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZulipjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// When the resource instance was created. This date-time is in the UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the person who owns this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The channel for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipChannel { get; set; }
		
		/// <summary>
		/// The email for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipEmail { get; set; }
		
		/// <summary>
		/// The host for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipHost { get; set; }
		
		/// <summary>
		/// The token for the Zulip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZulipToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZulipjsonld_post
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The partition that contains this resource instance. The resource cannot be moved to another partition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The channel for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipChannel { get; set; }
		
		/// <summary>
		/// The email for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipEmail { get; set; }
		
		/// <summary>
		/// The host for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipHost { get; set; }
		
		/// <summary>
		/// The token for the Zulip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZulipToken { get; set; }
	}
	
	/// <summary>
	/// The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransportZulipjsonld_put
	{
		
		/// <summary>
		/// User-provided string on which to segment and filter data. Max 50 characters.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSegmentCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DataSegmentCode { get; set; }
		
		/// <summary>
		/// The name of the transport.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transportName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string TransportName { get; set; }
		
		/// <summary>
		/// The channel for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipChannel")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipChannel { get; set; }
		
		/// <summary>
		/// The email for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipEmail { get; set; }
		
		/// <summary>
		/// The host for the Zulip service.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipHost")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ZulipHost { get; set; }
		
		/// <summary>
		/// The token for the Zulip service. Stored in encrypted format.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zulipToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ZulipToken { get; set; }
	}
	
	/// <summary>
	/// The UserAccount resource contains basic information regarding the authenticated user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccount_get
	{
		
		/// <summary>
		/// The account level of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountLevelCode")]
		public string AccountLevelCode { get; set; }
		
		/// <summary>
		/// If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsOveragePercentTripSwitch")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> CreditsOveragePercentTripSwitch { get; set; }
		
		/// <summary>
		/// The email address of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The first name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the user account has overdue payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDelinquent")]
		public System.Nullable<System.Boolean> IsDelinquent { get; set; }
		
		/// <summary>
		/// The last name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// The timezone of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezoneCode")]
		public string TimezoneCode { get; set; }
	}
	
	/// <summary>
	/// The UserAccount resource contains basic information regarding the authenticated user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccount_patch
	{
		
		/// <summary>
		/// If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsOveragePercentTripSwitch")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> CreditsOveragePercentTripSwitch { get; set; }
	}
	
	/// <summary>
	/// The UserAccount resource contains basic information regarding the authenticated user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccount_put
	{
		
		/// <summary>
		/// If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsOveragePercentTripSwitch")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> CreditsOveragePercentTripSwitch { get; set; }
	}
	
	/// <summary>
	/// The UserAccount resource contains basic information regarding the authenticated user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccountjsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		/// <summary>
		/// The account level of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountLevelCode")]
		public string AccountLevelCode { get; set; }
		
		/// <summary>
		/// If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsOveragePercentTripSwitch")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> CreditsOveragePercentTripSwitch { get; set; }
		
		/// <summary>
		/// The email address of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The first name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the user account has overdue payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDelinquent")]
		public System.Nullable<System.Boolean> IsDelinquent { get; set; }
		
		/// <summary>
		/// The last name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// The timezone of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezoneCode")]
		public string TimezoneCode { get; set; }
	}
	
	/// <summary>
	/// The UserAccount resource contains basic information regarding the authenticated user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccountjsonld_put
	{
		
		/// <summary>
		/// If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsOveragePercentTripSwitch")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> CreditsOveragePercentTripSwitch { get; set; }
	}
	
	/// <summary>
	/// The UserAccountLevelCode resource is a set of codes that describes the different levels that can be assigned to user accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccountLevelCode_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="codeName")]
		public string CodeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The UserAccountLevelCode resource is a set of codes that describes the different levels that can be assigned to user accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccountLevelCodejsonld_get
	{
		
		[System.Runtime.Serialization.DataMember(Name="@context")]
		public string _context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeName")]
		public string CodeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves the collection of AlertLog resources.
		/// Retrieves the collection of AlertLog resources.
		/// Api_alert_log_get_collection api/alert-log
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>AlertLog collection</returns>
		public async Task<AlertLog_get[]> Api_alert_log_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string monitor, string[] monitor_, string alertService, string[] alertService_, string alertLogStatusCode, string[] alertLogStatusCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alert-log?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&monitor=" + (monitor==null? "" : System.Uri.EscapeDataString(monitor))+"&"+string.Join("&", monitor_.Select(z => $"monitor[]={System.Uri.EscapeDataString(z.ToString())}"))+"&alertService=" + (alertService==null? "" : System.Uri.EscapeDataString(alertService))+"&"+string.Join("&", alertService_.Select(z => $"alertService[]={System.Uri.EscapeDataString(z.ToString())}"))+"&alertLogStatusCode=" + (alertLogStatusCode==null? "" : System.Uri.EscapeDataString(alertLogStatusCode))+"&"+string.Join("&", alertLogStatusCode_.Select(z => $"alertLogStatusCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertLog_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of AlertLogStatusCode resources.
		/// Retrieves the collection of AlertLogStatusCode resources.
		/// Api_alert_log_status_code_get_collection api/alert-log-status-code
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>AlertLogStatusCode collection</returns>
		public async Task<AlertLogStatusCode_get[]> Api_alert_log_status_code_get_collectionAsync(int page, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alert-log-status-code?page="+page+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertLogStatusCode_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a AlertLogStatusCode resource.
		/// Retrieves a AlertLogStatusCode resource.
		/// Api_alert_log_status_code_id_get api/alert-log-status-code/{id}
		/// </summary>
		/// <param name="id">AlertLogStatusCode identifier</param>
		/// <returns>AlertLogStatusCode resource</returns>
		public async Task<AlertLogStatusCode_get> Api_alert_log_status_code_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alert-log-status-code/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertLogStatusCode_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a AlertLog resource.
		/// Retrieves a AlertLog resource.
		/// Api_alert_log_id_get api/alert-log/{id}
		/// </summary>
		/// <param name="id">AlertLog identifier</param>
		/// <returns>AlertLog resource</returns>
		public async Task<AlertLog_get> Api_alert_log_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alert-log/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertLog_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of AlertService resources.
		/// Retrieves the collection of AlertService resources.
		/// Api_alert_service_get_collection api/alert-service
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>AlertService collection</returns>
		public async Task<AlertService_get[]> Api_alert_service_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alert-service?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertService_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a AlertService resource.
		/// Creates a AlertService resource.
		/// Api_alert_service_post api/alert-service
		/// </summary>
		/// <param name="requestBody">The new AlertService resource</param>
		public async Task Api_alert_service_postAsync(AlertService_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alert-service";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of AlertServiceTransportCode resources.
		/// Retrieves the collection of AlertServiceTransportCode resources.
		/// Api_alert_service_transport_code_get_collection api/alert-service-transport-code
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>AlertServiceTransportCode collection</returns>
		public async Task<AlertServiceTransportCode_get[]> Api_alert_service_transport_code_get_collectionAsync(int page, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alert-service-transport-code?page="+page+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertServiceTransportCode_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a AlertServiceTransportCode resource.
		/// Retrieves a AlertServiceTransportCode resource.
		/// Api_alert_service_transport_code_id_get api/alert-service-transport-code/{id}
		/// </summary>
		/// <param name="id">AlertServiceTransportCode identifier</param>
		/// <returns>AlertServiceTransportCode resource</returns>
		public async Task<AlertServiceTransportCode_get> Api_alert_service_transport_code_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alert-service-transport-code/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertServiceTransportCode_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the AlertService resource.
		/// Removes the AlertService resource.
		/// Api_alert_service_id_delete api/alert-service/{id}
		/// </summary>
		/// <param name="id">AlertService identifier</param>
		public async Task Api_alert_service_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alert-service/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a AlertService resource.
		/// Retrieves a AlertService resource.
		/// Api_alert_service_id_get api/alert-service/{id}
		/// </summary>
		/// <param name="id">AlertService identifier</param>
		/// <returns>AlertService resource</returns>
		public async Task<AlertService_get> Api_alert_service_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alert-service/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertService_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the AlertService resource.
		/// Replaces the AlertService resource.
		/// Api_alert_service_id_put api/alert-service/{id}
		/// </summary>
		/// <param name="id">AlertService identifier</param>
		/// <param name="requestBody">The updated AlertService resource</param>
		/// <returns>AlertService resource updated</returns>
		public async Task<AlertService_get> Api_alert_service_id_putAsync(string id, AlertService_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alert-service/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertService_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of CreditsConsumption resources.
		/// Retrieves the collection of CreditsConsumption resources.
		/// Api_credits_consumption_get_collection api/credits-consumption
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>CreditsConsumption collection</returns>
		public async Task<CreditsConsumption_get[]> Api_credits_consumption_get_collectionAsync(int page, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/credits-consumption?page="+page+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreditsConsumption_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a CreditsConsumption resource.
		/// Retrieves a CreditsConsumption resource.
		/// Api_credits_consumption_id_get api/credits-consumption/{id}
		/// </summary>
		/// <param name="id">CreditsConsumption identifier</param>
		/// <returns>CreditsConsumption resource</returns>
		public async Task<CreditsConsumption_get> Api_credits_consumption_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/credits-consumption/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreditsConsumption_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of HttpMethodCode resources.
		/// Retrieves the collection of HttpMethodCode resources.
		/// Api_http_method_code_get_collection api/http-method-code
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>HttpMethodCode collection</returns>
		public async Task<HttpMethodCode_get[]> Api_http_method_code_get_collectionAsync(int page, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/http-method-code?page="+page+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpMethodCode_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a HttpMethodCode resource.
		/// Retrieves a HttpMethodCode resource.
		/// Api_http_method_code_id_get api/http-method-code/{id}
		/// </summary>
		/// <param name="id">HttpMethodCode identifier</param>
		/// <returns>HttpMethodCode resource</returns>
		public async Task<HttpMethodCode_get> Api_http_method_code_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/http-method-code/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpMethodCode_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of MediaObject resources.
		/// Retrieves the collection of MediaObject resources.
		/// Api_media_object_get_collection api/media-object
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>MediaObject collection</returns>
		public async Task<MediaObject_get[]> Api_media_object_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/media-object?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MediaObject_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the MediaObject resource.
		/// Removes the MediaObject resource.
		/// Api_media_object_id_delete api/media-object/{id}
		/// </summary>
		/// <param name="id">MediaObject identifier</param>
		public async Task Api_media_object_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/media-object/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a MediaObject resource.
		/// Retrieves a MediaObject resource.
		/// Api_media_object_id_get api/media-object/{id}
		/// </summary>
		/// <param name="id">MediaObject identifier</param>
		/// <returns>MediaObject resource</returns>
		public async Task<MediaObject_get> Api_media_object_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/media-object/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MediaObject_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of Monitor resources.
		/// Retrieves the collection of Monitor resources.
		/// Api_monitor_get_collection api/monitor
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>Monitor collection</returns>
		public async Task<Monitor_get[]> Api_monitor_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monitor?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Monitor_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a Monitor resource.
		/// Creates a Monitor resource.
		/// Api_monitor_post api/monitor
		/// </summary>
		/// <param name="requestBody">The new Monitor resource</param>
		public async Task Api_monitor_postAsync(Monitor_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monitor";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of MonitorStatusCode resources.
		/// Retrieves the collection of MonitorStatusCode resources.
		/// Api_monitor_status_code_get_collection api/monitor-status-code
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>MonitorStatusCode collection</returns>
		public async Task<MonitorStatusCode_get[]> Api_monitor_status_code_get_collectionAsync(int page, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monitor-status-code?page="+page+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MonitorStatusCode_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a MonitorStatusCode resource.
		/// Retrieves a MonitorStatusCode resource.
		/// Api_monitor_status_code_id_get api/monitor-status-code/{id}
		/// </summary>
		/// <param name="id">MonitorStatusCode identifier</param>
		/// <returns>MonitorStatusCode resource</returns>
		public async Task<MonitorStatusCode_get> Api_monitor_status_code_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monitor-status-code/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MonitorStatusCode_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of MonitorStatusLog resources.
		/// Retrieves the collection of MonitorStatusLog resources.
		/// Api_monitor_status_log_get_collection api/monitor-status-log
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>MonitorStatusLog collection</returns>
		public async Task<MonitorStatusLog_get[]> Api_monitor_status_log_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string monitor, string[] monitor_, string monitorStatusCode, string[] monitorStatusCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monitor-status-log?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&monitor=" + (monitor==null? "" : System.Uri.EscapeDataString(monitor))+"&"+string.Join("&", monitor_.Select(z => $"monitor[]={System.Uri.EscapeDataString(z.ToString())}"))+"&monitorStatusCode=" + (monitorStatusCode==null? "" : System.Uri.EscapeDataString(monitorStatusCode))+"&"+string.Join("&", monitorStatusCode_.Select(z => $"monitorStatusCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MonitorStatusLog_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a MonitorStatusLog resource.
		/// Retrieves a MonitorStatusLog resource.
		/// Api_monitor_status_log_id_get api/monitor-status-log/{id}
		/// </summary>
		/// <param name="id">MonitorStatusLog identifier</param>
		/// <returns>MonitorStatusLog resource</returns>
		public async Task<MonitorStatusLog_get> Api_monitor_status_log_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monitor-status-log/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MonitorStatusLog_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of MonitorTypeCode resources.
		/// Retrieves the collection of MonitorTypeCode resources.
		/// Api_monitor_type_code_get_collection api/monitor-type-code
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>MonitorTypeCode collection</returns>
		public async Task<MonitorTypeCode_get[]> Api_monitor_type_code_get_collectionAsync(int page, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monitor-type-code?page="+page+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MonitorTypeCode_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a MonitorTypeCode resource.
		/// Retrieves a MonitorTypeCode resource.
		/// Api_monitor_type_code_id_get api/monitor-type-code/{id}
		/// </summary>
		/// <param name="id">MonitorTypeCode identifier</param>
		/// <returns>MonitorTypeCode resource</returns>
		public async Task<MonitorTypeCode_get> Api_monitor_type_code_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monitor-type-code/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MonitorTypeCode_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the Monitor resource.
		/// Removes the Monitor resource.
		/// Api_monitor_id_delete api/monitor/{id}
		/// </summary>
		/// <param name="id">Monitor identifier</param>
		public async Task Api_monitor_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monitor/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a Monitor resource.
		/// Retrieves a Monitor resource.
		/// Api_monitor_id_get api/monitor/{id}
		/// </summary>
		/// <param name="id">Monitor identifier</param>
		/// <returns>Monitor resource</returns>
		public async Task<Monitor_get> Api_monitor_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monitor/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Monitor_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the Monitor resource.
		/// Replaces the Monitor resource.
		/// Api_monitor_id_put api/monitor/{id}
		/// </summary>
		/// <param name="id">Monitor identifier</param>
		/// <param name="requestBody">The updated Monitor resource</param>
		/// <returns>Monitor resource updated</returns>
		public async Task<Monitor_get> Api_monitor_id_putAsync(string id, Monitor_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monitor/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Monitor_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of Partition resources.
		/// Retrieves the collection of Partition resources.
		/// Api_partition_get_collection api/partition
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>Partition collection</returns>
		public async Task<Partition_get[]> Api_partition_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/partition?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Partition_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a Partition resource.
		/// Creates a Partition resource.
		/// Api_partition_post api/partition
		/// </summary>
		/// <param name="requestBody">The new Partition resource</param>
		public async Task Api_partition_postAsync(Partition_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the Partition resource.
		/// Removes the Partition resource.
		/// Api_partition_id_delete api/partition/{id}
		/// </summary>
		/// <param name="id">Partition identifier</param>
		public async Task Api_partition_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/partition/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a Partition resource.
		/// Retrieves a Partition resource.
		/// Api_partition_id_get api/partition/{id}
		/// </summary>
		/// <param name="id">Partition identifier</param>
		/// <returns>Partition resource</returns>
		public async Task<Partition_get> Api_partition_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/partition/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Partition_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the Partition resource.
		/// Replaces the Partition resource.
		/// Api_partition_id_put api/partition/{id}
		/// </summary>
		/// <param name="id">Partition identifier</param>
		/// <param name="requestBody">The updated Partition resource</param>
		/// <returns>Partition resource updated</returns>
		public async Task<Partition_get> Api_partition_id_putAsync(string id, Partition_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/partition/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Partition_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of Ping resources.
		/// Retrieves the collection of Ping resources.
		/// Api_ping_get_collection api/ping
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>Ping collection</returns>
		public async Task<Ping_get[]> Api_ping_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string monitor, string[] monitor_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ping?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&monitor=" + (monitor==null? "" : System.Uri.EscapeDataString(monitor))+"&"+string.Join("&", monitor_.Select(z => $"monitor[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Ping_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a Ping resource.
		/// Creates a Ping resource.
		/// Api_ping_post api/ping
		/// </summary>
		/// <param name="requestBody">The new Ping resource</param>
		public async Task Api_ping_postAsync(Ping_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ping";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of PingMethodCode resources.
		/// Retrieves the collection of PingMethodCode resources.
		/// Api_ping_method_code_get_collection api/ping-method-code
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>PingMethodCode collection</returns>
		public async Task<PingMethodCode_get[]> Api_ping_method_code_get_collectionAsync(int page, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ping-method-code?page="+page+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PingMethodCode_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a PingMethodCode resource.
		/// Retrieves a PingMethodCode resource.
		/// Api_ping_method_code_id_get api/ping-method-code/{id}
		/// </summary>
		/// <param name="id">PingMethodCode identifier</param>
		/// <returns>PingMethodCode resource</returns>
		public async Task<PingMethodCode_get> Api_ping_method_code_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ping-method-code/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PingMethodCode_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a Ping resource.
		/// Retrieves a Ping resource.
		/// Api_ping_id_get api/ping/{id}
		/// </summary>
		/// <param name="id">Ping identifier</param>
		/// <returns>Ping resource</returns>
		public async Task<Ping_get> Api_ping_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ping/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Ping_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TeamInvitation resources.
		/// Retrieves the collection of TeamInvitation resources.
		/// Api_team_invitation_get_collection api/team-invitation
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TeamInvitation collection</returns>
		public async Task<TeamInvitation_get[]> Api_team_invitation_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string inviteeEmail, string[] inviteeEmail_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/team-invitation?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&inviteeEmail=" + (inviteeEmail==null? "" : System.Uri.EscapeDataString(inviteeEmail))+"&"+string.Join("&", inviteeEmail_.Select(z => $"inviteeEmail[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TeamInvitation_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TeamInvitation resource.
		/// Creates a TeamInvitation resource.
		/// Api_team_invitation_post api/team-invitation
		/// </summary>
		/// <param name="requestBody">The new TeamInvitation resource</param>
		public async Task Api_team_invitation_postAsync(TeamInvitation_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/team-invitation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TeamInvitation resource.
		/// Removes the TeamInvitation resource.
		/// Api_team_invitation_id_delete api/team-invitation/{id}
		/// </summary>
		/// <param name="id">TeamInvitation identifier</param>
		public async Task Api_team_invitation_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/team-invitation/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TeamInvitation resource.
		/// Retrieves a TeamInvitation resource.
		/// Api_team_invitation_id_get api/team-invitation/{id}
		/// </summary>
		/// <param name="id">TeamInvitation identifier</param>
		/// <returns>TeamInvitation resource</returns>
		public async Task<TeamInvitation_get> Api_team_invitation_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/team-invitation/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TeamInvitation_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TeamMember resources.
		/// Retrieves the collection of TeamMember resources.
		/// Api_team_member_get_collection api/team-member
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TeamMember collection</returns>
		public async Task<TeamMember_get[]> Api_team_member_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string userAccount, string[] userAccount_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/team-member?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&userAccount=" + (userAccount==null? "" : System.Uri.EscapeDataString(userAccount))+"&"+string.Join("&", userAccount_.Select(z => $"userAccount[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TeamMember_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TeamMemberRoleCode resources.
		/// Retrieves the collection of TeamMemberRoleCode resources.
		/// Api_team_member_role_code_get_collection api/team-member-role-code
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TeamMemberRoleCode collection</returns>
		public async Task<TeamMemberRoleCode_get[]> Api_team_member_role_code_get_collectionAsync(int page, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/team-member-role-code?page="+page+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TeamMemberRoleCode_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TeamMemberRoleCode resource.
		/// Retrieves a TeamMemberRoleCode resource.
		/// Api_team_member_role_code_id_get api/team-member-role-code/{id}
		/// </summary>
		/// <param name="id">TeamMemberRoleCode identifier</param>
		/// <returns>TeamMemberRoleCode resource</returns>
		public async Task<TeamMemberRoleCode_get> Api_team_member_role_code_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/team-member-role-code/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TeamMemberRoleCode_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TeamMember resource.
		/// Removes the TeamMember resource.
		/// Api_team_member_id_delete api/team-member/{id}
		/// </summary>
		/// <param name="id">TeamMember identifier</param>
		public async Task Api_team_member_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/team-member/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TeamMember resource.
		/// Retrieves a TeamMember resource.
		/// Api_team_member_id_get api/team-member/{id}
		/// </summary>
		/// <param name="id">TeamMember identifier</param>
		/// <returns>TeamMember resource</returns>
		public async Task<TeamMember_get> Api_team_member_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/team-member/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TeamMember_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TeamMember resource.
		/// Replaces the TeamMember resource.
		/// Api_team_member_id_put api/team-member/{id}
		/// </summary>
		/// <param name="id">TeamMember identifier</param>
		/// <param name="requestBody">The updated TeamMember resource</param>
		/// <returns>TeamMember resource updated</returns>
		public async Task<TeamMember_get> Api_team_member_id_putAsync(string id, TeamMember_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/team-member/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TeamMember_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TimezoneCode resources.
		/// Retrieves the collection of TimezoneCode resources.
		/// Api_timezone_code_get_collection api/timezone-code
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TimezoneCode collection</returns>
		public async Task<TimezoneCode_get[]> Api_timezone_code_get_collectionAsync(int page, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/timezone-code?page="+page+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TimezoneCode_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TimezoneCode resource.
		/// Retrieves a TimezoneCode resource.
		/// Api_timezone_code_id_get api/timezone-code/{id}
		/// </summary>
		/// <param name="id">TimezoneCode identifier</param>
		/// <returns>TimezoneCode resource</returns>
		public async Task<TimezoneCode_get> Api_timezone_code_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/timezone-code/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TimezoneCode_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportAlerta resources.
		/// Retrieves the collection of TransportAlerta resources.
		/// Api_transport_alerta_get_collection api/transport-alerta
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportAlerta collection</returns>
		public async Task<TransportAlerta_get[]> Api_transport_alerta_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-alerta?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportAlerta_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportAlerta resource.
		/// Creates a TransportAlerta resource.
		/// Api_transport_alerta_post api/transport-alerta
		/// </summary>
		/// <param name="requestBody">The new TransportAlerta resource</param>
		public async Task Api_transport_alerta_postAsync(TransportAlerta_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-alerta";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportAlerta resource.
		/// Removes the TransportAlerta resource.
		/// Api_transport_alerta_id_delete api/transport-alerta/{id}
		/// </summary>
		/// <param name="id">TransportAlerta identifier</param>
		public async Task Api_transport_alerta_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-alerta/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportAlerta resource.
		/// Retrieves a TransportAlerta resource.
		/// Api_transport_alerta_id_get api/transport-alerta/{id}
		/// </summary>
		/// <param name="id">TransportAlerta identifier</param>
		/// <returns>TransportAlerta resource</returns>
		public async Task<TransportAlerta_get> Api_transport_alerta_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-alerta/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportAlerta_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportAlerta resource.
		/// Replaces the TransportAlerta resource.
		/// Api_transport_alerta_id_put api/transport-alerta/{id}
		/// </summary>
		/// <param name="id">TransportAlerta identifier</param>
		/// <param name="requestBody">The updated TransportAlerta resource</param>
		/// <returns>TransportAlerta resource updated</returns>
		public async Task<TransportAlerta_get> Api_transport_alerta_id_putAsync(string id, TransportAlerta_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-alerta/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportAlerta_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportAllMySms resources.
		/// Retrieves the collection of TransportAllMySms resources.
		/// Api_transport_all_my_sms_get_collection api/transport-all-my-sms
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportAllMySms collection</returns>
		public async Task<TransportAllMySms_get[]> Api_transport_all_my_sms_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-all-my-sms?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportAllMySms_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportAllMySms resource.
		/// Creates a TransportAllMySms resource.
		/// Api_transport_all_my_sms_post api/transport-all-my-sms
		/// </summary>
		/// <param name="requestBody">The new TransportAllMySms resource</param>
		public async Task Api_transport_all_my_sms_postAsync(TransportAllMySms_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-all-my-sms";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportAllMySms resource.
		/// Removes the TransportAllMySms resource.
		/// Api_transport_all_my_sms_id_delete api/transport-all-my-sms/{id}
		/// </summary>
		/// <param name="id">TransportAllMySms identifier</param>
		public async Task Api_transport_all_my_sms_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-all-my-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportAllMySms resource.
		/// Retrieves a TransportAllMySms resource.
		/// Api_transport_all_my_sms_id_get api/transport-all-my-sms/{id}
		/// </summary>
		/// <param name="id">TransportAllMySms identifier</param>
		/// <returns>TransportAllMySms resource</returns>
		public async Task<TransportAllMySms_get> Api_transport_all_my_sms_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-all-my-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportAllMySms_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportAllMySms resource.
		/// Replaces the TransportAllMySms resource.
		/// Api_transport_all_my_sms_id_put api/transport-all-my-sms/{id}
		/// </summary>
		/// <param name="id">TransportAllMySms identifier</param>
		/// <param name="requestBody">The updated TransportAllMySms resource</param>
		/// <returns>TransportAllMySms resource updated</returns>
		public async Task<TransportAllMySms_get> Api_transport_all_my_sms_id_putAsync(string id, TransportAllMySms_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-all-my-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportAllMySms_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportAmazonSns resources.
		/// Retrieves the collection of TransportAmazonSns resources.
		/// Api_transport_amazon_sns_get_collection api/transport-amazon-sns
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportAmazonSns collection</returns>
		public async Task<TransportAmazonSns_get[]> Api_transport_amazon_sns_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-amazon-sns?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportAmazonSns_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportAmazonSns resource.
		/// Creates a TransportAmazonSns resource.
		/// Api_transport_amazon_sns_post api/transport-amazon-sns
		/// </summary>
		/// <param name="requestBody">The new TransportAmazonSns resource</param>
		public async Task Api_transport_amazon_sns_postAsync(TransportAmazonSns_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-amazon-sns";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportAmazonSns resource.
		/// Removes the TransportAmazonSns resource.
		/// Api_transport_amazon_sns_id_delete api/transport-amazon-sns/{id}
		/// </summary>
		/// <param name="id">TransportAmazonSns identifier</param>
		public async Task Api_transport_amazon_sns_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-amazon-sns/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportAmazonSns resource.
		/// Retrieves a TransportAmazonSns resource.
		/// Api_transport_amazon_sns_id_get api/transport-amazon-sns/{id}
		/// </summary>
		/// <param name="id">TransportAmazonSns identifier</param>
		/// <returns>TransportAmazonSns resource</returns>
		public async Task<TransportAmazonSns_get> Api_transport_amazon_sns_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-amazon-sns/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportAmazonSns_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportAmazonSns resource.
		/// Replaces the TransportAmazonSns resource.
		/// Api_transport_amazon_sns_id_put api/transport-amazon-sns/{id}
		/// </summary>
		/// <param name="id">TransportAmazonSns identifier</param>
		/// <param name="requestBody">The updated TransportAmazonSns resource</param>
		/// <returns>TransportAmazonSns resource updated</returns>
		public async Task<TransportAmazonSns_get> Api_transport_amazon_sns_id_putAsync(string id, TransportAmazonSns_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-amazon-sns/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportAmazonSns_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportBandwidth resources.
		/// Retrieves the collection of TransportBandwidth resources.
		/// Api_transport_bandwidth_get_collection api/transport-bandwidth
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportBandwidth collection</returns>
		public async Task<TransportBandwidth_get[]> Api_transport_bandwidth_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-bandwidth?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportBandwidth_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportBandwidth resource.
		/// Creates a TransportBandwidth resource.
		/// Api_transport_bandwidth_post api/transport-bandwidth
		/// </summary>
		/// <param name="requestBody">The new TransportBandwidth resource</param>
		public async Task Api_transport_bandwidth_postAsync(TransportBandwidth_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-bandwidth";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportBandwidth resource.
		/// Removes the TransportBandwidth resource.
		/// Api_transport_bandwidth_id_delete api/transport-bandwidth/{id}
		/// </summary>
		/// <param name="id">TransportBandwidth identifier</param>
		public async Task Api_transport_bandwidth_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-bandwidth/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportBandwidth resource.
		/// Retrieves a TransportBandwidth resource.
		/// Api_transport_bandwidth_id_get api/transport-bandwidth/{id}
		/// </summary>
		/// <param name="id">TransportBandwidth identifier</param>
		/// <returns>TransportBandwidth resource</returns>
		public async Task<TransportBandwidth_get> Api_transport_bandwidth_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-bandwidth/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportBandwidth_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportBandwidth resource.
		/// Replaces the TransportBandwidth resource.
		/// Api_transport_bandwidth_id_put api/transport-bandwidth/{id}
		/// </summary>
		/// <param name="id">TransportBandwidth identifier</param>
		/// <param name="requestBody">The updated TransportBandwidth resource</param>
		/// <returns>TransportBandwidth resource updated</returns>
		public async Task<TransportBandwidth_get> Api_transport_bandwidth_id_putAsync(string id, TransportBandwidth_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-bandwidth/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportBandwidth_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportChatwork resources.
		/// Retrieves the collection of TransportChatwork resources.
		/// Api_transport_chatwork_get_collection api/transport-chatwork
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportChatwork collection</returns>
		public async Task<TransportChatwork_get[]> Api_transport_chatwork_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-chatwork?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportChatwork_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportChatwork resource.
		/// Creates a TransportChatwork resource.
		/// Api_transport_chatwork_post api/transport-chatwork
		/// </summary>
		/// <param name="requestBody">The new TransportChatwork resource</param>
		public async Task Api_transport_chatwork_postAsync(TransportChatwork_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-chatwork";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportChatwork resource.
		/// Removes the TransportChatwork resource.
		/// Api_transport_chatwork_id_delete api/transport-chatwork/{id}
		/// </summary>
		/// <param name="id">TransportChatwork identifier</param>
		public async Task Api_transport_chatwork_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-chatwork/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportChatwork resource.
		/// Retrieves a TransportChatwork resource.
		/// Api_transport_chatwork_id_get api/transport-chatwork/{id}
		/// </summary>
		/// <param name="id">TransportChatwork identifier</param>
		/// <returns>TransportChatwork resource</returns>
		public async Task<TransportChatwork_get> Api_transport_chatwork_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-chatwork/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportChatwork_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportChatwork resource.
		/// Replaces the TransportChatwork resource.
		/// Api_transport_chatwork_id_put api/transport-chatwork/{id}
		/// </summary>
		/// <param name="id">TransportChatwork identifier</param>
		/// <param name="requestBody">The updated TransportChatwork resource</param>
		/// <returns>TransportChatwork resource updated</returns>
		public async Task<TransportChatwork_get> Api_transport_chatwork_id_putAsync(string id, TransportChatwork_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-chatwork/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportChatwork_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportClickSend resources.
		/// Retrieves the collection of TransportClickSend resources.
		/// Api_transport_click_send_get_collection api/transport-click-send
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportClickSend collection</returns>
		public async Task<TransportClickSend_get[]> Api_transport_click_send_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-click-send?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportClickSend_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportClickSend resource.
		/// Creates a TransportClickSend resource.
		/// Api_transport_click_send_post api/transport-click-send
		/// </summary>
		/// <param name="requestBody">The new TransportClickSend resource</param>
		public async Task Api_transport_click_send_postAsync(TransportClickSend_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-click-send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportClickSend resource.
		/// Removes the TransportClickSend resource.
		/// Api_transport_click_send_id_delete api/transport-click-send/{id}
		/// </summary>
		/// <param name="id">TransportClickSend identifier</param>
		public async Task Api_transport_click_send_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-click-send/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportClickSend resource.
		/// Retrieves a TransportClickSend resource.
		/// Api_transport_click_send_id_get api/transport-click-send/{id}
		/// </summary>
		/// <param name="id">TransportClickSend identifier</param>
		/// <returns>TransportClickSend resource</returns>
		public async Task<TransportClickSend_get> Api_transport_click_send_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-click-send/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportClickSend_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportClickSend resource.
		/// Replaces the TransportClickSend resource.
		/// Api_transport_click_send_id_put api/transport-click-send/{id}
		/// </summary>
		/// <param name="id">TransportClickSend identifier</param>
		/// <param name="requestBody">The updated TransportClickSend resource</param>
		/// <returns>TransportClickSend resource updated</returns>
		public async Task<TransportClickSend_get> Api_transport_click_send_id_putAsync(string id, TransportClickSend_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-click-send/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportClickSend_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportClickatell resources.
		/// Retrieves the collection of TransportClickatell resources.
		/// Api_transport_clickatell_get_collection api/transport-clickatell
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportClickatell collection</returns>
		public async Task<TransportClickatell_get[]> Api_transport_clickatell_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-clickatell?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportClickatell_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportClickatell resource.
		/// Creates a TransportClickatell resource.
		/// Api_transport_clickatell_post api/transport-clickatell
		/// </summary>
		/// <param name="requestBody">The new TransportClickatell resource</param>
		public async Task Api_transport_clickatell_postAsync(TransportClickatell_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-clickatell";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportClickatell resource.
		/// Removes the TransportClickatell resource.
		/// Api_transport_clickatell_id_delete api/transport-clickatell/{id}
		/// </summary>
		/// <param name="id">TransportClickatell identifier</param>
		public async Task Api_transport_clickatell_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-clickatell/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportClickatell resource.
		/// Retrieves a TransportClickatell resource.
		/// Api_transport_clickatell_id_get api/transport-clickatell/{id}
		/// </summary>
		/// <param name="id">TransportClickatell identifier</param>
		/// <returns>TransportClickatell resource</returns>
		public async Task<TransportClickatell_get> Api_transport_clickatell_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-clickatell/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportClickatell_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportClickatell resource.
		/// Replaces the TransportClickatell resource.
		/// Api_transport_clickatell_id_put api/transport-clickatell/{id}
		/// </summary>
		/// <param name="id">TransportClickatell identifier</param>
		/// <param name="requestBody">The updated TransportClickatell resource</param>
		/// <returns>TransportClickatell resource updated</returns>
		public async Task<TransportClickatell_get> Api_transport_clickatell_id_putAsync(string id, TransportClickatell_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-clickatell/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportClickatell_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportContactEveryone resources.
		/// Retrieves the collection of TransportContactEveryone resources.
		/// Api_transport_contact_everyone_get_collection api/transport-contact-everyone
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportContactEveryone collection</returns>
		public async Task<TransportContactEveryone_get[]> Api_transport_contact_everyone_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-contact-everyone?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportContactEveryone_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportContactEveryone resource.
		/// Creates a TransportContactEveryone resource.
		/// Api_transport_contact_everyone_post api/transport-contact-everyone
		/// </summary>
		/// <param name="requestBody">The new TransportContactEveryone resource</param>
		public async Task Api_transport_contact_everyone_postAsync(TransportContactEveryone_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-contact-everyone";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportContactEveryone resource.
		/// Removes the TransportContactEveryone resource.
		/// Api_transport_contact_everyone_id_delete api/transport-contact-everyone/{id}
		/// </summary>
		/// <param name="id">TransportContactEveryone identifier</param>
		public async Task Api_transport_contact_everyone_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-contact-everyone/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportContactEveryone resource.
		/// Retrieves a TransportContactEveryone resource.
		/// Api_transport_contact_everyone_id_get api/transport-contact-everyone/{id}
		/// </summary>
		/// <param name="id">TransportContactEveryone identifier</param>
		/// <returns>TransportContactEveryone resource</returns>
		public async Task<TransportContactEveryone_get> Api_transport_contact_everyone_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-contact-everyone/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportContactEveryone_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportContactEveryone resource.
		/// Replaces the TransportContactEveryone resource.
		/// Api_transport_contact_everyone_id_put api/transport-contact-everyone/{id}
		/// </summary>
		/// <param name="id">TransportContactEveryone identifier</param>
		/// <param name="requestBody">The updated TransportContactEveryone resource</param>
		/// <returns>TransportContactEveryone resource updated</returns>
		public async Task<TransportContactEveryone_get> Api_transport_contact_everyone_id_putAsync(string id, TransportContactEveryone_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-contact-everyone/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportContactEveryone_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportDiscord resources.
		/// Retrieves the collection of TransportDiscord resources.
		/// Api_transport_discord_get_collection api/transport-discord
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportDiscord collection</returns>
		public async Task<TransportDiscord_get[]> Api_transport_discord_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-discord?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportDiscord_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportDiscord resource.
		/// Creates a TransportDiscord resource.
		/// Api_transport_discord_post api/transport-discord
		/// </summary>
		/// <param name="requestBody">The new TransportDiscord resource</param>
		public async Task Api_transport_discord_postAsync(TransportDiscord_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-discord";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportDiscord resource.
		/// Removes the TransportDiscord resource.
		/// Api_transport_discord_id_delete api/transport-discord/{id}
		/// </summary>
		/// <param name="id">TransportDiscord identifier</param>
		public async Task Api_transport_discord_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-discord/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportDiscord resource.
		/// Retrieves a TransportDiscord resource.
		/// Api_transport_discord_id_get api/transport-discord/{id}
		/// </summary>
		/// <param name="id">TransportDiscord identifier</param>
		/// <returns>TransportDiscord resource</returns>
		public async Task<TransportDiscord_get> Api_transport_discord_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-discord/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportDiscord_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportDiscord resource.
		/// Replaces the TransportDiscord resource.
		/// Api_transport_discord_id_put api/transport-discord/{id}
		/// </summary>
		/// <param name="id">TransportDiscord identifier</param>
		/// <param name="requestBody">The updated TransportDiscord resource</param>
		/// <returns>TransportDiscord resource updated</returns>
		public async Task<TransportDiscord_get> Api_transport_discord_id_putAsync(string id, TransportDiscord_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-discord/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportDiscord_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportEmail resources.
		/// Retrieves the collection of TransportEmail resources.
		/// Api_transport_email_get_collection api/transport-email
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportEmail collection</returns>
		public async Task<TransportEmail_get[]> Api_transport_email_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-email?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportEmail_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportEmail resource.
		/// Creates a TransportEmail resource.
		/// Api_transport_email_post api/transport-email
		/// </summary>
		/// <param name="requestBody">The new TransportEmail resource</param>
		public async Task Api_transport_email_postAsync(TransportEmail_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-email";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportEmail resource.
		/// Removes the TransportEmail resource.
		/// Api_transport_email_id_delete api/transport-email/{id}
		/// </summary>
		/// <param name="id">TransportEmail identifier</param>
		public async Task Api_transport_email_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-email/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportEmail resource.
		/// Retrieves a TransportEmail resource.
		/// Api_transport_email_id_get api/transport-email/{id}
		/// </summary>
		/// <param name="id">TransportEmail identifier</param>
		/// <returns>TransportEmail resource</returns>
		public async Task<TransportEmail_get> Api_transport_email_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-email/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportEmail_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportEmail resource.
		/// Replaces the TransportEmail resource.
		/// Api_transport_email_id_put api/transport-email/{id}
		/// </summary>
		/// <param name="id">TransportEmail identifier</param>
		/// <param name="requestBody">The updated TransportEmail resource</param>
		/// <returns>TransportEmail resource updated</returns>
		public async Task<TransportEmail_get> Api_transport_email_id_putAsync(string id, TransportEmail_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-email/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportEmail_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportEngagespot resources.
		/// Retrieves the collection of TransportEngagespot resources.
		/// Api_transport_engagespot_get_collection api/transport-engagespot
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportEngagespot collection</returns>
		public async Task<TransportEngagespot_get[]> Api_transport_engagespot_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-engagespot?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportEngagespot_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportEngagespot resource.
		/// Creates a TransportEngagespot resource.
		/// Api_transport_engagespot_post api/transport-engagespot
		/// </summary>
		/// <param name="requestBody">The new TransportEngagespot resource</param>
		public async Task Api_transport_engagespot_postAsync(TransportEngagespot_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-engagespot";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportEngagespot resource.
		/// Removes the TransportEngagespot resource.
		/// Api_transport_engagespot_id_delete api/transport-engagespot/{id}
		/// </summary>
		/// <param name="id">TransportEngagespot identifier</param>
		public async Task Api_transport_engagespot_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-engagespot/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportEngagespot resource.
		/// Retrieves a TransportEngagespot resource.
		/// Api_transport_engagespot_id_get api/transport-engagespot/{id}
		/// </summary>
		/// <param name="id">TransportEngagespot identifier</param>
		/// <returns>TransportEngagespot resource</returns>
		public async Task<TransportEngagespot_get> Api_transport_engagespot_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-engagespot/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportEngagespot_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportEngagespot resource.
		/// Replaces the TransportEngagespot resource.
		/// Api_transport_engagespot_id_put api/transport-engagespot/{id}
		/// </summary>
		/// <param name="id">TransportEngagespot identifier</param>
		/// <param name="requestBody">The updated TransportEngagespot resource</param>
		/// <returns>TransportEngagespot resource updated</returns>
		public async Task<TransportEngagespot_get> Api_transport_engagespot_id_putAsync(string id, TransportEngagespot_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-engagespot/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportEngagespot_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportEsendex resources.
		/// Retrieves the collection of TransportEsendex resources.
		/// Api_transport_esendex_get_collection api/transport-esendex
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportEsendex collection</returns>
		public async Task<TransportEsendex_get[]> Api_transport_esendex_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-esendex?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportEsendex_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportEsendex resource.
		/// Creates a TransportEsendex resource.
		/// Api_transport_esendex_post api/transport-esendex
		/// </summary>
		/// <param name="requestBody">The new TransportEsendex resource</param>
		public async Task Api_transport_esendex_postAsync(TransportEsendex_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-esendex";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportEsendex resource.
		/// Removes the TransportEsendex resource.
		/// Api_transport_esendex_id_delete api/transport-esendex/{id}
		/// </summary>
		/// <param name="id">TransportEsendex identifier</param>
		public async Task Api_transport_esendex_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-esendex/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportEsendex resource.
		/// Retrieves a TransportEsendex resource.
		/// Api_transport_esendex_id_get api/transport-esendex/{id}
		/// </summary>
		/// <param name="id">TransportEsendex identifier</param>
		/// <returns>TransportEsendex resource</returns>
		public async Task<TransportEsendex_get> Api_transport_esendex_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-esendex/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportEsendex_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportEsendex resource.
		/// Replaces the TransportEsendex resource.
		/// Api_transport_esendex_id_put api/transport-esendex/{id}
		/// </summary>
		/// <param name="id">TransportEsendex identifier</param>
		/// <param name="requestBody">The updated TransportEsendex resource</param>
		/// <returns>TransportEsendex resource updated</returns>
		public async Task<TransportEsendex_get> Api_transport_esendex_id_putAsync(string id, TransportEsendex_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-esendex/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportEsendex_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportExpo resources.
		/// Retrieves the collection of TransportExpo resources.
		/// Api_transport_expo_get_collection api/transport-expo
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportExpo collection</returns>
		public async Task<TransportExpo_get[]> Api_transport_expo_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-expo?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportExpo_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportExpo resource.
		/// Creates a TransportExpo resource.
		/// Api_transport_expo_post api/transport-expo
		/// </summary>
		/// <param name="requestBody">The new TransportExpo resource</param>
		public async Task Api_transport_expo_postAsync(TransportExpo_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-expo";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportExpo resource.
		/// Removes the TransportExpo resource.
		/// Api_transport_expo_id_delete api/transport-expo/{id}
		/// </summary>
		/// <param name="id">TransportExpo identifier</param>
		public async Task Api_transport_expo_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-expo/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportExpo resource.
		/// Retrieves a TransportExpo resource.
		/// Api_transport_expo_id_get api/transport-expo/{id}
		/// </summary>
		/// <param name="id">TransportExpo identifier</param>
		/// <returns>TransportExpo resource</returns>
		public async Task<TransportExpo_get> Api_transport_expo_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-expo/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportExpo_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportExpo resource.
		/// Replaces the TransportExpo resource.
		/// Api_transport_expo_id_put api/transport-expo/{id}
		/// </summary>
		/// <param name="id">TransportExpo identifier</param>
		/// <param name="requestBody">The updated TransportExpo resource</param>
		/// <returns>TransportExpo resource updated</returns>
		public async Task<TransportExpo_get> Api_transport_expo_id_putAsync(string id, TransportExpo_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-expo/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportExpo_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportFirebase resources.
		/// Retrieves the collection of TransportFirebase resources.
		/// Api_transport_firebase_get_collection api/transport-firebase
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportFirebase collection</returns>
		public async Task<TransportFirebase_get[]> Api_transport_firebase_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-firebase?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFirebase_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportFirebase resource.
		/// Creates a TransportFirebase resource.
		/// Api_transport_firebase_post api/transport-firebase
		/// </summary>
		/// <param name="requestBody">The new TransportFirebase resource</param>
		public async Task Api_transport_firebase_postAsync(TransportFirebase_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-firebase";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportFirebase resource.
		/// Removes the TransportFirebase resource.
		/// Api_transport_firebase_id_delete api/transport-firebase/{id}
		/// </summary>
		/// <param name="id">TransportFirebase identifier</param>
		public async Task Api_transport_firebase_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-firebase/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportFirebase resource.
		/// Retrieves a TransportFirebase resource.
		/// Api_transport_firebase_id_get api/transport-firebase/{id}
		/// </summary>
		/// <param name="id">TransportFirebase identifier</param>
		/// <returns>TransportFirebase resource</returns>
		public async Task<TransportFirebase_get> Api_transport_firebase_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-firebase/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFirebase_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportFirebase resource.
		/// Replaces the TransportFirebase resource.
		/// Api_transport_firebase_id_put api/transport-firebase/{id}
		/// </summary>
		/// <param name="id">TransportFirebase identifier</param>
		/// <param name="requestBody">The updated TransportFirebase resource</param>
		/// <returns>TransportFirebase resource updated</returns>
		public async Task<TransportFirebase_get> Api_transport_firebase_id_putAsync(string id, TransportFirebase_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-firebase/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFirebase_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportFortySixElks resources.
		/// Retrieves the collection of TransportFortySixElks resources.
		/// Api_transport_forty_six_elks_get_collection api/transport-forty-six-elks
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportFortySixElks collection</returns>
		public async Task<TransportFortySixElks_get[]> Api_transport_forty_six_elks_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-forty-six-elks?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFortySixElks_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportFortySixElks resource.
		/// Creates a TransportFortySixElks resource.
		/// Api_transport_forty_six_elks_post api/transport-forty-six-elks
		/// </summary>
		/// <param name="requestBody">The new TransportFortySixElks resource</param>
		public async Task Api_transport_forty_six_elks_postAsync(TransportFortySixElks_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-forty-six-elks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportFortySixElks resource.
		/// Removes the TransportFortySixElks resource.
		/// Api_transport_forty_six_elks_id_delete api/transport-forty-six-elks/{id}
		/// </summary>
		/// <param name="id">TransportFortySixElks identifier</param>
		public async Task Api_transport_forty_six_elks_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-forty-six-elks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportFortySixElks resource.
		/// Retrieves a TransportFortySixElks resource.
		/// Api_transport_forty_six_elks_id_get api/transport-forty-six-elks/{id}
		/// </summary>
		/// <param name="id">TransportFortySixElks identifier</param>
		/// <returns>TransportFortySixElks resource</returns>
		public async Task<TransportFortySixElks_get> Api_transport_forty_six_elks_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-forty-six-elks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFortySixElks_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportFortySixElks resource.
		/// Replaces the TransportFortySixElks resource.
		/// Api_transport_forty_six_elks_id_put api/transport-forty-six-elks/{id}
		/// </summary>
		/// <param name="id">TransportFortySixElks identifier</param>
		/// <param name="requestBody">The updated TransportFortySixElks resource</param>
		/// <returns>TransportFortySixElks resource updated</returns>
		public async Task<TransportFortySixElks_get> Api_transport_forty_six_elks_id_putAsync(string id, TransportFortySixElks_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-forty-six-elks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFortySixElks_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportFreeMobile resources.
		/// Retrieves the collection of TransportFreeMobile resources.
		/// Api_transport_free_mobile_get_collection api/transport-free-mobile
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportFreeMobile collection</returns>
		public async Task<TransportFreeMobile_get[]> Api_transport_free_mobile_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-free-mobile?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFreeMobile_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportFreeMobile resource.
		/// Creates a TransportFreeMobile resource.
		/// Api_transport_free_mobile_post api/transport-free-mobile
		/// </summary>
		/// <param name="requestBody">The new TransportFreeMobile resource</param>
		public async Task Api_transport_free_mobile_postAsync(TransportFreeMobile_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-free-mobile";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportFreeMobile resource.
		/// Removes the TransportFreeMobile resource.
		/// Api_transport_free_mobile_id_delete api/transport-free-mobile/{id}
		/// </summary>
		/// <param name="id">TransportFreeMobile identifier</param>
		public async Task Api_transport_free_mobile_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-free-mobile/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportFreeMobile resource.
		/// Retrieves a TransportFreeMobile resource.
		/// Api_transport_free_mobile_id_get api/transport-free-mobile/{id}
		/// </summary>
		/// <param name="id">TransportFreeMobile identifier</param>
		/// <returns>TransportFreeMobile resource</returns>
		public async Task<TransportFreeMobile_get> Api_transport_free_mobile_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-free-mobile/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFreeMobile_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportFreeMobile resource.
		/// Replaces the TransportFreeMobile resource.
		/// Api_transport_free_mobile_id_put api/transport-free-mobile/{id}
		/// </summary>
		/// <param name="id">TransportFreeMobile identifier</param>
		/// <param name="requestBody">The updated TransportFreeMobile resource</param>
		/// <returns>TransportFreeMobile resource updated</returns>
		public async Task<TransportFreeMobile_get> Api_transport_free_mobile_id_putAsync(string id, TransportFreeMobile_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-free-mobile/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFreeMobile_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportFreshdesk resources.
		/// Retrieves the collection of TransportFreshdesk resources.
		/// Api_transport_freshdesk_get_collection api/transport-freshdesk
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportFreshdesk collection</returns>
		public async Task<TransportFreshdesk_get[]> Api_transport_freshdesk_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-freshdesk?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFreshdesk_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportFreshdesk resource.
		/// Creates a TransportFreshdesk resource.
		/// Api_transport_freshdesk_post api/transport-freshdesk
		/// </summary>
		/// <param name="requestBody">The new TransportFreshdesk resource</param>
		public async Task Api_transport_freshdesk_postAsync(TransportFreshdesk_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-freshdesk";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportFreshdesk resource.
		/// Removes the TransportFreshdesk resource.
		/// Api_transport_freshdesk_id_delete api/transport-freshdesk/{id}
		/// </summary>
		/// <param name="id">TransportFreshdesk identifier</param>
		public async Task Api_transport_freshdesk_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-freshdesk/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportFreshdesk resource.
		/// Retrieves a TransportFreshdesk resource.
		/// Api_transport_freshdesk_id_get api/transport-freshdesk/{id}
		/// </summary>
		/// <param name="id">TransportFreshdesk identifier</param>
		/// <returns>TransportFreshdesk resource</returns>
		public async Task<TransportFreshdesk_get> Api_transport_freshdesk_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-freshdesk/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFreshdesk_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportFreshdesk resource.
		/// Replaces the TransportFreshdesk resource.
		/// Api_transport_freshdesk_id_put api/transport-freshdesk/{id}
		/// </summary>
		/// <param name="id">TransportFreshdesk identifier</param>
		/// <param name="requestBody">The updated TransportFreshdesk resource</param>
		/// <returns>TransportFreshdesk resource updated</returns>
		public async Task<TransportFreshdesk_get> Api_transport_freshdesk_id_putAsync(string id, TransportFreshdesk_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-freshdesk/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportFreshdesk_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportGatewayApi resources.
		/// Retrieves the collection of TransportGatewayApi resources.
		/// Api_transport_gateway_api_get_collection api/transport-gateway-api
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportGatewayApi collection</returns>
		public async Task<TransportGatewayApi_get[]> Api_transport_gateway_api_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gateway-api?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGatewayApi_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportGatewayApi resource.
		/// Creates a TransportGatewayApi resource.
		/// Api_transport_gateway_api_post api/transport-gateway-api
		/// </summary>
		/// <param name="requestBody">The new TransportGatewayApi resource</param>
		public async Task Api_transport_gateway_api_postAsync(TransportGatewayApi_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gateway-api";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportGatewayApi resource.
		/// Removes the TransportGatewayApi resource.
		/// Api_transport_gateway_api_id_delete api/transport-gateway-api/{id}
		/// </summary>
		/// <param name="id">TransportGatewayApi identifier</param>
		public async Task Api_transport_gateway_api_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gateway-api/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportGatewayApi resource.
		/// Retrieves a TransportGatewayApi resource.
		/// Api_transport_gateway_api_id_get api/transport-gateway-api/{id}
		/// </summary>
		/// <param name="id">TransportGatewayApi identifier</param>
		/// <returns>TransportGatewayApi resource</returns>
		public async Task<TransportGatewayApi_get> Api_transport_gateway_api_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gateway-api/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGatewayApi_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportGatewayApi resource.
		/// Replaces the TransportGatewayApi resource.
		/// Api_transport_gateway_api_id_put api/transport-gateway-api/{id}
		/// </summary>
		/// <param name="id">TransportGatewayApi identifier</param>
		/// <param name="requestBody">The updated TransportGatewayApi resource</param>
		/// <returns>TransportGatewayApi resource updated</returns>
		public async Task<TransportGatewayApi_get> Api_transport_gateway_api_id_putAsync(string id, TransportGatewayApi_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gateway-api/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGatewayApi_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportGitter resources.
		/// Retrieves the collection of TransportGitter resources.
		/// Api_transport_gitter_get_collection api/transport-gitter
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportGitter collection</returns>
		public async Task<TransportGitter_get[]> Api_transport_gitter_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gitter?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGitter_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportGitter resource.
		/// Creates a TransportGitter resource.
		/// Api_transport_gitter_post api/transport-gitter
		/// </summary>
		/// <param name="requestBody">The new TransportGitter resource</param>
		public async Task Api_transport_gitter_postAsync(TransportGitter_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gitter";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportGitter resource.
		/// Removes the TransportGitter resource.
		/// Api_transport_gitter_id_delete api/transport-gitter/{id}
		/// </summary>
		/// <param name="id">TransportGitter identifier</param>
		public async Task Api_transport_gitter_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gitter/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportGitter resource.
		/// Retrieves a TransportGitter resource.
		/// Api_transport_gitter_id_get api/transport-gitter/{id}
		/// </summary>
		/// <param name="id">TransportGitter identifier</param>
		/// <returns>TransportGitter resource</returns>
		public async Task<TransportGitter_get> Api_transport_gitter_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gitter/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGitter_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportGitter resource.
		/// Replaces the TransportGitter resource.
		/// Api_transport_gitter_id_put api/transport-gitter/{id}
		/// </summary>
		/// <param name="id">TransportGitter identifier</param>
		/// <param name="requestBody">The updated TransportGitter resource</param>
		/// <returns>TransportGitter resource updated</returns>
		public async Task<TransportGitter_get> Api_transport_gitter_id_putAsync(string id, TransportGitter_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gitter/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGitter_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportGoogleChat resources.
		/// Retrieves the collection of TransportGoogleChat resources.
		/// Api_transport_google_chat_get_collection api/transport-google-chat
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportGoogleChat collection</returns>
		public async Task<TransportGoogleChat_get[]> Api_transport_google_chat_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-google-chat?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGoogleChat_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportGoogleChat resource.
		/// Creates a TransportGoogleChat resource.
		/// Api_transport_google_chat_post api/transport-google-chat
		/// </summary>
		/// <param name="requestBody">The new TransportGoogleChat resource</param>
		public async Task Api_transport_google_chat_postAsync(TransportGoogleChat_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-google-chat";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportGoogleChat resource.
		/// Removes the TransportGoogleChat resource.
		/// Api_transport_google_chat_id_delete api/transport-google-chat/{id}
		/// </summary>
		/// <param name="id">TransportGoogleChat identifier</param>
		public async Task Api_transport_google_chat_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-google-chat/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportGoogleChat resource.
		/// Retrieves a TransportGoogleChat resource.
		/// Api_transport_google_chat_id_get api/transport-google-chat/{id}
		/// </summary>
		/// <param name="id">TransportGoogleChat identifier</param>
		/// <returns>TransportGoogleChat resource</returns>
		public async Task<TransportGoogleChat_get> Api_transport_google_chat_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-google-chat/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGoogleChat_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportGoogleChat resource.
		/// Replaces the TransportGoogleChat resource.
		/// Api_transport_google_chat_id_put api/transport-google-chat/{id}
		/// </summary>
		/// <param name="id">TransportGoogleChat identifier</param>
		/// <param name="requestBody">The updated TransportGoogleChat resource</param>
		/// <returns>TransportGoogleChat resource updated</returns>
		public async Task<TransportGoogleChat_get> Api_transport_google_chat_id_putAsync(string id, TransportGoogleChat_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-google-chat/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGoogleChat_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportGotify resources.
		/// Retrieves the collection of TransportGotify resources.
		/// Api_transport_gotify_get_collection api/transport-gotify
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportGotify collection</returns>
		public async Task<TransportGotify_get[]> Api_transport_gotify_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gotify?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGotify_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportGotify resource.
		/// Creates a TransportGotify resource.
		/// Api_transport_gotify_post api/transport-gotify
		/// </summary>
		/// <param name="requestBody">The new TransportGotify resource</param>
		public async Task Api_transport_gotify_postAsync(TransportGotify_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gotify";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportGotify resource.
		/// Removes the TransportGotify resource.
		/// Api_transport_gotify_id_delete api/transport-gotify/{id}
		/// </summary>
		/// <param name="id">TransportGotify identifier</param>
		public async Task Api_transport_gotify_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gotify/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportGotify resource.
		/// Retrieves a TransportGotify resource.
		/// Api_transport_gotify_id_get api/transport-gotify/{id}
		/// </summary>
		/// <param name="id">TransportGotify identifier</param>
		/// <returns>TransportGotify resource</returns>
		public async Task<TransportGotify_get> Api_transport_gotify_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gotify/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGotify_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportGotify resource.
		/// Replaces the TransportGotify resource.
		/// Api_transport_gotify_id_put api/transport-gotify/{id}
		/// </summary>
		/// <param name="id">TransportGotify identifier</param>
		/// <param name="requestBody">The updated TransportGotify resource</param>
		/// <returns>TransportGotify resource updated</returns>
		public async Task<TransportGotify_get> Api_transport_gotify_id_putAsync(string id, TransportGotify_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-gotify/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportGotify_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportHelpScout resources.
		/// Retrieves the collection of TransportHelpScout resources.
		/// Api_transport_help_scout_get_collection api/transport-help-scout
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportHelpScout collection</returns>
		public async Task<TransportHelpScout_get[]> Api_transport_help_scout_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-help-scout?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportHelpScout_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportHelpScout resource.
		/// Creates a TransportHelpScout resource.
		/// Api_transport_help_scout_post api/transport-help-scout
		/// </summary>
		/// <param name="requestBody">The new TransportHelpScout resource</param>
		public async Task Api_transport_help_scout_postAsync(TransportHelpScout_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-help-scout";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportHelpScout resource.
		/// Removes the TransportHelpScout resource.
		/// Api_transport_help_scout_id_delete api/transport-help-scout/{id}
		/// </summary>
		/// <param name="id">TransportHelpScout identifier</param>
		public async Task Api_transport_help_scout_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-help-scout/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportHelpScout resource.
		/// Retrieves a TransportHelpScout resource.
		/// Api_transport_help_scout_id_get api/transport-help-scout/{id}
		/// </summary>
		/// <param name="id">TransportHelpScout identifier</param>
		/// <returns>TransportHelpScout resource</returns>
		public async Task<TransportHelpScout_get> Api_transport_help_scout_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-help-scout/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportHelpScout_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportHelpScout resource.
		/// Replaces the TransportHelpScout resource.
		/// Api_transport_help_scout_id_put api/transport-help-scout/{id}
		/// </summary>
		/// <param name="id">TransportHelpScout identifier</param>
		/// <param name="requestBody">The updated TransportHelpScout resource</param>
		/// <returns>TransportHelpScout resource updated</returns>
		public async Task<TransportHelpScout_get> Api_transport_help_scout_id_putAsync(string id, TransportHelpScout_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-help-scout/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportHelpScout_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportInfobip resources.
		/// Retrieves the collection of TransportInfobip resources.
		/// Api_transport_infobip_get_collection api/transport-infobip
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportInfobip collection</returns>
		public async Task<TransportInfobip_get[]> Api_transport_infobip_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-infobip?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportInfobip_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportInfobip resource.
		/// Creates a TransportInfobip resource.
		/// Api_transport_infobip_post api/transport-infobip
		/// </summary>
		/// <param name="requestBody">The new TransportInfobip resource</param>
		public async Task Api_transport_infobip_postAsync(TransportInfobip_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-infobip";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportInfobip resource.
		/// Removes the TransportInfobip resource.
		/// Api_transport_infobip_id_delete api/transport-infobip/{id}
		/// </summary>
		/// <param name="id">TransportInfobip identifier</param>
		public async Task Api_transport_infobip_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-infobip/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportInfobip resource.
		/// Retrieves a TransportInfobip resource.
		/// Api_transport_infobip_id_get api/transport-infobip/{id}
		/// </summary>
		/// <param name="id">TransportInfobip identifier</param>
		/// <returns>TransportInfobip resource</returns>
		public async Task<TransportInfobip_get> Api_transport_infobip_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-infobip/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportInfobip_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportInfobip resource.
		/// Replaces the TransportInfobip resource.
		/// Api_transport_infobip_id_put api/transport-infobip/{id}
		/// </summary>
		/// <param name="id">TransportInfobip identifier</param>
		/// <param name="requestBody">The updated TransportInfobip resource</param>
		/// <returns>TransportInfobip resource updated</returns>
		public async Task<TransportInfobip_get> Api_transport_infobip_id_putAsync(string id, TransportInfobip_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-infobip/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportInfobip_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportIqsms resources.
		/// Retrieves the collection of TransportIqsms resources.
		/// Api_transport_iqsms_get_collection api/transport-iqsms
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportIqsms collection</returns>
		public async Task<TransportIqsms_get[]> Api_transport_iqsms_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-iqsms?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportIqsms_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportIqsms resource.
		/// Creates a TransportIqsms resource.
		/// Api_transport_iqsms_post api/transport-iqsms
		/// </summary>
		/// <param name="requestBody">The new TransportIqsms resource</param>
		public async Task Api_transport_iqsms_postAsync(TransportIqsms_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-iqsms";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportIqsms resource.
		/// Removes the TransportIqsms resource.
		/// Api_transport_iqsms_id_delete api/transport-iqsms/{id}
		/// </summary>
		/// <param name="id">TransportIqsms identifier</param>
		public async Task Api_transport_iqsms_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-iqsms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportIqsms resource.
		/// Retrieves a TransportIqsms resource.
		/// Api_transport_iqsms_id_get api/transport-iqsms/{id}
		/// </summary>
		/// <param name="id">TransportIqsms identifier</param>
		/// <returns>TransportIqsms resource</returns>
		public async Task<TransportIqsms_get> Api_transport_iqsms_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-iqsms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportIqsms_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportIqsms resource.
		/// Replaces the TransportIqsms resource.
		/// Api_transport_iqsms_id_put api/transport-iqsms/{id}
		/// </summary>
		/// <param name="id">TransportIqsms identifier</param>
		/// <param name="requestBody">The updated TransportIqsms resource</param>
		/// <returns>TransportIqsms resource updated</returns>
		public async Task<TransportIqsms_get> Api_transport_iqsms_id_putAsync(string id, TransportIqsms_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-iqsms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportIqsms_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportKazInfoTeh resources.
		/// Retrieves the collection of TransportKazInfoTeh resources.
		/// Api_transport_kaz_info_teh_get_collection api/transport-kaz-info-teh
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportKazInfoTeh collection</returns>
		public async Task<TransportKazInfoTeh_get[]> Api_transport_kaz_info_teh_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-kaz-info-teh?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportKazInfoTeh_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportKazInfoTeh resource.
		/// Creates a TransportKazInfoTeh resource.
		/// Api_transport_kaz_info_teh_post api/transport-kaz-info-teh
		/// </summary>
		/// <param name="requestBody">The new TransportKazInfoTeh resource</param>
		public async Task Api_transport_kaz_info_teh_postAsync(TransportKazInfoTeh_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-kaz-info-teh";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportKazInfoTeh resource.
		/// Removes the TransportKazInfoTeh resource.
		/// Api_transport_kaz_info_teh_id_delete api/transport-kaz-info-teh/{id}
		/// </summary>
		/// <param name="id">TransportKazInfoTeh identifier</param>
		public async Task Api_transport_kaz_info_teh_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-kaz-info-teh/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportKazInfoTeh resource.
		/// Retrieves a TransportKazInfoTeh resource.
		/// Api_transport_kaz_info_teh_id_get api/transport-kaz-info-teh/{id}
		/// </summary>
		/// <param name="id">TransportKazInfoTeh identifier</param>
		/// <returns>TransportKazInfoTeh resource</returns>
		public async Task<TransportKazInfoTeh_get> Api_transport_kaz_info_teh_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-kaz-info-teh/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportKazInfoTeh_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportKazInfoTeh resource.
		/// Replaces the TransportKazInfoTeh resource.
		/// Api_transport_kaz_info_teh_id_put api/transport-kaz-info-teh/{id}
		/// </summary>
		/// <param name="id">TransportKazInfoTeh identifier</param>
		/// <param name="requestBody">The updated TransportKazInfoTeh resource</param>
		/// <returns>TransportKazInfoTeh resource updated</returns>
		public async Task<TransportKazInfoTeh_get> Api_transport_kaz_info_teh_id_putAsync(string id, TransportKazInfoTeh_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-kaz-info-teh/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportKazInfoTeh_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportLightSms resources.
		/// Retrieves the collection of TransportLightSms resources.
		/// Api_transport_light_sms_get_collection api/transport-light-sms
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportLightSms collection</returns>
		public async Task<TransportLightSms_get[]> Api_transport_light_sms_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-light-sms?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportLightSms_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportLightSms resource.
		/// Creates a TransportLightSms resource.
		/// Api_transport_light_sms_post api/transport-light-sms
		/// </summary>
		/// <param name="requestBody">The new TransportLightSms resource</param>
		public async Task Api_transport_light_sms_postAsync(TransportLightSms_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-light-sms";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportLightSms resource.
		/// Removes the TransportLightSms resource.
		/// Api_transport_light_sms_id_delete api/transport-light-sms/{id}
		/// </summary>
		/// <param name="id">TransportLightSms identifier</param>
		public async Task Api_transport_light_sms_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-light-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportLightSms resource.
		/// Retrieves a TransportLightSms resource.
		/// Api_transport_light_sms_id_get api/transport-light-sms/{id}
		/// </summary>
		/// <param name="id">TransportLightSms identifier</param>
		/// <returns>TransportLightSms resource</returns>
		public async Task<TransportLightSms_get> Api_transport_light_sms_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-light-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportLightSms_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportLightSms resource.
		/// Replaces the TransportLightSms resource.
		/// Api_transport_light_sms_id_put api/transport-light-sms/{id}
		/// </summary>
		/// <param name="id">TransportLightSms identifier</param>
		/// <param name="requestBody">The updated TransportLightSms resource</param>
		/// <returns>TransportLightSms resource updated</returns>
		public async Task<TransportLightSms_get> Api_transport_light_sms_id_putAsync(string id, TransportLightSms_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-light-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportLightSms_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportLineNotify resources.
		/// Retrieves the collection of TransportLineNotify resources.
		/// Api_transport_line_notify_get_collection api/transport-line-notify
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportLineNotify collection</returns>
		public async Task<TransportLineNotify_get[]> Api_transport_line_notify_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-line-notify?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportLineNotify_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportLineNotify resource.
		/// Creates a TransportLineNotify resource.
		/// Api_transport_line_notify_post api/transport-line-notify
		/// </summary>
		/// <param name="requestBody">The new TransportLineNotify resource</param>
		public async Task Api_transport_line_notify_postAsync(TransportLineNotify_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-line-notify";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportLineNotify resource.
		/// Removes the TransportLineNotify resource.
		/// Api_transport_line_notify_id_delete api/transport-line-notify/{id}
		/// </summary>
		/// <param name="id">TransportLineNotify identifier</param>
		public async Task Api_transport_line_notify_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-line-notify/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportLineNotify resource.
		/// Retrieves a TransportLineNotify resource.
		/// Api_transport_line_notify_id_get api/transport-line-notify/{id}
		/// </summary>
		/// <param name="id">TransportLineNotify identifier</param>
		/// <returns>TransportLineNotify resource</returns>
		public async Task<TransportLineNotify_get> Api_transport_line_notify_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-line-notify/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportLineNotify_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportLineNotify resource.
		/// Replaces the TransportLineNotify resource.
		/// Api_transport_line_notify_id_put api/transport-line-notify/{id}
		/// </summary>
		/// <param name="id">TransportLineNotify identifier</param>
		/// <param name="requestBody">The updated TransportLineNotify resource</param>
		/// <returns>TransportLineNotify resource updated</returns>
		public async Task<TransportLineNotify_get> Api_transport_line_notify_id_putAsync(string id, TransportLineNotify_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-line-notify/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportLineNotify_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportLinkedIn resources.
		/// Retrieves the collection of TransportLinkedIn resources.
		/// Api_transport_linked_in_get_collection api/transport-linked-in
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportLinkedIn collection</returns>
		public async Task<TransportLinkedIn_get[]> Api_transport_linked_in_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-linked-in?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportLinkedIn_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportLinkedIn resource.
		/// Creates a TransportLinkedIn resource.
		/// Api_transport_linked_in_post api/transport-linked-in
		/// </summary>
		/// <param name="requestBody">The new TransportLinkedIn resource</param>
		public async Task Api_transport_linked_in_postAsync(TransportLinkedIn_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-linked-in";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportLinkedIn resource.
		/// Removes the TransportLinkedIn resource.
		/// Api_transport_linked_in_id_delete api/transport-linked-in/{id}
		/// </summary>
		/// <param name="id">TransportLinkedIn identifier</param>
		public async Task Api_transport_linked_in_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-linked-in/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportLinkedIn resource.
		/// Retrieves a TransportLinkedIn resource.
		/// Api_transport_linked_in_id_get api/transport-linked-in/{id}
		/// </summary>
		/// <param name="id">TransportLinkedIn identifier</param>
		/// <returns>TransportLinkedIn resource</returns>
		public async Task<TransportLinkedIn_get> Api_transport_linked_in_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-linked-in/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportLinkedIn_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportLinkedIn resource.
		/// Replaces the TransportLinkedIn resource.
		/// Api_transport_linked_in_id_put api/transport-linked-in/{id}
		/// </summary>
		/// <param name="id">TransportLinkedIn identifier</param>
		/// <param name="requestBody">The updated TransportLinkedIn resource</param>
		/// <returns>TransportLinkedIn resource updated</returns>
		public async Task<TransportLinkedIn_get> Api_transport_linked_in_id_putAsync(string id, TransportLinkedIn_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-linked-in/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportLinkedIn_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportMailjet resources.
		/// Retrieves the collection of TransportMailjet resources.
		/// Api_transport_mailjet_get_collection api/transport-mailjet
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportMailjet collection</returns>
		public async Task<TransportMailjet_get[]> Api_transport_mailjet_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mailjet?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMailjet_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportMailjet resource.
		/// Creates a TransportMailjet resource.
		/// Api_transport_mailjet_post api/transport-mailjet
		/// </summary>
		/// <param name="requestBody">The new TransportMailjet resource</param>
		public async Task Api_transport_mailjet_postAsync(TransportMailjet_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mailjet";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportMailjet resource.
		/// Removes the TransportMailjet resource.
		/// Api_transport_mailjet_id_delete api/transport-mailjet/{id}
		/// </summary>
		/// <param name="id">TransportMailjet identifier</param>
		public async Task Api_transport_mailjet_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mailjet/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportMailjet resource.
		/// Retrieves a TransportMailjet resource.
		/// Api_transport_mailjet_id_get api/transport-mailjet/{id}
		/// </summary>
		/// <param name="id">TransportMailjet identifier</param>
		/// <returns>TransportMailjet resource</returns>
		public async Task<TransportMailjet_get> Api_transport_mailjet_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mailjet/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMailjet_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportMailjet resource.
		/// Replaces the TransportMailjet resource.
		/// Api_transport_mailjet_id_put api/transport-mailjet/{id}
		/// </summary>
		/// <param name="id">TransportMailjet identifier</param>
		/// <param name="requestBody">The updated TransportMailjet resource</param>
		/// <returns>TransportMailjet resource updated</returns>
		public async Task<TransportMailjet_get> Api_transport_mailjet_id_putAsync(string id, TransportMailjet_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mailjet/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMailjet_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportMastodon resources.
		/// Retrieves the collection of TransportMastodon resources.
		/// Api_transport_mastodon_get_collection api/transport-mastodon
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportMastodon collection</returns>
		public async Task<TransportMastodon_get[]> Api_transport_mastodon_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mastodon?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMastodon_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportMastodon resource.
		/// Creates a TransportMastodon resource.
		/// Api_transport_mastodon_post api/transport-mastodon
		/// </summary>
		/// <param name="requestBody">The new TransportMastodon resource</param>
		public async Task Api_transport_mastodon_postAsync(TransportMastodon_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mastodon";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportMastodon resource.
		/// Removes the TransportMastodon resource.
		/// Api_transport_mastodon_id_delete api/transport-mastodon/{id}
		/// </summary>
		/// <param name="id">TransportMastodon identifier</param>
		public async Task Api_transport_mastodon_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mastodon/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportMastodon resource.
		/// Retrieves a TransportMastodon resource.
		/// Api_transport_mastodon_id_get api/transport-mastodon/{id}
		/// </summary>
		/// <param name="id">TransportMastodon identifier</param>
		/// <returns>TransportMastodon resource</returns>
		public async Task<TransportMastodon_get> Api_transport_mastodon_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mastodon/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMastodon_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportMastodon resource.
		/// Replaces the TransportMastodon resource.
		/// Api_transport_mastodon_id_put api/transport-mastodon/{id}
		/// </summary>
		/// <param name="id">TransportMastodon identifier</param>
		/// <param name="requestBody">The updated TransportMastodon resource</param>
		/// <returns>TransportMastodon resource updated</returns>
		public async Task<TransportMastodon_get> Api_transport_mastodon_id_putAsync(string id, TransportMastodon_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mastodon/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMastodon_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportMattermost resources.
		/// Retrieves the collection of TransportMattermost resources.
		/// Api_transport_mattermost_get_collection api/transport-mattermost
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportMattermost collection</returns>
		public async Task<TransportMattermost_get[]> Api_transport_mattermost_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mattermost?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMattermost_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportMattermost resource.
		/// Creates a TransportMattermost resource.
		/// Api_transport_mattermost_post api/transport-mattermost
		/// </summary>
		/// <param name="requestBody">The new TransportMattermost resource</param>
		public async Task Api_transport_mattermost_postAsync(TransportMattermost_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mattermost";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportMattermost resource.
		/// Removes the TransportMattermost resource.
		/// Api_transport_mattermost_id_delete api/transport-mattermost/{id}
		/// </summary>
		/// <param name="id">TransportMattermost identifier</param>
		public async Task Api_transport_mattermost_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mattermost/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportMattermost resource.
		/// Retrieves a TransportMattermost resource.
		/// Api_transport_mattermost_id_get api/transport-mattermost/{id}
		/// </summary>
		/// <param name="id">TransportMattermost identifier</param>
		/// <returns>TransportMattermost resource</returns>
		public async Task<TransportMattermost_get> Api_transport_mattermost_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mattermost/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMattermost_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportMattermost resource.
		/// Replaces the TransportMattermost resource.
		/// Api_transport_mattermost_id_put api/transport-mattermost/{id}
		/// </summary>
		/// <param name="id">TransportMattermost identifier</param>
		/// <param name="requestBody">The updated TransportMattermost resource</param>
		/// <returns>TransportMattermost resource updated</returns>
		public async Task<TransportMattermost_get> Api_transport_mattermost_id_putAsync(string id, TransportMattermost_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mattermost/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMattermost_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportMercure resources.
		/// Retrieves the collection of TransportMercure resources.
		/// Api_transport_mercure_get_collection api/transport-mercure
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportMercure collection</returns>
		public async Task<TransportMercure_get[]> Api_transport_mercure_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mercure?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMercure_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportMercure resource.
		/// Creates a TransportMercure resource.
		/// Api_transport_mercure_post api/transport-mercure
		/// </summary>
		/// <param name="requestBody">The new TransportMercure resource</param>
		public async Task Api_transport_mercure_postAsync(TransportMercure_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mercure";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportMercure resource.
		/// Removes the TransportMercure resource.
		/// Api_transport_mercure_id_delete api/transport-mercure/{id}
		/// </summary>
		/// <param name="id">TransportMercure identifier</param>
		public async Task Api_transport_mercure_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mercure/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportMercure resource.
		/// Retrieves a TransportMercure resource.
		/// Api_transport_mercure_id_get api/transport-mercure/{id}
		/// </summary>
		/// <param name="id">TransportMercure identifier</param>
		/// <returns>TransportMercure resource</returns>
		public async Task<TransportMercure_get> Api_transport_mercure_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mercure/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMercure_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportMercure resource.
		/// Replaces the TransportMercure resource.
		/// Api_transport_mercure_id_put api/transport-mercure/{id}
		/// </summary>
		/// <param name="id">TransportMercure identifier</param>
		/// <param name="requestBody">The updated TransportMercure resource</param>
		/// <returns>TransportMercure resource updated</returns>
		public async Task<TransportMercure_get> Api_transport_mercure_id_putAsync(string id, TransportMercure_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mercure/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMercure_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportMessageBird resources.
		/// Retrieves the collection of TransportMessageBird resources.
		/// Api_transport_message_bird_get_collection api/transport-message-bird
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportMessageBird collection</returns>
		public async Task<TransportMessageBird_get[]> Api_transport_message_bird_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-message-bird?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMessageBird_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportMessageBird resource.
		/// Creates a TransportMessageBird resource.
		/// Api_transport_message_bird_post api/transport-message-bird
		/// </summary>
		/// <param name="requestBody">The new TransportMessageBird resource</param>
		public async Task Api_transport_message_bird_postAsync(TransportMessageBird_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-message-bird";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportMessageBird resource.
		/// Removes the TransportMessageBird resource.
		/// Api_transport_message_bird_id_delete api/transport-message-bird/{id}
		/// </summary>
		/// <param name="id">TransportMessageBird identifier</param>
		public async Task Api_transport_message_bird_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-message-bird/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportMessageBird resource.
		/// Retrieves a TransportMessageBird resource.
		/// Api_transport_message_bird_id_get api/transport-message-bird/{id}
		/// </summary>
		/// <param name="id">TransportMessageBird identifier</param>
		/// <returns>TransportMessageBird resource</returns>
		public async Task<TransportMessageBird_get> Api_transport_message_bird_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-message-bird/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMessageBird_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportMessageBird resource.
		/// Replaces the TransportMessageBird resource.
		/// Api_transport_message_bird_id_put api/transport-message-bird/{id}
		/// </summary>
		/// <param name="id">TransportMessageBird identifier</param>
		/// <param name="requestBody">The updated TransportMessageBird resource</param>
		/// <returns>TransportMessageBird resource updated</returns>
		public async Task<TransportMessageBird_get> Api_transport_message_bird_id_putAsync(string id, TransportMessageBird_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-message-bird/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMessageBird_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportMessageMedia resources.
		/// Retrieves the collection of TransportMessageMedia resources.
		/// Api_transport_message_media_get_collection api/transport-message-media
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportMessageMedia collection</returns>
		public async Task<TransportMessageMedia_get[]> Api_transport_message_media_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-message-media?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMessageMedia_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportMessageMedia resource.
		/// Creates a TransportMessageMedia resource.
		/// Api_transport_message_media_post api/transport-message-media
		/// </summary>
		/// <param name="requestBody">The new TransportMessageMedia resource</param>
		public async Task Api_transport_message_media_postAsync(TransportMessageMedia_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-message-media";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportMessageMedia resource.
		/// Removes the TransportMessageMedia resource.
		/// Api_transport_message_media_id_delete api/transport-message-media/{id}
		/// </summary>
		/// <param name="id">TransportMessageMedia identifier</param>
		public async Task Api_transport_message_media_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-message-media/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportMessageMedia resource.
		/// Retrieves a TransportMessageMedia resource.
		/// Api_transport_message_media_id_get api/transport-message-media/{id}
		/// </summary>
		/// <param name="id">TransportMessageMedia identifier</param>
		/// <returns>TransportMessageMedia resource</returns>
		public async Task<TransportMessageMedia_get> Api_transport_message_media_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-message-media/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMessageMedia_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportMessageMedia resource.
		/// Replaces the TransportMessageMedia resource.
		/// Api_transport_message_media_id_put api/transport-message-media/{id}
		/// </summary>
		/// <param name="id">TransportMessageMedia identifier</param>
		/// <param name="requestBody">The updated TransportMessageMedia resource</param>
		/// <returns>TransportMessageMedia resource updated</returns>
		public async Task<TransportMessageMedia_get> Api_transport_message_media_id_putAsync(string id, TransportMessageMedia_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-message-media/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMessageMedia_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportMicrosoftTeams resources.
		/// Retrieves the collection of TransportMicrosoftTeams resources.
		/// Api_transport_microsoft_teams_get_collection api/transport-microsoft-teams
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportMicrosoftTeams collection</returns>
		public async Task<TransportMicrosoftTeams_get[]> Api_transport_microsoft_teams_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-microsoft-teams?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMicrosoftTeams_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportMicrosoftTeams resource.
		/// Creates a TransportMicrosoftTeams resource.
		/// Api_transport_microsoft_teams_post api/transport-microsoft-teams
		/// </summary>
		/// <param name="requestBody">The new TransportMicrosoftTeams resource</param>
		public async Task Api_transport_microsoft_teams_postAsync(TransportMicrosoftTeams_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-microsoft-teams";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportMicrosoftTeams resource.
		/// Removes the TransportMicrosoftTeams resource.
		/// Api_transport_microsoft_teams_id_delete api/transport-microsoft-teams/{id}
		/// </summary>
		/// <param name="id">TransportMicrosoftTeams identifier</param>
		public async Task Api_transport_microsoft_teams_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-microsoft-teams/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportMicrosoftTeams resource.
		/// Retrieves a TransportMicrosoftTeams resource.
		/// Api_transport_microsoft_teams_id_get api/transport-microsoft-teams/{id}
		/// </summary>
		/// <param name="id">TransportMicrosoftTeams identifier</param>
		/// <returns>TransportMicrosoftTeams resource</returns>
		public async Task<TransportMicrosoftTeams_get> Api_transport_microsoft_teams_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-microsoft-teams/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMicrosoftTeams_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportMicrosoftTeams resource.
		/// Replaces the TransportMicrosoftTeams resource.
		/// Api_transport_microsoft_teams_id_put api/transport-microsoft-teams/{id}
		/// </summary>
		/// <param name="id">TransportMicrosoftTeams identifier</param>
		/// <param name="requestBody">The updated TransportMicrosoftTeams resource</param>
		/// <returns>TransportMicrosoftTeams resource updated</returns>
		public async Task<TransportMicrosoftTeams_get> Api_transport_microsoft_teams_id_putAsync(string id, TransportMicrosoftTeams_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-microsoft-teams/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMicrosoftTeams_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportMobyt resources.
		/// Retrieves the collection of TransportMobyt resources.
		/// Api_transport_mobyt_get_collection api/transport-mobyt
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportMobyt collection</returns>
		public async Task<TransportMobyt_get[]> Api_transport_mobyt_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mobyt?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMobyt_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportMobyt resource.
		/// Creates a TransportMobyt resource.
		/// Api_transport_mobyt_post api/transport-mobyt
		/// </summary>
		/// <param name="requestBody">The new TransportMobyt resource</param>
		public async Task Api_transport_mobyt_postAsync(TransportMobyt_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mobyt";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportMobyt resource.
		/// Removes the TransportMobyt resource.
		/// Api_transport_mobyt_id_delete api/transport-mobyt/{id}
		/// </summary>
		/// <param name="id">TransportMobyt identifier</param>
		public async Task Api_transport_mobyt_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mobyt/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportMobyt resource.
		/// Retrieves a TransportMobyt resource.
		/// Api_transport_mobyt_id_get api/transport-mobyt/{id}
		/// </summary>
		/// <param name="id">TransportMobyt identifier</param>
		/// <returns>TransportMobyt resource</returns>
		public async Task<TransportMobyt_get> Api_transport_mobyt_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mobyt/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMobyt_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportMobyt resource.
		/// Replaces the TransportMobyt resource.
		/// Api_transport_mobyt_id_put api/transport-mobyt/{id}
		/// </summary>
		/// <param name="id">TransportMobyt identifier</param>
		/// <param name="requestBody">The updated TransportMobyt resource</param>
		/// <returns>TransportMobyt resource updated</returns>
		public async Task<TransportMobyt_get> Api_transport_mobyt_id_putAsync(string id, TransportMobyt_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-mobyt/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportMobyt_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportOctopush resources.
		/// Retrieves the collection of TransportOctopush resources.
		/// Api_transport_octopush_get_collection api/transport-octopush
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportOctopush collection</returns>
		public async Task<TransportOctopush_get[]> Api_transport_octopush_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-octopush?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOctopush_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportOctopush resource.
		/// Creates a TransportOctopush resource.
		/// Api_transport_octopush_post api/transport-octopush
		/// </summary>
		/// <param name="requestBody">The new TransportOctopush resource</param>
		public async Task Api_transport_octopush_postAsync(TransportOctopush_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-octopush";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportOctopush resource.
		/// Removes the TransportOctopush resource.
		/// Api_transport_octopush_id_delete api/transport-octopush/{id}
		/// </summary>
		/// <param name="id">TransportOctopush identifier</param>
		public async Task Api_transport_octopush_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-octopush/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportOctopush resource.
		/// Retrieves a TransportOctopush resource.
		/// Api_transport_octopush_id_get api/transport-octopush/{id}
		/// </summary>
		/// <param name="id">TransportOctopush identifier</param>
		/// <returns>TransportOctopush resource</returns>
		public async Task<TransportOctopush_get> Api_transport_octopush_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-octopush/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOctopush_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportOctopush resource.
		/// Replaces the TransportOctopush resource.
		/// Api_transport_octopush_id_put api/transport-octopush/{id}
		/// </summary>
		/// <param name="id">TransportOctopush identifier</param>
		/// <param name="requestBody">The updated TransportOctopush resource</param>
		/// <returns>TransportOctopush resource updated</returns>
		public async Task<TransportOctopush_get> Api_transport_octopush_id_putAsync(string id, TransportOctopush_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-octopush/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOctopush_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportOneSignal resources.
		/// Retrieves the collection of TransportOneSignal resources.
		/// Api_transport_one_signal_get_collection api/transport-one-signal
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportOneSignal collection</returns>
		public async Task<TransportOneSignal_get[]> Api_transport_one_signal_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-one-signal?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOneSignal_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportOneSignal resource.
		/// Creates a TransportOneSignal resource.
		/// Api_transport_one_signal_post api/transport-one-signal
		/// </summary>
		/// <param name="requestBody">The new TransportOneSignal resource</param>
		public async Task Api_transport_one_signal_postAsync(TransportOneSignal_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-one-signal";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportOneSignal resource.
		/// Removes the TransportOneSignal resource.
		/// Api_transport_one_signal_id_delete api/transport-one-signal/{id}
		/// </summary>
		/// <param name="id">TransportOneSignal identifier</param>
		public async Task Api_transport_one_signal_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-one-signal/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportOneSignal resource.
		/// Retrieves a TransportOneSignal resource.
		/// Api_transport_one_signal_id_get api/transport-one-signal/{id}
		/// </summary>
		/// <param name="id">TransportOneSignal identifier</param>
		/// <returns>TransportOneSignal resource</returns>
		public async Task<TransportOneSignal_get> Api_transport_one_signal_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-one-signal/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOneSignal_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportOneSignal resource.
		/// Replaces the TransportOneSignal resource.
		/// Api_transport_one_signal_id_put api/transport-one-signal/{id}
		/// </summary>
		/// <param name="id">TransportOneSignal identifier</param>
		/// <param name="requestBody">The updated TransportOneSignal resource</param>
		/// <returns>TransportOneSignal resource updated</returns>
		public async Task<TransportOneSignal_get> Api_transport_one_signal_id_putAsync(string id, TransportOneSignal_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-one-signal/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOneSignal_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportOpsgenie resources.
		/// Retrieves the collection of TransportOpsgenie resources.
		/// Api_transport_opsgenie_get_collection api/transport-opsgenie
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportOpsgenie collection</returns>
		public async Task<TransportOpsgenie_get[]> Api_transport_opsgenie_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-opsgenie?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOpsgenie_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportOpsgenie resource.
		/// Creates a TransportOpsgenie resource.
		/// Api_transport_opsgenie_post api/transport-opsgenie
		/// </summary>
		/// <param name="requestBody">The new TransportOpsgenie resource</param>
		public async Task Api_transport_opsgenie_postAsync(TransportOpsgenie_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-opsgenie";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportOpsgenie resource.
		/// Removes the TransportOpsgenie resource.
		/// Api_transport_opsgenie_id_delete api/transport-opsgenie/{id}
		/// </summary>
		/// <param name="id">TransportOpsgenie identifier</param>
		public async Task Api_transport_opsgenie_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-opsgenie/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportOpsgenie resource.
		/// Retrieves a TransportOpsgenie resource.
		/// Api_transport_opsgenie_id_get api/transport-opsgenie/{id}
		/// </summary>
		/// <param name="id">TransportOpsgenie identifier</param>
		/// <returns>TransportOpsgenie resource</returns>
		public async Task<TransportOpsgenie_get> Api_transport_opsgenie_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-opsgenie/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOpsgenie_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportOpsgenie resource.
		/// Replaces the TransportOpsgenie resource.
		/// Api_transport_opsgenie_id_put api/transport-opsgenie/{id}
		/// </summary>
		/// <param name="id">TransportOpsgenie identifier</param>
		/// <param name="requestBody">The updated TransportOpsgenie resource</param>
		/// <returns>TransportOpsgenie resource updated</returns>
		public async Task<TransportOpsgenie_get> Api_transport_opsgenie_id_putAsync(string id, TransportOpsgenie_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-opsgenie/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOpsgenie_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportOrangeSms resources.
		/// Retrieves the collection of TransportOrangeSms resources.
		/// Api_transport_orange_sms_get_collection api/transport-orange-sms
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportOrangeSms collection</returns>
		public async Task<TransportOrangeSms_get[]> Api_transport_orange_sms_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-orange-sms?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOrangeSms_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportOrangeSms resource.
		/// Creates a TransportOrangeSms resource.
		/// Api_transport_orange_sms_post api/transport-orange-sms
		/// </summary>
		/// <param name="requestBody">The new TransportOrangeSms resource</param>
		public async Task Api_transport_orange_sms_postAsync(TransportOrangeSms_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-orange-sms";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportOrangeSms resource.
		/// Removes the TransportOrangeSms resource.
		/// Api_transport_orange_sms_id_delete api/transport-orange-sms/{id}
		/// </summary>
		/// <param name="id">TransportOrangeSms identifier</param>
		public async Task Api_transport_orange_sms_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-orange-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportOrangeSms resource.
		/// Retrieves a TransportOrangeSms resource.
		/// Api_transport_orange_sms_id_get api/transport-orange-sms/{id}
		/// </summary>
		/// <param name="id">TransportOrangeSms identifier</param>
		/// <returns>TransportOrangeSms resource</returns>
		public async Task<TransportOrangeSms_get> Api_transport_orange_sms_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-orange-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOrangeSms_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportOrangeSms resource.
		/// Replaces the TransportOrangeSms resource.
		/// Api_transport_orange_sms_id_put api/transport-orange-sms/{id}
		/// </summary>
		/// <param name="id">TransportOrangeSms identifier</param>
		/// <param name="requestBody">The updated TransportOrangeSms resource</param>
		/// <returns>TransportOrangeSms resource updated</returns>
		public async Task<TransportOrangeSms_get> Api_transport_orange_sms_id_putAsync(string id, TransportOrangeSms_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-orange-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOrangeSms_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportOvhCloud resources.
		/// Retrieves the collection of TransportOvhCloud resources.
		/// Api_transport_ovh_cloud_get_collection api/transport-ovh-cloud
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportOvhCloud collection</returns>
		public async Task<TransportOvhCloud_get[]> Api_transport_ovh_cloud_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-ovh-cloud?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOvhCloud_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportOvhCloud resource.
		/// Creates a TransportOvhCloud resource.
		/// Api_transport_ovh_cloud_post api/transport-ovh-cloud
		/// </summary>
		/// <param name="requestBody">The new TransportOvhCloud resource</param>
		public async Task Api_transport_ovh_cloud_postAsync(TransportOvhCloud_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-ovh-cloud";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportOvhCloud resource.
		/// Removes the TransportOvhCloud resource.
		/// Api_transport_ovh_cloud_id_delete api/transport-ovh-cloud/{id}
		/// </summary>
		/// <param name="id">TransportOvhCloud identifier</param>
		public async Task Api_transport_ovh_cloud_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-ovh-cloud/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportOvhCloud resource.
		/// Retrieves a TransportOvhCloud resource.
		/// Api_transport_ovh_cloud_id_get api/transport-ovh-cloud/{id}
		/// </summary>
		/// <param name="id">TransportOvhCloud identifier</param>
		/// <returns>TransportOvhCloud resource</returns>
		public async Task<TransportOvhCloud_get> Api_transport_ovh_cloud_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-ovh-cloud/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOvhCloud_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportOvhCloud resource.
		/// Replaces the TransportOvhCloud resource.
		/// Api_transport_ovh_cloud_id_put api/transport-ovh-cloud/{id}
		/// </summary>
		/// <param name="id">TransportOvhCloud identifier</param>
		/// <param name="requestBody">The updated TransportOvhCloud resource</param>
		/// <returns>TransportOvhCloud resource updated</returns>
		public async Task<TransportOvhCloud_get> Api_transport_ovh_cloud_id_putAsync(string id, TransportOvhCloud_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-ovh-cloud/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportOvhCloud_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportPagerDuty resources.
		/// Retrieves the collection of TransportPagerDuty resources.
		/// Api_transport_pager_duty_get_collection api/transport-pager-duty
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportPagerDuty collection</returns>
		public async Task<TransportPagerDuty_get[]> Api_transport_pager_duty_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pager-duty?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPagerDuty_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportPagerDuty resource.
		/// Creates a TransportPagerDuty resource.
		/// Api_transport_pager_duty_post api/transport-pager-duty
		/// </summary>
		/// <param name="requestBody">The new TransportPagerDuty resource</param>
		public async Task Api_transport_pager_duty_postAsync(TransportPagerDuty_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pager-duty";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportPagerDuty resource.
		/// Removes the TransportPagerDuty resource.
		/// Api_transport_pager_duty_id_delete api/transport-pager-duty/{id}
		/// </summary>
		/// <param name="id">TransportPagerDuty identifier</param>
		public async Task Api_transport_pager_duty_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pager-duty/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportPagerDuty resource.
		/// Retrieves a TransportPagerDuty resource.
		/// Api_transport_pager_duty_id_get api/transport-pager-duty/{id}
		/// </summary>
		/// <param name="id">TransportPagerDuty identifier</param>
		/// <returns>TransportPagerDuty resource</returns>
		public async Task<TransportPagerDuty_get> Api_transport_pager_duty_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pager-duty/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPagerDuty_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportPagerDuty resource.
		/// Replaces the TransportPagerDuty resource.
		/// Api_transport_pager_duty_id_put api/transport-pager-duty/{id}
		/// </summary>
		/// <param name="id">TransportPagerDuty identifier</param>
		/// <param name="requestBody">The updated TransportPagerDuty resource</param>
		/// <returns>TransportPagerDuty resource updated</returns>
		public async Task<TransportPagerDuty_get> Api_transport_pager_duty_id_putAsync(string id, TransportPagerDuty_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pager-duty/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPagerDuty_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportPagerTree resources.
		/// Retrieves the collection of TransportPagerTree resources.
		/// Api_transport_pager_tree_get_collection api/transport-pager-tree
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportPagerTree collection</returns>
		public async Task<TransportPagerTree_get[]> Api_transport_pager_tree_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pager-tree?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPagerTree_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportPagerTree resource.
		/// Creates a TransportPagerTree resource.
		/// Api_transport_pager_tree_post api/transport-pager-tree
		/// </summary>
		/// <param name="requestBody">The new TransportPagerTree resource</param>
		public async Task Api_transport_pager_tree_postAsync(TransportPagerTree_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pager-tree";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportPagerTree resource.
		/// Removes the TransportPagerTree resource.
		/// Api_transport_pager_tree_id_delete api/transport-pager-tree/{id}
		/// </summary>
		/// <param name="id">TransportPagerTree identifier</param>
		public async Task Api_transport_pager_tree_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pager-tree/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportPagerTree resource.
		/// Retrieves a TransportPagerTree resource.
		/// Api_transport_pager_tree_id_get api/transport-pager-tree/{id}
		/// </summary>
		/// <param name="id">TransportPagerTree identifier</param>
		/// <returns>TransportPagerTree resource</returns>
		public async Task<TransportPagerTree_get> Api_transport_pager_tree_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pager-tree/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPagerTree_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportPagerTree resource.
		/// Replaces the TransportPagerTree resource.
		/// Api_transport_pager_tree_id_put api/transport-pager-tree/{id}
		/// </summary>
		/// <param name="id">TransportPagerTree identifier</param>
		/// <param name="requestBody">The updated TransportPagerTree resource</param>
		/// <returns>TransportPagerTree resource updated</returns>
		public async Task<TransportPagerTree_get> Api_transport_pager_tree_id_putAsync(string id, TransportPagerTree_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pager-tree/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPagerTree_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportPlivo resources.
		/// Retrieves the collection of TransportPlivo resources.
		/// Api_transport_plivo_get_collection api/transport-plivo
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportPlivo collection</returns>
		public async Task<TransportPlivo_get[]> Api_transport_plivo_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-plivo?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPlivo_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportPlivo resource.
		/// Creates a TransportPlivo resource.
		/// Api_transport_plivo_post api/transport-plivo
		/// </summary>
		/// <param name="requestBody">The new TransportPlivo resource</param>
		public async Task Api_transport_plivo_postAsync(TransportPlivo_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-plivo";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportPlivo resource.
		/// Removes the TransportPlivo resource.
		/// Api_transport_plivo_id_delete api/transport-plivo/{id}
		/// </summary>
		/// <param name="id">TransportPlivo identifier</param>
		public async Task Api_transport_plivo_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-plivo/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportPlivo resource.
		/// Retrieves a TransportPlivo resource.
		/// Api_transport_plivo_id_get api/transport-plivo/{id}
		/// </summary>
		/// <param name="id">TransportPlivo identifier</param>
		/// <returns>TransportPlivo resource</returns>
		public async Task<TransportPlivo_get> Api_transport_plivo_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-plivo/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPlivo_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportPlivo resource.
		/// Replaces the TransportPlivo resource.
		/// Api_transport_plivo_id_put api/transport-plivo/{id}
		/// </summary>
		/// <param name="id">TransportPlivo identifier</param>
		/// <param name="requestBody">The updated TransportPlivo resource</param>
		/// <returns>TransportPlivo resource updated</returns>
		public async Task<TransportPlivo_get> Api_transport_plivo_id_putAsync(string id, TransportPlivo_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-plivo/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPlivo_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportPushbullet resources.
		/// Retrieves the collection of TransportPushbullet resources.
		/// Api_transport_pushbullet_get_collection api/transport-pushbullet
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportPushbullet collection</returns>
		public async Task<TransportPushbullet_get[]> Api_transport_pushbullet_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushbullet?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPushbullet_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportPushbullet resource.
		/// Creates a TransportPushbullet resource.
		/// Api_transport_pushbullet_post api/transport-pushbullet
		/// </summary>
		/// <param name="requestBody">The new TransportPushbullet resource</param>
		public async Task Api_transport_pushbullet_postAsync(TransportPushbullet_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushbullet";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportPushbullet resource.
		/// Removes the TransportPushbullet resource.
		/// Api_transport_pushbullet_id_delete api/transport-pushbullet/{id}
		/// </summary>
		/// <param name="id">TransportPushbullet identifier</param>
		public async Task Api_transport_pushbullet_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushbullet/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportPushbullet resource.
		/// Retrieves a TransportPushbullet resource.
		/// Api_transport_pushbullet_id_get api/transport-pushbullet/{id}
		/// </summary>
		/// <param name="id">TransportPushbullet identifier</param>
		/// <returns>TransportPushbullet resource</returns>
		public async Task<TransportPushbullet_get> Api_transport_pushbullet_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushbullet/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPushbullet_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportPushbullet resource.
		/// Replaces the TransportPushbullet resource.
		/// Api_transport_pushbullet_id_put api/transport-pushbullet/{id}
		/// </summary>
		/// <param name="id">TransportPushbullet identifier</param>
		/// <param name="requestBody">The updated TransportPushbullet resource</param>
		/// <returns>TransportPushbullet resource updated</returns>
		public async Task<TransportPushbullet_get> Api_transport_pushbullet_id_putAsync(string id, TransportPushbullet_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushbullet/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPushbullet_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportPushover resources.
		/// Retrieves the collection of TransportPushover resources.
		/// Api_transport_pushover_get_collection api/transport-pushover
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportPushover collection</returns>
		public async Task<TransportPushover_get[]> Api_transport_pushover_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushover?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPushover_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportPushover resource.
		/// Creates a TransportPushover resource.
		/// Api_transport_pushover_post api/transport-pushover
		/// </summary>
		/// <param name="requestBody">The new TransportPushover resource</param>
		public async Task Api_transport_pushover_postAsync(TransportPushover_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushover";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportPushover resource.
		/// Removes the TransportPushover resource.
		/// Api_transport_pushover_id_delete api/transport-pushover/{id}
		/// </summary>
		/// <param name="id">TransportPushover identifier</param>
		public async Task Api_transport_pushover_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushover/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportPushover resource.
		/// Retrieves a TransportPushover resource.
		/// Api_transport_pushover_id_get api/transport-pushover/{id}
		/// </summary>
		/// <param name="id">TransportPushover identifier</param>
		/// <returns>TransportPushover resource</returns>
		public async Task<TransportPushover_get> Api_transport_pushover_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushover/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPushover_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportPushover resource.
		/// Replaces the TransportPushover resource.
		/// Api_transport_pushover_id_put api/transport-pushover/{id}
		/// </summary>
		/// <param name="id">TransportPushover identifier</param>
		/// <param name="requestBody">The updated TransportPushover resource</param>
		/// <returns>TransportPushover resource updated</returns>
		public async Task<TransportPushover_get> Api_transport_pushover_id_putAsync(string id, TransportPushover_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushover/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPushover_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportPushy resources.
		/// Retrieves the collection of TransportPushy resources.
		/// Api_transport_pushy_get_collection api/transport-pushy
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportPushy collection</returns>
		public async Task<TransportPushy_get[]> Api_transport_pushy_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushy?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPushy_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportPushy resource.
		/// Creates a TransportPushy resource.
		/// Api_transport_pushy_post api/transport-pushy
		/// </summary>
		/// <param name="requestBody">The new TransportPushy resource</param>
		public async Task Api_transport_pushy_postAsync(TransportPushy_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportPushy resource.
		/// Removes the TransportPushy resource.
		/// Api_transport_pushy_id_delete api/transport-pushy/{id}
		/// </summary>
		/// <param name="id">TransportPushy identifier</param>
		public async Task Api_transport_pushy_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushy/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportPushy resource.
		/// Retrieves a TransportPushy resource.
		/// Api_transport_pushy_id_get api/transport-pushy/{id}
		/// </summary>
		/// <param name="id">TransportPushy identifier</param>
		/// <returns>TransportPushy resource</returns>
		public async Task<TransportPushy_get> Api_transport_pushy_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushy/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPushy_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportPushy resource.
		/// Replaces the TransportPushy resource.
		/// Api_transport_pushy_id_put api/transport-pushy/{id}
		/// </summary>
		/// <param name="id">TransportPushy identifier</param>
		/// <param name="requestBody">The updated TransportPushy resource</param>
		/// <returns>TransportPushy resource updated</returns>
		public async Task<TransportPushy_get> Api_transport_pushy_id_putAsync(string id, TransportPushy_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-pushy/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportPushy_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportRingCentral resources.
		/// Retrieves the collection of TransportRingCentral resources.
		/// Api_transport_ring_central_get_collection api/transport-ring-central
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportRingCentral collection</returns>
		public async Task<TransportRingCentral_get[]> Api_transport_ring_central_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-ring-central?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportRingCentral_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportRingCentral resource.
		/// Creates a TransportRingCentral resource.
		/// Api_transport_ring_central_post api/transport-ring-central
		/// </summary>
		/// <param name="requestBody">The new TransportRingCentral resource</param>
		public async Task Api_transport_ring_central_postAsync(TransportRingCentral_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-ring-central";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportRingCentral resource.
		/// Removes the TransportRingCentral resource.
		/// Api_transport_ring_central_id_delete api/transport-ring-central/{id}
		/// </summary>
		/// <param name="id">TransportRingCentral identifier</param>
		public async Task Api_transport_ring_central_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-ring-central/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportRingCentral resource.
		/// Retrieves a TransportRingCentral resource.
		/// Api_transport_ring_central_id_get api/transport-ring-central/{id}
		/// </summary>
		/// <param name="id">TransportRingCentral identifier</param>
		/// <returns>TransportRingCentral resource</returns>
		public async Task<TransportRingCentral_get> Api_transport_ring_central_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-ring-central/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportRingCentral_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportRingCentral resource.
		/// Replaces the TransportRingCentral resource.
		/// Api_transport_ring_central_id_put api/transport-ring-central/{id}
		/// </summary>
		/// <param name="id">TransportRingCentral identifier</param>
		/// <param name="requestBody">The updated TransportRingCentral resource</param>
		/// <returns>TransportRingCentral resource updated</returns>
		public async Task<TransportRingCentral_get> Api_transport_ring_central_id_putAsync(string id, TransportRingCentral_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-ring-central/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportRingCentral_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportRocketChat resources.
		/// Retrieves the collection of TransportRocketChat resources.
		/// Api_transport_rocket_chat_get_collection api/transport-rocket-chat
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportRocketChat collection</returns>
		public async Task<TransportRocketChat_get[]> Api_transport_rocket_chat_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-rocket-chat?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportRocketChat_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportRocketChat resource.
		/// Creates a TransportRocketChat resource.
		/// Api_transport_rocket_chat_post api/transport-rocket-chat
		/// </summary>
		/// <param name="requestBody">The new TransportRocketChat resource</param>
		public async Task Api_transport_rocket_chat_postAsync(TransportRocketChat_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-rocket-chat";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportRocketChat resource.
		/// Removes the TransportRocketChat resource.
		/// Api_transport_rocket_chat_id_delete api/transport-rocket-chat/{id}
		/// </summary>
		/// <param name="id">TransportRocketChat identifier</param>
		public async Task Api_transport_rocket_chat_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-rocket-chat/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportRocketChat resource.
		/// Retrieves a TransportRocketChat resource.
		/// Api_transport_rocket_chat_id_get api/transport-rocket-chat/{id}
		/// </summary>
		/// <param name="id">TransportRocketChat identifier</param>
		/// <returns>TransportRocketChat resource</returns>
		public async Task<TransportRocketChat_get> Api_transport_rocket_chat_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-rocket-chat/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportRocketChat_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportRocketChat resource.
		/// Replaces the TransportRocketChat resource.
		/// Api_transport_rocket_chat_id_put api/transport-rocket-chat/{id}
		/// </summary>
		/// <param name="id">TransportRocketChat identifier</param>
		/// <param name="requestBody">The updated TransportRocketChat resource</param>
		/// <returns>TransportRocketChat resource updated</returns>
		public async Task<TransportRocketChat_get> Api_transport_rocket_chat_id_putAsync(string id, TransportRocketChat_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-rocket-chat/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportRocketChat_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSendberry resources.
		/// Retrieves the collection of TransportSendberry resources.
		/// Api_transport_sendberry_get_collection api/transport-sendberry
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSendberry collection</returns>
		public async Task<TransportSendberry_get[]> Api_transport_sendberry_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sendberry?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSendberry_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSendberry resource.
		/// Creates a TransportSendberry resource.
		/// Api_transport_sendberry_post api/transport-sendberry
		/// </summary>
		/// <param name="requestBody">The new TransportSendberry resource</param>
		public async Task Api_transport_sendberry_postAsync(TransportSendberry_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sendberry";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSendberry resource.
		/// Removes the TransportSendberry resource.
		/// Api_transport_sendberry_id_delete api/transport-sendberry/{id}
		/// </summary>
		/// <param name="id">TransportSendberry identifier</param>
		public async Task Api_transport_sendberry_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sendberry/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSendberry resource.
		/// Retrieves a TransportSendberry resource.
		/// Api_transport_sendberry_id_get api/transport-sendberry/{id}
		/// </summary>
		/// <param name="id">TransportSendberry identifier</param>
		/// <returns>TransportSendberry resource</returns>
		public async Task<TransportSendberry_get> Api_transport_sendberry_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sendberry/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSendberry_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSendberry resource.
		/// Replaces the TransportSendberry resource.
		/// Api_transport_sendberry_id_put api/transport-sendberry/{id}
		/// </summary>
		/// <param name="id">TransportSendberry identifier</param>
		/// <param name="requestBody">The updated TransportSendberry resource</param>
		/// <returns>TransportSendberry resource updated</returns>
		public async Task<TransportSendberry_get> Api_transport_sendberry_id_putAsync(string id, TransportSendberry_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sendberry/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSendberry_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSendinblue resources.
		/// Retrieves the collection of TransportSendinblue resources.
		/// Api_transport_sendinblue_get_collection api/transport-sendinblue
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSendinblue collection</returns>
		public async Task<TransportSendinblue_get[]> Api_transport_sendinblue_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sendinblue?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSendinblue_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSendinblue resource.
		/// Creates a TransportSendinblue resource.
		/// Api_transport_sendinblue_post api/transport-sendinblue
		/// </summary>
		/// <param name="requestBody">The new TransportSendinblue resource</param>
		public async Task Api_transport_sendinblue_postAsync(TransportSendinblue_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sendinblue";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSendinblue resource.
		/// Removes the TransportSendinblue resource.
		/// Api_transport_sendinblue_id_delete api/transport-sendinblue/{id}
		/// </summary>
		/// <param name="id">TransportSendinblue identifier</param>
		public async Task Api_transport_sendinblue_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sendinblue/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSendinblue resource.
		/// Retrieves a TransportSendinblue resource.
		/// Api_transport_sendinblue_id_get api/transport-sendinblue/{id}
		/// </summary>
		/// <param name="id">TransportSendinblue identifier</param>
		/// <returns>TransportSendinblue resource</returns>
		public async Task<TransportSendinblue_get> Api_transport_sendinblue_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sendinblue/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSendinblue_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSendinblue resource.
		/// Replaces the TransportSendinblue resource.
		/// Api_transport_sendinblue_id_put api/transport-sendinblue/{id}
		/// </summary>
		/// <param name="id">TransportSendinblue identifier</param>
		/// <param name="requestBody">The updated TransportSendinblue resource</param>
		/// <returns>TransportSendinblue resource updated</returns>
		public async Task<TransportSendinblue_get> Api_transport_sendinblue_id_putAsync(string id, TransportSendinblue_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sendinblue/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSendinblue_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSimpleTextin resources.
		/// Retrieves the collection of TransportSimpleTextin resources.
		/// Api_transport_simple_textin_get_collection api/transport-simple-textin
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSimpleTextin collection</returns>
		public async Task<TransportSimpleTextin_get[]> Api_transport_simple_textin_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-simple-textin?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSimpleTextin_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSimpleTextin resource.
		/// Creates a TransportSimpleTextin resource.
		/// Api_transport_simple_textin_post api/transport-simple-textin
		/// </summary>
		/// <param name="requestBody">The new TransportSimpleTextin resource</param>
		public async Task Api_transport_simple_textin_postAsync(TransportSimpleTextin_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-simple-textin";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSimpleTextin resource.
		/// Removes the TransportSimpleTextin resource.
		/// Api_transport_simple_textin_id_delete api/transport-simple-textin/{id}
		/// </summary>
		/// <param name="id">TransportSimpleTextin identifier</param>
		public async Task Api_transport_simple_textin_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-simple-textin/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSimpleTextin resource.
		/// Retrieves a TransportSimpleTextin resource.
		/// Api_transport_simple_textin_id_get api/transport-simple-textin/{id}
		/// </summary>
		/// <param name="id">TransportSimpleTextin identifier</param>
		/// <returns>TransportSimpleTextin resource</returns>
		public async Task<TransportSimpleTextin_get> Api_transport_simple_textin_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-simple-textin/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSimpleTextin_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSimpleTextin resource.
		/// Replaces the TransportSimpleTextin resource.
		/// Api_transport_simple_textin_id_put api/transport-simple-textin/{id}
		/// </summary>
		/// <param name="id">TransportSimpleTextin identifier</param>
		/// <param name="requestBody">The updated TransportSimpleTextin resource</param>
		/// <returns>TransportSimpleTextin resource updated</returns>
		public async Task<TransportSimpleTextin_get> Api_transport_simple_textin_id_putAsync(string id, TransportSimpleTextin_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-simple-textin/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSimpleTextin_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSinch resources.
		/// Retrieves the collection of TransportSinch resources.
		/// Api_transport_sinch_get_collection api/transport-sinch
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSinch collection</returns>
		public async Task<TransportSinch_get[]> Api_transport_sinch_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sinch?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSinch_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSinch resource.
		/// Creates a TransportSinch resource.
		/// Api_transport_sinch_post api/transport-sinch
		/// </summary>
		/// <param name="requestBody">The new TransportSinch resource</param>
		public async Task Api_transport_sinch_postAsync(TransportSinch_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sinch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSinch resource.
		/// Removes the TransportSinch resource.
		/// Api_transport_sinch_id_delete api/transport-sinch/{id}
		/// </summary>
		/// <param name="id">TransportSinch identifier</param>
		public async Task Api_transport_sinch_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sinch/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSinch resource.
		/// Retrieves a TransportSinch resource.
		/// Api_transport_sinch_id_get api/transport-sinch/{id}
		/// </summary>
		/// <param name="id">TransportSinch identifier</param>
		/// <returns>TransportSinch resource</returns>
		public async Task<TransportSinch_get> Api_transport_sinch_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sinch/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSinch_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSinch resource.
		/// Replaces the TransportSinch resource.
		/// Api_transport_sinch_id_put api/transport-sinch/{id}
		/// </summary>
		/// <param name="id">TransportSinch identifier</param>
		/// <param name="requestBody">The updated TransportSinch resource</param>
		/// <returns>TransportSinch resource updated</returns>
		public async Task<TransportSinch_get> Api_transport_sinch_id_putAsync(string id, TransportSinch_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sinch/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSinch_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSlack resources.
		/// Retrieves the collection of TransportSlack resources.
		/// Api_transport_slack_get_collection api/transport-slack
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSlack collection</returns>
		public async Task<TransportSlack_get[]> Api_transport_slack_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-slack?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSlack_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSlack resource.
		/// Creates a TransportSlack resource.
		/// Api_transport_slack_post api/transport-slack
		/// </summary>
		/// <param name="requestBody">The new TransportSlack resource</param>
		public async Task Api_transport_slack_postAsync(TransportSlack_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-slack";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSlack resource.
		/// Removes the TransportSlack resource.
		/// Api_transport_slack_id_delete api/transport-slack/{id}
		/// </summary>
		/// <param name="id">TransportSlack identifier</param>
		public async Task Api_transport_slack_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-slack/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSlack resource.
		/// Retrieves a TransportSlack resource.
		/// Api_transport_slack_id_get api/transport-slack/{id}
		/// </summary>
		/// <param name="id">TransportSlack identifier</param>
		/// <returns>TransportSlack resource</returns>
		public async Task<TransportSlack_get> Api_transport_slack_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-slack/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSlack_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSlack resource.
		/// Replaces the TransportSlack resource.
		/// Api_transport_slack_id_put api/transport-slack/{id}
		/// </summary>
		/// <param name="id">TransportSlack identifier</param>
		/// <param name="requestBody">The updated TransportSlack resource</param>
		/// <returns>TransportSlack resource updated</returns>
		public async Task<TransportSlack_get> Api_transport_slack_id_putAsync(string id, TransportSlack_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-slack/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSlack_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSmsBiuras resources.
		/// Retrieves the collection of TransportSmsBiuras resources.
		/// Api_transport_sms_biuras_get_collection api/transport-sms-biuras
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSmsBiuras collection</returns>
		public async Task<TransportSmsBiuras_get[]> Api_transport_sms_biuras_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms-biuras?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsBiuras_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSmsBiuras resource.
		/// Creates a TransportSmsBiuras resource.
		/// Api_transport_sms_biuras_post api/transport-sms-biuras
		/// </summary>
		/// <param name="requestBody">The new TransportSmsBiuras resource</param>
		public async Task Api_transport_sms_biuras_postAsync(TransportSmsBiuras_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms-biuras";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSmsBiuras resource.
		/// Removes the TransportSmsBiuras resource.
		/// Api_transport_sms_biuras_id_delete api/transport-sms-biuras/{id}
		/// </summary>
		/// <param name="id">TransportSmsBiuras identifier</param>
		public async Task Api_transport_sms_biuras_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms-biuras/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSmsBiuras resource.
		/// Retrieves a TransportSmsBiuras resource.
		/// Api_transport_sms_biuras_id_get api/transport-sms-biuras/{id}
		/// </summary>
		/// <param name="id">TransportSmsBiuras identifier</param>
		/// <returns>TransportSmsBiuras resource</returns>
		public async Task<TransportSmsBiuras_get> Api_transport_sms_biuras_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms-biuras/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsBiuras_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSmsBiuras resource.
		/// Replaces the TransportSmsBiuras resource.
		/// Api_transport_sms_biuras_id_put api/transport-sms-biuras/{id}
		/// </summary>
		/// <param name="id">TransportSmsBiuras identifier</param>
		/// <param name="requestBody">The updated TransportSmsBiuras resource</param>
		/// <returns>TransportSmsBiuras resource updated</returns>
		public async Task<TransportSmsBiuras_get> Api_transport_sms_biuras_id_putAsync(string id, TransportSmsBiuras_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms-biuras/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsBiuras_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSmsFactor resources.
		/// Retrieves the collection of TransportSmsFactor resources.
		/// Api_transport_sms_factor_get_collection api/transport-sms-factor
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSmsFactor collection</returns>
		public async Task<TransportSmsFactor_get[]> Api_transport_sms_factor_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms-factor?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsFactor_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSmsFactor resource.
		/// Creates a TransportSmsFactor resource.
		/// Api_transport_sms_factor_post api/transport-sms-factor
		/// </summary>
		/// <param name="requestBody">The new TransportSmsFactor resource</param>
		public async Task Api_transport_sms_factor_postAsync(TransportSmsFactor_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms-factor";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSmsFactor resource.
		/// Removes the TransportSmsFactor resource.
		/// Api_transport_sms_factor_id_delete api/transport-sms-factor/{id}
		/// </summary>
		/// <param name="id">TransportSmsFactor identifier</param>
		public async Task Api_transport_sms_factor_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms-factor/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSmsFactor resource.
		/// Retrieves a TransportSmsFactor resource.
		/// Api_transport_sms_factor_id_get api/transport-sms-factor/{id}
		/// </summary>
		/// <param name="id">TransportSmsFactor identifier</param>
		/// <returns>TransportSmsFactor resource</returns>
		public async Task<TransportSmsFactor_get> Api_transport_sms_factor_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms-factor/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsFactor_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSmsFactor resource.
		/// Replaces the TransportSmsFactor resource.
		/// Api_transport_sms_factor_id_put api/transport-sms-factor/{id}
		/// </summary>
		/// <param name="id">TransportSmsFactor identifier</param>
		/// <param name="requestBody">The updated TransportSmsFactor resource</param>
		/// <returns>TransportSmsFactor resource updated</returns>
		public async Task<TransportSmsFactor_get> Api_transport_sms_factor_id_putAsync(string id, TransportSmsFactor_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms-factor/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsFactor_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSms77 resources.
		/// Retrieves the collection of TransportSms77 resources.
		/// Api_transport_sms77_get_collection api/transport-sms77
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSms77 collection</returns>
		public async Task<TransportSms77_get[]> Api_transport_sms77_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms77?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSms77_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSms77 resource.
		/// Creates a TransportSms77 resource.
		/// Api_transport_sms77_post api/transport-sms77
		/// </summary>
		/// <param name="requestBody">The new TransportSms77 resource</param>
		public async Task Api_transport_sms77_postAsync(TransportSms77_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms77";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSms77 resource.
		/// Removes the TransportSms77 resource.
		/// Api_transport_sms77_id_delete api/transport-sms77/{id}
		/// </summary>
		/// <param name="id">TransportSms77 identifier</param>
		public async Task Api_transport_sms77_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms77/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSms77 resource.
		/// Retrieves a TransportSms77 resource.
		/// Api_transport_sms77_id_get api/transport-sms77/{id}
		/// </summary>
		/// <param name="id">TransportSms77 identifier</param>
		/// <returns>TransportSms77 resource</returns>
		public async Task<TransportSms77_get> Api_transport_sms77_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms77/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSms77_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSms77 resource.
		/// Replaces the TransportSms77 resource.
		/// Api_transport_sms77_id_put api/transport-sms77/{id}
		/// </summary>
		/// <param name="id">TransportSms77 identifier</param>
		/// <param name="requestBody">The updated TransportSms77 resource</param>
		/// <returns>TransportSms77 resource updated</returns>
		public async Task<TransportSms77_get> Api_transport_sms77_id_putAsync(string id, TransportSms77_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-sms77/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSms77_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSmsapi resources.
		/// Retrieves the collection of TransportSmsapi resources.
		/// Api_transport_smsapi_get_collection api/transport-smsapi
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSmsapi collection</returns>
		public async Task<TransportSmsapi_get[]> Api_transport_smsapi_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsapi?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsapi_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSmsapi resource.
		/// Creates a TransportSmsapi resource.
		/// Api_transport_smsapi_post api/transport-smsapi
		/// </summary>
		/// <param name="requestBody">The new TransportSmsapi resource</param>
		public async Task Api_transport_smsapi_postAsync(TransportSmsapi_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsapi";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSmsapi resource.
		/// Removes the TransportSmsapi resource.
		/// Api_transport_smsapi_id_delete api/transport-smsapi/{id}
		/// </summary>
		/// <param name="id">TransportSmsapi identifier</param>
		public async Task Api_transport_smsapi_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsapi/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSmsapi resource.
		/// Retrieves a TransportSmsapi resource.
		/// Api_transport_smsapi_id_get api/transport-smsapi/{id}
		/// </summary>
		/// <param name="id">TransportSmsapi identifier</param>
		/// <returns>TransportSmsapi resource</returns>
		public async Task<TransportSmsapi_get> Api_transport_smsapi_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsapi/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsapi_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSmsapi resource.
		/// Replaces the TransportSmsapi resource.
		/// Api_transport_smsapi_id_put api/transport-smsapi/{id}
		/// </summary>
		/// <param name="id">TransportSmsapi identifier</param>
		/// <param name="requestBody">The updated TransportSmsapi resource</param>
		/// <returns>TransportSmsapi resource updated</returns>
		public async Task<TransportSmsapi_get> Api_transport_smsapi_id_putAsync(string id, TransportSmsapi_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsapi/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsapi_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSmsc resources.
		/// Retrieves the collection of TransportSmsc resources.
		/// Api_transport_smsc_get_collection api/transport-smsc
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSmsc collection</returns>
		public async Task<TransportSmsc_get[]> Api_transport_smsc_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsc?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsc_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSmsc resource.
		/// Creates a TransportSmsc resource.
		/// Api_transport_smsc_post api/transport-smsc
		/// </summary>
		/// <param name="requestBody">The new TransportSmsc resource</param>
		public async Task Api_transport_smsc_postAsync(TransportSmsc_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsc";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSmsc resource.
		/// Removes the TransportSmsc resource.
		/// Api_transport_smsc_id_delete api/transport-smsc/{id}
		/// </summary>
		/// <param name="id">TransportSmsc identifier</param>
		public async Task Api_transport_smsc_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsc/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSmsc resource.
		/// Retrieves a TransportSmsc resource.
		/// Api_transport_smsc_id_get api/transport-smsc/{id}
		/// </summary>
		/// <param name="id">TransportSmsc identifier</param>
		/// <returns>TransportSmsc resource</returns>
		public async Task<TransportSmsc_get> Api_transport_smsc_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsc/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsc_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSmsc resource.
		/// Replaces the TransportSmsc resource.
		/// Api_transport_smsc_id_put api/transport-smsc/{id}
		/// </summary>
		/// <param name="id">TransportSmsc identifier</param>
		/// <param name="requestBody">The updated TransportSmsc resource</param>
		/// <returns>TransportSmsc resource updated</returns>
		public async Task<TransportSmsc_get> Api_transport_smsc_id_putAsync(string id, TransportSmsc_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsc/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsc_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSmsmode resources.
		/// Retrieves the collection of TransportSmsmode resources.
		/// Api_transport_smsmode_get_collection api/transport-smsmode
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSmsmode collection</returns>
		public async Task<TransportSmsmode_get[]> Api_transport_smsmode_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsmode?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsmode_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSmsmode resource.
		/// Creates a TransportSmsmode resource.
		/// Api_transport_smsmode_post api/transport-smsmode
		/// </summary>
		/// <param name="requestBody">The new TransportSmsmode resource</param>
		public async Task Api_transport_smsmode_postAsync(TransportSmsmode_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsmode";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSmsmode resource.
		/// Removes the TransportSmsmode resource.
		/// Api_transport_smsmode_id_delete api/transport-smsmode/{id}
		/// </summary>
		/// <param name="id">TransportSmsmode identifier</param>
		public async Task Api_transport_smsmode_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsmode/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSmsmode resource.
		/// Retrieves a TransportSmsmode resource.
		/// Api_transport_smsmode_id_get api/transport-smsmode/{id}
		/// </summary>
		/// <param name="id">TransportSmsmode identifier</param>
		/// <returns>TransportSmsmode resource</returns>
		public async Task<TransportSmsmode_get> Api_transport_smsmode_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsmode/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsmode_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSmsmode resource.
		/// Replaces the TransportSmsmode resource.
		/// Api_transport_smsmode_id_put api/transport-smsmode/{id}
		/// </summary>
		/// <param name="id">TransportSmsmode identifier</param>
		/// <param name="requestBody">The updated TransportSmsmode resource</param>
		/// <returns>TransportSmsmode resource updated</returns>
		public async Task<TransportSmsmode_get> Api_transport_smsmode_id_putAsync(string id, TransportSmsmode_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-smsmode/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSmsmode_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportSpotHit resources.
		/// Retrieves the collection of TransportSpotHit resources.
		/// Api_transport_spot_hit_get_collection api/transport-spot-hit
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportSpotHit collection</returns>
		public async Task<TransportSpotHit_get[]> Api_transport_spot_hit_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-spot-hit?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSpotHit_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportSpotHit resource.
		/// Creates a TransportSpotHit resource.
		/// Api_transport_spot_hit_post api/transport-spot-hit
		/// </summary>
		/// <param name="requestBody">The new TransportSpotHit resource</param>
		public async Task Api_transport_spot_hit_postAsync(TransportSpotHit_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-spot-hit";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportSpotHit resource.
		/// Removes the TransportSpotHit resource.
		/// Api_transport_spot_hit_id_delete api/transport-spot-hit/{id}
		/// </summary>
		/// <param name="id">TransportSpotHit identifier</param>
		public async Task Api_transport_spot_hit_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-spot-hit/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportSpotHit resource.
		/// Retrieves a TransportSpotHit resource.
		/// Api_transport_spot_hit_id_get api/transport-spot-hit/{id}
		/// </summary>
		/// <param name="id">TransportSpotHit identifier</param>
		/// <returns>TransportSpotHit resource</returns>
		public async Task<TransportSpotHit_get> Api_transport_spot_hit_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-spot-hit/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSpotHit_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportSpotHit resource.
		/// Replaces the TransportSpotHit resource.
		/// Api_transport_spot_hit_id_put api/transport-spot-hit/{id}
		/// </summary>
		/// <param name="id">TransportSpotHit identifier</param>
		/// <param name="requestBody">The updated TransportSpotHit resource</param>
		/// <returns>TransportSpotHit resource updated</returns>
		public async Task<TransportSpotHit_get> Api_transport_spot_hit_id_putAsync(string id, TransportSpotHit_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-spot-hit/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportSpotHit_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportTelegram resources.
		/// Retrieves the collection of TransportTelegram resources.
		/// Api_transport_telegram_get_collection api/transport-telegram
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportTelegram collection</returns>
		public async Task<TransportTelegram_get[]> Api_transport_telegram_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-telegram?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTelegram_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportTelegram resource.
		/// Creates a TransportTelegram resource.
		/// Api_transport_telegram_post api/transport-telegram
		/// </summary>
		/// <param name="requestBody">The new TransportTelegram resource</param>
		public async Task Api_transport_telegram_postAsync(TransportTelegram_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-telegram";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportTelegram resource.
		/// Removes the TransportTelegram resource.
		/// Api_transport_telegram_id_delete api/transport-telegram/{id}
		/// </summary>
		/// <param name="id">TransportTelegram identifier</param>
		public async Task Api_transport_telegram_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-telegram/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportTelegram resource.
		/// Retrieves a TransportTelegram resource.
		/// Api_transport_telegram_id_get api/transport-telegram/{id}
		/// </summary>
		/// <param name="id">TransportTelegram identifier</param>
		/// <returns>TransportTelegram resource</returns>
		public async Task<TransportTelegram_get> Api_transport_telegram_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-telegram/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTelegram_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportTelegram resource.
		/// Replaces the TransportTelegram resource.
		/// Api_transport_telegram_id_put api/transport-telegram/{id}
		/// </summary>
		/// <param name="id">TransportTelegram identifier</param>
		/// <param name="requestBody">The updated TransportTelegram resource</param>
		/// <returns>TransportTelegram resource updated</returns>
		public async Task<TransportTelegram_get> Api_transport_telegram_id_putAsync(string id, TransportTelegram_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-telegram/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTelegram_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportTelnyx resources.
		/// Retrieves the collection of TransportTelnyx resources.
		/// Api_transport_telnyx_get_collection api/transport-telnyx
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportTelnyx collection</returns>
		public async Task<TransportTelnyx_get[]> Api_transport_telnyx_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-telnyx?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTelnyx_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportTelnyx resource.
		/// Creates a TransportTelnyx resource.
		/// Api_transport_telnyx_post api/transport-telnyx
		/// </summary>
		/// <param name="requestBody">The new TransportTelnyx resource</param>
		public async Task Api_transport_telnyx_postAsync(TransportTelnyx_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-telnyx";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportTelnyx resource.
		/// Removes the TransportTelnyx resource.
		/// Api_transport_telnyx_id_delete api/transport-telnyx/{id}
		/// </summary>
		/// <param name="id">TransportTelnyx identifier</param>
		public async Task Api_transport_telnyx_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-telnyx/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportTelnyx resource.
		/// Retrieves a TransportTelnyx resource.
		/// Api_transport_telnyx_id_get api/transport-telnyx/{id}
		/// </summary>
		/// <param name="id">TransportTelnyx identifier</param>
		/// <returns>TransportTelnyx resource</returns>
		public async Task<TransportTelnyx_get> Api_transport_telnyx_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-telnyx/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTelnyx_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportTelnyx resource.
		/// Replaces the TransportTelnyx resource.
		/// Api_transport_telnyx_id_put api/transport-telnyx/{id}
		/// </summary>
		/// <param name="id">TransportTelnyx identifier</param>
		/// <param name="requestBody">The updated TransportTelnyx resource</param>
		/// <returns>TransportTelnyx resource updated</returns>
		public async Task<TransportTelnyx_get> Api_transport_telnyx_id_putAsync(string id, TransportTelnyx_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-telnyx/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTelnyx_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportTermii resources.
		/// Retrieves the collection of TransportTermii resources.
		/// Api_transport_termii_get_collection api/transport-termii
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportTermii collection</returns>
		public async Task<TransportTermii_get[]> Api_transport_termii_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-termii?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTermii_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportTermii resource.
		/// Creates a TransportTermii resource.
		/// Api_transport_termii_post api/transport-termii
		/// </summary>
		/// <param name="requestBody">The new TransportTermii resource</param>
		public async Task Api_transport_termii_postAsync(TransportTermii_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-termii";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportTermii resource.
		/// Removes the TransportTermii resource.
		/// Api_transport_termii_id_delete api/transport-termii/{id}
		/// </summary>
		/// <param name="id">TransportTermii identifier</param>
		public async Task Api_transport_termii_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-termii/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportTermii resource.
		/// Retrieves a TransportTermii resource.
		/// Api_transport_termii_id_get api/transport-termii/{id}
		/// </summary>
		/// <param name="id">TransportTermii identifier</param>
		/// <returns>TransportTermii resource</returns>
		public async Task<TransportTermii_get> Api_transport_termii_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-termii/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTermii_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportTermii resource.
		/// Replaces the TransportTermii resource.
		/// Api_transport_termii_id_put api/transport-termii/{id}
		/// </summary>
		/// <param name="id">TransportTermii identifier</param>
		/// <param name="requestBody">The updated TransportTermii resource</param>
		/// <returns>TransportTermii resource updated</returns>
		public async Task<TransportTermii_get> Api_transport_termii_id_putAsync(string id, TransportTermii_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-termii/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTermii_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportTrello resources.
		/// Retrieves the collection of TransportTrello resources.
		/// Api_transport_trello_get_collection api/transport-trello
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportTrello collection</returns>
		public async Task<TransportTrello_get[]> Api_transport_trello_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-trello?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTrello_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportTrello resource.
		/// Creates a TransportTrello resource.
		/// Api_transport_trello_post api/transport-trello
		/// </summary>
		/// <param name="requestBody">The new TransportTrello resource</param>
		public async Task Api_transport_trello_postAsync(TransportTrello_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-trello";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportTrello resource.
		/// Removes the TransportTrello resource.
		/// Api_transport_trello_id_delete api/transport-trello/{id}
		/// </summary>
		/// <param name="id">TransportTrello identifier</param>
		public async Task Api_transport_trello_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-trello/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportTrello resource.
		/// Retrieves a TransportTrello resource.
		/// Api_transport_trello_id_get api/transport-trello/{id}
		/// </summary>
		/// <param name="id">TransportTrello identifier</param>
		/// <returns>TransportTrello resource</returns>
		public async Task<TransportTrello_get> Api_transport_trello_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-trello/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTrello_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportTrello resource.
		/// Replaces the TransportTrello resource.
		/// Api_transport_trello_id_put api/transport-trello/{id}
		/// </summary>
		/// <param name="id">TransportTrello identifier</param>
		/// <param name="requestBody">The updated TransportTrello resource</param>
		/// <returns>TransportTrello resource updated</returns>
		public async Task<TransportTrello_get> Api_transport_trello_id_putAsync(string id, TransportTrello_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-trello/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTrello_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportTurboSms resources.
		/// Retrieves the collection of TransportTurboSms resources.
		/// Api_transport_turbo_sms_get_collection api/transport-turbo-sms
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportTurboSms collection</returns>
		public async Task<TransportTurboSms_get[]> Api_transport_turbo_sms_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-turbo-sms?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTurboSms_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportTurboSms resource.
		/// Creates a TransportTurboSms resource.
		/// Api_transport_turbo_sms_post api/transport-turbo-sms
		/// </summary>
		/// <param name="requestBody">The new TransportTurboSms resource</param>
		public async Task Api_transport_turbo_sms_postAsync(TransportTurboSms_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-turbo-sms";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportTurboSms resource.
		/// Removes the TransportTurboSms resource.
		/// Api_transport_turbo_sms_id_delete api/transport-turbo-sms/{id}
		/// </summary>
		/// <param name="id">TransportTurboSms identifier</param>
		public async Task Api_transport_turbo_sms_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-turbo-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportTurboSms resource.
		/// Retrieves a TransportTurboSms resource.
		/// Api_transport_turbo_sms_id_get api/transport-turbo-sms/{id}
		/// </summary>
		/// <param name="id">TransportTurboSms identifier</param>
		/// <returns>TransportTurboSms resource</returns>
		public async Task<TransportTurboSms_get> Api_transport_turbo_sms_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-turbo-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTurboSms_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportTurboSms resource.
		/// Replaces the TransportTurboSms resource.
		/// Api_transport_turbo_sms_id_put api/transport-turbo-sms/{id}
		/// </summary>
		/// <param name="id">TransportTurboSms identifier</param>
		/// <param name="requestBody">The updated TransportTurboSms resource</param>
		/// <returns>TransportTurboSms resource updated</returns>
		public async Task<TransportTurboSms_get> Api_transport_turbo_sms_id_putAsync(string id, TransportTurboSms_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-turbo-sms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTurboSms_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportTwilio resources.
		/// Retrieves the collection of TransportTwilio resources.
		/// Api_transport_twilio_get_collection api/transport-twilio
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportTwilio collection</returns>
		public async Task<TransportTwilio_get[]> Api_transport_twilio_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-twilio?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTwilio_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportTwilio resource.
		/// Creates a TransportTwilio resource.
		/// Api_transport_twilio_post api/transport-twilio
		/// </summary>
		/// <param name="requestBody">The new TransportTwilio resource</param>
		public async Task Api_transport_twilio_postAsync(TransportTwilio_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-twilio";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportTwilio resource.
		/// Removes the TransportTwilio resource.
		/// Api_transport_twilio_id_delete api/transport-twilio/{id}
		/// </summary>
		/// <param name="id">TransportTwilio identifier</param>
		public async Task Api_transport_twilio_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-twilio/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportTwilio resource.
		/// Retrieves a TransportTwilio resource.
		/// Api_transport_twilio_id_get api/transport-twilio/{id}
		/// </summary>
		/// <param name="id">TransportTwilio identifier</param>
		/// <returns>TransportTwilio resource</returns>
		public async Task<TransportTwilio_get> Api_transport_twilio_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-twilio/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTwilio_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportTwilio resource.
		/// Replaces the TransportTwilio resource.
		/// Api_transport_twilio_id_put api/transport-twilio/{id}
		/// </summary>
		/// <param name="id">TransportTwilio identifier</param>
		/// <param name="requestBody">The updated TransportTwilio resource</param>
		/// <returns>TransportTwilio resource updated</returns>
		public async Task<TransportTwilio_get> Api_transport_twilio_id_putAsync(string id, TransportTwilio_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-twilio/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTwilio_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportTwitter resources.
		/// Retrieves the collection of TransportTwitter resources.
		/// Api_transport_twitter_get_collection api/transport-twitter
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportTwitter collection</returns>
		public async Task<TransportTwitter_get[]> Api_transport_twitter_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-twitter?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTwitter_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportTwitter resource.
		/// Creates a TransportTwitter resource.
		/// Api_transport_twitter_post api/transport-twitter
		/// </summary>
		/// <param name="requestBody">The new TransportTwitter resource</param>
		public async Task Api_transport_twitter_postAsync(TransportTwitter_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-twitter";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportTwitter resource.
		/// Removes the TransportTwitter resource.
		/// Api_transport_twitter_id_delete api/transport-twitter/{id}
		/// </summary>
		/// <param name="id">TransportTwitter identifier</param>
		public async Task Api_transport_twitter_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-twitter/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportTwitter resource.
		/// Retrieves a TransportTwitter resource.
		/// Api_transport_twitter_id_get api/transport-twitter/{id}
		/// </summary>
		/// <param name="id">TransportTwitter identifier</param>
		/// <returns>TransportTwitter resource</returns>
		public async Task<TransportTwitter_get> Api_transport_twitter_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-twitter/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTwitter_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportTwitter resource.
		/// Replaces the TransportTwitter resource.
		/// Api_transport_twitter_id_put api/transport-twitter/{id}
		/// </summary>
		/// <param name="id">TransportTwitter identifier</param>
		/// <param name="requestBody">The updated TransportTwitter resource</param>
		/// <returns>TransportTwitter resource updated</returns>
		public async Task<TransportTwitter_get> Api_transport_twitter_id_putAsync(string id, TransportTwitter_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-twitter/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportTwitter_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportVonage resources.
		/// Retrieves the collection of TransportVonage resources.
		/// Api_transport_vonage_get_collection api/transport-vonage
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportVonage collection</returns>
		public async Task<TransportVonage_get[]> Api_transport_vonage_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-vonage?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportVonage_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportVonage resource.
		/// Creates a TransportVonage resource.
		/// Api_transport_vonage_post api/transport-vonage
		/// </summary>
		/// <param name="requestBody">The new TransportVonage resource</param>
		public async Task Api_transport_vonage_postAsync(TransportVonage_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-vonage";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportVonage resource.
		/// Removes the TransportVonage resource.
		/// Api_transport_vonage_id_delete api/transport-vonage/{id}
		/// </summary>
		/// <param name="id">TransportVonage identifier</param>
		public async Task Api_transport_vonage_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-vonage/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportVonage resource.
		/// Retrieves a TransportVonage resource.
		/// Api_transport_vonage_id_get api/transport-vonage/{id}
		/// </summary>
		/// <param name="id">TransportVonage identifier</param>
		/// <returns>TransportVonage resource</returns>
		public async Task<TransportVonage_get> Api_transport_vonage_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-vonage/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportVonage_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportVonage resource.
		/// Replaces the TransportVonage resource.
		/// Api_transport_vonage_id_put api/transport-vonage/{id}
		/// </summary>
		/// <param name="id">TransportVonage identifier</param>
		/// <param name="requestBody">The updated TransportVonage resource</param>
		/// <returns>TransportVonage resource updated</returns>
		public async Task<TransportVonage_get> Api_transport_vonage_id_putAsync(string id, TransportVonage_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-vonage/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportVonage_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportWebhook resources.
		/// Retrieves the collection of TransportWebhook resources.
		/// Api_transport_webhook_get_collection api/transport-webhook
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportWebhook collection</returns>
		public async Task<TransportWebhook_get[]> Api_transport_webhook_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-webhook?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportWebhook_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportWebhook resource.
		/// Creates a TransportWebhook resource.
		/// Api_transport_webhook_post api/transport-webhook
		/// </summary>
		/// <param name="requestBody">The new TransportWebhook resource</param>
		public async Task Api_transport_webhook_postAsync(TransportWebhook_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-webhook";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportWebhook resource.
		/// Removes the TransportWebhook resource.
		/// Api_transport_webhook_id_delete api/transport-webhook/{id}
		/// </summary>
		/// <param name="id">TransportWebhook identifier</param>
		public async Task Api_transport_webhook_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-webhook/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportWebhook resource.
		/// Retrieves a TransportWebhook resource.
		/// Api_transport_webhook_id_get api/transport-webhook/{id}
		/// </summary>
		/// <param name="id">TransportWebhook identifier</param>
		/// <returns>TransportWebhook resource</returns>
		public async Task<TransportWebhook_get> Api_transport_webhook_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-webhook/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportWebhook_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportWebhook resource.
		/// Replaces the TransportWebhook resource.
		/// Api_transport_webhook_id_put api/transport-webhook/{id}
		/// </summary>
		/// <param name="id">TransportWebhook identifier</param>
		/// <param name="requestBody">The updated TransportWebhook resource</param>
		/// <returns>TransportWebhook resource updated</returns>
		public async Task<TransportWebhook_get> Api_transport_webhook_id_putAsync(string id, TransportWebhook_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-webhook/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportWebhook_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportYunpian resources.
		/// Retrieves the collection of TransportYunpian resources.
		/// Api_transport_yunpian_get_collection api/transport-yunpian
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportYunpian collection</returns>
		public async Task<TransportYunpian_get[]> Api_transport_yunpian_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-yunpian?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportYunpian_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportYunpian resource.
		/// Creates a TransportYunpian resource.
		/// Api_transport_yunpian_post api/transport-yunpian
		/// </summary>
		/// <param name="requestBody">The new TransportYunpian resource</param>
		public async Task Api_transport_yunpian_postAsync(TransportYunpian_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-yunpian";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportYunpian resource.
		/// Removes the TransportYunpian resource.
		/// Api_transport_yunpian_id_delete api/transport-yunpian/{id}
		/// </summary>
		/// <param name="id">TransportYunpian identifier</param>
		public async Task Api_transport_yunpian_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-yunpian/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportYunpian resource.
		/// Retrieves a TransportYunpian resource.
		/// Api_transport_yunpian_id_get api/transport-yunpian/{id}
		/// </summary>
		/// <param name="id">TransportYunpian identifier</param>
		/// <returns>TransportYunpian resource</returns>
		public async Task<TransportYunpian_get> Api_transport_yunpian_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-yunpian/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportYunpian_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportYunpian resource.
		/// Replaces the TransportYunpian resource.
		/// Api_transport_yunpian_id_put api/transport-yunpian/{id}
		/// </summary>
		/// <param name="id">TransportYunpian identifier</param>
		/// <param name="requestBody">The updated TransportYunpian resource</param>
		/// <returns>TransportYunpian resource updated</returns>
		public async Task<TransportYunpian_get> Api_transport_yunpian_id_putAsync(string id, TransportYunpian_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-yunpian/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportYunpian_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportZendesk resources.
		/// Retrieves the collection of TransportZendesk resources.
		/// Api_transport_zendesk_get_collection api/transport-zendesk
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportZendesk collection</returns>
		public async Task<TransportZendesk_get[]> Api_transport_zendesk_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-zendesk?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportZendesk_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportZendesk resource.
		/// Creates a TransportZendesk resource.
		/// Api_transport_zendesk_post api/transport-zendesk
		/// </summary>
		/// <param name="requestBody">The new TransportZendesk resource</param>
		public async Task Api_transport_zendesk_postAsync(TransportZendesk_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-zendesk";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportZendesk resource.
		/// Removes the TransportZendesk resource.
		/// Api_transport_zendesk_id_delete api/transport-zendesk/{id}
		/// </summary>
		/// <param name="id">TransportZendesk identifier</param>
		public async Task Api_transport_zendesk_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-zendesk/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportZendesk resource.
		/// Retrieves a TransportZendesk resource.
		/// Api_transport_zendesk_id_get api/transport-zendesk/{id}
		/// </summary>
		/// <param name="id">TransportZendesk identifier</param>
		/// <returns>TransportZendesk resource</returns>
		public async Task<TransportZendesk_get> Api_transport_zendesk_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-zendesk/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportZendesk_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportZendesk resource.
		/// Replaces the TransportZendesk resource.
		/// Api_transport_zendesk_id_put api/transport-zendesk/{id}
		/// </summary>
		/// <param name="id">TransportZendesk identifier</param>
		/// <param name="requestBody">The updated TransportZendesk resource</param>
		/// <returns>TransportZendesk resource updated</returns>
		public async Task<TransportZendesk_get> Api_transport_zendesk_id_putAsync(string id, TransportZendesk_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-zendesk/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportZendesk_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of TransportZulip resources.
		/// Retrieves the collection of TransportZulip resources.
		/// Api_transport_zulip_get_collection api/transport-zulip
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>TransportZulip collection</returns>
		public async Task<TransportZulip_get[]> Api_transport_zulip_get_collectionAsync(int page, string dataSegmentCode, string[] dataSegmentCode_, string partition, string[] partition_, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-zulip?page="+page+"&dataSegmentCode=" + (dataSegmentCode==null? "" : System.Uri.EscapeDataString(dataSegmentCode))+"&"+string.Join("&", dataSegmentCode_.Select(z => $"dataSegmentCode[]={System.Uri.EscapeDataString(z.ToString())}"))+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&"+string.Join("&", partition_.Select(z => $"partition[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportZulip_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a TransportZulip resource.
		/// Creates a TransportZulip resource.
		/// Api_transport_zulip_post api/transport-zulip
		/// </summary>
		/// <param name="requestBody">The new TransportZulip resource</param>
		public async Task Api_transport_zulip_postAsync(TransportZulip_post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-zulip";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the TransportZulip resource.
		/// Removes the TransportZulip resource.
		/// Api_transport_zulip_id_delete api/transport-zulip/{id}
		/// </summary>
		/// <param name="id">TransportZulip identifier</param>
		public async Task Api_transport_zulip_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-zulip/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a TransportZulip resource.
		/// Retrieves a TransportZulip resource.
		/// Api_transport_zulip_id_get api/transport-zulip/{id}
		/// </summary>
		/// <param name="id">TransportZulip identifier</param>
		/// <returns>TransportZulip resource</returns>
		public async Task<TransportZulip_get> Api_transport_zulip_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-zulip/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportZulip_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the TransportZulip resource.
		/// Replaces the TransportZulip resource.
		/// Api_transport_zulip_id_put api/transport-zulip/{id}
		/// </summary>
		/// <param name="id">TransportZulip identifier</param>
		/// <param name="requestBody">The updated TransportZulip resource</param>
		/// <returns>TransportZulip resource updated</returns>
		public async Task<TransportZulip_get> Api_transport_zulip_id_putAsync(string id, TransportZulip_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/transport-zulip/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransportZulip_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of UserAccount resources.
		/// Retrieves the collection of UserAccount resources.
		/// Api_user_account_get_collection api/user-account
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>UserAccount collection</returns>
		public async Task<UserAccount_get[]> Api_user_account_get_collectionAsync(int page, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/user-account?page="+page+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserAccount_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the collection of UserAccountLevelCode resources.
		/// Retrieves the collection of UserAccountLevelCode resources.
		/// Api_user_account_level_code_get_collection api/user-account-level-code
		/// </summary>
		/// <param name="page">The collection page number</param>
		/// <param name="properties_">Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}</param>
		/// <returns>UserAccountLevelCode collection</returns>
		public async Task<UserAccountLevelCode_get[]> Api_user_account_level_code_get_collectionAsync(int page, string[] properties_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/user-account-level-code?page="+page+"&"+string.Join("&", properties_.Select(z => $"properties[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserAccountLevelCode_get[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a UserAccountLevelCode resource.
		/// Retrieves a UserAccountLevelCode resource.
		/// Api_user_account_level_code_id_get api/user-account-level-code/{id}
		/// </summary>
		/// <param name="id">UserAccountLevelCode identifier</param>
		/// <returns>UserAccountLevelCode resource</returns>
		public async Task<UserAccountLevelCode_get> Api_user_account_level_code_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/user-account-level-code/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserAccountLevelCode_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a UserAccount resource.
		/// Retrieves a UserAccount resource.
		/// Api_user_account_id_get api/user-account/{id}
		/// </summary>
		/// <param name="id">UserAccount identifier</param>
		/// <returns>UserAccount resource</returns>
		public async Task<UserAccount_get> Api_user_account_id_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/user-account/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserAccount_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replaces the UserAccount resource.
		/// Replaces the UserAccount resource.
		/// Api_user_account_id_put api/user-account/{id}
		/// </summary>
		/// <param name="id">UserAccount identifier</param>
		/// <param name="requestBody">The updated UserAccount resource</param>
		/// <returns>UserAccount resource updated</returns>
		public async Task<UserAccount_get> Api_user_account_id_putAsync(string id, UserAccount_put requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/user-account/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserAccount_get>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
