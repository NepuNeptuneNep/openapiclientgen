//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemDataSpatialDbGeography
	{
		
		[System.Runtime.Serialization.DataMember(Name="geography")]
		public SystemDataSpatialDbGeographyWellKnownValue Geography { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemDataSpatialDbGeographyWellKnownValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="coordinateSystemId")]
		public System.Nullable<System.Int32> CoordinateSystemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wellKnownBinary")]
		public string WellKnownBinary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wellKnownText")]
		public string WellKnownText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiCommonApiVersionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="assemblies")]
		public string[] Assemblies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiCommonDateRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiCommonDateRangeNullable
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiCommonGeoPoint
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public double Lat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public double Lon { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiCommonJourneyPlannerJpElevation
	{
		
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Int32> Distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endLat")]
		public System.Nullable<System.Double> EndLat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endLon")]
		public System.Nullable<System.Double> EndLon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gradient")]
		public System.Nullable<System.Double> Gradient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heightFromPreviousPoint")]
		public System.Nullable<System.Int32> HeightFromPreviousPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startLat")]
		public System.Nullable<System.Double> StartLat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startLon")]
		public System.Nullable<System.Double> StartLon { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiCommonPlaceGeo
	{
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="neLat")]
		public System.Nullable<System.Double> NeLat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="neLon")]
		public System.Nullable<System.Double> NeLon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="swLat")]
		public System.Nullable<System.Double> SwLat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="swLon")]
		public System.Nullable<System.Double> SwLon { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiCommonPostcodeInput
	{
		
		/// <summary>
		/// Pattern: ^(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postcode")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$")]
		public string Postcode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesAccidentStatsAccidentDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="borough")]
		public string Borough { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="casualties")]
		public TflApiPresentationEntitiesAccidentStatsCasualty[] Casualties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vehicles")]
		public TflApiPresentationEntitiesAccidentStatsVehicle[] Vehicles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesAccidentStatsCasualty
	{
		
		[System.Runtime.Serialization.DataMember(Name="age")]
		public System.Nullable<System.Int32> Age { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ageBand")]
		public string AgeBand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesAccidentStatsVehicle
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="accidents")]
		public System.Nullable<System.Int32> Accidents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="borough")]
		public string Borough { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesActiveServiceType
	{
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceType")]
		public string ServiceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesAdditionalProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.Nullable<System.DateTimeOffset> Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceSystemKey")]
		public string SourceSystemKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// DTO to capture the prediction details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesArrivalDeparture
	{
		
		/// <summary>
		/// Reason for cancellation or delay
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public string Cause { get; set; }
		
		/// <summary>
		/// Status of departure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departureStatus")]
		public System.Nullable<TflApiPresentationEntitiesArrivalDepartureDepartureStatus> DepartureStatus { get; set; }
		
		/// <summary>
		/// Name of the destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Naptan Identifier for the prediction's destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationNaptanId")]
		public string DestinationNaptanId { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedTimeOfArrival")]
		public System.Nullable<System.DateTimeOffset> EstimatedTimeOfArrival { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedTimeOfDeparture")]
		public System.Nullable<System.DateTimeOffset> EstimatedTimeOfDeparture { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutesAndSecondsToArrival")]
		public string MinutesAndSecondsToArrival { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutesAndSecondsToDeparture")]
		public string MinutesAndSecondsToDeparture { get; set; }
		
		/// <summary>
		/// Identifier for the prediction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="naptanId")]
		public string NaptanId { get; set; }
		
		/// <summary>
		/// Platform name (for bus, this is the stop letter)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformName")]
		public string PlatformName { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledTimeOfArrival")]
		public System.Nullable<System.DateTimeOffset> ScheduledTimeOfArrival { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledTimeOfDeparture")]
		public System.Nullable<System.DateTimeOffset> ScheduledTimeOfDeparture { get; set; }
		
		/// <summary>
		/// Station name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stationName")]
		public string StationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public TflApiPresentationEntitiesPredictionTiming Timing { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesArrivalDepartureDepartureStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delayed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotStoppingAtStation = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesPredictionTiming
	{
		
		[System.Runtime.Serialization.DataMember(Name="countdownServerAdjustment")]
		public string CountdownServerAdjustment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="insert")]
		public System.Nullable<System.DateTimeOffset> Insert { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="read")]
		public System.Nullable<System.DateTimeOffset> Read { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="received")]
		public System.Nullable<System.DateTimeOffset> Received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sent")]
		public System.Nullable<System.DateTimeOffset> Sent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<System.DateTimeOffset> Source { get; set; }
	}
	
	/// <summary>
	/// DTO to capture the prediction details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesArrivalDepartureWithLine
	{
		
		/// <summary>
		/// Reason for cancellation or delay
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public string Cause { get; set; }
		
		/// <summary>
		/// Status of departure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departureStatus")]
		public TflApiPresentationEntitiesArrivalDepartureDepartureStatus DepartureStatus { get; set; }
		
		/// <summary>
		/// Name of the destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Naptan Identifier for the prediction's destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationNaptanId")]
		public string DestinationNaptanId { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedTimeOfArrival")]
		public System.Nullable<System.DateTimeOffset> EstimatedTimeOfArrival { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedTimeOfDeparture")]
		public System.Nullable<System.DateTimeOffset> EstimatedTimeOfDeparture { get; set; }
		
		/// <summary>
		/// Train operating company name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public string LineId { get; set; }
		
		/// <summary>
		/// Train operating company code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineName")]
		public string LineName { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutesAndSecondsToArrival")]
		public string MinutesAndSecondsToArrival { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutesAndSecondsToDeparture")]
		public string MinutesAndSecondsToDeparture { get; set; }
		
		/// <summary>
		/// Identifier for the prediction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="naptanId")]
		public string NaptanId { get; set; }
		
		/// <summary>
		/// Platform name (for bus, this is the stop letter)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformName")]
		public string PlatformName { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledTimeOfArrival")]
		public System.Nullable<System.DateTimeOffset> ScheduledTimeOfArrival { get; set; }
		
		/// <summary>
		/// Estimated time of arrival
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledTimeOfDeparture")]
		public System.Nullable<System.DateTimeOffset> ScheduledTimeOfDeparture { get; set; }
		
		/// <summary>
		/// Station name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stationName")]
		public string StationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public TflApiPresentationEntitiesPredictionTiming Timing { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesBay
	{
		
		[System.Runtime.Serialization.DataMember(Name="bayCount")]
		public System.Nullable<System.Int32> BayCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bayType")]
		public string BayType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="free")]
		public System.Nullable<System.Int32> Free { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="occupied")]
		public System.Nullable<System.Int32> Occupied { get; set; }
	}
	
	/// <summary>
	/// Bike point occupancy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesBikePointOccupancy
	{
		
		/// <summary>
		/// Total bike counts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bikesCount")]
		public System.Nullable<System.Int32> BikesCount { get; set; }
		
		/// <summary>
		/// Total ebikes count
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eBikesCount")]
		public System.Nullable<System.Int32> EBikesCount { get; set; }
		
		/// <summary>
		/// Empty docks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emptyDocks")]
		public System.Nullable<System.Int32> EmptyDocks { get; set; }
		
		/// <summary>
		/// Id of the bike point such as BikePoints_1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name / Common name of the bike point
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Total standard bikes count
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardBikesCount")]
		public System.Nullable<System.Int32> StandardBikesCount { get; set; }
		
		/// <summary>
		/// Total docks available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDocks")]
		public System.Nullable<System.Int32> TotalDocks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesCarParkOccupancy
	{
		
		[System.Runtime.Serialization.DataMember(Name="bays")]
		public TflApiPresentationEntitiesBay[] Bays { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="carParkDetailsUrl")]
		public string CarParkDetailsUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesChargeConnectorOccupancy
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceSystemPlaceId")]
		public string SourceSystemPlaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesCoordinate
	{
		
		[System.Runtime.Serialization.DataMember(Name="easting")]
		public System.Nullable<System.Double> Easting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="northing")]
		public System.Nullable<System.Double> Northing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xCoord")]
		public System.Nullable<System.Int32> XCoord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yCoord")]
		public System.Nullable<System.Int32> YCoord { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesCrowding
	{
		
		/// <summary>
		/// Busiest times at a station (static information)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passengerFlows")]
		public TflApiPresentationEntitiesPassengerFlow[] PassengerFlows { get; set; }
		
		/// <summary>
		/// Train Loading on a scale 1-6, 1 being "Very quiet" and 6 being "Exceptionally busy" (static information)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainLoadings")]
		public TflApiPresentationEntitiesTrainLoading[] TrainLoadings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesPassengerFlow
	{
		
		/// <summary>
		/// Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSlice")]
		public string TimeSlice { get; set; }
		
		/// <summary>
		/// Count of passenger flow towards a platform
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesTrainLoading
	{
		
		/// <summary>
		/// Direction in regards to Journey Planner i.e. inbound or outbound
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		/// <summary>
		/// The Line Name e.g. "Victoria"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public string Line { get; set; }
		
		/// <summary>
		/// Direction of the Line e.g. NB, SB, WB etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineDirection")]
		public string LineDirection { get; set; }
		
		/// <summary>
		/// Naptan of the adjacent station
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="naptanTo")]
		public string NaptanTo { get; set; }
		
		/// <summary>
		/// Direction displayed on the platform e.g. NB, SB, WB etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformDirection")]
		public string PlatformDirection { get; set; }
		
		/// <summary>
		/// Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSlice")]
		public string TimeSlice { get; set; }
		
		/// <summary>
		/// Scale between 1-6, 
		///             1 = Very quiet, 2 = Quiet, 3 = Fairly busy, 4 = Busy, 5 = Very busy, 6 = Exceptionally busy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesCycleSuperhighway
	{
		
		[System.Runtime.Serialization.DataMember(Name="geography")]
		public SystemDataSpatialDbGeography Geography { get; set; }
		
		/// <summary>
		/// The Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The long label to show on maps when zoomed in
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The short label to show on maps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelShort")]
		public string LabelShort { get; set; }
		
		/// <summary>
		/// When the data was last updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.Nullable<System.DateTimeOffset> Modified { get; set; }
		
		/// <summary>
		/// Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeType")]
		public System.Nullable<TflApiPresentationEntitiesCycleSuperhighwayRouteType> RouteType { get; set; }
		
		/// <summary>
		/// True if the route is split into segments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmented")]
		public System.Nullable<System.Boolean> Segmented { get; set; }
		
		/// <summary>
		/// Cycle route status i.e Proposed, Existing etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TflApiPresentationEntitiesCycleSuperhighwayStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesCycleSuperhighwayRouteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cycle Superhighways")]
		Cycle_Superhighways = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quietways = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cycleways = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mini-Hollands")]
		MiniMinusHollands = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central London Grid")]
		Central_London_Grid = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Streetspace Route")]
		Streetspace_Route = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesCycleSuperhighwayStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Open = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="In Progress")]
		In_Progress = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Planned = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Planned - Subject to feasibility and consultation.")]
		Planned_Minus_Subject_to_feasibility_and_consultation_ = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Not Open")]
		Not_Open = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesDisruptedPoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalInformation")]
		public string AdditionalInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appearance")]
		public string Appearance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="atcoCode")]
		public string AtcoCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commonName")]
		public string CommonName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromDate")]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stationAtcoCode")]
		public string StationAtcoCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toDate")]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// keep old RouteSection name so as not to break contract
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesDisruptedRoute
	{
		
		/// <summary>
		/// The name of the Destination StopPoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Inbound or Outbound
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		/// <summary>
		/// The Id of the route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this represents the entire route section
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEntireRouteSection")]
		public System.Nullable<System.Boolean> IsEntireRouteSection { get; set; }
		
		/// <summary>
		/// The Id of the Line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public string LineId { get; set; }
		
		/// <summary>
		/// The co-ordinates of the route's path as a geoJSON lineString
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineString")]
		public string LineString { get; set; }
		
		/// <summary>
		/// Name such as "72"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the Origin StopPoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originationName")]
		public string OriginationName { get; set; }
		
		/// <summary>
		/// The route code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeCode")]
		public string RouteCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeSectionNaptanEntrySequence")]
		public TflApiPresentationEntitiesRouteSectionNaptanEntrySequence[] RouteSectionNaptanEntrySequence { get; set; }
		
		/// <summary>
		/// The DateTime that the Service containing this Route is valid from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validFrom")]
		public System.Nullable<System.DateTimeOffset> ValidFrom { get; set; }
		
		/// <summary>
		/// The DateTime that the Service containing this Route is valid until.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validTo")]
		public System.Nullable<System.DateTimeOffset> ValidTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="via")]
		public TflApiPresentationEntitiesRouteSectionNaptanEntrySequence Via { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesRouteSectionNaptanEntrySequence
	{
		
		[System.Runtime.Serialization.DataMember(Name="ordinal")]
		public System.Nullable<System.Int32> Ordinal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopPoint")]
		public TflApiPresentationEntitiesStopPoint StopPoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesStopPoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessibilitySummary")]
		public string AccessibilitySummary { get; set; }
		
		/// <summary>
		/// A bag of additional key/value pairs with extra information about this place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProperties")]
		public TflApiPresentationEntitiesAdditionalProperties[] AdditionalProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public TflApiPresentationEntitiesPlace[] Children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childrenUrls")]
		public string[] ChildrenUrls { get; set; }
		
		/// <summary>
		/// A human readable name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonName")]
		public string CommonName { get; set; }
		
		/// <summary>
		/// The distance of the place from its search point, if this is the result
		///            of a geographical search, otherwise zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hubNaptanCode")]
		public string HubNaptanCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icsCode")]
		public string IcsCode { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The indicator of the stop point e.g. "Stop K"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indicator")]
		public string Indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individualStopId")]
		public string IndividualStopId { get; set; }
		
		/// <summary>
		/// WGS84 latitude of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineGroup")]
		public TflApiPresentationEntitiesLineGroup[] LineGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineModeGroups")]
		public TflApiPresentationEntitiesLineModeGroup[] LineModeGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lines")]
		public TflApiPresentationEntitiesIdentifier[] Lines { get; set; }
		
		/// <summary>
		/// WGS84 longitude of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modes")]
		public string[] Modes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="naptanId")]
		public string NaptanId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="naptanMode")]
		public string NaptanMode { get; set; }
		
		/// <summary>
		/// The type of Place. See /Place/Meta/placeTypes for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeType")]
		public string PlaceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformName")]
		public string PlatformName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsCode")]
		public string SmsCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stationNaptan")]
		public string StationNaptan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Boolean> Status { get; set; }
		
		/// <summary>
		/// The stop letter, if it could be cleansed from the Indicator e.g. "K"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopLetter")]
		public string StopLetter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopType")]
		public string StopType { get; set; }
		
		/// <summary>
		/// The unique location of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesPlace
	{
		
		/// <summary>
		/// A bag of additional key/value pairs with extra information about this place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProperties")]
		public TflApiPresentationEntitiesAdditionalProperties[] AdditionalProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public TflApiPresentationEntitiesPlace[] Children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childrenUrls")]
		public string[] ChildrenUrls { get; set; }
		
		/// <summary>
		/// A human readable name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonName")]
		public string CommonName { get; set; }
		
		/// <summary>
		/// The distance of the place from its search point, if this is the result
		///            of a geographical search, otherwise zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// WGS84 latitude of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// WGS84 longitude of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		/// <summary>
		/// The type of Place. See /Place/Meta/placeTypes for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeType")]
		public string PlaceType { get; set; }
		
		/// <summary>
		/// The unique location of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesLineGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="lineIdentifier")]
		public string[] LineIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="naptanIdReference")]
		public string NaptanIdReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stationAtcoCode")]
		public string StationAtcoCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesLineModeGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="lineIdentifier")]
		public string[] LineIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modeName")]
		public string ModeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="crowding")]
		public TflApiPresentationEntitiesCrowding Crowding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="motType")]
		public string MotType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeType")]
		public System.Nullable<TflApiPresentationEntitiesIdentifierRouteType> RouteType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TflApiPresentationEntitiesIdentifierStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesIdentifierRouteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cycle Superhighways")]
		Cycle_Superhighways = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quietways = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cycleways = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mini-Hollands")]
		MiniMinusHollands = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Central London Grid")]
		Central_London_Grid = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Streetspace Route")]
		Streetspace_Route = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesIdentifierStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Open = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="In Progress")]
		In_Progress = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Planned = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Planned - Subject to feasibility and consultation.")]
		Planned_Minus_Subject_to_feasibility_and_consultation_ = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Not Open")]
		Not_Open = 6,
	}
	
	/// <summary>
	/// Represents a disruption to a route within the transport network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesDisruption
	{
		
		/// <summary>
		/// Gets or sets the additionaInfo of this disruption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Gets or sets the routes affected by this disruption
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedRoutes")]
		public TflApiPresentationEntitiesDisruptedRoute[] AffectedRoutes { get; set; }
		
		/// <summary>
		/// Gets or sets the stops affected by this disruption
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedStops")]
		public TflApiPresentationEntitiesStopPoint[] AffectedStops { get; set; }
		
		/// <summary>
		/// Gets or sets the category of this dispruption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<TflApiPresentationEntitiesDisruptionCategory> Category { get; set; }
		
		/// <summary>
		/// Gets or sets the description of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryDescription")]
		public string CategoryDescription { get; set; }
		
		/// <summary>
		/// Text describing the closure type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closureText")]
		public string ClosureText { get; set; }
		
		/// <summary>
		/// Gets or sets the date/time when this disruption was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Gets or sets the description of this disruption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets the date/time when this disruption was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		/// <summary>
		/// Gets or sets the summary of this disruption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Gets or sets the disruption type of this dispruption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesDisruptionCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Undefined = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RealTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlannedWork = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Information = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Event = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Crowding = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusAlert = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresFare
	{
		
		[System.Runtime.Serialization.DataMember(Name="cap")]
		public System.Nullable<System.Double> Cap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public string Cost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passengerType")]
		public string PassengerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketTime")]
		public string TicketTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketType")]
		public string TicketType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validFrom")]
		public System.Nullable<System.DateTimeOffset> ValidFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validUntil")]
		public System.Nullable<System.DateTimeOffset> ValidUntil { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresFareBounds
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayOrder")]
		public System.Nullable<System.Int32> DisplayOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPopularFare")]
		public System.Nullable<System.Boolean> IsPopularFare { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPopularTravelCard")]
		public System.Nullable<System.Boolean> IsPopularTravelCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTour")]
		public System.Nullable<System.Boolean> IsTour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public TflApiPresentationEntitiesMessage[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeCode")]
		public string RouteCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="via")]
		public string Via { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="bulletOrder")]
		public System.Nullable<System.Int32> BulletOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header")]
		public System.Nullable<System.Boolean> Header { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkText")]
		public string LinkText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageText")]
		public string MessageText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresFareDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="boundsId")]
		public System.Nullable<System.Int32> BoundsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactlessPAYGOnlyFare")]
		public System.Nullable<System.Boolean> ContactlessPAYGOnlyFare { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayOrder")]
		public System.Nullable<System.Int32> DisplayOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromStation")]
		public string FromStation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTour")]
		public System.Nullable<System.Boolean> IsTour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public TflApiPresentationEntitiesMessage[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passengerType")]
		public string PassengerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeCode")]
		public string RouteCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeDescription")]
		public string RouteDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="specialFare")]
		public System.Nullable<System.Boolean> SpecialFare { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throughFare")]
		public System.Nullable<System.Boolean> ThroughFare { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketsAvailable")]
		public TflApiPresentationEntitiesFaresTicket[] TicketsAvailable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toStation")]
		public string ToStation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validatorInformation")]
		public string ValidatorInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="via")]
		public string Via { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresTicket
	{
		
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public string Cost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayOrder")]
		public System.Nullable<System.Int32> DisplayOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public TflApiPresentationEntitiesMessage[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passengerType")]
		public string PassengerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketTime")]
		public TflApiPresentationEntitiesFaresTicketTime TicketTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketType")]
		public TflApiPresentationEntitiesFaresTicketType TicketType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresTicketTime
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresTicketType
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresFareStation
	{
		
		[System.Runtime.Serialization.DataMember(Name="atcoCode")]
		public string AtcoCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commonName")]
		public string CommonName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fareCategory")]
		public System.Nullable<TflApiPresentationEntitiesFaresFareStationFareCategory> FareCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesFaresFareStationFareCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cash = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Oyster = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contactless = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactlessOnly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresFaresMode
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresFaresPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFuture")]
		public System.Nullable<System.Boolean> IsFuture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="viewableDate")]
		public System.Nullable<System.DateTimeOffset> ViewableDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresFaresSection
	{
		
		[System.Runtime.Serialization.DataMember(Name="header")]
		public string Header { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="journey")]
		public TflApiPresentationEntitiesFaresJourney Journey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public TflApiPresentationEntitiesMessage[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public TflApiPresentationEntitiesFaresFareDetails[] Rows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresJourney
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromStation")]
		public TflApiPresentationEntitiesFaresFareStation FromStation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toStation")]
		public TflApiPresentationEntitiesFaresFareStation ToStation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresPassengerType
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayOrder")]
		public System.Nullable<System.Int32> DisplayOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresRecommendation
	{
		
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public string Cost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discountCard")]
		public string DiscountCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fareType")]
		public string FareType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gettingYourTicket")]
		public TflApiPresentationEntitiesMessage[] GettingYourTicket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyFeatures")]
		public TflApiPresentationEntitiesMessage[] KeyFeatures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public TflApiPresentationEntitiesMessage[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceComparison")]
		public string PriceComparison { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceDescription")]
		public string PriceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productType")]
		public string ProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recommendedTopUp")]
		public string RecommendedTopUp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public System.Nullable<System.Int32> Rule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="singleFare")]
		public System.Nullable<System.Double> SingleFare { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketTime")]
		public string TicketTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketType")]
		public string TicketType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zones")]
		public string Zones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesFaresRecommendationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="recommendations")]
		public TflApiPresentationEntitiesFaresRecommendation[] Recommendations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesGeoCodeSearchMatch
	{
		
		/// <summary>
		/// A string describing the formatted address of the place. Adds additional context to the place's Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the place e.g. "street_address"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesInstruction
	{
		
		[System.Runtime.Serialization.DataMember(Name="detailed")]
		public string Detailed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public TflApiPresentationEntitiesInstructionStep[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesInstructionStep
	{
		
		[System.Runtime.Serialization.DataMember(Name="cumulativeDistance")]
		public System.Nullable<System.Int32> CumulativeDistance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cumulativeTravelTime")]
		public System.Nullable<System.Int32> CumulativeTravelTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="descriptionHeading")]
		public string DescriptionHeading { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Int32> Distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pathAttribute")]
		public TflApiPresentationEntitiesPathAttribute PathAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skyDirection")]
		public System.Nullable<System.Int32> SkyDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skyDirectionDescription")]
		public System.Nullable<TflApiPresentationEntitiesInstructionStepSkyDirectionDescription> SkyDirectionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetName")]
		public string StreetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackType")]
		public System.Nullable<TflApiPresentationEntitiesInstructionStepTrackType> TrackType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="turnDirection")]
		public string TurnDirection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesPathAttribute
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesInstructionStepSkyDirectionDescription
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		North = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NorthEast = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		East = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SouthEast = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		South = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SouthWest = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		West = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NorthWest = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesInstructionStepTrackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CycleSuperHighway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CanalTowpath = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QuietRoad = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProvisionForCyclists = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BusyRoads = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PushBike = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quietway = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesInterval
	{
		
		[System.Runtime.Serialization.DataMember(Name="stopId")]
		public string StopId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeToArrival")]
		public System.Nullable<System.Double> TimeToArrival { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerFare
	{
		
		[System.Runtime.Serialization.DataMember(Name="chargeLevel")]
		public string ChargeLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chargeProfileName")]
		public string ChargeProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public System.Nullable<System.Int32> Cost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="highZone")]
		public System.Nullable<System.Int32> HighZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isHopperFare")]
		public System.Nullable<System.Boolean> IsHopperFare { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowZone")]
		public System.Nullable<System.Int32> LowZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offPeak")]
		public System.Nullable<System.Int32> OffPeak { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="peak")]
		public System.Nullable<System.Int32> Peak { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taps")]
		public TflApiPresentationEntitiesJourneyPlannerFareTap[] Taps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerFareTap
	{
		
		[System.Runtime.Serialization.DataMember(Name="atcoCode")]
		public string AtcoCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tapDetails")]
		public TflApiPresentationEntitiesJourneyPlannerFareTapDetails TapDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerFareTapDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="busRouteId")]
		public string BusRouteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostDeviceType")]
		public string HostDeviceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modeType")]
		public string ModeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nationalLocationCode")]
		public System.Nullable<System.Int32> NationalLocationCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tapTimestamp")]
		public System.Nullable<System.DateTimeOffset> TapTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationType")]
		public string ValidationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerFareCaveat
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A DTO representing a list of possible journeys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerItineraryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="cycleHireDockingStationData")]
		public TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData CycleHireDockingStationData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="journeyVector")]
		public TflApiPresentationEntitiesJourneyPlannerJourneyVector JourneyVector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="journeys")]
		public TflApiPresentationEntitiesJourneyPlannerJourney[] Journeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lines")]
		public TflApiPresentationEntitiesLine[] Lines { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recommendedMaxAgeMinutes")]
		public System.Nullable<System.Int32> RecommendedMaxAgeMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchCriteria")]
		public TflApiPresentationEntitiesJourneyPlannerSearchCriteria SearchCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopMessages")]
		public string[] StopMessages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationId")]
		public string DestinationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationNumberOfBikes")]
		public System.Nullable<System.Int32> DestinationNumberOfBikes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationNumberOfEmptySlots")]
		public System.Nullable<System.Int32> DestinationNumberOfEmptySlots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originId")]
		public string OriginId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originNumberOfBikes")]
		public System.Nullable<System.Int32> OriginNumberOfBikes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originNumberOfEmptySlots")]
		public System.Nullable<System.Int32> OriginNumberOfEmptySlots { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerJourneyVector
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="via")]
		public string Via { get; set; }
	}
	
	/// <summary>
	/// Object that represents an end to end journey (see schematic).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerJourney
	{
		
		[System.Runtime.Serialization.DataMember(Name="arrivalDateTime")]
		public System.Nullable<System.DateTimeOffset> ArrivalDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fare")]
		public TflApiPresentationEntitiesJourneyPlannerJourneyFare Fare { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legs")]
		public TflApiPresentationEntitiesJourneyPlannerLeg[] Legs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerJourneyFare
	{
		
		[System.Runtime.Serialization.DataMember(Name="caveats")]
		public TflApiPresentationEntitiesJourneyPlannerFareCaveat[] Caveats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fares")]
		public TflApiPresentationEntitiesJourneyPlannerFare[] Fares { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCost")]
		public System.Nullable<System.Int32> TotalCost { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerLeg
	{
		
		/// <summary>
		/// Represents a point located at a latitude and longitude using the WGS84 co-ordinate system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrivalPoint")]
		public TflApiPresentationEntitiesPoint ArrivalPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arrivalTime")]
		public System.Nullable<System.DateTimeOffset> ArrivalTime { get; set; }
		
		/// <summary>
		/// Represents a point located at a latitude and longitude using the WGS84 co-ordinate system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departurePoint")]
		public TflApiPresentationEntitiesPoint DeparturePoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="departureTime")]
		public System.Nullable<System.DateTimeOffset> DepartureTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disruptions")]
		public TflApiPresentationEntitiesDisruption[] Disruptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasFixedLocations")]
		public System.Nullable<System.Boolean> HasFixedLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instruction")]
		public TflApiPresentationEntitiesInstruction Instruction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interChangeDuration")]
		public string InterChangeDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interChangePosition")]
		public string InterChangePosition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDisrupted")]
		public System.Nullable<System.Boolean> IsDisrupted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public TflApiPresentationEntitiesIdentifier Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="obstacles")]
		public TflApiPresentationEntitiesJourneyPlannerObstacle[] Obstacles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public TflApiPresentationEntitiesJourneyPlannerPath Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plannedWorks")]
		public TflApiPresentationEntitiesJourneyPlannerPlannedWork[] PlannedWorks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeOptions")]
		public TflApiPresentationEntitiesJourneyPlannerRouteOption[] RouteOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledArrivalTime")]
		public System.Nullable<System.DateTimeOffset> ScheduledArrivalTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledDepartureTime")]
		public System.Nullable<System.DateTimeOffset> ScheduledDepartureTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public string Speed { get; set; }
	}
	
	/// <summary>
	/// Represents a point located at a latitude and longitude using the WGS84 co-ordinate system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesPoint
	{
		
		/// <summary>
		/// WGS84 latitude of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// WGS84 longitude of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerObstacle
	{
		
		[System.Runtime.Serialization.DataMember(Name="incline")]
		public string Incline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopId")]
		public System.Nullable<System.Int32> StopId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerPath
	{
		
		[System.Runtime.Serialization.DataMember(Name="elevation")]
		public TflApiCommonJourneyPlannerJpElevation[] Elevation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineString")]
		public string LineString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopPoints")]
		public TflApiPresentationEntitiesIdentifier[] StopPoints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerPlannedWork
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdateDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerRouteOption
	{
		
		/// <summary>
		/// The direction of the route, i.e. outbound or inbound.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="directions")]
		public string[] Directions { get; set; }
		
		/// <summary>
		/// The Id of the route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineIdentifier")]
		public TflApiPresentationEntitiesIdentifier LineIdentifier { get; set; }
		
		/// <summary>
		/// Name such as "72"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="crowding")]
		public TflApiPresentationEntitiesCrowding Crowding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disruptions")]
		public TflApiPresentationEntitiesDisruption[] Disruptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineStatuses")]
		public TflApiPresentationEntitiesLineStatus[] LineStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modeName")]
		public string ModeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.Nullable<System.DateTimeOffset> Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeSections")]
		public TflApiPresentationEntitiesMatchedRoute[] RouteSections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceTypes")]
		public TflApiPresentationEntitiesLineServiceTypeInfo[] ServiceTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesLineStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Represents a disruption to a route within the transport network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption")]
		public TflApiPresentationEntitiesDisruption Disruption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public string LineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.Nullable<System.DateTimeOffset> Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusSeverity")]
		public System.Nullable<System.Int32> StatusSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusSeverityDescription")]
		public string StatusSeverityDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validityPeriods")]
		public TflApiPresentationEntitiesValidityPeriod[] ValidityPeriods { get; set; }
	}
	
	/// <summary>
	/// Represents a period for which a planned works is valid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesValidityPeriod
	{
		
		/// <summary>
		/// Gets or sets the start date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromDate")]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// If true is a realtime status rather than planned or info
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isNow")]
		public System.Nullable<System.Boolean> IsNow { get; set; }
		
		/// <summary>
		/// Gets or sets the end date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toDate")]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	/// <summary>
	/// Description of a Route used in Route search results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesMatchedRoute
	{
		
		/// <summary>
		/// The Id (NaPTAN code) or the Destination StopPoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// The name of the Destination StopPoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Inbound or Outbound
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		/// <summary>
		/// Name such as "72"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the Origin StopPoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originationName")]
		public string OriginationName { get; set; }
		
		/// <summary>
		/// The Id (NaPTAN code) of the Origin StopPoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator")]
		public string Originator { get; set; }
		
		/// <summary>
		/// The route code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeCode")]
		public string RouteCode { get; set; }
		
		/// <summary>
		/// Regular or Night
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceType")]
		public string ServiceType { get; set; }
		
		/// <summary>
		/// The DateTime that the Service containing this Route is valid from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validFrom")]
		public System.Nullable<System.DateTimeOffset> ValidFrom { get; set; }
		
		/// <summary>
		/// The DateTime that the Service containing this Route is valid until.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validTo")]
		public System.Nullable<System.DateTimeOffset> ValidTo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesLineServiceTypeInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerSearchCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateTime")]
		public System.Nullable<System.DateTimeOffset> DateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateTimeType")]
		public System.Nullable<TflApiPresentationEntitiesJourneyPlannerSearchCriteriaDateTimeType> DateTimeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeAdjustments")]
		public TflApiPresentationEntitiesJourneyPlannerTimeAdjustments TimeAdjustments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesJourneyPlannerSearchCriteriaDateTimeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arriving = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Departing = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerTimeAdjustments
	{
		
		[System.Runtime.Serialization.DataMember(Name="earlier")]
		public TflApiPresentationEntitiesJourneyPlannerTimeAdjustment Earlier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="earliest")]
		public TflApiPresentationEntitiesJourneyPlannerTimeAdjustment Earliest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="later")]
		public TflApiPresentationEntitiesJourneyPlannerTimeAdjustment Later { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latest")]
		public TflApiPresentationEntitiesJourneyPlannerTimeAdjustment Latest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesJourneyPlannerTimeAdjustment
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeIs")]
		public string TimeIs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesKnownJourney
	{
		
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public string Hour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intervalId")]
		public System.Nullable<System.Int32> IntervalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public string Minute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesLineRouteSection
	{
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromStation")]
		public string FromStation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeId")]
		public System.Nullable<System.Int32> RouteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceType")]
		public string ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toStation")]
		public string ToStation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vehicleDestinationText")]
		public string VehicleDestinationText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesLineServiceType
	{
		
		[System.Runtime.Serialization.DataMember(Name="lineName")]
		public string LineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineSpecificServiceTypes")]
		public TflApiPresentationEntitiesLineSpecificServiceType[] LineSpecificServiceTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesLineSpecificServiceType
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceType")]
		public TflApiPresentationEntitiesLineServiceTypeInfo ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopServesServiceType")]
		public System.Nullable<System.Boolean> StopServesServiceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesMatchedRouteSections
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesMatchedStop
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessibilitySummary")]
		public string AccessibilitySummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasDisruption")]
		public System.Nullable<System.Boolean> HasDisruption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icsId")]
		public string IcsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lines")]
		public TflApiPresentationEntitiesIdentifier[] Lines { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modes")]
		public string[] Modes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public string ParentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeId")]
		public System.Nullable<System.Int32> RouteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stationId")]
		public string StationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Boolean> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopLetter")]
		public string StopLetter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopType")]
		public string StopType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topMostParentId")]
		public string TopMostParentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="towards")]
		public string Towards { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesMode
	{
		
		[System.Runtime.Serialization.DataMember(Name="isFarePaying")]
		public System.Nullable<System.Boolean> IsFarePaying { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isScheduledService")]
		public System.Nullable<System.Boolean> IsScheduledService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTflService")]
		public System.Nullable<System.Boolean> IsTflService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modeName")]
		public string ModeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="motType")]
		public string MotType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
	}
	
	/// <summary>
	/// Represent travel network status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesNetworkStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusLevel")]
		public System.Nullable<System.Int32> StatusLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesOrderedRoute
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="naptanIds")]
		public string[] NaptanIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceType")]
		public string ServiceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public TflApiPresentationEntitiesServiceFrequency Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromTime")]
		public TflApiPresentationEntitiesTwentyFourHourClockTime FromTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toTime")]
		public TflApiPresentationEntitiesTwentyFourHourClockTime ToTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TflApiPresentationEntitiesPeriodType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesServiceFrequency
	{
		
		[System.Runtime.Serialization.DataMember(Name="highestFrequency")]
		public System.Nullable<System.Double> HighestFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowestFrequency")]
		public System.Nullable<System.Double> LowestFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesTwentyFourHourClockTime
	{
		
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public string Hour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public string Minute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesPeriodType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Normal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FrequencyHours = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FrequencyMinutes = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesPlaceCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="availableKeys")]
		public string[] AvailableKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesPlacePolygon
	{
		
		[System.Runtime.Serialization.DataMember(Name="commonName")]
		public string CommonName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geoPoints")]
		public TflApiCommonGeoPoint[] GeoPoints { get; set; }
	}
	
	/// <summary>
	/// DTO to capture the prediction details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesPrediction
	{
		
		/// <summary>
		/// Bearing (between 0 to 359)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bearing")]
		public string Bearing { get; set; }
		
		/// <summary>
		/// The current location of the vehicle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentLocation")]
		public string CurrentLocation { get; set; }
		
		/// <summary>
		/// Name of the destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Naptan Identifier for the prediction's destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationNaptanId")]
		public string DestinationNaptanId { get; set; }
		
		/// <summary>
		/// Direction (unified to inbound/outbound)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		/// <summary>
		/// The expected arrival time of the vehicle at the stop/station
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedArrival")]
		public System.Nullable<System.DateTimeOffset> ExpectedArrival { get; set; }
		
		/// <summary>
		/// The identitier for the prediction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Unique identifier for the Line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public string LineId { get; set; }
		
		/// <summary>
		/// Line Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineName")]
		public string LineName { get; set; }
		
		/// <summary>
		/// The mode name of the station/line the prediction relates to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modeName")]
		public string ModeName { get; set; }
		
		/// <summary>
		/// Identifier for the prediction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="naptanId")]
		public string NaptanId { get; set; }
		
		/// <summary>
		/// The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<System.Int32> OperationType { get; set; }
		
		/// <summary>
		/// Platform name (for bus, this is the stop letter)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformName")]
		public string PlatformName { get; set; }
		
		/// <summary>
		/// Station name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stationName")]
		public string StationName { get; set; }
		
		/// <summary>
		/// The expiry time for the prediction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeToLive")]
		public System.Nullable<System.DateTimeOffset> TimeToLive { get; set; }
		
		/// <summary>
		/// Prediction of the Time to station in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeToStation")]
		public System.Nullable<System.Int32> TimeToStation { get; set; }
		
		/// <summary>
		/// Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public TflApiPresentationEntitiesPredictionTiming Timing { get; set; }
		
		/// <summary>
		/// Routing information or other descriptive text about the path of the vehicle towards the destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="towards")]
		public string Towards { get; set; }
		
		/// <summary>
		/// The actual vehicle in transit (for train modes, the leading car of the rolling set)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicleId")]
		public string VehicleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesRedirect
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longUrl")]
		public string LongUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shortUrl")]
		public string ShortUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesRoadCorridor
	{
		
		/// <summary>
		/// The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate
		///            pair in geoJSON format e.g. "[[-1.241531,51.242151],[1.641223,53.765721]]"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bounds")]
		public string Bounds { get; set; }
		
		/// <summary>
		/// The display name of the Corridor e.g. "North Circular (A406)". This
		///            may be identical to the Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon
		///            in geoJSON format e.g. "[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envelope")]
		public string Envelope { get; set; }
		
		/// <summary>
		/// The group name of the Corridor e.g. "Central London". Most corridors are not grouped, in which case this field can be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; }
		
		/// <summary>
		/// The Id of the Corridor e.g. "A406"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The end of the period over which status has been aggregated, or null if this is the current corridor status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusAggregationEndDate")]
		public System.Nullable<System.DateTimeOffset> StatusAggregationEndDate { get; set; }
		
		/// <summary>
		/// The start of the period over which status has been aggregated, or null if this is the current corridor status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusAggregationStartDate")]
		public System.Nullable<System.DateTimeOffset> StatusAggregationStartDate { get; set; }
		
		/// <summary>
		/// Standard multi-mode status severity code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusSeverity")]
		public string StatusSeverity { get; set; }
		
		/// <summary>
		/// Description of the status severity as applied to RoadCorridors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusSeverityDescription")]
		public string StatusSeverityDescription { get; set; }
		
		/// <summary>
		/// URL to retrieve this Corridor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesRoadDisruption
	{
		
		/// <summary>
		/// Describes the nature of disruption e.g. Traffic Incidents, Works
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Full text of comments describing the disruption, including details of any road closures and diversions, where appropriate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// The Ids of affected corridors, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corridorIds")]
		public string[] CorridorIds { get; set; }
		
		/// <summary>
		/// Text of the most recent update from the LSTCC on the state of the
		///             disruption, including the current traffic impact and any advice to
		///             road users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentUpdate")]
		public string CurrentUpdate { get; set; }
		
		/// <summary>
		/// The time when the last CurrentUpdate description was recorded, 
		///            or null if no CurrentUpdate has been applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentUpdateDateTime")]
		public System.Nullable<System.DateTimeOffset> CurrentUpdateDateTime { get; set; }
		
		/// <summary>
		/// The date and time on which the disruption ended. For planned disruptions, this date will have a valid value. For unplanned 
		///            disruptions in progress, this field will be omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geography")]
		public SystemDataSpatialDbGeography Geography { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geometry")]
		public SystemDataSpatialDbGeography Geometry { get; set; }
		
		/// <summary>
		/// True if any of the affected Streets have a "Full Closure" status, false otherwise. A RoadDisruption that has HasClosures is considered a 
		///            Severe or Serious disruption for severity filtering purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasClosures")]
		public System.Nullable<System.Boolean> HasClosures { get; set; }
		
		/// <summary>
		/// Unique identifier for the road disruption
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// True if the disruption is planned on a future date that is open to change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isProvisional")]
		public System.Nullable<System.Boolean> IsProvisional { get; set; }
		
		/// <summary>
		/// The date and time on which the disruption was last modified in the system. This information can reliably be used by a developer to quickly
		///            compare two instances of the same disruption to determine if it has been changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// This describes the level of potential impact on traffic operations of the disruption. 
		///            High = e.g. a one-off disruption on a major or high profile route which will require a high level of operational attention 
		///            Medium = This is the default value 
		///            Low = e.g. a frequently occurring disruption which is well known
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="levelOfInterest")]
		public string LevelOfInterest { get; set; }
		
		/// <summary>
		/// The text of any associated link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkText")]
		public string LinkText { get; set; }
		
		/// <summary>
		/// The url of any associated link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkUrl")]
		public string LinkUrl { get; set; }
		
		/// <summary>
		/// Main road name / number (borough) or preset area name where the disruption is located. This might be useful for a map popup where space is limited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// An ordinal of the disruption based on severity, level of interest and corridor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordinal")]
		public System.Nullable<System.Int32> Ordinal { get; set; }
		
		/// <summary>
		/// Latitude and longitude (WGS84) of the centroid of the disruption, stored in a geoJSON-formatted string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="point")]
		public string Point { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishEndDate")]
		public System.Nullable<System.DateTimeOffset> PublishEndDate { get; set; }
		
		/// <summary>
		/// TDM Additional properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishStartDate")]
		public System.Nullable<System.DateTimeOffset> PublishStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringSchedules")]
		public TflApiPresentationEntitiesRoadDisruptionSchedule[] RecurringSchedules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roadDisruptionImpactAreas")]
		public TflApiPresentationEntitiesRoadDisruptionImpactArea[] RoadDisruptionImpactAreas { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roadDisruptionLines")]
		public TflApiPresentationEntitiesRoadDisruptionLine[] RoadDisruptionLines { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roadProject")]
		public TflApiPresentationEntitiesRoadProject RoadProject { get; set; }
		
		/// <summary>
		/// A description of the severity of the disruption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		/// <summary>
		/// The date and time which the disruption started. For a planned disruption (i.e. planned road works) this date will be in the future.
		///            For unplanned disruptions, this will default to the date on which the disruption was first recorded, but may be adjusted by the operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		/// <summary>
		/// This describes the status of the disruption.  
		///            Active = currently in progress 
		///            Active Long Term = currently in progress and long term
		///            Scheduled = scheduled to start within the next 180 days
		///            Recurring Works = planned maintenance works that follow a regular routine or pattern and whose next occurrence is to start within the next 180 days.
		///            Recently Cleared = recently cleared in the last 24 hours
		///            Note that the status of Scheduled or Recurring Works disruptions will change to Active when they start, and will change status again when they end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// A collection of zero or more streets affected by the disruption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streets")]
		public TflApiPresentationEntitiesStreet[] Streets { get; set; }
		
		/// <summary>
		/// Describes the sub-category of disruption e.g. Collapsed Manhole, Abnormal Load
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeFrame")]
		public string TimeFrame { get; set; }
		
		/// <summary>
		/// URL to retrieve this road disruption
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesRoadDisruptionSchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesRoadDisruptionImpactArea
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="polygon")]
		public SystemDataSpatialDbGeography Polygon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roadDisruptionId")]
		public string RoadDisruptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesRoadDisruptionLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDiversion")]
		public System.Nullable<System.Boolean> IsDiversion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multiLineString")]
		public SystemDataSpatialDbGeography MultiLineString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roadDisruptionId")]
		public string RoadDisruptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesRoadProject
	{
		
		[System.Runtime.Serialization.DataMember(Name="boroughsBenefited")]
		public string[] BoroughsBenefited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="constructionEndDate")]
		public System.Nullable<System.DateTimeOffset> ConstructionEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="constructionStartDate")]
		public System.Nullable<System.DateTimeOffset> ConstructionStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consultationEndDate")]
		public System.Nullable<System.DateTimeOffset> ConsultationEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consultationPageUrl")]
		public string ConsultationPageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consultationStartDate")]
		public System.Nullable<System.DateTimeOffset> ConsultationStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactEmail")]
		public string ContactEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactName")]
		public string ContactName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycleSuperhighwayId")]
		public string CycleSuperhighwayId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalPageUrl")]
		public string ExternalPageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public System.Nullable<TflApiPresentationEntitiesRoadProjectPhase> Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectDescription")]
		public string ProjectDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectPageUrl")]
		public string ProjectPageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectSummaryPageUrl")]
		public string ProjectSummaryPageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemeName")]
		public string SchemeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesRoadProjectPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unscoped = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Concept = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConsultationEnded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Consultation = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Construction = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesStreet
	{
		
		/// <summary>
		/// Type of road closure. Some example values:
		///            Open = road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.
		///            Partial Closure = road is partially blocked, closed or restricted. 
		///            Full Closure = road is fully blocked or closed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closure")]
		public string Closure { get; set; }
		
		/// <summary>
		/// The direction of the disruption on the street. Some example values:
		///            All Directions
		///            All Approaches
		///            Clockwise
		///            Anti-Clockwise
		///            Northbound
		///            Eastbound
		///            Southbound
		///            Westbound
		///            Both Directions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directions")]
		public string Directions { get; set; }
		
		/// <summary>
		/// Street name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Geographic description of the sections of this street that are affected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public TflApiPresentationEntitiesStreetSegment[] Segments { get; set; }
		
		/// <summary>
		/// The ID from the source system of the disruption that this street belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceSystemId")]
		public System.Nullable<System.Int64> SourceSystemId { get; set; }
		
		/// <summary>
		/// The key of the source system of the disruption that this street belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceSystemKey")]
		public string SourceSystemKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesStreetSegment
	{
		
		/// <summary>
		/// geoJSON formatted LineString containing two latitude/longitude (WGS84) pairs that identify the start and end points of the street segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineString")]
		public string LineString { get; set; }
		
		/// <summary>
		/// The ID from the source system of the disruption that this street belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceSystemId")]
		public System.Nullable<System.Int64> SourceSystemId { get; set; }
		
		/// <summary>
		/// The key of the source system of the disruption that this street belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceSystemKey")]
		public string SourceSystemKey { get; set; }
		
		/// <summary>
		/// A 16 digit unique integer identifying a OS ITN (Ordnance Survey Integrated Transport Network) road link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toid")]
		public string Toid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesRouteSearchMatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public string LineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineName")]
		public string LineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineRouteSection")]
		public TflApiPresentationEntitiesLineRouteSection[] LineRouteSection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matchedRouteSections")]
		public TflApiPresentationEntitiesMatchedRouteSections[] MatchedRouteSections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matchedStops")]
		public TflApiPresentationEntitiesMatchedStop[] MatchedStops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesRouteSearchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchMatches")]
		public TflApiPresentationEntitiesRouteSearchMatch[] SearchMatches { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesRouteSequence
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOutboundOnly")]
		public System.Nullable<System.Boolean> IsOutboundOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public string LineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineName")]
		public string LineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineStrings")]
		public string[] LineStrings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderedLineRoutes")]
		public TflApiPresentationEntitiesOrderedRoute[] OrderedLineRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stations")]
		public TflApiPresentationEntitiesMatchedStop[] Stations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopPointSequences")]
		public TflApiPresentationEntitiesStopPointSequence[] StopPointSequences { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesStopPointSequence
	{
		
		/// <summary>
		/// The id of this branch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchId")]
		public System.Nullable<System.Int32> BranchId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public string LineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineName")]
		public string LineName { get; set; }
		
		/// <summary>
		/// The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be
		///            identical in the case of a looped route e.g. the Circle line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextBranchIds")]
		public int[] NextBranchIds { get; set; }
		
		/// <summary>
		/// The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be
		///            identical in the case of a looped route e.g. the Circle line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevBranchIds")]
		public int[] PrevBranchIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceType")]
		public System.Nullable<TflApiPresentationEntitiesStopPointSequenceServiceType> ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopPoint")]
		public TflApiPresentationEntitiesMatchedStop[] StopPoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TflApiPresentationEntitiesStopPointSequenceServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Regular = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Night = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesSchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstJourney")]
		public TflApiPresentationEntitiesKnownJourney FirstJourney { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="knownJourneys")]
		public TflApiPresentationEntitiesKnownJourney[] KnownJourneys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastJourney")]
		public TflApiPresentationEntitiesKnownJourney LastJourney { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="periods")]
		public TflApiPresentationEntitiesPeriod[] Periods { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesSearchMatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesSearchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.Nullable<System.Int32> From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matches")]
		public TflApiPresentationEntitiesSearchMatch[] Matches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxScore")]
		public System.Nullable<System.Double> MaxScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesStationInterval
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intervals")]
		public TflApiPresentationEntitiesInterval[] Intervals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesStatusSeverity
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modeName")]
		public string ModeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severityLevel")]
		public System.Nullable<System.Int32> SeverityLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesStopPointCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="availableKeys")]
		public string[] AvailableKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesStopPointRouteSection
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public string LineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineString")]
		public string LineString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="naptanId")]
		public string NaptanId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeSectionName")]
		public string RouteSectionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceType")]
		public string ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validFrom")]
		public System.Nullable<System.DateTimeOffset> ValidFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validTo")]
		public System.Nullable<System.DateTimeOffset> ValidTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vehicleDestinationText")]
		public string VehicleDestinationText { get; set; }
	}
	
	/// <summary>
	/// A paged response containing StopPoints
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesStopPointsResponse
	{
		
		/// <summary>
		/// The centre latitude/longitude of this list of StopPoints
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="centrePoint")]
		public double[] CentrePoint { get; set; }
		
		/// <summary>
		/// The index of this page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The maximum size of the page in this response i.e. the maximum number of StopPoints
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// Collection of stop points
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopPoints")]
		public TflApiPresentationEntitiesStopPoint[] StopPoints { get; set; }
		
		/// <summary>
		/// The total number of StopPoints available across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesTimetable
	{
		
		[System.Runtime.Serialization.DataMember(Name="departureStopId")]
		public string DepartureStopId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public TflApiPresentationEntitiesTimetableRoute[] Routes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesTimetableRoute
	{
		
		[System.Runtime.Serialization.DataMember(Name="schedules")]
		public TflApiPresentationEntitiesSchedule[] Schedules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stationIntervals")]
		public TflApiPresentationEntitiesStationInterval[] StationIntervals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesTimetableResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disambiguation")]
		public TflApiPresentationEntitiesTimetablesDisambiguation Disambiguation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public string LineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineName")]
		public string LineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdfUrl")]
		public string PdfUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stations")]
		public TflApiPresentationEntitiesMatchedStop[] Stations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusErrorMessage")]
		public string StatusErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stops")]
		public TflApiPresentationEntitiesMatchedStop[] Stops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timetable")]
		public TflApiPresentationEntitiesTimetable Timetable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesTimetablesDisambiguation
	{
		
		[System.Runtime.Serialization.DataMember(Name="disambiguationOptions")]
		public TflApiPresentationEntitiesTimetablesDisambiguationOption[] DisambiguationOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TflApiPresentationEntitiesTimetablesDisambiguationOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets all accident details for accidents occuring in the specified year
		/// AccidentStats_Get AccidentStats/{year}
		/// </summary>
		/// <param name="year">The year for which to filter the accidents on.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesAccidentStatsAccidentDetail[]> AccidentStats_GetAsync(int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "AccidentStats/"+year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesAccidentStatsAccidentDetail[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets air quality data feed
		/// AirQuality_Get AirQuality
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemObject> AirQuality_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "AirQuality";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces
		/// numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.
		/// BikePoint_GetAll BikePoint
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPlace[]> BikePoint_GetAllAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BikePoint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPlace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for bike stations by their name, a bike point's name often contains information about the name of the street
		/// or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status
		/// or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.
		/// BikePoint_Search BikePoint/Search
		/// </summary>
		/// <param name="query">The search term e.g. "St. James"</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPlace[]> BikePoint_SearchAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BikePoint/Search?query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPlace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the bike point with the given id.
		/// BikePoint_Get BikePoint/{id}
		/// </summary>
		/// <param name="id">A bike point id (a list of ids can be obtained from the above BikePoint call)</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPlace> BikePoint_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BikePoint/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPlace>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets taxis and minicabs contact information
		/// Cabwise_Get Cabwise/search
		/// </summary>
		/// <param name="lat">Latitude</param>
		/// <param name="lon">Longitude</param>
		/// <param name="optype">Operator Type e.g Minicab, Executive, Limousine</param>
		/// <param name="wc">Wheelchair accessible</param>
		/// <param name="radius">The radius of the bounding circle in metres</param>
		/// <param name="name">Trading name of operating company</param>
		/// <param name="maxResults">An optional parameter to limit the number of results return. Default and maximum is 20.</param>
		/// <param name="legacyFormat">Legacy Format</param>
		/// <param name="forceXml">Force Xml</param>
		/// <param name="twentyFourSevenOnly">Twenty Four Seven Only</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> Cabwise_GetAsync(double lat, double lon, string optype, string wc, double radius, string name, int maxResults, bool legacyFormat, bool forceXml, bool twentyFourSevenOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Cabwise/search?lat="+lat+"&lon="+lon+"&optype=" + (optype==null? "" : System.Uri.EscapeDataString(optype))+"&wc=" + (wc==null? "" : System.Uri.EscapeDataString(wc))+"&radius="+radius+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&maxResults="+maxResults+"&legacyFormat="+legacyFormat+"&forceXml="+forceXml+"&twentyFourSevenOnly="+twentyFourSevenOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Perform a Journey Planner search from the parameters specified in simple types
		/// Journey_JourneyResults Journey/JourneyResults/{from}/to/{to}
		/// </summary>
		/// <param name="from">Origin of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
		/// <param name="to">Destination of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
		/// <param name="via">Travel through point on the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
		/// <param name="nationalSearch">Does the journey cover stops outside London? eg. "nationalSearch=true"</param>
		/// <param name="date">The date must be in yyyyMMdd format</param>
		/// <param name="time">The time must be in HHmm format</param>
		/// <param name="timeIs">Does the time given relate to arrival or leaving time? Possible options: "departing" | "arriving"</param>
		/// <param name="journeyPreference">The journey preference eg possible options: "leastinterchange" | "leasttime" | "leastwalking"</param>
		/// <param name="mode">The mode must be a comma separated list of modes. eg possible options: "public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle"</param>
		/// <param name="accessibilityPreference">The accessibility preference must be a comma separated list eg. "noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform"</param>
		/// <param name="fromName">An optional name to associate with the origin of the journey in the results.</param>
		/// <param name="toName">An optional name to associate with the destination of the journey in the results.</param>
		/// <param name="viaName">An optional name to associate with the via point of the journey in the results.</param>
		/// <param name="maxTransferMinutes">The max walking time in minutes for transfer eg. "120"</param>
		/// <param name="maxWalkingMinutes">The max walking time in minutes for journeys eg. "120"</param>
		/// <param name="walkingSpeed">The walking speed. eg possible options: "slow" | "average" | "fast".</param>
		/// <param name="cyclePreference">The cycle preference. eg possible options: "allTheWay" | "leaveAtStation" | "takeOnTransport" | "cycleHire"</param>
		/// <param name="adjustment">Time adjustment command. eg possible options: "TripFirst" | "TripLast"</param>
		/// <param name="bikeProficiency">A comma separated list of cycling proficiency levels. eg possible options: "easy,moderate,fast"</param>
		/// <param name="alternativeCycle">Option to determine whether to return alternative cycling journey</param>
		/// <param name="alternativeWalking">Option to determine whether to return alternative walking journey</param>
		/// <param name="applyHtmlMarkup">Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not.</param>
		/// <param name="useMultiModalCall">A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey</param>
		/// <param name="walkingOptimization">A boolean to indicate whether to optimize journeys using walking</param>
		/// <param name="taxiOnlyTrip">A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override "useMultiModalCall".</param>
		/// <param name="routeBetweenEntrances">A boolean to indicate whether public transport routes should include directions between platforms and station entrances.</param>
		/// <param name="useRealTimeLiveArrivals">A boolean to indicate if we want to receive real time live arrivals data where available.</param>
		/// <param name="calcOneDirection">A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the 'depart' time, or before the 'arrive' time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesJourneyPlannerItineraryResult> Journey_JourneyResultsAsync(
					string from, 
					string to, 
					string via, 
					bool nationalSearch, 
					string date, 
					string time, 
					TflApiPresentationEntitiesJourneyPlannerSearchCriteriaDateTimeType timeIs, 
					Journey_JourneyResultsJourneyPreference journeyPreference, 
					string[] mode, 
					string[] accessibilityPreference, 
					string fromName, 
					string toName, 
					string viaName, 
					string maxTransferMinutes, 
					string maxWalkingMinutes, 
					Journey_JourneyResultsWalkingSpeed walkingSpeed, 
					Journey_JourneyResultsCyclePreference cyclePreference, 
					string adjustment, 
					string[] bikeProficiency, 
					bool alternativeCycle, 
					bool alternativeWalking, 
					bool applyHtmlMarkup, 
					bool useMultiModalCall, 
					bool walkingOptimization, 
					bool taxiOnlyTrip, 
					bool routeBetweenEntrances, 
					bool useRealTimeLiveArrivals, 
					bool calcOneDirection, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Journey/JourneyResults/"+ (from==null? "" : System.Uri.EscapeDataString(from))+"/to/"+ (to==null? "" : System.Uri.EscapeDataString(to))+"&via=" + (via==null? "" : System.Uri.EscapeDataString(via))+"&nationalSearch="+nationalSearch+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&time=" + (time==null? "" : System.Uri.EscapeDataString(time))+"&timeIs=" + timeIs+"&journeyPreference=" + journeyPreference+"&"+string.Join("&", mode.Select(z => $"mode={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", accessibilityPreference.Select(z => $"accessibilityPreference={System.Uri.EscapeDataString(z.ToString())}"))+"&fromName=" + (fromName==null? "" : System.Uri.EscapeDataString(fromName))+"&toName=" + (toName==null? "" : System.Uri.EscapeDataString(toName))+"&viaName=" + (viaName==null? "" : System.Uri.EscapeDataString(viaName))+"&maxTransferMinutes=" + (maxTransferMinutes==null? "" : System.Uri.EscapeDataString(maxTransferMinutes))+"&maxWalkingMinutes=" + (maxWalkingMinutes==null? "" : System.Uri.EscapeDataString(maxWalkingMinutes))+"&walkingSpeed=" + walkingSpeed+"&cyclePreference=" + cyclePreference+"&adjustment=" + (adjustment==null? "" : System.Uri.EscapeDataString(adjustment))+"&"+string.Join("&", bikeProficiency.Select(z => $"bikeProficiency={System.Uri.EscapeDataString(z.ToString())}"))+"&alternativeCycle="+alternativeCycle+"&alternativeWalking="+alternativeWalking+"&applyHtmlMarkup="+applyHtmlMarkup+"&useMultiModalCall="+useMultiModalCall+"&walkingOptimization="+walkingOptimization+"&taxiOnlyTrip="+taxiOnlyTrip+"&routeBetweenEntrances="+routeBetweenEntrances+"&useRealTimeLiveArrivals="+useRealTimeLiveArrivals+"&calcOneDirection="+calcOneDirection;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesJourneyPlannerItineraryResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all of the available journey planner modes
		/// Journey_Meta Journey/Meta/Modes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesMode[]> Journey_MetaAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Journey/Meta/Modes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesMode[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of valid disruption categories
		/// Line_MetaDisruptionCategories Line/Meta/DisruptionCategories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> Line_MetaDisruptionCategoriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/Meta/DisruptionCategories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of valid modes
		/// Line_MetaModes Line/Meta/Modes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesMode[]> Line_MetaModesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/Meta/Modes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesMode[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of valid ServiceTypes to filter on
		/// Line_MetaServiceTypes Line/Meta/ServiceTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> Line_MetaServiceTypesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/Meta/ServiceTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of valid severity codes
		/// Line_MetaSeverity Line/Meta/Severity
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStatusSeverity[]> Line_MetaSeverityAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/Meta/Severity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStatusSeverity[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets lines that serve the given modes.
		/// Line_GetByMode Line/Mode/{modes}
		/// </summary>
		/// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesLine[]> Line_GetByModeAsync(string[] modes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/Mode/{modes}"+string.Join("&", modes.Select(z => $"modes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesLine[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get disruptions for all lines of the given modes.
		/// Line_DisruptionByMode Line/Mode/{modes}/Disruption
		/// </summary>
		/// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesDisruption[]> Line_DisruptionByModeAsync(string[] modes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/Mode/{modes}/Disruption"+string.Join("&", modes.Select(z => $"modes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesDisruption[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
		/// Line_RouteByMode Line/Mode/{modes}/Route
		/// </summary>
		/// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
		/// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesLine[]> Line_RouteByModeAsync(string[] modes, TflApiPresentationEntitiesStopPointSequenceServiceType[] serviceTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/Mode/{modes}/Route"+string.Join("&", modes.Select(z => $"modes={System.Uri.EscapeDataString(z.ToString())}"))+"?"+string.Join("&", serviceTypes.Select(z => $"serviceTypes={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesLine[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the line status of for all lines for the given modes
		/// Line_StatusByMode Line/Mode/{modes}/Status
		/// </summary>
		/// <param name="modes">A comma-separated list of modes to filter by. e.g. tube,dlr</param>
		/// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes</param>
		/// <param name="severityLevel">If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesLine[]> Line_StatusByModeAsync(string[] modes, bool detail, string severityLevel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/Mode/{modes}/Status"+string.Join("&", modes.Select(z => $"modes={System.Uri.EscapeDataString(z.ToString())}"))+"?detail="+detail+"&severityLevel=" + (severityLevel==null? "" : System.Uri.EscapeDataString(severityLevel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesLine[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
		/// Line_Route Line/Route
		/// </summary>
		/// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesLine[]> Line_RouteAsync(TflApiPresentationEntitiesStopPointSequenceServiceType[] serviceTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/Route?"+string.Join("&", serviceTypes.Select(z => $"serviceTypes={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesLine[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for lines or routes matching the query string
		/// Line_Search Line/Search/{query}
		/// </summary>
		/// <param name="query">Search term e.g victoria</param>
		/// <param name="modes">Optionally filter by the specified modes</param>
		/// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesRouteSearchResponse> Line_SearchAsync(string query, string[] modes, TflApiPresentationEntitiesStopPointSequenceServiceType[] serviceTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/Search/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", modes.Select(z => $"modes={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", serviceTypes.Select(z => $"serviceTypes={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesRouteSearchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the line status for all lines with a given severity
		/// A list of valid severity codes can be obtained from a call to Line/Meta/Severity
		/// Line_StatusBySeverity Line/Status/{severity}
		/// </summary>
		/// <param name="severity">The level of severity (eg: a number from 0 to 14)</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesLine[]> Line_StatusBySeverityAsync(int severity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/Status/"+severity;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesLine[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets lines that match the specified line ids.
		/// Line_Get Line/{ids}
		/// </summary>
		/// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesLine[]> Line_GetAsync(string[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/{ids}"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesLine[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of arrival predictions for given line ids based at the given stop
		/// Line_Arrivals Line/{ids}/Arrivals/{stopPointId}
		/// </summary>
		/// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
		/// <param name="stopPointId">Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
		/// <param name="direction">Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all</param>
		/// <param name="destinationStationId">Optional. Id of destination stop</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPrediction[]> Line_ArrivalsAsync(string[] ids, string stopPointId, Line_ArrivalsDirection direction, string destinationStationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/{ids}/Arrivals/"+ (stopPointId==null? "" : System.Uri.EscapeDataString(stopPointId))+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&direction=" + direction+"&destinationStationId=" + (destinationStationId==null? "" : System.Uri.EscapeDataString(destinationStationId))+"";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPrediction[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get disruptions for the given line ids
		/// Line_Disruption Line/{ids}/Disruption
		/// </summary>
		/// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesDisruption[]> Line_DisruptionAsync(string[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/{ids}/Disruption"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesDisruption[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
		/// Line_LineRoutesByIds Line/{ids}/Route
		/// </summary>
		/// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
		/// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesLine[]> Line_LineRoutesByIdsAsync(string[] ids, TflApiPresentationEntitiesStopPointSequenceServiceType[] serviceTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/{ids}/Route"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"?"+string.Join("&", serviceTypes.Select(z => $"serviceTypes={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesLine[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the line status of for given line ids e.g Minor Delays
		/// Line_StatusByIds Line/{ids}/Status
		/// </summary>
		/// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
		/// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesLine[]> Line_StatusByIdsAsync(string[] ids, bool detail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/{ids}/Status"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"?detail="+detail;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesLine[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the line status for given line ids during the provided dates e.g Minor Delays
		/// Line_Status Line/{ids}/Status/{StartDate}/to/{EndDate}
		/// </summary>
		/// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
		/// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes</param>
		/// <param name="StartDate">Automatically added</param>
		/// <param name="EndDate">Automatically added</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesLine[]> Line_StatusAsync(string[] ids, bool detail, string startDate, string endDate, System.DateTimeOffset dateRange_startDate, System.DateTimeOffset dateRange_endDate, string StartDate, string EndDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/{ids}/Status/"+ (StartDate==null? "" : System.Uri.EscapeDataString(StartDate))+"/to/"+ (EndDate==null? "" : System.Uri.EscapeDataString(EndDate))+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"?detail="+detail+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&dateRange.startDate=" + dateRange_startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&dateRange.endDate=" + dateRange_endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesLine[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all valid routes for given line id, including the sequence of stops on each route.
		/// Line_RouteSequence Line/{id}/Route/Sequence/{direction}
		/// </summary>
		/// <param name="id">A single line id e.g. victoria</param>
		/// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
		/// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
		/// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesRouteSequence> Line_RouteSequenceAsync(string id, Line_ArrivalsDirection direction, TflApiPresentationEntitiesStopPointSequenceServiceType[] serviceTypes, bool excludeCrowding, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Route/Sequence/"+direction+"&"+string.Join("&", serviceTypes.Select(z => $"serviceTypes={z}"))+"&excludeCrowding="+excludeCrowding;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesRouteSequence>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the stations that serve the given line id
		/// Line_StopPoints Line/{id}/StopPoints
		/// </summary>
		/// <param name="id">A single line id e.g. victoria</param>
		/// <param name="tflOperatedNationalRailStationsOnly">If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStopPoint[]> Line_StopPointsAsync(string id, bool tflOperatedNationalRailStationsOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/StopPoints&tflOperatedNationalRailStationsOnly="+tflOperatedNationalRailStationsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStopPoint[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the timetable for a specified station on the give line
		/// Line_Timetable Line/{id}/Timetable/{fromStopPointId}
		/// </summary>
		/// <param name="fromStopPointId">The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
		/// <param name="id">A single line id e.g. victoria</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesTimetableResponse> Line_TimetableAsync(string fromStopPointId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Timetable/"+ (fromStopPointId==null? "" : System.Uri.EscapeDataString(fromStopPointId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesTimetableResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the timetable for a specified station on the give line with specified destination
		/// Line_TimetableTo Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}
		/// </summary>
		/// <param name="fromStopPointId">The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
		/// <param name="id">A single line id e.g. victoria</param>
		/// <param name="toStopPointId">The destination stations's Naptan code</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesTimetableResponse> Line_TimetableToAsync(string fromStopPointId, string id, string toStopPointId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Line/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Timetable/"+ (fromStopPointId==null? "" : System.Uri.EscapeDataString(fromStopPointId))+"/to/"+ (toStopPointId==null? "" : System.Uri.EscapeDataString(toStopPointId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesTimetableResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the service type active for a mode.
		/// Currently only supports tube
		/// Mode_GetActiveServiceTypes Mode/ActiveServiceTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesActiveServiceType[]> Mode_GetActiveServiceTypesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Mode/ActiveServiceTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesActiveServiceType[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the next arrival predictions for all stops of a given mode
		/// Mode_Arrivals Mode/{mode}/Arrivals
		/// </summary>
		/// <param name="mode">A mode name e.g. tube, dlr</param>
		/// <param name="count">A number of arrivals to return for each stop, -1 to return all available.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPrediction[]> Mode_ArrivalsAsync(string mode, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Mode/"+ (mode==null? "" : System.Uri.EscapeDataString(mode))+"/Arrivals&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPrediction[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the occupancy for bike points.
		/// Occupancy_GetBikePointsOccupancies Occupancy/BikePoints/{ids}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesBikePointOccupancy[]> Occupancy_GetBikePointsOccupanciesAsync(string[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Occupancy/BikePoints/{ids}"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesBikePointOccupancy[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the occupancy for all car parks that have occupancy data
		/// OccupancyGet Occupancy/CarPark
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesCarParkOccupancy[]> OccupancyGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Occupancy/CarPark";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesCarParkOccupancy[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the occupancy for a car park with a given id
		/// Occupancy_Get Occupancy/CarPark/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesCarParkOccupancy> Occupancy_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Occupancy/CarPark/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesCarParkOccupancy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the occupancy for all charge connectors
		/// Occupancy_GetAllChargeConnectorStatus Occupancy/ChargeConnector
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesChargeConnectorOccupancy[]> Occupancy_GetAllChargeConnectorStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Occupancy/ChargeConnector";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesChargeConnectorOccupancy[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId)
		/// Occupancy_GetChargeConnectorStatus Occupancy/ChargeConnector/{ids}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesChargeConnectorOccupancy[]> Occupancy_GetChargeConnectorStatusAsync(string[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Occupancy/ChargeConnector/{ids}"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesChargeConnectorOccupancy[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the places that lie within a geographic region. The geographic region of interest can either be specified
		/// by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of
		/// its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.
		/// Optionally filters on type and can strip properties for a smaller payload.
		/// Place_GetByGeo Place
		/// </summary>
		/// <param name="radius">The radius of the bounding circle in metres when only lat/lon are specified.</param>
		/// <param name="categories">An optional list of comma separated property categories to return in the Place's property bag. If null or empty, all categories of property are returned. Pass the keyword "none" to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint)</param>
		/// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned</param>
		/// <param name="type">Place types to filter on, or null to return all types</param>
		/// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)</param>
		/// <param name="numberOfPlacesToReturn">If specified, limits the number of returned places equal to the given value</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStopPoint[]> Place_GetByGeoAsync(double radius, string[] categories, bool includeChildren, string[] type, bool activeOnly, int numberOfPlacesToReturn, double placeGeo_swLat, double placeGeo_swLon, double placeGeo_neLat, double placeGeo_neLon, double placeGeo_lat, double placeGeo_lon, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Place?radius="+radius+"&"+string.Join("&", categories.Select(z => $"categories={System.Uri.EscapeDataString(z.ToString())}"))+"&includeChildren="+includeChildren+"&"+string.Join("&", type.Select(z => $"type={System.Uri.EscapeDataString(z.ToString())}"))+"&activeOnly="+activeOnly+"&numberOfPlacesToReturn="+numberOfPlacesToReturn+"&placeGeo.swLat="+placeGeo_swLat+"&placeGeo.swLon="+placeGeo_swLon+"&placeGeo.neLat="+placeGeo_neLat+"&placeGeo.neLon="+placeGeo_neLon+"&placeGeo.lat="+placeGeo_lat+"&placeGeo.lon="+placeGeo_lon;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStopPoint[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the set of streets associated with a post code.
		/// Place_GetStreetsByPostCode Place/Address/Streets/{Postcode}
		/// </summary>
		/// <param name="Postcode">Automatically added</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> Place_GetStreetsByPostCodeAsync(string postcode, string postcodeInput_postcode, string Postcode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Place/Address/Streets/"+ (Postcode==null? "" : System.Uri.EscapeDataString(Postcode))+"?postcode=" + (postcode==null? "" : System.Uri.EscapeDataString(postcode))+"&postcodeInput.postcode=" + (postcodeInput_postcode==null? "" : System.Uri.EscapeDataString(postcodeInput_postcode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all of the available place property categories and keys.
		/// Place_MetaCategories Place/Meta/Categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPlaceCategory[]> Place_MetaCategoriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Place/Meta/Categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPlaceCategory[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the available types of Place.
		/// Place_MetaPlaceTypes Place/Meta/PlaceTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPlaceCategory[]> Place_MetaPlaceTypesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Place/Meta/PlaceTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPlaceCategory[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all places that matches the given query
		/// Place_Search Place/Search
		/// </summary>
		/// <param name="name">The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.</param>
		/// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPlace[]> Place_SearchAsync(string name, string[] types, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Place/Search?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&"+string.Join("&", types.Select(z => $"types={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPlace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all places of a given type
		/// Place_GetByType Place/Type/{types}
		/// </summary>
		/// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.
		///            A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.</param>
		/// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPlace[]> Place_GetByTypeAsync(string[] types, bool activeOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Place/Type/{types}"+string.Join("&", types.Select(z => $"types={System.Uri.EscapeDataString(z.ToString())}"))+"?activeOnly="+activeOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPlace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the place with the given id.
		/// Place_Get Place/{id}
		/// </summary>
		/// <param name="id">The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids</param>
		/// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPlace[]> Place_GetAsync(string id, bool includeChildren, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Place/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&includeChildren="+includeChildren;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPlace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place
		/// must be polygonal e.g. a BoroughBoundary.
		/// Place_GetAt Place/{type}/At/{Lat}/{Lon}
		/// </summary>
		/// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
		/// <param name="Lat">Automatically added</param>
		/// <param name="Lon">Automatically added</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> Place_GetAtAsync(string[] type, string lat, string lon, double location_lat, double location_lon, string Lat, string Lon, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Place/{type}/At/"+ (Lat==null? "" : System.Uri.EscapeDataString(Lat))+"/"+ (Lon==null? "" : System.Uri.EscapeDataString(Lon))+string.Join("&", type.Select(z => $"type={System.Uri.EscapeDataString(z.ToString())}"))+"?lat=" + (lat==null? "" : System.Uri.EscapeDataString(lat))+"&lon=" + (lon==null? "" : System.Uri.EscapeDataString(lon))+"&location.lat="+location_lat+"&location.lon="+location_lon+"";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the place overlay for a given set of co-ordinates and a given width/height.
		/// Place_GetOverlay Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}
		/// </summary>
		/// <param name="z">The zoom level</param>
		/// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
		/// <param name="width">The width of the requested overlay.</param>
		/// <param name="height">The height of the requested overlay.</param>
		/// <param name="Lat">Automatically added</param>
		/// <param name="Lon">Automatically added</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> Place_GetOverlayAsync(int z, string[] type, int width, int height, string lat, string lon, double location_lat, double location_lon, string Lat, string Lon, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Place/{type}/overlay/"+z+"/"+ (Lat==null? "" : System.Uri.EscapeDataString(Lat))+"/"+ (Lon==null? "" : System.Uri.EscapeDataString(Lon))+"/"+width+"/"+height+string.Join("&", type.Select(z => $"type={System.Uri.EscapeDataString(z.ToString())}"))+"?lat=" + (lat==null? "" : System.Uri.EscapeDataString(lat))+"&lon=" + (lon==null? "" : System.Uri.EscapeDataString(lon))+"&location.lat="+location_lat+"&location.lon="+location_lon+"";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all roads managed by TfL
		/// Road_Get Road
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesRoadCorridor[]> Road_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Road";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesRoadCorridor[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of valid RoadDisruption categories
		/// Road_MetaCategories Road/Meta/Categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> Road_MetaCategoriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Road/Meta/Categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of valid RoadDisruption severity codes
		/// Road_MetaSeverities Road/Meta/Severities
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStatusSeverity[]> Road_MetaSeveritiesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Road/Meta/Severities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStatusSeverity[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of active disruptions filtered by disruption Ids.
		/// Road_DisruptionById Road/all/Disruption/{disruptionIds}
		/// </summary>
		/// <param name="disruptionIds">Comma-separated list of disruption identifiers to filter by.</param>
		/// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesRoadDisruption> Road_DisruptionByIdAsync(string[] disruptionIds, bool stripContent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Road/all/Disruption/{disruptionIds}"+string.Join("&", disruptionIds.Select(z => $"disruptionIds={System.Uri.EscapeDataString(z.ToString())}"))+"?stripContent="+stripContent;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesRoadDisruption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
		/// Road_DisruptedStreets Road/all/Street/Disruption
		/// </summary>
		/// <param name="startDate">Optional, the start time to filter on.</param>
		/// <param name="endDate">Optional, The end time to filter on.</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> Road_DisruptedStreetsAsync(System.DateTimeOffset startDate, System.DateTimeOffset endDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Road/all/Street/Disruption?startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the road with the specified id (e.g. A1)
		/// RoadGetByIds Road/{ids}
		/// </summary>
		/// <param name="ids">Comma-separated list of road identifiers e.g. "A406, A2" (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesRoadCorridor[]> RoadGetByIdsAsync(string[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Road/{ids}"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesRoadCorridor[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get active disruptions, filtered by road ids
		/// Road_Disruption Road/{ids}/Disruption
		/// </summary>
		/// <param name="ids">Comma-separated list of road identifiers e.g. "A406, A2" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
		/// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets</param>
		/// <param name="severities">an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint)</param>
		/// <param name="categories">an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint)</param>
		/// <param name="closures">Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesRoadDisruption[]> Road_DisruptionAsync(string[] ids, bool stripContent, string[] severities, string[] categories, bool closures, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Road/{ids}/Disruption"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"?stripContent="+stripContent+"&"+string.Join("&", severities.Select(z => $"severities={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", categories.Select(z => $"categories={System.Uri.EscapeDataString(z.ToString())}"))+"&closures="+closures;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesRoadDisruption[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
		/// Road_Status Road/{ids}/Status
		/// </summary>
		/// <param name="ids">Comma-separated list of road identifiers e.g. "A406, A2" or use "all" to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesRoadCorridor[]> Road_StatusAsync(string[] ids, System.DateTimeOffset dateRangeNullable_startDate, System.DateTimeOffset dateRangeNullable_endDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Road/{ids}/Status"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"?dateRangeNullable.startDate=" + dateRangeNullable_startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&dateRangeNullable.endDate=" + dateRangeNullable_endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesRoadCorridor[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size
		/// of 100. To return subsequent pages, use the paginated overload.
		/// Search_Get Search
		/// </summary>
		/// <param name="query">The search query</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesSearchResponse> Search_GetAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Search?query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesSearchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches the bus schedules folder on S3 for a given bus number.
		/// Search_BusSchedules Search/BusSchedules
		/// </summary>
		/// <param name="query">The search query</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesSearchResponse> Search_BusSchedulesAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Search/BusSchedules?query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesSearchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the available search categories.
		/// Search_MetaCategories Search/Meta/Categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> Search_MetaCategoriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Search/Meta/Categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the available searchProvider names.
		/// Search_MetaSearchProviders Search/Meta/SearchProviders
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> Search_MetaSearchProvidersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Search/Meta/SearchProviders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the available sorting options.
		/// Search_MetaSorts Search/Meta/Sorts
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> Search_MetaSortsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Search/Meta/Sorts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of StopPoints within {radius} by the specified criteria
		/// StopPoint_GetByGeoPoint StopPoint
		/// </summary>
		/// <param name="stopTypes">a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)</param>
		/// <param name="radius">the radius of the bounding circle in metres (default : 200)</param>
		/// <param name="useStopPointHierarchy">Re-arrange the output into a parent/child hierarchy</param>
		/// <param name="modes">the list of modes to search (comma separated mode names e.g. tube,dlr)</param>
		/// <param name="categories">an optional list of comma separated property categories to return in the StopPoint's property bag. If null or empty, all categories of property are returned. Pass the keyword "none" to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint)</param>
		/// <param name="returnLines">true to return the lines that each stop point serves as a nested resource</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStopPointsResponse> StopPoint_GetByGeoPointAsync(string[] stopTypes, int radius, bool useStopPointHierarchy, string[] modes, string[] categories, bool returnLines, double location_lat, double location_lon, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint?"+string.Join("&", stopTypes.Select(z => $"stopTypes={System.Uri.EscapeDataString(z.ToString())}"))+"&radius="+radius+"&useStopPointHierarchy="+useStopPointHierarchy+"&"+string.Join("&", modes.Select(z => $"modes={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", categories.Select(z => $"categories={System.Uri.EscapeDataString(z.ToString())}"))+"&returnLines="+returnLines+"&location.lat="+location_lat+"&location.lon="+location_lon;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStopPointsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the list of available StopPoint additional information categories
		/// StopPoint_MetaCategories StopPoint/Meta/Categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStopPointCategory[]> StopPoint_MetaCategoriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/Meta/Categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStopPointCategory[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the list of available StopPoint modes
		/// StopPoint_MetaModes StopPoint/Meta/Modes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesMode[]> StopPoint_MetaModesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/Meta/Modes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesMode[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the list of available StopPoint types
		/// StopPoint_MetaStopTypes StopPoint/Meta/StopTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> StopPoint_MetaStopTypesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/Meta/StopTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of StopPoints filtered by the modes available at that StopPoint.
		/// StopPoint_GetByMode StopPoint/Mode/{modes}
		/// </summary>
		/// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
		/// <param name="page">The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStopPointsResponse> StopPoint_GetByModeAsync(string[] modes, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/Mode/{modes}"+string.Join("&", modes.Select(z => $"modes={System.Uri.EscapeDataString(z.ToString())}"))+"?page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStopPointsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a distinct list of disrupted stop points for the given modes
		/// StopPoint_DisruptionByMode StopPoint/Mode/{modes}/Disruption
		/// </summary>
		/// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesDisruptedPoint[]> StopPoint_DisruptionByModeAsync(string[] modes, bool includeRouteBlockedStops, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/Mode/{modes}/Disruption"+string.Join("&", modes.Select(z => $"modes={System.Uri.EscapeDataString(z.ToString())}"))+"?includeRouteBlockedStops="+includeRouteBlockedStops;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesDisruptedPoint[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
		/// StopPointGetByQueryAndModesAndFaresOnlyAndMaxResultsAndLinesAndIncludeHubsAndTflOperatedNationalRailStationsOnly StopPoint/Search
		/// </summary>
		/// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
		/// <param name="modes">An optional, parameter separated list of the modes to filter by</param>
		/// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station.</param>
		/// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,
		///            it is possible that the flattened result set will contain more than 50 items.</param>
		/// <param name="lines">An optional, parameter separated list of the lines to filter by</param>
		/// <param name="includeHubs">If true, returns results including HUBs.</param>
		/// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesSearchResponse> StopPointGetByQueryAndModesAndFaresOnlyAndMaxResultsAndLinesAndIncludeHubsAndTflOperatedNationalRailStationsOnlyAsync(string query, string[] modes, bool faresOnly, int maxResults, string[] lines, bool includeHubs, bool tflOperatedNationalRailStationsOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/Search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", modes.Select(z => $"modes={System.Uri.EscapeDataString(z.ToString())}"))+"&faresOnly="+faresOnly+"&maxResults="+maxResults+"&"+string.Join("&", lines.Select(z => $"lines={System.Uri.EscapeDataString(z.ToString())}"))+"&includeHubs="+includeHubs+"&tflOperatedNationalRailStationsOnly="+tflOperatedNationalRailStationsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesSearchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
		/// StopPoint_Search StopPoint/Search/{query}
		/// </summary>
		/// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
		/// <param name="modes">An optional, parameter separated list of the modes to filter by</param>
		/// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station.</param>
		/// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,
		///            it is possible that the flattened result set will contain more than 50 items.</param>
		/// <param name="lines">An optional, parameter separated list of the lines to filter by</param>
		/// <param name="includeHubs">If true, returns results including HUBs.</param>
		/// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesSearchResponse> StopPoint_SearchAsync(string query, string[] modes, bool faresOnly, int maxResults, string[] lines, bool includeHubs, bool tflOperatedNationalRailStationsOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/Search/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", modes.Select(z => $"modes={System.Uri.EscapeDataString(z.ToString())}"))+"&faresOnly="+faresOnly+"&maxResults="+maxResults+"&"+string.Join("&", lines.Select(z => $"lines={System.Uri.EscapeDataString(z.ToString())}"))+"&includeHubs="+includeHubs+"&tflOperatedNationalRailStationsOnly="+tflOperatedNationalRailStationsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesSearchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the service types for a given stoppoint
		/// StopPoint_GetServiceTypes StopPoint/ServiceTypes
		/// </summary>
		/// <param name="id">The Naptan id of the stop</param>
		/// <param name="lineIds">The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty)</param>
		/// <param name="modes">The modes which the lines are relevant to (all if empty)</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesLineServiceType[]> StopPoint_GetServiceTypesAsync(string id, string[] lineIds, string[] modes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/ServiceTypes?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", lineIds.Select(z => $"lineIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", modes.Select(z => $"modes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesLineServiceType[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a StopPoint for a given sms code.
		/// StopPoint_GetBySms StopPoint/Sms/{id}
		/// </summary>
		/// <param name="id">A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.</param>
		/// <param name="output">If set to "web", a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored.</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> StopPoint_GetBySmsAsync(string id, string output, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/Sms/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&output=" + (output==null? "" : System.Uri.EscapeDataString(output));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all stop points of a given type
		/// StopPoint_GetByType StopPoint/Type/{types}
		/// </summary>
		/// <param name="types">A comma-separated list of the types to return. Max. approx. 12 types. 
		///            A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStopPoint[]> StopPoint_GetByTypeAsync(string[] types, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/Type/{types}"+string.Join("&", types.Select(z => $"types={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStopPoint[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the stop points of given type(s) with a page number
		/// StopPoint_GetByTypeWithPagination StopPoint/Type/{types}/page/{page}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStopPoint[]> StopPoint_GetByTypeWithPaginationAsync(string[] types, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/Type/{types}/page/"+page+string.Join("&", types.Select(z => $"types={System.Uri.EscapeDataString(z.ToString())}"))+"";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStopPoint[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of StopPoints corresponding to the given list of stop ids.
		/// StopPoint_Get StopPoint/{ids}
		/// </summary>
		/// <param name="ids">A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.
		///            You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
		/// <param name="includeCrowdingData">Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line}</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStopPoint[]> StopPoint_GetAsync(string[] ids, bool includeCrowdingData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/{ids}"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"?includeCrowdingData="+includeCrowdingData;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStopPoint[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
		/// StopPoint_Disruption StopPoint/{ids}/Disruption
		/// </summary>
		/// <param name="ids">A comma-seperated list of stop point ids. Max. approx. 20 ids.
		///            You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
		/// <param name="getFamily">Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false.</param>
		/// <param name="flattenResponse">Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true).</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesDisruptedPoint[]> StopPoint_DisruptionAsync(string[] ids, bool getFamily, bool includeRouteBlockedStops, bool flattenResponse, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/{ids}/Disruption"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"?getFamily="+getFamily+"&includeRouteBlockedStops="+includeRouteBlockedStops+"&flattenResponse="+flattenResponse;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesDisruptedPoint[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only)
		/// StopPoint_ArrivalDepartures StopPoint/{id}/ArrivalDepartures
		/// </summary>
		/// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
		/// <param name="lineIds">A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesArrivalDeparture[]> StopPoint_ArrivalDeparturesAsync(string id, string[] lineIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/ArrivalDepartures&"+string.Join("&", lineIds.Select(z => $"lineIds={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesArrivalDeparture[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the list of arrival predictions for the given stop point id
		/// StopPoint_Arrivals StopPoint/{id}/Arrivals
		/// </summary>
		/// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPrediction[]> StopPoint_ArrivalsAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Arrivals";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPrediction[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Stopoints that are reachable from a station/line combination.
		/// StopPoint_ReachableFrom StopPoint/{id}/CanReachOnLine/{lineId}
		/// </summary>
		/// <param name="id">The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by</param>
		/// <param name="lineId">Line id of the line to filter by (e.g. victoria)</param>
		/// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStopPoint[]> StopPoint_ReachableFromAsync(string id, string lineId, TflApiPresentationEntitiesStopPointSequenceServiceType[] serviceTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/CanReachOnLine/"+ (lineId==null? "" : System.Uri.EscapeDataString(lineId))+"&"+string.Join("&", serviceTypes.Select(z => $"serviceTypes={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStopPoint[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
		/// StopPoint_Crowding StopPoint/{id}/Crowding/{line}
		/// </summary>
		/// <param name="id">The Naptan id of the stop</param>
		/// <param name="line">A particular line e.g. victoria, circle, northern etc.</param>
		/// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStopPoint[]> StopPoint_CrowdingAsync(string id, string line, Line_ArrivalsDirection direction, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Crowding/"+ (line==null? "" : System.Uri.EscapeDataString(line))+"&direction=" + direction;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStopPoint[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the canonical direction, "inbound" or "outbound", for a given pair of stop point Ids in the direction from -&gt; to.
		/// StopPoint_Direction StopPoint/{id}/DirectionTo/{toStopPointId}
		/// </summary>
		/// <param name="id">Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
		/// <param name="toStopPointId">Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
		/// <param name="lineId">Optional line id filter e.g. victoria</param>
		/// <returns>OK</returns>
		public async Task<string> StopPoint_DirectionAsync(string id, string toStopPointId, string lineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/DirectionTo/"+ (toStopPointId==null? "" : System.Uri.EscapeDataString(toStopPointId))+"&lineId=" + (lineId==null? "" : System.Uri.EscapeDataString(lineId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the route sections for all the lines that service the given stop point ids
		/// StopPoint_Route StopPoint/{id}/Route
		/// </summary>
		/// <param name="id">A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
		/// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesStopPointRouteSection[]> StopPoint_RouteAsync(string id, TflApiPresentationEntitiesStopPointSequenceServiceType[] serviceTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Route&"+string.Join("&", serviceTypes.Select(z => $"serviceTypes={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesStopPointRouteSection[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of places corresponding to a given id and place types.
		/// StopPointGetByIdAndPlaceTypes StopPoint/{id}/placeTypes
		/// </summary>
		/// <param name="id">A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).</param>
		/// <param name="placeTypes">A comcomma-separated value representing the place types.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPlace[]> StopPointGetByIdAndPlaceTypesAsync(string id, string[] placeTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/placeTypes&"+string.Join("&", placeTypes.Select(z => $"placeTypes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPlace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get car parks corresponding to the given stop point id.
		/// StopPoint_GetCarParksById StopPoint/{stopPointId}/CarParks
		/// </summary>
		/// <param name="stopPointId">stopPointId is required to get the car parks.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPlace[]> StopPoint_GetCarParksByIdAsync(string stopPointId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/"+ (stopPointId==null? "" : System.Uri.EscapeDataString(stopPointId))+"/CarParks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPlace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of taxi ranks corresponding to the given stop point id.
		/// StopPoint_GetTaxiRanksByIds StopPoint/{stopPointId}/TaxiRanks
		/// </summary>
		/// <param name="stopPointId">stopPointId is required to get the taxi ranks.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPlace[]> StopPoint_GetTaxiRanksByIdsAsync(string stopPointId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopPoint/"+ (stopPointId==null? "" : System.Uri.EscapeDataString(stopPointId))+"/TaxiRanks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPlace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the TravelTime overlay.
		/// TravelTime_GetCompareOverlay TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}
		/// </summary>
		/// <param name="z">The zoom level.</param>
		/// <param name="pinLat">The latitude of the pin.</param>
		/// <param name="pinLon">The longitude of the pin.</param>
		/// <param name="mapCenterLat">The map center latitude.</param>
		/// <param name="mapCenterLon">The map center longitude.</param>
		/// <param name="scenarioTitle">The title of the scenario.</param>
		/// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
		/// <param name="modeId">The id of the mode.</param>
		/// <param name="width">The width of the requested overlay.</param>
		/// <param name="height">The height of the requested overlay.</param>
		/// <param name="direction">The direction of travel.</param>
		/// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> TravelTime_GetCompareOverlayAsync(int z, double pinLat, double pinLon, double mapCenterLat, double mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int width, int height, TravelTime_GetCompareOverlayDirection direction, int travelTimeInterval, string compareType, string compareValue, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TravelTimes/compareOverlay/"+z+"/mapcenter/"+mapCenterLat+"/"+mapCenterLon+"/pinlocation/"+pinLat+"/"+pinLon+"/dimensions/"+width+"/"+height+"?scenarioTitle=" + (scenarioTitle==null? "" : System.Uri.EscapeDataString(scenarioTitle))+"&timeOfDayId=" + (timeOfDayId==null? "" : System.Uri.EscapeDataString(timeOfDayId))+"&modeId=" + (modeId==null? "" : System.Uri.EscapeDataString(modeId))+"&direction=" + direction+"&travelTimeInterval="+travelTimeInterval+"&compareType=" + (compareType==null? "" : System.Uri.EscapeDataString(compareType))+"&compareValue=" + (compareValue==null? "" : System.Uri.EscapeDataString(compareValue));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the TravelTime overlay.
		/// TravelTime_GetOverlay TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}
		/// </summary>
		/// <param name="z">The zoom level.</param>
		/// <param name="pinLat">The latitude of the pin.</param>
		/// <param name="pinLon">The longitude of the pin.</param>
		/// <param name="mapCenterLat">The map center latitude.</param>
		/// <param name="mapCenterLon">The map center longitude.</param>
		/// <param name="scenarioTitle">The title of the scenario.</param>
		/// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
		/// <param name="modeId">The id of the mode.</param>
		/// <param name="width">The width of the requested overlay.</param>
		/// <param name="height">The height of the requested overlay.</param>
		/// <param name="direction">The direction of travel.</param>
		/// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> TravelTime_GetOverlayAsync(int z, double pinLat, double pinLon, double mapCenterLat, double mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int width, int height, TravelTime_GetCompareOverlayDirection direction, int travelTimeInterval, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TravelTimes/overlay/"+z+"/mapcenter/"+mapCenterLat+"/"+mapCenterLon+"/pinlocation/"+pinLat+"/"+pinLon+"/dimensions/"+width+"/"+height+"?scenarioTitle=" + (scenarioTitle==null? "" : System.Uri.EscapeDataString(scenarioTitle))+"&timeOfDayId=" + (timeOfDayId==null? "" : System.Uri.EscapeDataString(timeOfDayId))+"&modeId=" + (modeId==null? "" : System.Uri.EscapeDataString(modeId))+"&direction=" + direction+"&travelTimeInterval="+travelTimeInterval;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the predictions for a given list of vehicle Id's.
		/// Vehicle_Get Vehicle/{ids}/Arrivals
		/// </summary>
		/// <param name="ids">A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids.</param>
		/// <returns>OK</returns>
		public async Task<TflApiPresentationEntitiesPrediction[]> Vehicle_GetAsync(string[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Vehicle/{ids}/Arrivals"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TflApiPresentationEntitiesPrediction[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Journey_JourneyResultsJourneyPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LeastInterchange = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LeastTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LeastWalking = 2,
	}
	
	public enum Journey_JourneyResultsWalkingSpeed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Slow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fast = 2,
	}
	
	public enum Journey_JourneyResultsCyclePreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LeaveAtStation = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TakeOnTransport = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllTheWay = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CycleHire = 4,
	}
	
	public enum Line_ArrivalsDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inbound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		outbound = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 2,
	}
	
	public enum TravelTime_GetCompareOverlayDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		From = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		To = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
