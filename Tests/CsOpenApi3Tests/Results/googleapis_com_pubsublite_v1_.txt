//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// The throughput capacity configuration for each partition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Capacity
	{
		
		/// <summary>
		/// Publish throughput capacity per partition in MiB/s. Must be >= 4 and <= 16.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishMibPerSec")]
		public System.Nullable<System.Int32> PublishMibPerSec { get; set; }
		
		/// <summary>
		/// Subscribe throughput capacity per partition in MiB/s. Must be >= 4 and <= 32.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscribeMibPerSec")]
		public System.Nullable<System.Int32> SubscribeMibPerSec { get; set; }
	}
	
	/// <summary>
	/// Request for CommitCursor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommitCursorRequest
	{
		
		/// <summary>
		/// A cursor that describes the position of a message within a topic partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public Cursor Cursor { get; set; }
		
		/// <summary>
		/// The partition for which to update the cursor. Partitions are zero indexed, so `partition` must be in the range [0, topic.num_partitions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
	}
	
	/// <summary>
	/// A cursor that describes the position of a message within a topic partition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cursor
	{
		
		/// <summary>
		/// The offset of a message within a topic partition. Must be greater than or equal 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
	}
	
	/// <summary>
	/// Response for CommitCursor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommitCursorResponse
	{
	}
	
	/// <summary>
	/// Compute the current head cursor for a partition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComputeHeadCursorRequest
	{
		
		/// <summary>
		/// Required. The partition for which we should compute the head cursor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
	}
	
	/// <summary>
	/// Response containing the head cursor for the requested topic and partition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComputeHeadCursorResponse
	{
		
		/// <summary>
		/// A cursor that describes the position of a message within a topic partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headCursor")]
		public Cursor HeadCursor { get; set; }
	}
	
	/// <summary>
	/// Compute statistics about a range of messages in a given topic and partition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComputeMessageStatsRequest
	{
		
		/// <summary>
		/// A cursor that describes the position of a message within a topic partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endCursor")]
		public Cursor EndCursor { get; set; }
		
		/// <summary>
		/// Required. The partition for which we should compute message stats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// A cursor that describes the position of a message within a topic partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startCursor")]
		public Cursor StartCursor { get; set; }
	}
	
	/// <summary>
	/// Response containing stats for messages in the requested topic and partition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComputeMessageStatsResponse
	{
		
		/// <summary>
		/// The number of quota bytes accounted to these messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageBytes")]
		public string MessageBytes { get; set; }
		
		/// <summary>
		/// The count of messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageCount")]
		public string MessageCount { get; set; }
		
		/// <summary>
		/// The minimum event timestamp across these messages. For the purposes of this computation, if a message does not have an event time, we use the publish time. The timestamp will be unset if there are no messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumEventTime")]
		public string MinimumEventTime { get; set; }
		
		/// <summary>
		/// The minimum publish timestamp across these messages. Note that publish timestamps within a partition are not guaranteed to be non-decreasing. The timestamp will be unset if there are no messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumPublishTime")]
		public string MinimumPublishTime { get; set; }
	}
	
	/// <summary>
	/// Compute the corresponding cursor for a publish or event time in a topic partition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComputeTimeCursorRequest
	{
		
		/// <summary>
		/// Required. The partition for which we should compute the cursor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// A target publish or event time. Can be used for seeking to or retrieving the corresponding cursor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TimeTarget Target { get; set; }
	}
	
	/// <summary>
	/// A target publish or event time. Can be used for seeking to or retrieving the corresponding cursor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeTarget
	{
		
		/// <summary>
		/// Request the cursor of the first message with event time greater than or equal to `event_time`. If messages are missing an event time, the publish time is used as a fallback. As event times are user supplied, subsequent messages may have event times less than `event_time` and should be filtered by the client, if necessary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public string EventTime { get; set; }
		
		/// <summary>
		/// Request the cursor of the first message with publish time greater than or equal to `publish_time`. All messages thereafter are guaranteed to have publish times >= `publish_time`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishTime")]
		public string PublishTime { get; set; }
	}
	
	/// <summary>
	/// Response containing the cursor corresponding to a publish or event time in a topic partition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComputeTimeCursorResponse
	{
		
		/// <summary>
		/// A cursor that describes the position of a message within a topic partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public Cursor Cursor { get; set; }
	}
	
	/// <summary>
	/// The settings for a subscription's message delivery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeliveryConfig
	{
		
		/// <summary>
		/// The DeliveryRequirement for this subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryRequirement")]
		public System.Nullable<DeliveryConfigDeliveryRequirement> DeliveryRequirement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeliveryConfigDeliveryRequirement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERY_REQUIREMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVER_IMMEDIATELY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVER_AFTER_STORED = 2,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Configuration for a Pub/Sub Lite subscription that writes messages to a destination. User subscriber clients must not connect to this subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportConfig
	{
		
		/// <summary>
		/// Output only. The current state of the export, which may be different to the desired state due to errors. This field is output only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentState")]
		public System.Nullable<ExportConfigCurrentState> CurrentState { get; set; }
		
		/// <summary>
		/// Optional. The name of an optional Pub/Sub Lite topic to publish messages that can not be exported to the destination. For example, the message can not be published to the Pub/Sub service because it does not satisfy the constraints documented at https://cloud.google.com/pubsub/docs/publisher. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}. Must be within the same project and location as the subscription. The topic may be changed or removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadLetterTopic")]
		public string DeadLetterTopic { get; set; }
		
		/// <summary>
		/// The desired state of this export. Setting this to values other than `ACTIVE` and `PAUSED` will result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredState")]
		public ExportConfigCurrentState DesiredState { get; set; }
		
		/// <summary>
		/// Configuration for exporting to a Pub/Sub topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubConfig")]
		public PubSubConfig PubsubConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExportConfigCurrentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSION_DENIED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FOUND = 4,
	}
	
	/// <summary>
	/// Configuration for exporting to a Pub/Sub topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PubSubConfig
	{
		
		/// <summary>
		/// The name of the Pub/Sub topic. Structured like: projects/{project_number}/topics/{topic_id}. The topic may be changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response for ListPartitionCursors
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPartitionCursorsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The partition cursors from this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionCursors")]
		public PartitionCursor[] PartitionCursors { get; set; }
	}
	
	/// <summary>
	/// A pair of a Cursor and the partition it is for.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartitionCursor
	{
		
		/// <summary>
		/// A cursor that describes the position of a message within a topic partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public Cursor Cursor { get; set; }
		
		/// <summary>
		/// The partition this is for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
	}
	
	/// <summary>
	/// Response for ListReservationTopics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReservationTopicsResponse
	{
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page of results. If this field is omitted, there are no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The names of topics attached to the reservation. The order of the topics is unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public string[] Topics { get; set; }
	}
	
	/// <summary>
	/// Response for ListReservations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReservationsResponse
	{
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page of results. If this field is omitted, there are no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of reservation in the requested parent. The order of the reservations is unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations")]
		public Reservation[] Reservations { get; set; }
	}
	
	/// <summary>
	/// Metadata about a reservation resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Reservation
	{
		
		/// <summary>
		/// The name of the reservation. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed messages. Any topics which are declared as using capacity from a Reservation will consume resources from this reservation instead of being charged individually.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="throughputCapacity")]
		public string ThroughputCapacity { get; set; }
	}
	
	/// <summary>
	/// Response for ListSubscriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSubscriptionsResponse
	{
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page of results. If this field is omitted, there are no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of subscriptions in the requested parent. The order of the subscriptions is unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public Subscription[] Subscriptions { get; set; }
	}
	
	/// <summary>
	/// Metadata about a subscription resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Subscription
	{
		
		/// <summary>
		/// The settings for a subscription's message delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryConfig")]
		public DeliveryConfig DeliveryConfig { get; set; }
		
		/// <summary>
		/// Configuration for a Pub/Sub Lite subscription that writes messages to a destination. User subscriber clients must not connect to this subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportConfig")]
		public ExportConfig ExportConfig { get; set; }
		
		/// <summary>
		/// The name of the subscription. Structured like: projects/{project_number}/locations/{location}/subscriptions/{subscription_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the topic this subscription is attached to. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	/// <summary>
	/// Response for ListTopicSubscriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTopicSubscriptionsResponse
	{
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page of results. If this field is omitted, there are no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The names of subscriptions attached to the topic. The order of the subscriptions is unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public string[] Subscriptions { get; set; }
	}
	
	/// <summary>
	/// Response for ListTopics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTopicsResponse
	{
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page of results. If this field is omitted, there are no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of topic in the requested parent. The order of the topics is unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public Topic[] Topics { get; set; }
	}
	
	/// <summary>
	/// Metadata about a topic resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Topic
	{
		
		/// <summary>
		/// The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The settings for a topic's partitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionConfig")]
		public PartitionConfig PartitionConfig { get; set; }
		
		/// <summary>
		/// The settings for this topic's Reservation usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservationConfig")]
		public ReservationConfig ReservationConfig { get; set; }
		
		/// <summary>
		/// The settings for a topic's message retention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionConfig")]
		public RetentionConfig RetentionConfig { get; set; }
	}
	
	/// <summary>
	/// The settings for a topic's partitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartitionConfig
	{
		
		/// <summary>
		/// The throughput capacity configuration for each partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public Capacity Capacity { get; set; }
		
		/// <summary>
		/// The number of partitions in the topic. Must be at least 1. Once a topic has been created the number of partitions can be increased but not decreased. Message ordering is not guaranteed across a topic resize. For more information see https://cloud.google.com/pubsub/lite/docs/topics#scaling_capacity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// DEPRECATED: Use capacity instead which can express a superset of configurations. Every partition in the topic is allocated throughput equivalent to `scale` times the standard partition throughput (4 MiB/s). This is also reflected in the cost of this topic; a topic with `scale` of 2 and count of 10 is charged for 20 partitions. This value must be in the range [1,4].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public System.Nullable<System.Int32> Scale { get; set; }
	}
	
	/// <summary>
	/// The settings for this topic's Reservation usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReservationConfig
	{
		
		/// <summary>
		/// The Reservation to use for this topic's throughput capacity. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="throughputReservation")]
		public string ThroughputReservation { get; set; }
	}
	
	/// <summary>
	/// The settings for a topic's message retention.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetentionConfig
	{
		
		/// <summary>
		/// The provisioned storage, in bytes, per partition. If the number of bytes stored in any of the topic's partitions grows beyond this value, older messages will be dropped to make room for newer ones, regardless of the value of `period`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perPartitionBytes")]
		public string PerPartitionBytes { get; set; }
		
		/// <summary>
		/// How long a published message is retained. If unset, messages will be retained as long as the bytes retained for each partition is below `per_partition_bytes`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		public string Period { get; set; }
	}
	
	/// <summary>
	/// Metadata for long running operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The time the operation finished running. Not set if the operation has not completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Resource path for the target of the operation. For example, targets of seeks are subscription resources, structured like: projects/{project_number}/locations/{location}/subscriptions/{subscription_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Request for SeekSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SeekSubscriptionRequest
	{
		
		/// <summary>
		/// Seek to a named position with respect to the message backlog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedTarget")]
		public System.Nullable<SeekSubscriptionRequestNamedTarget> NamedTarget { get; set; }
		
		/// <summary>
		/// A target publish or event time. Can be used for seeking to or retrieving the corresponding cursor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeTarget")]
		public TimeTarget TimeTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SeekSubscriptionRequestNamedTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAMED_TARGET_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAD = 2,
	}
	
	/// <summary>
	/// Response for SeekSubscription long running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SeekSubscriptionResponse
	{
	}
	
	/// <summary>
	/// Response for GetTopicPartitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TopicPartitions
	{
		
		/// <summary>
		/// The number of partitions in the topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionCount")]
		public string PartitionCount { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes the specified topic.
		/// Pubsublite_admin_projects_locations_topics_delete v1/admin/{name}
		/// </summary>
		/// <param name="name">Required. The name of the topic to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Pubsublite_admin_projects_locations_topics_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the topic configuration.
		/// Pubsublite_admin_projects_locations_topics_get v1/admin/{name}
		/// </summary>
		/// <param name="name">Required. The name of the topic whose configuration to return.</param>
		/// <returns>Successful response</returns>
		public async Task<Topic> Pubsublite_admin_projects_locations_topics_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Topic>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates properties of the specified topic.
		/// Pubsublite_admin_projects_locations_topics_patch v1/admin/{name}
		/// </summary>
		/// <param name="name">The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}</param>
		/// <param name="updateMask">Required. A mask specifying the topic fields to change.</param>
		/// <returns>Successful response</returns>
		public async Task<Topic> Pubsublite_admin_projects_locations_topics_patchAsync(string name, string updateMask, Topic requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Topic>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Pubsublite_admin_projects_locations_operations_list v1/admin/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Pubsublite_admin_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the partition information for the requested topic.
		/// Pubsublite_admin_projects_locations_topics_getPartitions v1/admin/{name}/partitions
		/// </summary>
		/// <param name="name">Required. The topic whose partition information to return.</param>
		/// <returns>Successful response</returns>
		public async Task<TopicPartitions> Pubsublite_admin_projects_locations_topics_getPartitionsAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/partitions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TopicPartitions>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the subscriptions attached to the specified topic.
		/// Pubsublite_admin_projects_locations_topics_subscriptions_list v1/admin/{name}/subscriptions
		/// </summary>
		/// <param name="name">Required. The name of the topic whose subscriptions to list.</param>
		/// <param name="pageSize">The maximum number of subscriptions to return. The service may return fewer than this value. If unset or zero, all subscriptions for the given topic will be returned.</param>
		/// <param name="pageToken">A page token, received from a previous `ListTopicSubscriptions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTopicSubscriptions` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTopicSubscriptionsResponse> Pubsublite_admin_projects_locations_topics_subscriptions_listAsync(string name, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/subscriptions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTopicSubscriptionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the topics attached to the specified reservation.
		/// Pubsublite_admin_projects_locations_reservations_topics_list v1/admin/{name}/topics
		/// </summary>
		/// <param name="name">Required. The name of the reservation whose topics to list. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}</param>
		/// <param name="pageSize">The maximum number of topics to return. The service may return fewer than this value. If unset or zero, all topics for the given reservation will be returned.</param>
		/// <param name="pageToken">A page token, received from a previous `ListReservationTopics` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListReservationTopics` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReservationTopicsResponse> Pubsublite_admin_projects_locations_reservations_topics_listAsync(string name, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/topics&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListReservationTopicsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Pubsublite_admin_projects_locations_operations_cancel v1/admin/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Pubsublite_admin_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Performs an out-of-band seek for a subscription to a specified target, which may be timestamps or named positions within the message backlog. Seek translates these targets to cursors for each partition and orchestrates subscribers to start consuming messages from these seek cursors. If an operation is returned, the seek has been registered and subscribers will eventually receive messages from the seek cursors (i.e. eventual consistency), as long as they are using a minimum supported client library version and not a system that tracks cursors independently of Pub/Sub Lite (e.g. Apache Beam, Dataflow, Spark). The seek operation will fail for unsupported clients. If clients would like to know when subscribers react to the seek (or not), they can poll the operation. The seek operation will succeed and complete once subscribers are ready to receive messages from the seek cursors for all partitions of the topic. This means that the seek operation will not complete until all subscribers come online. If the previous seek operation has not yet completed, it will be aborted and the new invocation of seek will supersede it.
		/// Pubsublite_admin_projects_locations_subscriptions_seek v1/admin/{name}:seek
		/// </summary>
		/// <param name="name">Required. The name of the subscription to seek.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Pubsublite_admin_projects_locations_subscriptions_seekAsync(string name, SeekSubscriptionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":seek";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the list of reservations for the given project.
		/// Pubsublite_admin_projects_locations_reservations_list v1/admin/{parent}/reservations
		/// </summary>
		/// <param name="parent">Required. The parent whose reservations are to be listed. Structured like `projects/{project_number}/locations/{location}`.</param>
		/// <param name="pageSize">The maximum number of reservations to return. The service may return fewer than this value. If unset or zero, all reservations for the parent will be returned.</param>
		/// <param name="pageToken">A page token, received from a previous `ListReservations` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListReservations` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReservationsResponse> Pubsublite_admin_projects_locations_reservations_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reservations&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListReservationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new reservation.
		/// Pubsublite_admin_projects_locations_reservations_create v1/admin/{parent}/reservations
		/// </summary>
		/// <param name="parent">Required. The parent location in which to create the reservation. Structured like `projects/{project_number}/locations/{location}`.</param>
		/// <param name="reservationId">Required. The ID to use for the reservation, which will become the final component of the reservation's name. This value is structured like: `my-reservation-name`.</param>
		/// <returns>Successful response</returns>
		public async Task<Reservation> Pubsublite_admin_projects_locations_reservations_createAsync(string parent, string reservationId, Reservation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reservations&reservationId=" + (reservationId==null? "" : System.Uri.EscapeDataString(reservationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Reservation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the list of subscriptions for the given project.
		/// Pubsublite_admin_projects_locations_subscriptions_list v1/admin/{parent}/subscriptions
		/// </summary>
		/// <param name="parent">Required. The parent whose subscriptions are to be listed. Structured like `projects/{project_number}/locations/{location}`.</param>
		/// <param name="pageSize">The maximum number of subscriptions to return. The service may return fewer than this value. If unset or zero, all subscriptions for the parent will be returned.</param>
		/// <param name="pageToken">A page token, received from a previous `ListSubscriptions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListSubscriptions` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSubscriptionsResponse> Pubsublite_admin_projects_locations_subscriptions_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/subscriptions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSubscriptionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new subscription.
		/// Pubsublite_admin_projects_locations_subscriptions_create v1/admin/{parent}/subscriptions
		/// </summary>
		/// <param name="parent">Required. The parent location in which to create the subscription. Structured like `projects/{project_number}/locations/{location}`.</param>
		/// <param name="skipBacklog">If true, the newly created subscription will only receive messages published after the subscription was created. Otherwise, the entire message backlog will be received on the subscription. Defaults to false.</param>
		/// <param name="subscriptionId">Required. The ID to use for the subscription, which will become the final component of the subscription's name. This value is structured like: `my-sub-name`.</param>
		/// <returns>Successful response</returns>
		public async Task<Subscription> Pubsublite_admin_projects_locations_subscriptions_createAsync(string parent, bool skipBacklog, string subscriptionId, Subscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/subscriptions&skipBacklog="+skipBacklog+"&subscriptionId=" + (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Subscription>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the list of topics for the given project.
		/// Pubsublite_admin_projects_locations_topics_list v1/admin/{parent}/topics
		/// </summary>
		/// <param name="parent">Required. The parent whose topics are to be listed. Structured like `projects/{project_number}/locations/{location}`.</param>
		/// <param name="pageSize">The maximum number of topics to return. The service may return fewer than this value. If unset or zero, all topics for the parent will be returned.</param>
		/// <param name="pageToken">A page token, received from a previous `ListTopics` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTopics` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTopicsResponse> Pubsublite_admin_projects_locations_topics_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/topics&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTopicsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new topic.
		/// Pubsublite_admin_projects_locations_topics_create v1/admin/{parent}/topics
		/// </summary>
		/// <param name="parent">Required. The parent location in which to create the topic. Structured like `projects/{project_number}/locations/{location}`.</param>
		/// <param name="topicId">Required. The ID to use for the topic, which will become the final component of the topic's name. This value is structured like: `my-topic-name`.</param>
		/// <returns>Successful response</returns>
		public async Task<Topic> Pubsublite_admin_projects_locations_topics_createAsync(string parent, string topicId, Topic requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/admin/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/topics&topicId=" + (topicId==null? "" : System.Uri.EscapeDataString(topicId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Topic>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns all committed cursor information for a subscription.
		/// Pubsublite_cursor_projects_locations_subscriptions_cursors_list v1/cursor/{parent}/cursors
		/// </summary>
		/// <param name="parent">Required. The subscription for which to retrieve cursors. Structured like `projects/{project_number}/locations/{location}/subscriptions/{subscription_id}`.</param>
		/// <param name="pageSize">The maximum number of cursors to return. The service may return fewer than this value. If unset or zero, all cursors for the parent will be returned.</param>
		/// <param name="pageToken">A page token, received from a previous `ListPartitionCursors` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListPartitionCursors` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPartitionCursorsResponse> Pubsublite_cursor_projects_locations_subscriptions_cursors_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cursor/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/cursors&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListPartitionCursorsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the committed cursor.
		/// Pubsublite_cursor_projects_locations_subscriptions_commitCursor v1/cursor/{subscription}:commitCursor
		/// </summary>
		/// <param name="subscription">The subscription for which to update the cursor.</param>
		/// <returns>Successful response</returns>
		public async Task<CommitCursorResponse> Pubsublite_cursor_projects_locations_subscriptions_commitCursorAsync(string subscription, CommitCursorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cursor/"+ (subscription==null? "" : System.Uri.EscapeDataString(subscription))+":commitCursor";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommitCursorResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Compute the head cursor for the partition. The head cursor's offset is guaranteed to be less than or equal to all messages which have not yet been acknowledged as published, and greater than the offset of any message whose publish has already been acknowledged. It is zero if there have never been messages in the partition.
		/// Pubsublite_topicStats_projects_locations_topics_computeHeadCursor v1/topicStats/{topic}:computeHeadCursor
		/// </summary>
		/// <param name="topic">Required. The topic for which we should compute the head cursor.</param>
		/// <returns>Successful response</returns>
		public async Task<ComputeHeadCursorResponse> Pubsublite_topicStats_projects_locations_topics_computeHeadCursorAsync(string topic, ComputeHeadCursorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/topicStats/"+ (topic==null? "" : System.Uri.EscapeDataString(topic))+":computeHeadCursor";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ComputeHeadCursorResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Compute statistics about a range of messages in a given topic and partition.
		/// Pubsublite_topicStats_projects_locations_topics_computeMessageStats v1/topicStats/{topic}:computeMessageStats
		/// </summary>
		/// <param name="topic">Required. The topic for which we should compute message stats.</param>
		/// <returns>Successful response</returns>
		public async Task<ComputeMessageStatsResponse> Pubsublite_topicStats_projects_locations_topics_computeMessageStatsAsync(string topic, ComputeMessageStatsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/topicStats/"+ (topic==null? "" : System.Uri.EscapeDataString(topic))+":computeMessageStats";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ComputeMessageStatsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Compute the corresponding cursor for a publish or event time in a topic partition.
		/// Pubsublite_topicStats_projects_locations_topics_computeTimeCursor v1/topicStats/{topic}:computeTimeCursor
		/// </summary>
		/// <param name="topic">Required. The topic for which we should compute the cursor.</param>
		/// <returns>Successful response</returns>
		public async Task<ComputeTimeCursorResponse> Pubsublite_topicStats_projects_locations_topics_computeTimeCursorAsync(string topic, ComputeTimeCursorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/topicStats/"+ (topic==null? "" : System.Uri.EscapeDataString(topic))+":computeTimeCursor";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ComputeTimeCursorResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
