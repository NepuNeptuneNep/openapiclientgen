//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Describe a filter on a product's column.
	///The key is the column identifier of your catalog or a custom column.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonAdditionalProductFilters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonAdditionalProductFiltersValue
	{
		
		/// <summary>
		/// Indicate the operator you want to make on the columnId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
		
		/// <summary>
		/// Must be null if the operator is "IsNull" or "IsNotNull".
		///Can contains multiple value in case of "InList" operator. Otherwise a single value is expected.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BeezUPCommonApiSettingsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		warning = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonCatalogCategoryFilter
	{
		
		/// <summary>
		/// Indicates on which catalog category path you want to make the filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryPath")]
		public string[] CategoryPath { get; set; }
	}
	
	/// <summary>
	/// The basic info related to a channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonChannelBasicInfo
	{
		
		/// <summary>
		/// The channel identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
		/// Required
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelImageUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string ChannelImageUrl { get; set; }
		
		/// <summary>
		/// The channel name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonChannelCategoryFilter
	{
		
		/// <summary>
		/// Indicates on which channel category path you want to make the filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryPath")]
		public string[] CategoryPath { get; set; }
	}
	
	/// <summary>
	/// Data type of the column, will be used for parsing and for consolidation proces
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BeezUPCommonColumnDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Url = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Text = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decimal = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DateTime = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Int = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SpecialInt = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InStock = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImageUrl = 9,
	}
	
	/// <summary>
	/// Importance of the column
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BeezUPCommonColumnImportance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recommended = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Optional = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonErrorResponseMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BeezUPCommonUserErrorMessage[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonUserErrorMessage
	{
		
		/// <summary>
		/// a dictionary string/object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public BeezUPCommonUserErrorMessageArguments[] BeezUPCommonUserErrorMessageArguments { get; set; }
		
		/// <summary>
		/// the error code. The error code can be a pattern containing the argument's name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// If the error is translated, the culture name will be indicated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cultureName")]
		public string CultureName { get; set; }
		
		/// <summary>
		/// The documentation related to this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docUrl")]
		public string DocUrl { get; set; }
		
		/// <summary>
		/// The error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class BeezUPCommonUserErrorMessageArguments
	{
		
		/// <summary>
		/// The key of the parameter
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the parameter. Depending to the type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonErrorSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorArguments")]
		public System.Collections.Generic.Dictionary<string, string> ErrorArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorGuid")]
		public string ErrorGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exceptionDetail")]
		public BeezUPCommonExceptionDetail ExceptionDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyValue")]
		public string PropertyValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="technicalErrorMessage")]
		public string TechnicalErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utcDate")]
		public System.Nullable<System.DateTimeOffset> UtcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonExceptionDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="helpLink")]
		public string HelpLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackTrace")]
		public string StackTrace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Indicate the http method to use on this link
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BeezUPCommonHttpMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAD = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonInfoSummaries
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BeezUPCommonErrorSummary[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="informations")]
		public BeezUPCommonInfoSummary[] Informations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successes")]
		public BeezUPCommonSuccessSummary[] Successes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public BeezUPCommonWarningSummary[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonInfoSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="informationArguments")]
		public System.Collections.Generic.Dictionary<string, string> InformationArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="informationCode")]
		public string InformationCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="informationMessage")]
		public string InformationMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyValue")]
		public string PropertyValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonSuccessSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyValue")]
		public string PropertyValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successArguments")]
		public System.Collections.Generic.Dictionary<string, string> SuccessArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successCode")]
		public string SuccessCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successMessage")]
		public string SuccessMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonWarningSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="technicalErrorMessage")]
		public string TechnicalErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warningArguments")]
		public System.Collections.Generic.Dictionary<string, string> WarningArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warningCode")]
		public string WarningCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warningMessage")]
		public string WarningMessage { get; set; }
	}
	
	/// <summary>
	/// Describe the way you have to follow to get access to the LOV
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonLOVLink3
	{
		
		/// <summary>
		/// Indicate the uri to the list of value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Indicate the http method to use on this link
		/// </summary>
		[System.ComponentModel.DefaultValue(BeezUPCommonHttpMethod.GET)]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public BeezUPCommonHttpMethod Method { get; set; } = BeezUPCommonHttpMethod.GET;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonLink3
	{
		
		/// <summary>
		/// indicates whether all optionals params have been provided
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allOptionalParamsProvided")]
		public System.Nullable<System.Boolean> AllOptionalParamsProvided { get; set; }
		
		/// <summary>
		/// indicates whether all required params have been provided
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allRequiredParamsProvided")]
		public System.Nullable<System.Boolean> AllRequiredParamsProvided { get; set; }
		
		/// <summary>
		/// The description of the link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The documentation related to this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docUrl")]
		public string DocUrl { get; set; }
		
		/// <summary>
		/// Indicate the relative uri for this link
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public BeezUPCommonInfoSummaries Info { get; set; }
		
		/// <summary>
		/// The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Indicate the http method to use on this link
		/// </summary>
		[System.ComponentModel.DefaultValue(BeezUPCommonHttpMethod.GET)]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public BeezUPCommonHttpMethod Method { get; set; } = BeezUPCommonHttpMethod.GET;
		
		/// <summary>
		/// The operationId to call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, BeezUPCommonLinkParameter3> Parameters { get; set; }
		
		/// <summary>
		/// indicates whether the href is templated or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlTemplated")]
		public System.Nullable<System.Boolean> UrlTemplated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonLinkParameter3
	{
		
		/// <summary>
		/// description of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// * path: if the parameter must be pass in the path uri
		///* header: if the parameter must be passed in http header
		///* query: if the parameter must be passed in querystring
		///* body: if the paramter must be passed in the body
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="in")]
		public BeezUPCommonLinkParameter3In In { get; set; }
		
		/// <summary>
		/// The label corresponding to the link parameter. This label is automatically translated based on the Accept-Language http header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lovLink")]
		public BeezUPCommonLOVLink3 LovLink { get; set; }
		
		/// <summary>
		/// If true, you MUST indicate a value from the list of values otherwise it's a freetext
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lovRequired")]
		public System.Nullable<System.Boolean> LovRequired { get; set; }
		
		/// <summary>
		/// If the parameter is an object with flexible properties (additionProperties/dictionary), we will describe the properties of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, BeezUPCommonLinkParameterProperty3> Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// schema of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		/// <summary>
		/// The value type of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BeezUPCommonLinkParameter3Type> Type { get; set; }
		
		/// <summary>
		/// The value of the parameter. It can be an integer a string or an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BeezUPCommonLinkParameter3In
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		path = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		header = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		query = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		body = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonLinkParameterProperty3
	{
		
		/// <summary>
		/// description of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The label corresponding to the link parameter property. This label is automatically translated based on the Accept-Language http header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lovLink")]
		public BeezUPCommonLOVLink3 LovLink { get; set; }
		
		/// <summary>
		/// If true, you MUST use indicate a value from the list of values otherwise it's a freetext
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lovRequired")]
		public System.Nullable<System.Boolean> LovRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// schema of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		/// <summary>
		/// The value type of the parameter
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(BeezUPCommonLinkParameterProperty3Type._string)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public BeezUPCommonLinkParameterProperty3Type Type { get; set; } = BeezUPCommonLinkParameterProperty3Type._string;
		
		/// <summary>
		/// The value of the parameter. It can be an integer a string or an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BeezUPCommonLinkParameterProperty3Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		boolean = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="object")]
		_object = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		array = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date-time")]
		dateMinustime = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BeezUPCommonLinkParameter3Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		boolean = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="object")]
		_object = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		array = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date-time")]
		dateMinustime = 7,
	}
	
	/// <summary>
	/// This object is used by LOV apis
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonListOfValueItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="codeIdentifier")]
		public string CodeIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intIdentifier")]
		public int IntIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translationText")]
		public string TranslationText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonPaginationResult
	{
		
		/// <summary>
		/// The entry count currently returned
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entryCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int EntryCount { get; set; }
		
		/// <summary>
		/// The navigation links 'first', 'last', 'next', 'previous'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public BeezUPCommonPaginationResultLinks Links { get; set; }
		
		/// <summary>
		/// The page count
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int PageCount { get; set; }
		
		/// <summary>
		/// The total entry count
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalEntryCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int TotalEntryCount { get; set; }
	}
	
	/// <summary>
	/// The navigation links 'first', 'last', 'next', 'previous'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonPaginationResultLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first")]
		public BeezUPCommonLink3 First { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last")]
		public BeezUPCommonLink3 Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public BeezUPCommonLink3 Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public BeezUPCommonLink3 Previous { get; set; }
	}
	
	/// <summary>
	/// * path: if the parameter must be pass in the path uri
	///* header: if the parameter must be passed in http header
	///* query: if the parameter must be passed in querystring
	///* body: if the paramter must be passed in the body
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BeezUPCommonParameterIn
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		path = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		header = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		query = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		body = 3,
	}
	
	/// <summary>
	/// The value type of the parameter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BeezUPCommonParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		boolean = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="object")]
		_object = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		array = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date-time")]
		dateMinustime = 7,
	}
	
	/// <summary>
	/// The basic information related to a product
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPCommonProductBasicInfo
	{
		
		/// <summary>
		/// Indicates if the product still exists in your catalog
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productExists")]
		public bool ProductExists { get; set; }
		
		/// <summary>
		/// The product identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The product image Url
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productImageUrl")]
		public string ProductImageUrl { get; set; }
		
		/// <summary>
		/// The product SKU
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productSku")]
		public string ProductSku { get; set; }
		
		/// <summary>
		/// The product tile
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productTitle")]
		public string ProductTitle { get; set; }
	}
	
	/// <summary>
	/// Describe the way you have to follow to get access to the LOV
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LOVLink3
	{
		
		/// <summary>
		/// Indicate the uri to the list of value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Indicate the http method to use on this link
		/// </summary>
		[System.ComponentModel.DefaultValue(BeezUPCommonHttpMethod.GET)]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public BeezUPCommonHttpMethod Method { get; set; } = BeezUPCommonHttpMethod.GET;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountInfo
	{
		
		/// <summary>
		/// The email
		/// Pattern: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialOwnerEmail")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$")]
		public string CommercialOwnerEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyInfo")]
		public CompanyInfo CompanyInfo { get; set; }
		
		/// <summary>
		/// The email
		/// Required
		/// Pattern: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public BeezUPCommonInfoSummaries Info { get; set; }
		
		/// <summary>
		/// The different actions you can make on this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public AccountInfoLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalInfo")]
		public PersonalInfo PersonalInfo { get; set; }
		
		/// <summary>
		/// Indicate the url of your picture profil
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilePictureUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string ProfilePictureUrl { get; set; }
		
		/// <summary>
		/// The account status
		///* Active:  When the account is active
		///* SystemBlocked:  When all stores on the account are blocked by the system
		///* UserBlocked: When all stores on the account are blocked on GO not on the system
		///* NotActivated: When the email is not verified
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AccountInfoStatus Status { get; set; }
		
		/// <summary>
		/// The user identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyInfo
	{
		
		/// <summary>
		/// Your company accounting emails
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountingEmails")]
		public string[] AccountingEmails { get; set; }
		
		/// <summary>
		/// Your address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Your address city
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Your company name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company")]
		public string Company { get; set; }
		
		/// <summary>
		/// The country iso code alpha 3 <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3">(ISO 3166-1_alpha-3)</a>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryIsoCodeAlpha3")]
		public string CountryIsoCodeAlpha3 { get; set; }
		
		/// <summary>
		/// Your address postal code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Your company VATNumber. Used for french company. This number is checked with official web service before being saved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vatNumber")]
		public string VatNumber { get; set; }
	}
	
	/// <summary>
	/// The different actions you can make on this account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountInfoLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="activateUserAccount")]
		public LinksactivateUserAccountLink ActivateUserAccount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changeEmail")]
		public LinkschangeEmailLink ChangeEmail { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changePassword")]
		public LinkschangePasswordLink ChangePassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="getCreditCardInfo")]
		public LinksgetCreditCardInfoLink GetCreditCardInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="getProfilePictureInfo")]
		public LinksgetProfilePictureInfoLink GetProfilePictureInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="saveCompanyInfo")]
		public LinkssaveCompanyInfoLink SaveCompanyInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="saveCreditCardInfo")]
		public LinkssaveCreditCardInfoLink SaveCreditCardInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="savePersonalInfo")]
		public LinkssavePersonalInfoLink SavePersonalInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="saveProfilePictureInfo")]
		public LinkssaveProfilePictureInfoLink SaveProfilePictureInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksgetUserAccountInfoLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalInfo
	{
		
		/// <summary>
		/// The time zone identifier based on the list of values /v2/user/lov/BeezUPTimeZone
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPTimeZoneId")]
		public int BeezUPTimeZoneId { get; set; }
		
		/// <summary>
		/// Your first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Your last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Your phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Your role in your company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whatIDo")]
		public string WhatIDo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemBlocked = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserBlocked = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotActivated = 3,
	}
	
	/// <summary>
	/// The publication history for an account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountPublications
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public AccountPublicationsLinks Links { get; set; }
		
		/// <summary>
		/// The recent publications for the requested account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publications")]
		public PublicationReporting[] Publications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountPublicationsLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetPublicationsLink Self { get; set; }
	}
	
	/// <summary>
	/// Model for a publication reporting, can have multiple feeds
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicationReporting
	{
		
		/// <summary>
		/// The feeds that were published
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feeds")]
		public PublicationFeedReporting[] Feeds { get; set; }
		
		/// <summary>
		/// The Publication Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicationType")]
		public PublicationReportingPublicationType PublicationType { get; set; }
	}
	
	/// <summary>
	/// Publication feed reporting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicationFeedReporting
	{
		
		/// <summary>
		/// Indicates if the publication is completed or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		/// <summary>
		/// The feed publication end time (UTC timezone)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endUtcDate")]
		public System.Nullable<System.DateTimeOffset> EndUtcDate { get; set; }
		
		/// <summary>
		/// The error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The product count downloaded from BeezUP Export
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportedProducts")]
		public System.Nullable<System.Int32> ExportedProducts { get; set; }
		
		/// <summary>
		/// The item count (products or offers) the marketplace flagged as failed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedItems")]
		public System.Nullable<System.Int32> FailedItems { get; set; }
		
		/// <summary>
		/// The Feed Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feedType")]
		public PublicationFeedReportingFeedType FeedType { get; set; }
		
		/// <summary>
		/// The error message if the Html Report generation failed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlReportGenerationErrorMessage")]
		public string HtmlReportGenerationErrorMessage { get; set; }
		
		/// <summary>
		/// The Url for the Html Report generated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlReportUrl")]
		public string HtmlReportUrl { get; set; }
		
		/// <summary>
		/// The processing status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="processingStatus")]
		public string ProcessingStatus { get; set; }
		
		/// <summary>
		/// The item count (products or offers) the marketplace flagged as successful
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedItems")]
		public System.Nullable<System.Int32> PublishedItems { get; set; }
		
		/// <summary>
		/// The item count (products or offers) the marketplace flagged as successful with warnings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedItemsWithWarning")]
		public System.Nullable<System.Int32> PublishedItemsWithWarning { get; set; }
		
		/// <summary>
		/// The feed publication start time (UTC timezone)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startUtcDate")]
		public System.DateTimeOffset StartUtcDate { get; set; }
		
		/// <summary>
		/// The item count (products or offers) sent to the marketplace
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transmittedItems")]
		public System.Nullable<System.Int32> TransmittedItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PublicationFeedReportingFeedType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Products = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inventory = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pricing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Images = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Relationships = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unpublish = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Offers = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PublicationReportingPublicationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublishProducts = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublishOffers = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unpublish = 2,
	}
	
	/// <summary>
	/// The account status
	///* Active:  When the account is active
	///* SystemBlocked:  When all stores on the account are blocked by the system
	///* UserBlocked: When all stores on the account are blocked on GO not on the system
	///* NotActivated: When the email is not verified
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemBlocked = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserBlocked = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotActivated = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountSynchronization
	{
		
		/// <summary>
		/// The marketplace account identifier in BeezUP. This account identifier is based on your api settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public int AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completedHarvestSynchroUtcDate")]
		public System.Nullable<System.DateTimeOffset> CompletedHarvestSynchroUtcDate { get; set; }
		
		/// <summary>
		/// In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceBusinessCode")]
		public string MarketplaceBusinessCode { get; set; }
		
		/// <summary>
		/// The technical code of the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceTechnicalCode")]
		public string MarketplaceTechnicalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountSynchronizationList
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountSynchronizations")]
		public AccountSynchronization[] AccountSynchronizations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivateSubscriptionRequest
	{
		
		/// <summary>
		/// If set, the date must be in the past the subscription will recover existing orders using the begin period order last modification date. If not set then you will receive new/updated orders in real-time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoverBeginPeriodOrderLastModificationUtcDate")]
		public System.Nullable<System.DateTimeOffset> RecoverBeginPeriodOrderLastModificationUtcDate { get; set; }
		
		/// <summary>
		/// If end period set, first the date must be in the past, the subscription will recover existing orders using the begin and the end period order last modification date. 
		///If end period is not set and the begin period is set, then you will recover existing orders from the past using the begin period last modification date and after than you will continue to receive new/updated orders in real-time.
		///If begin/end period are not set then you will receive new/updated orders in real-time.
		///REMARK: The begin period is required if the end period is fulfilled.
		///REMARK: If the end period is order last modification date is indicated then once we have push all orders to your target url the subscription will be desactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoverEndPeriodOrderLastModificationUtcDate")]
		public System.Nullable<System.DateTimeOffset> RecoverEndPeriodOrderLastModificationUtcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddChannelCatalogRequest
	{
		
		/// <summary>
		/// The channel identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The store identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
	}
	
	/// <summary>
	/// Describes a filter on a product's column.
	///The key is the column identifier of your catalog or a custom column.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdditionalAnalyticsProductColumnFilters
	{
	}
	
	/// <summary>
	/// The Analytics API operation index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyticsIndex
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public AnalyticsIndexLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lovLinks")]
		public AnalyticsIndexLovLinks LovLinks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stores")]
		public AnalyticsStoreIndex[] Stores { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyticsIndexLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksAnalyticsIndexLink Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackingStatus")]
		public LinksGetTrackingStatusLink TrackingStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyticsIndexLovLinks
	{
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analyticsNumericalProductColumnFilterOperatorNameLov")]
		public BeezUPCommonLOVLink3 AnalyticsNumericalProductColumnFilterOperatorNameLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analyticsProductColumnFilterOperatorNameLov")]
		public BeezUPCommonLOVLink3 AnalyticsProductColumnFilterOperatorNameLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analyticsStringProductColumnFilterOperatorNameLov")]
		public BeezUPCommonLOVLink3 AnalyticsStringProductColumnFilterOperatorNameLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceIndicatorFilterOperatorNameLov")]
		public BeezUPCommonLOVLink3 PerformanceIndicatorFilterOperatorNameLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceIndicatorFormulaOperatorNameLov")]
		public BeezUPCommonLOVLink3 PerformanceIndicatorFormulaOperatorNameLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceIndicatorFormulaParameterTypeLov")]
		public BeezUPCommonLOVLink3 PerformanceIndicatorFormulaParameterTypeLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceIndicatorTypeForReportsByCategoryLov")]
		public BeezUPCommonLOVLink3 PerformanceIndicatorTypeForReportsByCategoryLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceIndicatorTypeForReportsByChannelLov")]
		public BeezUPCommonLOVLink3 PerformanceIndicatorTypeForReportsByChannelLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceIndicatorTypeForReportsByProductLov")]
		public BeezUPCommonLOVLink3 PerformanceIndicatorTypeForReportsByProductLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceIndicatorTypeLov")]
		public BeezUPCommonLOVLink3 PerformanceIndicatorTypeLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeOptimisationRuleExecutionStatusLov")]
		public BeezUPCommonLOVLink3 StoreOptimisationRuleExecutionStatusLov { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyticsStoreIndex
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public AnalyticsStoreIndexLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyticsStoreIndexLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="optimise")]
		public LinksOptimiseLink Optimise { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optimiseAll")]
		public LinksOptimiseAllLink OptimiseAll { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optimiseByCategory")]
		public LinksOptimiseByCategoryLink OptimiseByCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optimiseByChannel")]
		public LinksOptimiseByChannelLink OptimiseByChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optimiseByProduct")]
		public LinksOptimiseByProductLink OptimiseByProduct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportByCategory")]
		public LinksGetStoreReportByCategoryLink ReportByCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportByChannel")]
		public LinksGetStoreReportByChannelLink ReportByChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportByDay")]
		public LinksGetStoreReportByDayLink ReportByDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportByProduct")]
		public LinksGetStoreReportByProductLink ReportByProduct { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportFilters")]
		public LinksGetReportFiltersLink ReportFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public LinksGetRulesLink Rules { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksAnalyticsIndexLink Self { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trackedClicks")]
		public LinksGetStoreTrackedClicksLink TrackedClicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackedExternalOrders")]
		public LinksGetStoreTrackedExternalOrdersLink TrackedExternalOrders { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trackedOrders")]
		public LinksGetStoreTrackedOrdersLink TrackedOrders { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trackingStatus")]
		public LinksGetStoreTrackingStatusLink TrackingStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyticsProductColumnFilter
	{
		
		/// <summary>
		/// Indicate the operator you want to apply on the columnId
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
		
		/// <summary>
		/// Must be null if the operator is "IsNull" or "IsNotNull".
		///Can contains multiple value in case of "InList" operator. Otherwise a single value is expected.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyticsProductColumnFilters
	{
		
		/// <summary>
		/// Describes a filter on a product's column.
		///The key is the column identifier of your catalog or a custom column.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalAnalyticsProductColumnFilters")]
		public AdditionalAnalyticsProductColumnFilters AdditionalAnalyticsProductColumnFilters { get; set; }
		
		/// <summary>
		/// The product sku filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// The product title filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Your api credential
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiCredential
	{
		
		/// <summary>
		/// The primary token to be used in the next call in the user scope API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryToken")]
		public string PrimaryToken { get; set; }
		
		/// <summary>
		/// The product name related to this credential
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productName")]
		public string ProductName { get; set; }
		
		/// <summary>
		/// The secondary token. Could be usefull if you want to share your access with someone else.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryToken")]
		public string SecondaryToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiCredentials
	{
		
		/// <summary>
		/// Your API credential list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public ApiCredential[] Credentials { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoImportConfiguration
	{
		
		/// <summary>
		/// Describe how you want to manage the duplication of the product value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duplicateProductConfiguration")]
		public DuplicateProductValueConfiguration DuplicateProductConfiguration { get; set; }
		
		/// <summary>
		/// Describe the input configuration
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public InputConfiguration Input { get; set; }
		
		/// <summary>
		/// The user identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputConfiguredByUserId")]
		public string InputConfiguredByUserId { get; set; }
		
		/// <summary>
		/// The user identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pauseStatusChangedByUserId")]
		public string PauseStatusChangedByUserId { get; set; }
		
		/// <summary>
		/// Indicate when the pause status has changed in UTC date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pauseStatusChangedUtcDate")]
		public System.Nullable<System.DateTimeOffset> PauseStatusChangedUtcDate { get; set; }
		
		/// <summary>
		/// Indicate if the auto import is in pause or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paused")]
		public bool Paused { get; set; } = false;
		
		/// <summary>
		/// The user identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledByUserId")]
		public string ScheduledByUserId { get; set; }
		
		/// <summary>
		/// Indicate the time zone name of the scheduling. If the scheduling type is "Schedule"
		/// </summary>
		[System.ComponentModel.DefaultValue("Romance Standard Time")]
		[System.Runtime.Serialization.DataMember(Name="schedulingLocalTimeZoneName")]
		public string SchedulingLocalTimeZoneName { get; set; } = "Romance Standard Time";
		
		/// <summary>
		/// Indicate the scheduling type. Schedule or Interval. We recommand you to use interval for a better reporting.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(AutoImportConfigurationSchedulingType.Interval)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedulingType")]
		public AutoImportConfigurationSchedulingType SchedulingType { get; set; } = AutoImportConfigurationSchedulingType.Interval;
		
		/// <summary>
		/// Indicate the scheduling value. If the scheduling type is Interval then the value will be a duration otherwise the values will be the time.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedulingValue")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] SchedulingValue { get; set; }
	}
	
	/// <summary>
	/// Describe how you want to manage the duplication of the product value
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicateProductValueConfiguration
	{
		
		/// <summary>
		/// Indicate how the product sku are compared for the duplication check.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(DuplicateProductValueConfigurationCompareOptions.None)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="compareOptions")]
		public DuplicateProductValueConfigurationCompareOptions CompareOptions { get; set; } = DuplicateProductValueConfigurationCompareOptions.None;
		
		/// <summary>
		/// Indicate the duplicate product sku strategy.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(DuplicateProductValueConfigurationStrategy.None)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public DuplicateProductValueConfigurationStrategy Strategy { get; set; } = DuplicateProductValueConfigurationStrategy.None;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DuplicateProductValueConfigurationCompareOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IgnoreCase = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IgnoreNonSpace = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IgnoreSymbols = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OrdinalIgnoreCase = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringSort = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ordinal = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DuplicateProductValueConfigurationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SkipAllDuplicateProducts = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeepFirstDuplicateProductOnly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailImportationIfAnyDuplicateProduct = 3,
	}
	
	/// <summary>
	/// Describe the input configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputConfiguration
	{
		
		/// <summary>
		/// The list of files to get and read
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public InputFileConfiguration[] Files { get; set; }
		
		/// <summary>
		/// Can be null. Use to transform multiple files with an XSLT file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformFileUrl")]
		public string TransformFileUrl { get; set; }
	}
	
	/// <summary>
	/// Describe how to get and read a file
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputFileConfiguration
	{
		
		/// <summary>
		/// Describe the way to download the file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fetch")]
		public InputFileFetchConfiguration Fetch { get; set; }
		
		/// <summary>
		/// The file number starting by 1
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileNumber")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int FileNumber { get; set; }
		
		/// <summary>
		/// Describe how to read the file. If FileFormatStrategy is CSV, csvFileReadProperties is required. Otherwise the xmlFileReadProperties is required.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="read")]
		public InputFileReadConfiguration Read { get; set; }
	}
	
	/// <summary>
	/// Describe the way to download the file
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputFileFetchConfiguration
	{
		
		/// <summary>
		/// Indicate the relative path in the compressed file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compressedRelativePath")]
		public string CompressedRelativePath { get; set; }
		
		/// <summary>
		/// Indicate the compression type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compressionFormatStrategy")]
		public System.Nullable<InputFileFetchConfigurationCompressionFormatStrategy> CompressionFormatStrategy { get; set; }
		
		/// <summary>
		/// Provides the credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credential")]
		public Credential Credential { get; set; }
		
		/// <summary>
		/// Indicate the download strategy (simple uri, ftps, ftplatest file, etc...)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="downloadCatalogStrategy")]
		public InputFileFetchConfigurationDownloadCatalogStrategy DownloadCatalogStrategy { get; set; }
		
		/// <summary>
		/// Indicate the download time out in second
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadTimeout")]
		public System.Nullable<System.Int32> DownloadTimeout { get; set; }
		
		/// <summary>
		/// Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InputFileFetchConfigurationCompressionFormatStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zip = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TarGz = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gzip = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bzip2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rar = 5,
	}
	
	/// <summary>
	/// Provides the credentials
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Credential
	{
		
		/// <summary>
		/// The password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The user name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InputFileFetchConfigurationDownloadCatalogStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SimpleUri = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FtpLatest = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sftp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SftpLatest = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ftps = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FtpsLatest = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Local = 6,
	}
	
	/// <summary>
	/// Describe how to read the file. If FileFormatStrategy is CSV, csvFileReadProperties is required. Otherwise the xmlFileReadProperties is required.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputFileReadConfiguration
	{
		
		/// <summary>
		/// The CSV file description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="csvFileReadProperties")]
		public InputFileReadCsvConfiguration CsvFileReadProperties { get; set; }
		
		/// <summary>
		/// The culture name of the file.  (i.e. fr-FR). If null then Invariant culture will be used.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="cultureName")]
		public string CultureName { get; set; } = "";
		
		/// <summary>
		/// The encoding type. UTF-8 by default.
		/// </summary>
		[System.ComponentModel.DefaultValue("UTF-8")]
		[System.Runtime.Serialization.DataMember(Name="encodingTypeName")]
		public string EncodingTypeName { get; set; } = "UTF-8";
		
		/// <summary>
		/// CSV or XML
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public InputFileReadConfigurationFormat Format { get; set; }
		
		/// <summary>
		/// The XML file description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xmlFileReadProperties")]
		public InputFileReadXmlConfiguration XmlFileReadProperties { get; set; }
	}
	
	/// <summary>
	/// The CSV file description
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputFileReadCsvConfiguration
	{
		
		/// <summary>
		/// Indicate the separator of the values in the CSV file. Generally ";"
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(";")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="csvSeparator")]
		public string CsvSeparator { get; set; } = ";";
		
		/// <summary>
		/// Indicate the text qualifier of the CSV file. Generally the value is "
		/// </summary>
		[System.ComponentModel.DefaultValue("\"")]
		[System.Runtime.Serialization.DataMember(Name="csvTextQualifier")]
		public string CsvTextQualifier { get; set; } = "\"";
		
		/// <summary>
		/// Indicate if the csv file contains the column name at the first row
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasHeaderRecord")]
		public bool HasHeaderRecord { get; set; } = true;
		
		/// <summary>
		/// Indicate if the importation should not use the csv column name from the file
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ignoreHeaderRecord")]
		public bool IgnoreHeaderRecord { get; set; } = false;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InputFileReadConfigurationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Csv = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Xml = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Json = 3,
	}
	
	/// <summary>
	/// The XML file description
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputFileReadXmlConfiguration
	{
		
		/// <summary>
		/// Indicate if the children xml nodes should be flatten with there parent to take in account the sub node values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flattenXmlChildElements")]
		public bool FlattenXmlChildElements { get; set; }
		
		/// <summary>
		/// Indicate if the importation should take in account the attribute in the xml nodes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useXmlAttributes")]
		public bool UseXmlAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoImportConfigurationSchedulingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Schedule = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interval = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoImportConfigurationLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="activate")]
		public LinksImportation_ActivateAutoImportLink Activate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pause")]
		public LinksAuto_PauseAutoImportLink Pause { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resume")]
		public LinksAuto_ResumeAutoImportLink Resume { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public LinksAuto_ScheduleAutoImportLink Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleInterval")]
		public LinksAuto_ConfigureAutoImportIntervalLink ScheduleInterval { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksAuto_GetAutoImportConfigurationLink Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public LinksAuto_StartAutoImportLink Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutomaticTransition
	{
		
		/// <summary>
		/// The marketplace account identifier in BeezUP. This account identifier is based on your api settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public int AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The technical code of the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceTechnicalCode")]
		public string MarketplaceTechnicalCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderStatusTransitionId")]
		public int OrderStatusTransitionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutomaticTransitionInfo : AutomaticTransition
	{
		
		/// <summary>
		/// BeezUP order status. Unified for all marketplaces.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPOrderStatus")]
		public string BeezUPOrderStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="businessOperationType")]
		public string BusinessOperationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public AutomaticTransitionInfoLinks Links { get; set; }
		
		/// <summary>
		/// In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceBusinessCode")]
		public string MarketplaceBusinessCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutomaticTransitionInfoLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configure")]
		public LinksConfigureAutomaticTransitionsLink Configure { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutomaticTransitionInfoList
	{
		
		[System.Runtime.Serialization.DataMember(Name="automaticTransitionInfos")]
		public AutomaticTransitionInfo[] AutomaticTransitionInfos { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public AutomaticTransitionInfoListLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutomaticTransitionInfoListLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configure")]
		public LinksConfigureAutomaticTransitionsLink Configure { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetAutomaticTransitionsLink Self { get; set; }
	}
	
	/// <summary>
	/// The response given by the batch operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchOrderOperationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public OrderOperationResponse[] Operations { get; set; }
	}
	
	/// <summary>
	/// The response given by the batch operation for an order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderOperationResponse
	{
		
		/// <summary>
		/// The error list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BeezUPCommonUserErrorMessage[] Errors { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public OrderIdentifier Order { get; set; }
		
		/// <summary>
		/// Indicates the http status corresponding to the individual operation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public int Status { get; set; }
		
		/// <summary>
		/// Indicates if the operation succeed or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderIdentifier
	{
		
		/// <summary>
		/// The marketplace account identifier in BeezUP. This account identifier is based on your api settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public int AccountId { get; set; }
		
		/// <summary>
		/// The BeezUP Order identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPOrderId")]
		public string BeezUPOrderId { get; set; }
		
		/// <summary>
		/// The technical code of the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceTechnicalCode")]
		public string MarketplaceTechnicalCode { get; set; }
	}
	
	/// <summary>
	/// Describe a BeezUP column
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeezUPColumnConfiguration
	{
		
		/// <summary>
		/// The BeezUP column name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPColumnName")]
		public string BeezUPColumnName { get; set; }
		
		/// <summary>
		/// If the size of the value is greater than the limit we can truncate the value instead of failing...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canBeTruncated")]
		public System.Nullable<System.Boolean> CanBeTruncated { get; set; }
		
		/// <summary>
		/// Data type of the column, will be used for parsing and for consolidation proces
		/// </summary>
		[System.ComponentModel.DefaultValue(BeezUPCommonColumnDataType.String)]
		[System.Runtime.Serialization.DataMember(Name="columnDataType")]
		public BeezUPCommonColumnDataType ColumnDataType { get; set; } = BeezUPCommonColumnDataType.String;
		
		/// <summary>
		/// Importance of the column
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(BeezUPCommonColumnImportance.Optional)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="columnImportance")]
		public BeezUPCommonColumnImportance ColumnImportance { get; set; } = BeezUPCommonColumnImportance.Optional;
		
		/// <summary>
		/// Describe the BeezUP column
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicate the display group name where the column must be putted
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayGroupName")]
		public string DisplayGroupName { get; set; }
		
		/// <summary>
		/// /!\ ONLY AVAILABLE ON CATALOG COLUMN NOT ON CUSTOM COLUMNS!!
		///If true, an error happen at the second occurence of the same value for this column
		///This information will be used during the importation process and later for mapping proposal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unique")]
		public System.Nullable<System.Boolean> Unique { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingPeriod
	{
		
		/// <summary>
		/// The billing period in month
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billingPeriodInMonth")]
		public int BillingPeriodInMonth { get; set; }
		
		/// <summary>
		/// The discount percentage related to this billing period
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discountPercentage")]
		public double DiscountPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingPeriodList
	{
		
		/// <summary>
		/// The billing period list
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billingPeriods")]
		public BillingPeriod[] BillingPeriods { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public BillingPeriodListLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingPeriodListLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksgetBillingPeriodsLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BonusInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bonusType")]
		public BonusInfoBonusType BonusType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BonusInfoBonusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnlinePaymentMethodBonus = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreviousInvoiceProrataBonus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreviousContractBonus = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BonusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnlinePaymentMethodBonus = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreviousInvoiceProrataBonus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreviousContractBonus = 2,
	}
	
	/// <summary>
	/// The catalog column configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogColumn
	{
		
		/// <summary>
		/// The catalog column name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalogColumnName")]
		public string CatalogColumnName { get; set; }
		
		/// <summary>
		/// Indicates the configuration applied on the column (catalog or custom) during the importation process.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ColumnConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Describe how you want to manage the duplication of the product value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateProductValueConfiguration")]
		public DuplicateProductValueConfiguration DuplicateProductValueConfiguration { get; set; }
		
		/// <summary>
		/// The catalog column identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// IF true, the product values of this column will be not taken in account during the importation process
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public System.Nullable<System.Boolean> Ignored { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CatalogColumnLinks Links { get; set; }
		
		/// <summary>
		/// Column named by the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userColumName")]
		public string UserColumName { get; set; }
	}
	
	/// <summary>
	/// Indicates the configuration applied on the column (catalog or custom) during the importation process.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ColumnConfiguration
	{
		
		/// <summary>
		/// The BeezUP column name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beezUPColumnName")]
		public string BeezUPColumnName { get; set; }
		
		/// <summary>
		/// If the size of the value is greater than the limit we can truncate the value instead of failing...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canBeTruncated")]
		public System.Nullable<System.Boolean> CanBeTruncated { get; set; }
		
		/// <summary>
		/// If non null, culture used to parse the value to the storage type of this column\r\n will be used for parsing and for consolidation proces
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnCultureName")]
		public string ColumnCultureName { get; set; }
		
		/// <summary>
		/// Data type of the column, will be used for parsing and for consolidation proces
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(BeezUPCommonColumnDataType.String)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="columnDataType")]
		public BeezUPCommonColumnDataType ColumnDataType { get; set; } = BeezUPCommonColumnDataType.String;
		
		/// <summary>
		/// If non null, format used to parse the value to the storage type of this column\r\n will be used for parsing and for consolidation proces
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnFormat")]
		public string ColumnFormat { get; set; }
		
		/// <summary>
		/// Importance of the column
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(BeezUPCommonColumnImportance.Optional)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="columnImportance")]
		public BeezUPCommonColumnImportance ColumnImportance { get; set; } = BeezUPCommonColumnImportance.Optional;
		
		/// <summary>
		/// Indicate the display group name where the column must be putted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayGroupName")]
		public string DisplayGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogColumnLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="rename")]
		public LinksCatalog_ChangeCatalogColumnUserNameLink Rename { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogColumnList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalogColumns")]
		public CatalogColumn[] CatalogColumns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogIndex
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CatalogIndexLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lovLinks")]
		public CatalogIndexLOVLinks LovLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeLinks")]
		public CatalogStoreIndexList StoreLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogIndexLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPColumns")]
		public LinksCatalog_GetBeezUPColumnsLink BeezUPColumns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksCatalogIndexLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogIndexLOVLinks
	{
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPColumnDataTypeLov")]
		public BeezUPCommonLOVLink3 BeezUPColumnDataTypeLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPColumnDisplayGroupLov")]
		public BeezUPCommonLOVLink3 BeezUPColumnDisplayGroupLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPColumnImportanceLov")]
		public BeezUPCommonLOVLink3 BeezUPColumnImportanceLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPColumnLov")]
		public BeezUPCommonLOVLink3 BeezUPColumnLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="compareOptionLov")]
		public BeezUPCommonLOVLink3 CompareOptionLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duplicateProductValueStrategyLov")]
		public BeezUPCommonLOVLink3 DuplicateProductValueStrategyLov { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogStoreIndexList
	{
		
		/// <summary>
		/// The key is the store identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, CatalogStoreIndex> Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogStoreIndex
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CatalogStoreIndexLinks Links { get; set; }
		
		/// <summary>
		/// Indicates the status of the catalog store.
		///* OK: If the latest importation is a success!
		///* Failed: If the latest importation has failed !
		///* Outdated: If the latest succeed importation is later than 1 day.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CatalogStoreIndexStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogStoreIndexLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoImportInfo")]
		public LinksAuto_GetAutoImportConfigurationLink AutoImportInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="catalogColumns")]
		public LinksCatalog_GetCatalogColumnsLink CatalogColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public LinksCatalog_GetCategoriesLink Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computeExpression")]
		public LinksCatalog_ComputeExpressionLink ComputeExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customColumns")]
		public LinksCatalog_GetCustomColumnsLink CustomColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importations")]
		public LinksImportation_GetReportingsLink Importations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputConfiguration")]
		public LinksImportation_GetManualUpdateLastInputConfigLink InputConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public LinksCatalog_GetProductsLink Products { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="randomProducts")]
		public LinksCatalog_GetRandomProductsLink RandomProducts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksCatalogStoreIndexLink Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startImportation")]
		public LinksImportation_StartManualUpdateLink StartImportation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CatalogStoreIndexStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Outdated = 2,
	}
	
	/// <summary>
	/// Indicates the status of the catalog store.
	///* OK: If the latest importation is a success!
	///* Failed: If the latest importation has failed !
	///* Outdated: If the latest succeed importation is later than 1 day.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CatalogStoreStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Outdated = 2,
	}
	
	/// <summary>
	/// The catalog category
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		/// <summary>
		/// The catalog category identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		/// <summary>
		/// The catalog category path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryPath")]
		public String[] CategoryPath { get; set; }
		
		/// <summary>
		/// The product count related to this category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selfProductCount")]
		public int SelfProductCount { get; set; }
		
		/// <summary>
		/// The total product count related to this category and his sub categories
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalProductCount")]
		public int TotalProductCount { get; set; }
	}
	
	/// <summary>
	/// The object which contains the category list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryList
	{
		
		/// <summary>
		/// The category list
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
	}
	
	/// <summary>
	/// The category mapping state of the channel catalog
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryMappingState
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BeezUPCommonApiSettingsStatus Status { get; set; }
		
		/// <summary>
		/// Indicates the uncategorized product count
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uncategorizedProductCount")]
		public System.Nullable<System.Int32> UncategorizedProductCount { get; set; }
		
		/// <summary>
		/// Indicates the count of products without cost defined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withoutCategoryCostProductCount")]
		public System.Nullable<System.Int32> WithoutCategoryCostProductCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CategoryMappingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		warning = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
	}
	
	/// <summary>
	/// The request message to change the custom column expression
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeCustomColumnExpressionRequest
	{
		
		/// <summary>
		/// The encrypted XML Blockly representation of the expression
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptedBlocklyExpression")]
		public string EncryptedBlocklyExpression { get; set; }
		
		/// <summary>
		/// The encrypted excel expression of the column
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptedExpression")]
		public string EncryptedExpression { get; set; }
	}
	
	/// <summary>
	/// The message request to change a custom column expression an user name
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeCustomColumnRequest
	{
		
		/// <summary>
		/// The encrypted XML Blockly representation of the expression
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptedBlocklyExpression")]
		public string EncryptedBlocklyExpression { get; set; }
		
		/// <summary>
		/// The encrypted excel expression of the column
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptedExpression")]
		public string EncryptedExpression { get; set; }
		
		/// <summary>
		/// Column named by the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userColumName")]
		public string UserColumName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeEmailRequest
	{
		
		/// <summary>
		/// The email
		/// Required
		/// Pattern: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newEmail")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$")]
		public string NewEmail { get; set; }
	}
	
	/// <summary>
	/// Contains all change order operations you want to make.  (max 100 items per call)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeOrderListRequest
	{
		
		/// <summary>
		/// The change order operations
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changeOrders")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ChangeOrderListRequestItem[] ChangeOrders { get; set; }
	}
	
	/// <summary>
	/// Contains the order identifier and the change order request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeOrderListRequestItem
	{
		
		/// <summary>
		/// All properties with the prefix order_ are translated in the list of values /user/lov#OrderMetaInfoPosted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeOrderRequest")]
		public ChangeOrderRequest ChangeOrderRequest { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public OrderIdentifierWithETag Order { get; set; }
	}
	
	/// <summary>
	/// All properties with the prefix order_ are translated in the list of values /user/lov#OrderMetaInfoPosted
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeOrderRequest
	{
	}
	
	/// <summary>
	/// Contains the order identifier and the change order request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeOrderListRequestItemV2
	{
		
		/// <summary>
		/// All properties with the prefix order_ are translated in the list of values /user/lov#OrderMetaInfoPosted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeOrderRequest")]
		public ChangeOrderRequest ChangeOrderRequest { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public OrderIdentifier Order { get; set; }
	}
	
	/// <summary>
	/// Contains all change order operations you want to make.  (max 100 items per call)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeOrderListRequestV2
	{
		
		/// <summary>
		/// The change order operations
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changeOrders")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ChangeOrderListRequestItemV2[] ChangeOrders { get; set; }
	}
	
	/// <summary>
	/// The reporting related to a change order operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeOrderReporting
	{
		
		[System.Runtime.Serialization.DataMember(Name="changeOrderType")]
		public string ChangeOrderType { get; set; }
		
		/// <summary>
		/// The creation UTC date of the execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationUtcDate")]
		public System.Nullable<System.DateTimeOffset> CreationUtcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public System.Collections.Generic.Dictionary<string, object> Details { get; set; }
		
		/// <summary>
		/// The error message during the execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The execution identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionUUID")]
		public string ExecutionUUID { get; set; }
		
		/// <summary>
		/// The IP address who request this operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The last update UTC date of the execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateUtcDate")]
		public System.Nullable<System.DateTimeOffset> LastUpdateUtcDate { get; set; }
		
		/// <summary>
		/// The processing status of the execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingStatus")]
		public string ProcessingStatus { get; set; }
		
		/// <summary>
		/// Indicates the origin of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public System.Nullable<ChangeOrderReportingSourceType> SourceType { get; set; }
		
		/// <summary>
		/// The user identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUserId")]
		public string SourceUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceUserName")]
		public string SourceUserName { get; set; }
		
		/// <summary>
		/// This operation was a test
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testMode")]
		public System.Nullable<System.Boolean> TestMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChangeOrderReportingSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Api = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Go = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangePasswordRequest
	{
		
		/// <summary>
		/// Your new password. Which must respect the same constraints as the user registeration
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// Your current password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oldPassword")]
		public string OldPassword { get; set; }
	}
	
	/// <summary>
	/// The message request for the change user column name
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeUserColumnNameRequest
	{
		
		/// <summary>
		/// Column named by the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userColumName")]
		public string UserColumName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalog : BeezUPCommonChannelBasicInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="categoryMappingSettings")]
		public ChannelCatalogCategoryMappingSettings CategoryMappingSettings { get; set; }
		
		/// <summary>
		/// The channel catalog identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCatalogId")]
		public string ChannelCatalogId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCategorySettings")]
		public ChannelCategorySettings ChannelCategorySettings { get; set; }
		
		/// <summary>
		/// Indicate the default configuration of the cost on this channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCostSettings")]
		public ChannelCostSettings ChannelCostSettings { get; set; }
		
		/// <summary>
		/// The column mapping list between a channel and a catalog
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnMappings")]
		public ChannelCatalogColumnMappingWithName[] ColumnMappings { get; set; }
		
		/// <summary>
		/// If this property is not indicated please force the user to configure the cost settings.
		///Defines the cost type you have on this channel with the cost value.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costSettings")]
		public CostSettings CostSettings { get; set; }
		
		/// <summary>
		/// Indicates if the channel catalog is enable
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The exclusion filter list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusionFilters")]
		public ExclusionFilter[] ExclusionFilters { get; set; }
		
		/// <summary>
		/// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string ExportUrl { get; set; }
		
		/// <summary>
		/// Represents the general settings of your channel catalog
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="generalSettings")]
		public GeneralSettings GeneralSettings { get; set; }
		
		/// <summary>
		/// Indicates if this channel catalog is related to a marketplace
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isMarketplace")]
		public bool IsMarketplace { get; set; }
		
		/// <summary>
		/// Indicates the actions you can do on a channel catalog
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ChannelCatalogLinks Links { get; set; }
		
		/// <summary>
		/// Channel Catalog State
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ChannelCatalogState State { get; set; }
		
		/// <summary>
		/// The store identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
		
		/// <summary>
		/// The channel type list related to the channel
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogCategoryMappingSettings
	{
		
		/// <summary>
		/// Optional parameter. Indicates that you have decided to do not map your categories with the channel's categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryMappingDisabledByMerchant")]
		public System.Nullable<System.Boolean> CategoryMappingDisabledByMerchant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCategorySettings
	{
		
		/// <summary>
		/// Indicates if the category mapping is required on category path leaf or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappingLeafRequired")]
		public System.Nullable<System.Boolean> MappingLeafRequired { get; set; }
		
		/// <summary>
		/// Indicates if the category mapping is required, otherwise you can map the categories but it will not block the publication of your catalog
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappingRequired")]
		public System.Nullable<System.Boolean> MappingRequired { get; set; }
	}
	
	/// <summary>
	/// Indicate the default configuration of the cost on this channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCostSettings
	{
		
		/// <summary>
		/// CPC means cost per click.
		///CPA means cost per action.
		///You can have CPC/CPA with a global cost value.
		///You can have CPC/CPA by category the cost value MUST be null
		///You can have global fixed price.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="costType")]
		public ChannelCostSettingsCostType CostType { get; set; }
		
		/// <summary>
		/// In case of global cost type, you have to indicate the cost value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="globalCostValue")]
		public System.Nullable<System.Decimal> GlobalCostValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelCostSettingsCostType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPC_Global = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPA_Global = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPC_ByCategory = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPA_ByCategory = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fixed_Global = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogColumnMappingWithName : ChannelCatalogColumnMapping
	{
		
		/// <summary>
		/// The BeezUP column name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalogBeezUPColumnName")]
		public string CatalogBeezUPColumnName { get; set; }
		
		/// <summary>
		/// The catalog column named by the user (catalog or custom column)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalogColumnName")]
		public string CatalogColumnName { get; set; }
		
		/// <summary>
		/// The BeezUP column name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelBeezUPColumnName")]
		public string ChannelBeezUPColumnName { get; set; }
		
		/// <summary>
		/// The channel column name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelColumnName")]
		public string ChannelColumnName { get; set; }
	}
	
	/// <summary>
	/// If this property is not indicated please force the user to configure the cost settings.
	///Defines the cost type you have on this channel with the cost value.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CostSettings
	{
		
		/// <summary>
		/// CPC means cost per click.
		///CPA means cost per action.
		///You can have CPC/CPA with a global cost value.
		///You can have CPC/CPA by category the cost value MUST be null
		///You can have global fixed price.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="costType")]
		public ChannelCostSettingsCostType CostType { get; set; }
		
		/// <summary>
		/// In case of global cost type, you have to indicate the cost value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="globalCostValue")]
		public System.Nullable<System.Decimal> GlobalCostValue { get; set; }
	}
	
	/// <summary>
	/// The exclusion filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExclusionFilter
	{
		
		/// <summary>
		/// The channel column identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelColumnId")]
		public string ChannelColumnId { get; set; }
		
		/// <summary>
		/// indicates if the filter is currently enable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// Indicate the filter's group. All filters in the same group means an "AND" operation in the filter group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// The exclusion filter name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The exclusion filter operator name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
		
		/// <summary>
		/// The position of the exclusion filter
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Position { get; set; }
		
		/// <summary>
		/// Indicate the filter group position. This information is used for the UI purpose and must be unique in the filter group.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="positionInGroup")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int PositionInGroup { get; set; }
		
		/// <summary>
		/// The value indicate by the user when the filter operation requires it.
		/// Max length: 4000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents the general settings of your channel catalog
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeneralSettings
	{
		
		/// <summary>
		/// If true then you authorize disclosure of my statistics generated from clicks and sales
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acceptToPublishInfo")]
		public bool AcceptToPublishInfo { get; set; }
		
		/// <summary>
		/// Activate BeezUP tracking for my statistics (checked by default)
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activeBeezUPTracking")]
		public bool ActiveBeezUPTracking { get; set; } = true;
		
		/// <summary>
		/// Do not export "out of stock" products. Note: this option is not taken into account by the counter.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="doNotExportOutOfStockProducts")]
		public bool DoNotExportOutOfStockProducts { get; set; }
	}
	
	/// <summary>
	/// Indicates the actions you can do on a channel catalog
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="categoryMappings")]
		public LinksGetChannelCatalogCategoriesLink CategoryMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelInfo")]
		public ExternalLinksGetChannelInfoLink ChannelInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configureColumnMappings")]
		public LinksConfigureChannelCatalogColumnMappingsLink ConfigureColumnMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configureCostSettings")]
		public LinksConfigureChannelCatalogCostSettingsLink ConfigureCostSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configureGeneralSettings")]
		public LinksConfigureChannelCatalogGeneralSettingsLink ConfigureGeneralSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public LinksDeleteChannelCatalogLink Delete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disable")]
		public LinksDisableChannelCatalogLink Disable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableCategoryMappings")]
		public LinksDisableChannelCatalogCategoryMappingLink DisableCategoryMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enable")]
		public LinksEnableChannelCatalogLink Enable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exclusionFilters")]
		public LinksGetChannelCatalogExclusionFiltersLink ExclusionFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportationCacheInfo")]
		public LinksGetChannelCatalogExportationCacheInfoLink ExportationCacheInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketplaceSettings")]
		public ExternalLinksGetChannelCatalogMarketplaceSettingsLink MarketplaceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public LinksGetChannelCatalogProductInfoListLink Products { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reenableCategoryMappings")]
		public LinksReenableChannelCatalogCategoryMappingLink ReenableCategoryMappings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelCatalogLink Self { get; set; }
	}
	
	/// <summary>
	/// Channel Catalog State
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogState
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiSettingsStatus")]
		public BeezUPCommonApiSettingsStatus ApiSettingsStatus { get; set; }
		
		/// <summary>
		/// The category mapping state of the channel catalog
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryMappingState")]
		public CategoryMappingState CategoryMappingState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="columnMappingStatus")]
		public BeezUPCommonApiSettingsStatus ColumnMappingStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportedProductCount")]
		public int ExportedProductCount { get; set; }
	}
	
	/// <summary>
	/// Represent a mapping between a catalog category path and a channel category path.
	///The cost on this mapping can be applied.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogCategoryConfiguration
	{
		
		/// <summary>
		/// Great feature! In case of mapping to parent catalog category, you can ask to automatically map new sub catalog category in the next importation to this channel category path.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoMapNewSubCategories")]
		public bool AutoMapNewSubCategories { get; set; }
		
		/// <summary>
		/// The catalog category path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalogCategoryPath")]
		public String[] CatalogCategoryPath { get; set; }
		
		/// <summary>
		/// The channel category path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCategoryPath")]
		public String[] ChannelCategoryPath { get; set; }
		
		/// <summary>
		/// In case of CPC_ByCategory or CPA_ByCategory cost type, you have to indicate the cost value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costValue")]
		public System.Nullable<System.Decimal> CostValue { get; set; }
	}
	
	/// <summary>
	/// For all catalog categories the current mapping applied
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogCategoryConfigurationInfo
	{
		
		/// <summary>
		/// The catalog category path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalogCategoryPath")]
		public String[] CatalogCategoryPath { get; set; }
		
		/// <summary>
		/// The channel category path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCategoryPath")]
		public String[] ChannelCategoryPath { get; set; }
		
		/// <summary>
		/// In case of CPC_ByCategory or CPA_ByCategory cost type, you have to indicate the cost value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costValue")]
		public System.Nullable<System.Decimal> CostValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ChannelCatalogCategoryMappingInfoLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogCategoryMappingInfoLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="configureCategories")]
		public LinksConfigureChannelCatalogCategoryLink ConfigureCategories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogCategoryConfigurationList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCatalogCategoryConfigurations")]
		public ChannelCatalogCategoryConfigurationInfo[] ChannelCatalogCategoryConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="costStatus")]
		public ChannelCatalogCategoryConfigurationListCostStatus CostStatus { get; set; }
		
		/// <summary>
		/// The action you can do on the category mappings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ChannelCatalogCategoryMappingsLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mappingStatus")]
		public ChannelCatalogCategoryConfigurationListCostStatus MappingStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelCatalogCategoryConfigurationListCostStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		optional = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notConfigurable = 2,
	}
	
	/// <summary>
	/// The action you can do on the category mappings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogCategoryMappingsLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="disable")]
		public LinksDisableChannelCatalogCategoryMappingLink Disable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reenable")]
		public LinksReenableChannelCatalogCategoryMappingLink Reenable { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelCatalogCategoriesLink Self { get; set; }
	}
	
	/// <summary>
	/// Represent a mapping between a channel column (considering channel category mapping) and a catalog column
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogColumnMapping
	{
		
		/// <summary>
		/// The catalog column identifier (catalog or custom column)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalogColumnId")]
		public string CatalogColumnId { get; set; }
		
		/// <summary>
		/// The channel category path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCategoryPath")]
		public String[] ChannelCategoryPath { get; set; }
		
		/// <summary>
		/// The channel column identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelColumnId")]
		public string ChannelColumnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogExportCacheInfo
	{
		
		/// <summary>
		/// The cache status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cacheStatus")]
		public string CacheStatus { get; set; }
		
		/// <summary>
		/// The expiration UTC date of the cache
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationUtcDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationUtcDate { get; set; }
		
		/// <summary>
		/// The feed url
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedUrl")]
		public string FeedUrl { get; set; }
		
		/// <summary>
		/// The last content change UTC date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastContentChangeUtcDate")]
		public System.Nullable<System.DateTimeOffset> LastContentChangeUtcDate { get; set; }
		
		/// <summary>
		/// The last update UTC date of the cache
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateUtcDate")]
		public System.Nullable<System.DateTimeOffset> LastUpdateUtcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogExportCacheInfoResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cacheInfo")]
		public ChannelCatalogExportCacheInfo CacheInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ChannelCatalogExportCacheInfoResponseLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogExportCacheInfoResponseLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="clear")]
		public LinksClearChannelCatalogExportationCacheLink Clear { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelCatalogExportationCacheInfoLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogExportationHistory
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportations")]
		public ChannelCatalogExportationReporting[] Exportations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ChannelCatalogExportationHistoryLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public BeezUPCommonPaginationResult PaginationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogExportationReporting
	{
		
		/// <summary>
		/// The cache status during the exportation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheStatus")]
		public string CacheStatus { get; set; }
		
		/// <summary>
		/// The IP address of the client who requests this exportation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientIpAddress")]
		public string ClientIpAddress { get; set; }
		
		/// <summary>
		/// The http header User-Agent sent by the client who requests this operation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientUserAgent")]
		public string ClientUserAgent { get; set; }
		
		/// <summary>
		/// The exportation duration. \
		///'00:01:00' measn 1 minute.
		///
		/// Pattern: (00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportationDuration")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])")]
		public string ExportationDuration { get; set; }
		
		/// <summary>
		/// The exportation UTC date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportationUtcDate")]
		public System.DateTimeOffset ExportationUtcDate { get; set; }
		
		/// <summary>
		/// The exportated product count during this exportation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportedProductCount")]
		public System.Nullable<System.Int32> ExportedProductCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogExportationHistoryLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelCatalogExportationHistoryLink Self { get; set; }
	}
	
	/// <summary>
	/// This is the index of the channel catalog API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogList
	{
		
		/// <summary>
		/// The channel catalog list. The key is the channel catalog identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCatalogs")]
		public System.Collections.Generic.Dictionary<string, ChannelCatalog> ChannelCatalogs { get; set; }
		
		/// <summary>
		/// Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc...
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ChannelCatalogListLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lovLinks")]
		public ChannelCatalogListLovLinks LovLinks { get; set; }
	}
	
	/// <summary>
	/// Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc...
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogListLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="add")]
		public LinksAddChannelCatalogLink Add { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beezUPColumns")]
		public ExternalLinksCatalog_GetBeezUPColumnsLink BeezUPColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filterOperators")]
		public LinksGetChannelCatalogFilterOperatorsLink FilterOperators { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelCatalogsLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogListLovLinks
	{
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCatalogExclusionFilterOperatorLov")]
		public BeezUPCommonLOVLink3 ChannelCatalogExclusionFilterOperatorLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCatalogExportCacheStatusLov")]
		public BeezUPCommonLOVLink3 ChannelCatalogExportCacheStatusLov { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceBooleanProperty : ChannelCatalogMarketplaceProperty
	{
		
		/// <summary>
		/// Indicate the default values of the property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceBooleanSetting : ChannelCatalogMarketplaceSetting
	{
		
		/// <summary>
		/// Channel catalog marketplace property values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Boolean> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceIntegerProperty : ChannelCatalogMarketplaceProperty
	{
		
		/// <summary>
		/// Indicate the default values of the property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public int[] Default { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceIntegerSetting : ChannelCatalogMarketplaceSetting
	{
		
		/// <summary>
		/// Channel catalog marketplace property values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public int[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceNumberProperty : ChannelCatalogMarketplaceProperty
	{
		
		/// <summary>
		/// Indicate the default values of the property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public double[] Default { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceNumberSetting : ChannelCatalogMarketplaceSetting
	{
		
		/// <summary>
		/// Channel catalog marketplace property values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public double[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public BeezUPCommonInfoSummaries Info { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ChannelCatalogMarketplacePropertiesLinks Links { get; set; }
		
		/// <summary>
		/// The groups settings with constraints
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyGroups")]
		public ChannelCatalogMarketplacePropertyGroup[] PropertyGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplacePropertiesLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="externalConfigurationPage")]
		public ExternalLinksGetExternalConfigurationPageLink ExternalConfigurationPage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelCatalogMarketplacePropertiesLink Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public LinksGetChannelCatalogMarketplaceSettingsLink Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplacePropertyGroup
	{
		
		/// <summary>
		/// Indicate the code identifier of the group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicate the position of the group
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Position { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ChannelCatalogMarketplaceProperty[] Properties { get; set; }
	}
	
	/// <summary>
	/// Model for fetching a channel catalog marketplace property
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceProperty
	{
		
		/// <summary>
		/// Indicate the description of the property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discriminatorType")]
		public ChannelCatalogMarketplacePropertyDiscriminatorType DiscriminatorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public BeezUPCommonInfoSummaries Info { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lovLink")]
		public BeezUPCommonLOVLink3 LovLink { get; set; }
		
		/// <summary>
		/// Indicates if the property value must be in the list of value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lovRequired")]
		public System.Nullable<System.Boolean> LovRequired { get; set; }
		
		/// <summary>
		/// Indicates the maximum item count of the property value
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxItems")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxItems { get; set; }
		
		/// <summary>
		/// Indicates the maximum size of the property value
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxLength")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxLength { get; set; }
		
		/// <summary>
		/// Indicates the minimum item count of the property value.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minItems")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MinItems { get; set; }
		
		/// <summary>
		/// Indicates the minimum size of the property value
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLength")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MinLength { get; set; }
		
		/// <summary>
		/// Channel catalog marketplace property name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates the offer identifier required to configure this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerIdRequired")]
		public System.Nullable<System.Int32> OfferIdRequired { get; set; }
		
		/// <summary>
		/// Channel catalog marketplace setting value format validation regular expression
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		/// <summary>
		/// Indicate the position of the property in the display group
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Position { get; set; }
		
		/// <summary>
		/// Indicate if the value cannot be changed. This is used for example for ebay token that should not be changed.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public bool ReadOnly { get; set; } = false;
		
		/// <summary>
		/// Indicate if the property is required or not
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="required")]
		public bool Required { get; set; } = false;
		
		/// <summary>
		/// The Data Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ChannelCatalogMarketplacePropertyType Type { get; set; }
		
		/// <summary>
		/// Indicates if this property should be displayed in the configuration page.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public bool Visible { get; set; } = true;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelCatalogMarketplacePropertyDiscriminatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channelCatalogMarketplaceStringProperty = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channelCatalogMarketplaceIntegerProperty = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channelCatalogMarketplaceBooleanProperty = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channelCatalogMarketplaceNumberProperty = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelCatalogMarketplacePropertyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		boolean = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 3,
	}
	
	/// <summary>
	/// Model for fetching a channel catalog marketplace setting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discriminatorType")]
		public ChannelCatalogMarketplaceSettingDiscriminatorType DiscriminatorType { get; set; }
		
		/// <summary>
		/// Channel catalog marketplace property name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelCatalogMarketplaceSettingDiscriminatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channelCatalogMarketplaceStringSetting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channelCatalogMarketplaceIntegerSetting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channelCatalogMarketplaceBooleanSetting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channelCatalogMarketplaceNumberSetting = 3,
	}
	
	/// <summary>
	/// The channel catalog marketplace settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ChannelCatalogMarketplaceSettingsLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public ChannelCatalogMarketplaceSetting[] Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceSettingsLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="save")]
		public LinksSetChannelCatalogMarketplaceSettingsLink Save { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelCatalogMarketplaceSettingsLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceStringProperty : ChannelCatalogMarketplaceProperty
	{
		
		/// <summary>
		/// Indicate the default values of the property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public string[] Default { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogMarketplaceStringSetting : ChannelCatalogMarketplaceSetting
	{
		
		/// <summary>
		/// Channel catalog marketplace property values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogProductByChannelCatalogRequest
	{
		
		/// <summary>
		/// The list of channel catalog identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCatalogIds")]
		public string[] ChannelCatalogIds { get; set; }
		
		/// <summary>
		/// The product identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The store identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogProductByChannelCatalogResponse
	{
		
		/// <summary>
		/// The channel catalog product by channel catalog. The key is the channel catalog identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCatalogs")]
		public System.Collections.Generic.Dictionary<string, ChannelCatalogProductInfo> ChannelCatalogs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogProductFilters
	{
		
		/// <summary>
		/// Describe a filter on a product's column.
		///The key is the column identifier of your catalog or a custom column.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProductFilters")]
		public BeezUPCommonAdditionalProductFilters AdditionalProductFilters { get; set; }
		
		/// <summary>
		/// The catalog product EAN filter (multiple values)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalogEans")]
		public string[] CatalogEans { get; set; }
		
		/// <summary>
		/// The catalog product MPN filter (multiple values)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalogMpns")]
		public string[] CatalogMpns { get; set; }
		
		/// <summary>
		/// The catalog product SKU filter (multiple values)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalogSkus")]
		public string[] CatalogSkus { get; set; }
		
		/// <summary>
		/// The channel product EAN filter (multiple values)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelEans")]
		public string[] ChannelEans { get; set; }
		
		/// <summary>
		/// The channel product MPN filter (multiple values)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelMpns")]
		public string[] ChannelMpns { get; set; }
		
		/// <summary>
		/// The channel product SKU filter (multiple values)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelSkus")]
		public string[] ChannelSkus { get; set; }
		
		/// <summary>
		/// The product title filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogProductInfo : BeezUPCommonProductBasicInfo
	{
		
		/// <summary>
		/// Indicates if the product has been disabled or not
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public bool Disabled { get; set; } = false;
		
		/// <summary>
		/// Indicates if the product has been excluded by a exclusion filter
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="excluded")]
		public bool Excluded { get; set; } = false;
		
		[System.Runtime.Serialization.DataMember(Name="excludedBy")]
		public string[] ExcludedBy { get; set; }
		
		/// <summary>
		/// Indicates the differents actions you can do on a channel product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ChannelCatalogProductInfoLinks Links { get; set; }
		
		/// <summary>
		/// The key is the channel column identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ProductOverridesWithCatalogValues Overrides { get; set; }
		
		/// <summary>
		/// Indicates if the product's category has been NOT mapped to a channel category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uncategorized")]
		public bool Uncategorized { get; set; }
	}
	
	/// <summary>
	/// Indicates the differents actions you can do on a channel product
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogProductInfoLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="disable")]
		public LinksDisableChannelCatalogProductLink Disable { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="override")]
		public LinksOverrideChannelCatalogProductValuesLink Override { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reenable")]
		public LinksReenableChannelCatalogProductLink Reenable { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelCatalogProductInfoLink Self { get; set; }
	}
	
	/// <summary>
	/// The key is the channel column identifier
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOverridesWithCatalogValues
	{
	}
	
	/// <summary>
	/// The channel catalog product info list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogProductInfoList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ChannelCatalogProductInfoListLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public BeezUPCommonPaginationResult PaginationResult { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productInfos")]
		public ChannelCatalogProductInfo[] ProductInfos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogProductInfoListLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="export")]
		public LinksExportChannelCatalogProductInfoListLink Export { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelCatalogProductInfoListLink Self { get; set; }
	}
	
	/// <summary>
	/// The channel catalog products counters. For each counter you will have a count.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCatalogProductsCounters
	{
		
		/// <summary>
		/// Disabled product count EXCLUDING uncategorized products on existing products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabledProductCountExcludingUncategorized")]
		public System.Nullable<System.Int32> DisabledProductCountExcludingUncategorized { get; set; }
		
		/// <summary>
		/// Disabled product count INCLUDING uncategorized products on existing products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabledProductCountIncludingUncategorized")]
		public System.Nullable<System.Int32> DisabledProductCountIncludingUncategorized { get; set; }
		
		/// <summary>
		/// Excluded product count EXCLUDING uncategorized products AND disabled products on existing products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedProductCountExcludingUncategorizedAndDisabled")]
		public System.Nullable<System.Int32> ExcludedProductCountExcludingUncategorizedAndDisabled { get; set; }
		
		/// <summary>
		/// Excluded product count INCLUDING uncategorized products AND disabled products on existing products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedProductCountIncludingUncategorizedAndDisabled")]
		public System.Nullable<System.Int32> ExcludedProductCountIncludingUncategorizedAndDisabled { get; set; }
		
		/// <summary>
		/// Imported product count currently in your catalog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="existingProductCount")]
		public System.Nullable<System.Int32> ExistingProductCount { get; set; }
		
		/// <summary>
		/// Product count WITHOUT category mapped on existing products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uncategorizedProductCount")]
		public System.Nullable<System.Int32> UncategorizedProductCount { get; set; }
	}
	
	/// <summary>
	/// The channel category
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCategory
	{
		
		/// <summary>
		/// The channel category channel code identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCategoryChannelCode")]
		public string ChannelCategoryChannelCode { get; set; }
		
		/// <summary>
		/// The channel category column overrides
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCategoryColumnOverrides")]
		public ChannelCategoryColumnOverrides ChannelCategoryColumnOverrides { get; set; }
		
		/// <summary>
		/// The default cost on this channel category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCategoryDefaultCost")]
		public System.Nullable<System.Decimal> ChannelCategoryDefaultCost { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCategoryId")]
		public string ChannelCategoryId { get; set; }
		
		/// <summary>
		/// The channel category level starting from 1
		/// Required
		/// Minimum: 1
		/// Maximum: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCategoryLevel")]
		[System.ComponentModel.DataAnnotations.Range(1, 9)]
		public int ChannelCategoryLevel { get; set; }
		
		/// <summary>
		/// The channel category path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCategoryPath")]
		public String[] ChannelCategoryPath { get; set; }
	}
	
	/// <summary>
	/// The channel category column overrides
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCategoryColumnOverrides
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelCategoryColumnOverride
	{
		
		/// <summary>
		/// The channel column description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelColumnDescription")]
		public string ChannelColumnDescription { get; set; }
		
		/// <summary>
		/// The channel column identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelColumnId")]
		public string ChannelColumnId { get; set; }
		
		/// <summary>
		/// The channel column name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelColumnName")]
		public string ChannelColumnName { get; set; }
		
		/// <summary>
		/// The channel column configuration. The BeezUP Column Name is optional. If the BeezUP column is mapped we will indicate the data type and column importance of the BeezUP column.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ChannelColumnConfiguration Configuration { get; set; }
		
		/// <summary>
		/// The restricted values. The key will be the restricted value identifier (format:guid) and the value will be the restriced value
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictedValues")]
		public ChannelColumnRestrictedValues RestrictedValues { get; set; }
		
		/// <summary>
		/// Indicates if this column must shown in the mapping page or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showInMapping")]
		public bool ShowInMapping { get; set; }
	}
	
	/// <summary>
	/// The channel column configuration. The BeezUP Column Name is optional. If the BeezUP column is mapped we will indicate the data type and column importance of the BeezUP column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelColumnConfiguration
	{
		
		/// <summary>
		/// The BeezUP column name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beezUPColumnName")]
		public string BeezUPColumnName { get; set; }
		
		/// <summary>
		/// Data type of the column, will be used for parsing and for consolidation proces
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(BeezUPCommonColumnDataType.String)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="columnDataType")]
		public BeezUPCommonColumnDataType ColumnDataType { get; set; } = BeezUPCommonColumnDataType.String;
		
		/// <summary>
		/// Importance of the column
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(BeezUPCommonColumnImportance.Optional)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="columnImportance")]
		public BeezUPCommonColumnImportance ColumnImportance { get; set; } = BeezUPCommonColumnImportance.Optional;
	}
	
	/// <summary>
	/// The restricted values. The key will be the restricted value identifier (format:guid) and the value will be the restriced value
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelColumnRestrictedValues
	{
	}
	
	/// <summary>
	/// The channel column
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelColumn
	{
		
		/// <summary>
		/// The channel column description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelColumnDescription")]
		public string ChannelColumnDescription { get; set; }
		
		/// <summary>
		/// The channel column identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelColumnId")]
		public string ChannelColumnId { get; set; }
		
		/// <summary>
		/// The channel column name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelColumnName")]
		public string ChannelColumnName { get; set; }
		
		/// <summary>
		/// The channel column configuration. The BeezUP Column Name is optional. If the BeezUP column is mapped we will indicate the data type and column importance of the BeezUP column.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ChannelColumnConfiguration Configuration { get; set; }
		
		/// <summary>
		/// The position of the column starting from 1
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		public int Position { get; set; }
		
		/// <summary>
		/// The restricted values. The key will be the restricted value identifier (format:guid) and the value will be the restriced value
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictedValues")]
		public ChannelColumnRestrictedValues RestrictedValues { get; set; }
		
		/// <summary>
		/// Indicates if this column must shown in the mapping page or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showInMapping")]
		public bool ShowInMapping { get; set; }
	}
	
	/// <summary>
	/// The first level category with his sub categories
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelFirstLevelCategory
	{
		
		/// <summary>
		/// The channel category channel code identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCategoryChannelCode")]
		public string ChannelCategoryChannelCode { get; set; }
		
		/// <summary>
		/// The channel category column overrides
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCategoryColumnOverrides")]
		public ChannelCategoryColumnOverrides ChannelCategoryColumnOverrides { get; set; }
		
		/// <summary>
		/// The default cost on this channel category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCategoryDefaultCost")]
		public System.Nullable<System.Decimal> ChannelCategoryDefaultCost { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCategoryId")]
		public string ChannelCategoryId { get; set; }
		
		/// <summary>
		/// The channel category level starting from 1
		/// Required
		/// Minimum: 1
		/// Maximum: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCategoryLevel")]
		[System.ComponentModel.DataAnnotations.Range(1, 9)]
		public int ChannelCategoryLevel { get; set; }
		
		/// <summary>
		/// The channel category name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCategoryName")]
		public string ChannelCategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subCategories")]
		public ChannelCategory[] SubCategories { get; set; }
	}
	
	/// <summary>
	/// The available channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelHeader
	{
		
		/// <summary>
		/// The channel identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
		/// Required
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelLogoUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string ChannelLogoUrl { get; set; }
		
		/// <summary>
		/// The channel name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// The links related to an available channel
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ChannelHeaderLinks Links { get; set; }
		
		/// <summary>
		/// The type list related to a channel
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	/// <summary>
	/// The links related to an available channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelHeaderLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelInfoLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelInfo
	{
		
		/// <summary>
		/// Indicate the BeezUP offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beezUPOffer")]
		public string BeezUPOffer { get; set; }
		
		/// <summary>
		/// Indicae a description to the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelDescription")]
		public string ChannelDescription { get; set; }
		
		/// <summary>
		/// The channel identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelLogoUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string ChannelLogoUrl { get; set; }
		
		/// <summary>
		/// The channel name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ChannelInfoDetails Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyNumbers")]
		public ChannelInfoKeyNumbers KeyNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesContact")]
		public ChannelInfoSalesContact SalesContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="technicalContact")]
		public ChannelInfoTechnicalContact TechnicalContact { get; set; }
	}
	
	public class ChannelInfoDetails
	{
		
		/// <summary>
		/// The business model of the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessModel")]
		public string BusinessModel { get; set; }
		
		/// <summary>
		/// The channel category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The channel type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelType")]
		public string ChannelType { get; set; }
		
		/// <summary>
		/// The cost's description of the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costs")]
		public string Costs { get; set; }
		
		/// <summary>
		/// The home url of the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeUrl")]
		public string HomeUrl { get; set; }
		
		/// <summary>
		/// The subscription link to the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionLink")]
		public string SubscriptionLink { get; set; }
		
		/// <summary>
		/// The tracking type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingType")]
		public string TrackingType { get; set; }
	}
	
	public class ChannelInfoKeyNumbers
	{
		
		/// <summary>
		/// The estimated category count of the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string Categories { get; set; }
		
		/// <summary>
		/// The estimated product count of the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
		
		/// <summary>
		/// The estimated store count of the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stores")]
		public string Stores { get; set; }
		
		/// <summary>
		/// The estimated view count per month of the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewsPerMonth")]
		public string ViewsPerMonth { get; set; }
	}
	
	public class ChannelInfoSalesContact
	{
		
		/// <summary>
		/// Indicate the sales contact email
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Indicate the BeezUP offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The sales contact phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	public class ChannelInfoTechnicalContact
	{
		
		/// <summary>
		/// The technical contact email
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The technical contact name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The technical contact phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// Get channel first level category list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelRootCategory
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstLevelCategories")]
		public ChannelFirstLevelCategory[] FirstLevelCategories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClearMerchantOrderInfoListRequest
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orders")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public OrderIdentifier[] Orders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClickIncludedAndAdditionalClickPrice
	{
		
		/// <summary>
		/// The additional click price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalClickPrice")]
		public System.Nullable<System.Double> AdditionalClickPrice { get; set; }
		
		/// <summary>
		/// The click included
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickIncluded")]
		public System.Nullable<System.Int32> ClickIncluded { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClickIncludedAndVariablePrice
	{
		
		/// <summary>
		/// Click included
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickIncluded")]
		public System.Nullable<System.Int32> ClickIncluded { get; set; }
		
		/// <summary>
		/// The pricing applied for this range
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variablePrice")]
		public System.Nullable<System.Double> VariablePrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ColumnMappingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		warning = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
	}
	
	/// <summary>
	/// Indicate how the product sku are compared for the duplication check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CompareOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IgnoreCase = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IgnoreNonSpace = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IgnoreSymbols = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OrdinalIgnoreCase = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringSort = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ordinal = 6,
	}
	
	/// <summary>
	/// Indicate the compression type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CompressionFormatStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zip = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TarGz = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gzip = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bzip2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rar = 5,
	}
	
	/// <summary>
	/// The request message to compute an expression based on the provided product values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComputeExpressionRequest
	{
		
		/// <summary>
		/// The encrypted excel expression of the column
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptedExpression")]
		public string EncryptedExpression { get; set; }
		
		/// <summary>
		/// The key is the column identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productValues")]
		public ProductValues ProductValues { get; set; }
	}
	
	/// <summary>
	/// The key is the column identifier
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductValues
	{
	}
	
	/// <summary>
	/// The message request to configure the auto import interval
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigureAutoImportIntervalRequest
	{
		
		/// <summary>
		/// Indicate the interval in time span. (i.e. "04:00:00" for every 4 hours)
		/// Required
		/// Pattern: (00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interval")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])")]
		public string Interval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigureAutomaticTransitionRequest
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="automaticTransitions")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public AutomaticTransition[] AutomaticTransitions { get; set; }
	}
	
	/// <summary>
	/// The request to configure a catalog column
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigureCatalogColumnCatalogRequest
	{
		
		/// <summary>
		/// The catalog column configuration
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalogColumn")]
		public CatalogColumn CatalogColumn { get; set; }
	}
	
	/// <summary>
	/// The request message to make a mapping between catalog category path and a channel category path
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigureCategoryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCatalogCategories")]
		public ChannelCatalogCategoryConfiguration[] ChannelCatalogCategories { get; set; }
		
		/// <summary>
		/// Great feature! In case of mapping to parent channel category, you can ask to override the mapping of all sub channel category to this catalog category path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overrideSubCategoryMappings")]
		public bool OverrideSubCategoryMappings { get; set; }
	}
	
	/// <summary>
	/// The subscription consumption status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ConsumptionAvailabilityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Degraded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unavailable = 2,
	}
	
	/// <summary>
	/// Describe the billing period information related to the offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContractBillingPeriodInfo
	{
		
		/// <summary>
		/// The amount discounted related to the billing period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountBillingPeriodDiscount")]
		public System.Nullable<System.Double> AmountBillingPeriodDiscount { get; set; }
		
		/// <summary>
		/// Can be null. The billing period in month based on /billingPeriods
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodInMonth")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> BillingPeriodInMonth { get; set; }
		
		/// <summary>
		/// The discount percent related to the billing period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodPercentDiscount")]
		public System.Nullable<System.Double> BillingPeriodPercentDiscount { get; set; }
	}
	
	/// <summary>
	/// Describe the bonus information related to your current contract.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContractBonusInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bonuses")]
		public BonusInfo[] Bonuses { get; set; }
	}
	
	/// <summary>
	/// Describe the click information related to the offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContractClickInfo
	{
		
		/// <summary>
		/// The addition click price in the offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalClickPrice")]
		public System.Nullable<System.Double> AdditionalClickPrice { get; set; }
		
		/// <summary>
		/// The click included in the offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickIncluded")]
		public System.Nullable<System.Int32> ClickIncluded { get; set; }
		
		/// <summary>
		/// The click included in your current contract
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialOfferClickIncluded")]
		public System.Nullable<System.Int32> InitialOfferClickIncluded { get; set; }
	}
	
	/// <summary>
	/// Describe the commitment information related to the offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContractCommitmentInfo
	{
		
		/// <summary>
		/// The commercial that is responsible of the creation of your account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialCreatorUserId")]
		public string CommercialCreatorUserId { get; set; }
		
		/// <summary>
		/// Your current commercial user id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialUserId")]
		public string CommercialUserId { get; set; }
		
		/// <summary>
		/// The commitment end date related to the offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitmentCalculatedFinishDate")]
		public System.Nullable<System.DateOnly> CommitmentCalculatedFinishDate { get; set; }
		
		/// <summary>
		/// The commitment period in month related to the offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitmentPeriodInMonth")]
		public System.Nullable<System.Int32> CommitmentPeriodInMonth { get; set; }
		
		/// <summary>
		/// Internal usage: Old offer type. Your contract type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contractType")]
		public System.Nullable<System.Int32> ContractType { get; set; }
		
		/// <summary>
		/// Your special coupon offer identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="couponOfferCode")]
		public string CouponOfferCode { get; set; }
		
		/// <summary>
		/// Your current contract id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentContractId")]
		public string CurrentContractId { get; set; }
		
		/// <summary>
		/// The current contract termination date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentContractTerminationDate")]
		public System.Nullable<System.DateOnly> CurrentContractTerminationDate { get; set; }
		
		/// <summary>
		/// Payment method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentCustomerPaymentMethod")]
		public System.Nullable<ContractCommitmentInfoCurrentCustomerPaymentMethod> CurrentCustomerPaymentMethod { get; set; }
		
		/// <summary>
		/// Internal usage: Old offer type. Describe the fix and variable model information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedAndVariableClickInfo")]
		public FixedAndVariableClickModelInfo FixedAndVariableClickInfo { get; set; }
		
		/// <summary>
		/// If true, this means you want to leave us and that's sad... :'-(
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCustomerWantsToTerminateHisContract")]
		public System.Nullable<System.Boolean> IsCustomerWantsToTerminateHisContract { get; set; }
		
		/// <summary>
		/// Internal usage: Old offer type. Is the current contract model needs to be converted into a new contract type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isModelMustBeTransmittedInNewContract")]
		public System.Nullable<System.Boolean> IsModelMustBeTransmittedInNewContract { get; set; }
		
		/// <summary>
		/// The minimum billing period in month authorized for this offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minBillingPeriodInMonths")]
		public System.Nullable<System.Int32> MinBillingPeriodInMonths { get; set; }
		
		/// <summary>
		/// Interal usage: Old offer type. The model description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// The start date related to the offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newContractStartDate")]
		public System.Nullable<System.DateTimeOffset> NewContractStartDate { get; set; }
		
		/// <summary>
		/// The offer id based on /offers. Not a free offer of course.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> OfferId { get; set; }
		
		/// <summary>
		/// The offer Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerName")]
		public string OfferName { get; set; }
		
		/// <summary>
		/// The payment delay in days related to the offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentDelayInDays")]
		public System.Nullable<System.Int32> PaymentDelayInDays { get; set; }
		
		/// <summary>
		/// Payment method
		/// </summary>
		[System.ComponentModel.DefaultValue(ContractCommitmentInfoCurrentCustomerPaymentMethod.OnlinePayment)]
		[System.Runtime.Serialization.DataMember(Name="paymentMethodAuthorized")]
		public ContractCommitmentInfoCurrentCustomerPaymentMethod PaymentMethodAuthorized { get; set; } = ContractCommitmentInfoCurrentCustomerPaymentMethod.OnlinePayment;
		
		/// <summary>
		/// Payment method
		/// </summary>
		[System.ComponentModel.DefaultValue(ContractCommitmentInfoCurrentCustomerPaymentMethod.OnlinePayment)]
		[System.Runtime.Serialization.DataMember(Name="requestedPaymentMethod")]
		public ContractCommitmentInfoCurrentCustomerPaymentMethod RequestedPaymentMethod { get; set; } = ContractCommitmentInfoCurrentCustomerPaymentMethod.OnlinePayment;
		
		/// <summary>
		/// The trial period end date related to the offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trialPeriodFinishDate")]
		public System.Nullable<System.DateOnly> TrialPeriodFinishDate { get; set; }
		
		/// <summary>
		/// The trial period in month related to the offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trialPeriodInMonth")]
		public System.Nullable<System.Int32> TrialPeriodInMonth { get; set; }
		
		/// <summary>
		/// Internal usage: Old offer type. Describe the fix and variable model information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variableModelInfo")]
		public VariableModelInfo VariableModelInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContractCommitmentInfoCurrentCustomerPaymentMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Transfer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Debit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Paypal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreditNote = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Loss = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnlinePayment = 6,
	}
	
	/// <summary>
	/// Internal usage: Old offer type. Describe the fix and variable model information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FixedAndVariableClickModelInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickIncludedAndAdditionalClickPrices")]
		public ClickIncludedAndAdditionalClickPrice[] ClickIncludedAndAdditionalClickPrices { get; set; }
	}
	
	/// <summary>
	/// Internal usage: Old offer type. Describe the fix and variable model information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariableModelInfo
	{
		
		/// <summary>
		/// Click included with variable pricing information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickIncludedAndVariablePrices")]
		public ClickIncludedAndVariablePrice[] ClickIncludedAndVariablePrices { get; set; }
		
		/// <summary>
		/// The overflow click count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overflowClickCount")]
		public int OverflowClickCount { get; set; }
		
		/// <summary>
		/// The overflow click price
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overflowClickPrice")]
		public double OverflowClickPrice { get; set; }
	}
	
	/// <summary>
	/// Describe the discount information related to the offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContractDiscountInfo
	{
		
		/// <summary>
		/// The discount amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountCodePromoDiscount")]
		public System.Nullable<System.Double> AmountCodePromoDiscount { get; set; }
		
		/// <summary>
		/// The amount discounted per month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountCodePromoDiscountPerMonth")]
		public System.Nullable<System.Double> AmountCodePromoDiscountPerMonth { get; set; }
		
		/// <summary>
		/// The discount code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="couponDiscountCode")]
		public string CouponDiscountCode { get; set; }
		
		/// <summary>
		/// Internal use: The discount id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="couponDiscountId")]
		public System.Nullable<System.Int32> CouponDiscountId { get; set; }
		
		/// <summary>
		/// Do you have currently a discount on your contract ?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerHasActualDiscount")]
		public System.Nullable<System.Boolean> CustomerHasActualDiscount { get; set; }
		
		/// <summary>
		/// Duration of the discount in month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountDurationInMonth")]
		public System.Nullable<System.Int32> DiscountDurationInMonth { get; set; }
		
		/// <summary>
		/// Is this discount is related to a coupon offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCouponDiscountLinkedToCouponOffer")]
		public System.Nullable<System.Boolean> IsCouponDiscountLinkedToCouponOffer { get; set; }
		
		/// <summary>
		/// Percentage of the discount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentDiscount")]
		public System.Nullable<System.Double> PercentDiscount { get; set; }
		
		/// <summary>
		/// Indicate the validaty of the discount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionalCodeValidity")]
		public System.Nullable<ContractDiscountInfoPromotionalCodeValidity> PromotionalCodeValidity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContractDiscountInfoPromotionalCodeValidity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Valid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExpiredOrInactive = 3,
	}
	
	/// <summary>
	/// Describe the conditions of a contract
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContractInfo
	{
		
		/// <summary>
		/// Additional click price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalClickPrice")]
		public System.Nullable<System.Double> AdditionalClickPrice { get; set; }
		
		/// <summary>
		/// The billing period in month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodInMonth")]
		public System.Nullable<System.Int32> BillingPeriodInMonth { get; set; }
		
		/// <summary>
		/// The percent discount related to the billing period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodPercentDiscount")]
		public System.Nullable<System.Double> BillingPeriodPercentDiscount { get; set; }
		
		/// <summary>
		/// The click included
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickIncluded")]
		public System.Nullable<System.Int32> ClickIncluded { get; set; }
		
		/// <summary>
		/// The calculated end date of commitment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitmentCalculatedFinishUtcDate")]
		public System.Nullable<System.DateTimeOffset> CommitmentCalculatedFinishUtcDate { get; set; }
		
		/// <summary>
		/// The commitment period in month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitmentPeriodInMonth")]
		public System.Nullable<System.Int32> CommitmentPeriodInMonth { get; set; }
		
		/// <summary>
		/// Your contract identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contractId")]
		public string ContractId { get; set; }
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The discount duration in month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountDurationInMonth")]
		public System.Nullable<System.Int32> DiscountDurationInMonth { get; set; }
		
		/// <summary>
		/// The end of your discount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountEndUtcDate")]
		public System.Nullable<System.DateTimeOffset> DiscountEndUtcDate { get; set; }
		
		/// <summary>
		/// Internal usage: Old offer type. Describe the fix and variable model information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedAndVariableClickInfo")]
		public FixedAndVariableClickModelInfo FixedAndVariableClickInfo { get; set; }
		
		/// <summary>
		/// The fixed price of your contract
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPrice")]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		/// <summary>
		/// The IP of the user who creates the contract
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipUserCreation")]
		public string IpUserCreation { get; set; }
		
		/// <summary>
		/// The IP of the user who modified the contract
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipUserModification")]
		public string IpUserModification { get; set; }
		
		/// <summary>
		/// Is commitment is automatically renewed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCommitmentRenewalAutomatically")]
		public System.Nullable<System.Boolean> IsCommitmentRenewalAutomatically { get; set; }
		
		/// <summary>
		/// Is the contract is modifiable ?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isModifiableContract")]
		public System.Nullable<System.Boolean> IsModifiableContract { get; set; }
		
		/// <summary>
		/// The offer id based on /offers. Not a free offer of course.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> OfferId { get; set; }
		
		/// <summary>
		/// The offer name based on /offers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerName")]
		public string OfferName { get; set; }
		
		/// <summary>
		/// The percent of the discount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentDiscount")]
		public System.Nullable<System.Double> PercentDiscount { get; set; }
		
		/// <summary>
		/// The start date of your contract
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startUtcDate")]
		public System.Nullable<System.DateTimeOffset> StartUtcDate { get; set; }
		
		/// <summary>
		/// The store count you want to have in your contract.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> StoreCount { get; set; }
		
		/// <summary>
		/// The trial period in month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trialPeriodInMonth")]
		public System.Nullable<System.Int32> TrialPeriodInMonth { get; set; }
		
		/// <summary>
		/// Internal usage: Old offer type. Describe the fix and variable model information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variableModelInfo")]
		public VariableModelInfo VariableModelInfo { get; set; }
	}
	
	/// <summary>
	/// Describe the pricing information related to the offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContractMoneyInfo
	{
		
		/// <summary>
		/// The amount excluding taxes and excluding code promo discount including billing period discount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount")]
		public System.Nullable<System.Double> AmountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount { get; set; }
		
		/// <summary>
		/// The amount excluding taxes and excluding discounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountExcludingTaxesAndExcludingDiscounts")]
		public System.Nullable<System.Double> AmountExcludingTaxesAndExcludingDiscounts { get; set; }
		
		/// <summary>
		/// The amount excluding taxes including discounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountExcludingTaxesIncludingDiscounts")]
		public System.Nullable<System.Double> AmountExcludingTaxesIncludingDiscounts { get; set; }
		
		/// <summary>
		/// The amount excluding taxes including discounts per month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountExcludingTaxesIncludingDiscountsPerMonth")]
		public System.Nullable<System.Double> AmountExcludingTaxesIncludingDiscountsPerMonth { get; set; }
		
		/// <summary>
		/// The amount including taxes excluding discount including billing period discount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount")]
		public System.Nullable<System.Double> AmountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount { get; set; }
		
		/// <summary>
		/// The amount including taxes including discounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountIncludingTaxesIncludingDiscounts")]
		public System.Nullable<System.Double> AmountIncludingTaxesIncludingDiscounts { get; set; }
		
		/// <summary>
		/// The taxes excluding discount including billing period discount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountTaxesExcludingDiscountIncludingBillingPeriodDiscount")]
		public System.Nullable<System.Double> AmountTaxesExcludingDiscountIncludingBillingPeriodDiscount { get; set; }
		
		/// <summary>
		/// Taxes including discounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountTaxesIncludingDiscounts")]
		public System.Nullable<System.Double> AmountTaxesIncludingDiscounts { get; set; }
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The initial offer fixed price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialOfferFixedPrice")]
		public System.Nullable<System.Double> InitialOfferFixedPrice { get; set; }
		
		/// <summary>
		/// The VAT percent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vatPercent")]
		public System.Nullable<System.Double> VatPercent { get; set; }
	}
	
	/// <summary>
	/// Describe the store information related to the offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContractStoreInfo
	{
		
		/// <summary>
		/// The additional store price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalStorePrice")]
		public System.Nullable<System.Double> AdditionalStorePrice { get; set; }
		
		/// <summary>
		/// The maximum store count related to the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxStoreCount")]
		public System.Nullable<System.Int32> MaxStoreCount { get; set; }
		
		/// <summary>
		/// The minimum store count related to the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minStoreCount")]
		public System.Nullable<System.Int32> MinStoreCount { get; set; }
		
		/// <summary>
		/// The owned store count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownedStoreCount")]
		public System.Nullable<System.Int32> OwnedStoreCount { get; set; }
		
		/// <summary>
		/// The store count you want to have in your contract.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> StoreCount { get; set; }
		
		/// <summary>
		/// The store count included in the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeIncluded")]
		public System.Nullable<System.Int32> StoreIncluded { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contracts
	{
		
		[System.Runtime.Serialization.DataMember(Name="current")]
		public CurrentContractInfo Current { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ContractsLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public NextContractInfo Next { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContractsLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="create")]
		public LinkscreateContractLink Create { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksgetContractsLink Self { get; set; }
	}
	
	/// <summary>
	/// Copy the optimisation between 2 channels
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopyOptimisationRequest
	{
		
		/// <summary>
		/// The channel identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelIdSource")]
		public string ChannelIdSource { get; set; }
		
		/// <summary>
		/// The channel identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelIdTarget")]
		public string ChannelIdTarget { get; set; }
		
		/// <summary>
		/// If true the existing optimisation will be kept
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keepExistingOptimisation")]
		public bool KeepExistingOptimisation { get; set; }
	}
	
	/// <summary>
	/// Products optimisatisation copied
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopyOptimisationResponse
	{
		
		/// <summary>
		/// The catalog product count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalogProductCount")]
		public int CatalogProductCount { get; set; }
		
		/// <summary>
		/// The basic info related to a channel
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public BeezUPCommonChannelBasicInfo Channel { get; set; }
		
		/// <summary>
		/// The enabled product count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabledProductCount")]
		public int EnabledProductCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CostStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		optional = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notConfigurable = 2,
	}
	
	/// <summary>
	/// CPC means cost per click.
	///CPA means cost per action.
	///You can have CPC/CPA with a global cost value.
	///You can have CPC/CPA by category the cost value MUST be null
	///You can have global fixed price.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CostType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPC_Global = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPA_Global = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPC_ByCategory = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPA_ByCategory = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fixed_Global = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContract
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContractResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public BeezUPCommonInfoSummaries Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CreateContractResponseLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContractResponseLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="contracts")]
		public LinksgetContractsLink Contracts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinkscreateContractLink Self { get; set; }
	}
	
	/// <summary>
	/// The request message to create a custom column
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomColumnRequest
	{
		
		/// <summary>
		/// Indicate the display group name where the column must be putted
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayGroupName")]
		public string DisplayGroupName { get; set; }
		
		/// <summary>
		/// The encrypted XML Blockly representation of the expression
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptedBlocklyExpression")]
		public string EncryptedBlocklyExpression { get; set; }
		
		/// <summary>
		/// The encrypted excel expression of the column
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptedExpression")]
		public string EncryptedExpression { get; set; }
		
		/// <summary>
		/// Column named by the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userColumnName")]
		public string UserColumnName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRuleRequest
	{
		
		/// <summary>
		/// The end validity utc date of the rule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endUtcDate")]
		public System.Nullable<System.DateTimeOffset> EndUtcDate { get; set; }
		
		/// <summary>
		/// The optimisation action
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="optimisationActionName")]
		public CreateRuleRequestOptimisationActionName OptimisationActionName { get; set; }
		
		/// <summary>
		/// The report filter to use for the rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportFilterId")]
		public string ReportFilterId { get; set; }
		
		/// <summary>
		/// The name of the rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleName")]
		public string RuleName { get; set; }
		
		/// <summary>
		/// The start validity utc date of the rule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startUtcDate")]
		public System.Nullable<System.DateTimeOffset> StartUtcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CreateRuleRequestOptimisationActionName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reenable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 1,
	}
	
	/// <summary>
	/// The request to create a store. The store identifier is optional, if null it will be automatically computed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateStoreRequest
	{
		
		/// <summary>
		/// The country iso code alpha 3 based on the list of values /user/lov/StoreCountry
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryIsoCodeAlpha3")]
		public string CountryIsoCodeAlpha3 { get; set; }
		
		/// <summary>
		/// The store identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The store name. Must be unique.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The store's sectors based on the list of values /user/lov/ParamSector
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sectors")]
		public string[] Sectors { get; set; }
		
		/// <summary>
		/// The url of your store
		/// Required
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSubscriptionRequest
	{
		
		/// <summary>
		/// The name of your application
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchantApplicationName")]
		public string MerchantApplicationName { get; set; }
		
		/// <summary>
		/// The version of your application
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1.0")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchantApplicationVersion")]
		public string MerchantApplicationVersion { get; set; } = "1.0";
		
		/// <summary>
		/// The email
		/// Pattern: ^(.+)@(.+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantEmailAlert")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(.+)@(.+)$")]
		public string MerchantEmailAlert { get; set; }
		
		/// <summary>
		/// The subscription name you want to use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
		/// Required
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string TargetUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreditCardInfo
	{
		
		/// <summary>
		/// Card number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cardNumber")]
		public string CardNumber { get; set; }
		
		/// <summary>
		/// Card Verification Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cardVerificationCode")]
		public string CardVerificationCode { get; set; }
		
		/// <summary>
		/// Expiration Month
		/// Required
		/// Minimum: 1
		/// Maximum: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expirationMonth")]
		[System.ComponentModel.DataAnnotations.Range(1, 12)]
		public int ExpirationMonth { get; set; }
		
		/// <summary>
		/// Expiration Year
		/// Required
		/// Minimum: 2017
		/// Maximum: 9000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expirationYear")]
		[System.ComponentModel.DataAnnotations.Range(2017, 9000)]
		public int ExpirationYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreditCardInfoResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="creditCardInfo")]
		public CreditCardInfoWithCardType CreditCardInfo { get; set; }
		
		/// <summary>
		/// Payment method
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ContractCommitmentInfoCurrentCustomerPaymentMethod.OnlinePayment)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currentPaymentMethod")]
		public ContractCommitmentInfoCurrentCustomerPaymentMethod CurrentPaymentMethod { get; set; } = ContractCommitmentInfoCurrentCustomerPaymentMethod.OnlinePayment;
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public BeezUPCommonInfoSummaries Info { get; set; }
		
		/// <summary>
		/// The different actions you can make on this offer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CreditCardInfoResponseLinks Links { get; set; }
	}
	
	/// <summary>
	/// The different actions you can make on this offer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreditCardInfoResponseLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="saveCreditCardInfo")]
		public LinkssaveCreditCardInfoLink SaveCreditCardInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksgetCreditCardInfoLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreditCardInfoWithCardType
	{
		
		/// <summary>
		/// Card number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cardNumber")]
		public string CardNumber { get; set; }
		
		/// <summary>
		/// Your credit card type. Example: VISA, MasterCard, etc...
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cardType")]
		public string CardType { get; set; }
		
		/// <summary>
		/// Expiration Month
		/// Required
		/// Minimum: 1
		/// Maximum: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expirationMonth")]
		[System.ComponentModel.DataAnnotations.Range(1, 12)]
		public int ExpirationMonth { get; set; }
		
		/// <summary>
		/// Expiration Year
		/// Required
		/// Minimum: 2017
		/// Maximum: 9000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expirationYear")]
		[System.ComponentModel.DataAnnotations.Range(2017, 9000)]
		public int ExpirationYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurrentContractInfo : ContractInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CurrentContractInfoLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurrentContractInfoLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="disable")]
		public LinksterminateCurrentContractLink Disable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reenable")]
		public LinksreactivateCurrentContractLink Reenable { get; set; }
	}
	
	/// <summary>
	/// The custom column configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomColumn
	{
		
		[System.Runtime.Serialization.DataMember(Name="catalogColumnDependencies")]
		public string[] CatalogColumnDependencies { get; set; }
		
		/// <summary>
		/// Indicates the configuration applied on the column (catalog or custom) during the importation process.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ColumnConfiguration Configuration { get; set; }
		
		/// <summary>
		/// The catalog column identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CustomColumnLinks Links { get; set; }
		
		/// <summary>
		/// Column named by the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userColumName")]
		public string UserColumName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomColumnLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public LinksCatalog_DeleteCustomColumnLink Delete { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public LinksCatalog_GetCustomColumnExpressionLink Expression { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rename")]
		public LinksCatalog_ChangeCustomColumnUserNameLink Rename { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="save")]
		public LinksCatalog_SaveCustomColumnLink Save { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="saveExpression")]
		public LinksCatalog_ChangeCustomColumnExpressionLink SaveExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomColumnList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customColumns")]
		public CustomColumn[] CustomColumns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CustomColumnListLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomColumnListLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="add")]
		public LinksCatalog_SaveCustomColumnLink Add { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksCatalog_GetCustomColumnsLink Self { get; set; }
	}
	
	/// <summary>
	/// The index of the customer API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerIndex
	{
		
		/// <summary>
		/// Gives you want you can do on this API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CustomerIndexLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lovLinks")]
		public CustomerIndexLovLinks LovLinks { get; set; }
	}
	
	/// <summary>
	/// Gives you want you can do on this API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerIndexLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountInfo")]
		public LinksgetUserAccountInfoLink AccountInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billingPeriods")]
		public LinksgetBillingPeriodsLink BillingPeriods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contracts")]
		public LinksgetContractsLink Contracts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="friendInfo")]
		public LinksgetFriendInfoLink FriendInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="getOffer")]
		public LinksgetOfferLink GetOffer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoices")]
		public LinksgetInvoicesLink Invoices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logout")]
		public LinkslogoutLink Logout { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetCustomerIndexLink Self { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="standardOffers")]
		public LinksgetStandardOffersLink StandardOffers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stores")]
		public LinksgetStoresLink Stores { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerIndexLovLinks
	{
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeOfferLov")]
		public BeezUPCommonLOVLink3 ActiveOfferLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beezUPTimeZoneLov")]
		public BeezUPCommonLOVLink3 BeezUPTimeZoneLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contractTerminationReasonLov")]
		public BeezUPCommonLOVLink3 ContractTerminationReasonLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryLov")]
		public BeezUPCommonLOVLink3 CountryLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerStatusLov")]
		public BeezUPCommonLOVLink3 CustomerStatusLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoicePaymentStatusLov")]
		public BeezUPCommonLOVLink3 InvoicePaymentStatusLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerLov")]
		public BeezUPCommonLOVLink3 OfferLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCountryLov")]
		public BeezUPCommonLOVLink3 StoreCountryLov { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeSectorLov")]
		public BeezUPCommonLOVLink3 StoreSectorLov { get; set; }
	}
	
	/// <summary>
	/// Indicates on which date you want to make the filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DateSearchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Modification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Purchase = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MarketPlaceModification = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetectedCatalogColumn : CatalogColumn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DetectedCatalogColumnLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetectedCatalogColumnLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="configure")]
		public LinksImportation_ConfigureCatalogColumnLink Configure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignore")]
		public LinksImportation_IgnoreColumnLink Ignore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map")]
		public LinksImportation_MapCatalogColumnLink Map { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reattend")]
		public LinksImportation_ReattendColumnLink Reattend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unmap")]
		public LinksImportation_UnmapCatalogColumnLink Unmap { get; set; }
	}
	
	/// <summary>
	/// The list of detected catalog column
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetectedCatalogColumnList
	{
		
		/// <summary>
		/// Contains all deteted catalog columns
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedCatalogColumns")]
		public DetectedCatalogColumn[] DetectedCatalogColumns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DetectedCatalogColumnListLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetectedCatalogColumnListLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksImportation_GetDetectedCatalogColumnsLink Self { get; set; }
	}
	
	/// <summary>
	/// Indicate the download strategy (simple uri, ftps, ftplatest file, etc...)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DownloadCatalogStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SimpleUri = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FtpLatest = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sftp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SftpLatest = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ftps = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FtpsLatest = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Local = 6,
	}
	
	/// <summary>
	/// Indicate the duplicate product sku strategy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DuplicateProductValueStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SkipAllDuplicateProducts = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeepFirstDuplicateProductOnly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailImportationIfAnyDuplicateProduct = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponseMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public UserErrorMessage[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserErrorMessage
	{
		
		/// <summary>
		/// a dictionary string/object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public UserErrorMessageArguments Arguments { get; set; }
		
		/// <summary>
		/// Error Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// If the error is translated, the culture name will be indicated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cultureName")]
		public string CultureName { get; set; }
		
		/// <summary>
		/// The documentation related to this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docUrl")]
		public string DocUrl { get; set; }
		
		/// <summary>
		/// The error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// a dictionary string/object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserErrorMessageArguments
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponseMessagePaymentRequired : BeezUPCommonErrorResponseMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ErrorResponseMessagePaymentRequiredLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponseMessagePaymentRequiredLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public LinksgetOfferLink Offer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorArguments")]
		public System.Collections.Generic.Dictionary<string, string> ErrorArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorGuid")]
		public string ErrorGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exceptionDetail")]
		public ExceptionDetail ExceptionDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyValue")]
		public string PropertyValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="technicalErrorMessage")]
		public string TechnicalErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utcDate")]
		public System.Nullable<System.DateTimeOffset> UtcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExceptionDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="helpLink")]
		public string HelpLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackTrace")]
		public string StackTrace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExchangedMessagesItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operationName")]
		public string OperationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestUri")]
		public string RequestUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestUtcDate")]
		public System.Nullable<System.DateTimeOffset> RequestUtcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseUri")]
		public string ResponseUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseUtcDate")]
		public System.Nullable<System.DateTimeOffset> ResponseUtcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExclusionFiltersResponse
	{
		
		/// <summary>
		/// The exclusion filter list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusionFilters")]
		public ExclusionFilter[] ExclusionFilters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ExclusionFiltersResponseLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExclusionFiltersResponseLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="configure")]
		public LinksConfigureChannelCatalogExclusionFiltersLink Configure { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelCatalogExclusionFiltersLink Self { get; set; }
	}
	
	/// <summary>
	/// The type of the file to export
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ExportOrderListFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		csv = 0,
	}
	
	/// <summary>
	/// The message request to export order list. The store identifier is requested to regroup the exportations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportOrderListRequest
	{
		
		/// <summary>
		/// The type of the file to export
		/// </summary>
		[System.ComponentModel.DefaultValue(ExportOrderListFormat.csv)]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public ExportOrderListFormat Format { get; set; } = ExportOrderListFormat.csv;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderListRequestWithoutPagination")]
		public OrderListRequestWithoutPagination OrderListRequestWithoutPagination { get; set; }
		
		/// <summary>
		/// The store identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderListRequestWithoutPagination
	{
		
		/// <summary>
		/// Account Id list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		public int[] AccountIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beezUPOrderStatuses")]
		public string[] BeezUPOrderStatuses { get; set; }
		
		/// <summary>
		/// The begin period you want to make the search. \
		///The period MUST not be greater than 62 days.
		///The begin period MUST be lower than the end period.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beginPeriodUtcDate")]
		public System.DateTimeOffset BeginPeriodUtcDate { get; set; }
		
		/// <summary>
		/// Indicates on which date you want to make the filter
		/// </summary>
		[System.ComponentModel.DefaultValue(DateSearchType.Modification)]
		[System.Runtime.Serialization.DataMember(Name="dateSearchType")]
		public DateSearchType DateSearchType { get; set; } = DateSearchType.Modification;
		
		/// <summary>
		/// The end period of you search. \
		///The period MUST not be greater than 62 days. \
		///The end period MUST be greater than the begin period.
		///The end period MUST be lower to the current date.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endPeriodUtcDate")]
		public System.DateTimeOffset EndPeriodUtcDate { get; set; }
		
		/// <summary>
		/// Indicates on which invoice availability to filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceAvailabilityType")]
		public string InvoiceAvailabilityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketplaceBusinessCodes")]
		public string[] MarketplaceBusinessCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderIds")]
		public string[] MarketplaceOrderIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketplaceTechnicalCodes")]
		public string[] MarketplaceTechnicalCodes { get; set; }
		
		/// <summary>
		/// Indicates on which order merchant info synchronization status to filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderMerchantInfoSynchronizationStatus")]
		public string OrderMerchantInfoSynchronizationStatus { get; set; }
		
		/// <summary>
		/// Buyer full name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_Name")]
		public string Order_Buyer_Name { get; set; }
		
		/// <summary>
		/// Merchant order id list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_MerchantOrderIds")]
		public string[] Order_MerchantOrderIds { get; set; }
		
		/// <summary>
		/// Store Id list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeIds")]
		public string[] StoreIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExternalLinksCatalog_GetBeezUPColumnsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExternalLinksGetChannelCatalogMarketplaceSettingsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExternalLinksGetChannelInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExternalLinksGetExternalConfigurationPageLink
	{
	}
	
	/// <summary>
	/// The Feed Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FeedType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Products = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inventory = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pricing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Images = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Relationships = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unpublish = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Offers = 6,
	}
	
	/// <summary>
	/// CSV or XML
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FileFormatStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Csv = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Xml = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Json = 3,
	}
	
	/// <summary>
	/// The filter operator
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterOperator
	{
		
		/// <summary>
		/// Data type of the operator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedChannelColumnDataType")]
		public System.Nullable<FilterOperatorExpectedChannelColumnDataType> ExpectedChannelColumnDataType { get; set; }
		
		/// <summary>
		/// Data type of the operator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedValueDataType")]
		public System.Nullable<FilterOperatorExpectedValueDataType> ExpectedValueDataType { get; set; }
		
		/// <summary>
		/// The exclusion filter operator name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// This operator requires a value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueRequired")]
		public System.Nullable<System.Boolean> ValueRequired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FilterOperatorExpectedChannelColumnDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FilterOperatorExpectedValueDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 1,
	}
	
	/// <summary>
	/// Data type of the operator
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FilterOperatorDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Functionality
	{
		
		/// <summary>
		/// The functionality code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// UI purpose: Indicate the position of the functionality
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public int Order { get; set; }
	}
	
	/// <summary>
	/// Describe the rights for a functionality
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FunctionalityRightInfo
	{
		
		/// <summary>
		/// The functionality code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="functionalityCode")]
		public string FunctionalityCode { get; set; }
		
		/// <summary>
		/// The max value for this functionality code considering your rights
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValueInterger")]
		public System.Nullable<System.Int32> MaxValueInterger { get; set; }
		
		/// <summary>
		/// If you can use this functionality unlimitedly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateBatchOrderInvoiceErrorResponseItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public string ErrorType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public GenerateBatchOrderInvoiceErrorResponseItemDetail[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateBatchOrderInvoiceErrorResponseItemDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public UserErrorMessage ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public GenerateBatchOrderInvoiceRequestItem Request { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateBatchOrderInvoiceRequestItem
	{
		
		/// <summary>
		/// Marketplace Account Identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public int AccountId { get; set; }
		
		/// <summary>
		/// beezUPOrderUUID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPOrderUUID")]
		public string BeezUPOrderUUID { get; set; }
		
		/// <summary>
		/// Invoice Sequence Number
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoiceSequenceNumber")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int InvoiceSequenceNumber { get; set; }
		
		/// <summary>
		/// Marketplace Technical Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceTechnicalCode")]
		public string MarketplaceTechnicalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateOrderInvoiceResponse
	{
		
		/// <summary>
		/// Marketplace Account Identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public int AccountId { get; set; }
		
		/// <summary>
		/// beezUPOrderUUID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPOrderUUID")]
		public string BeezUPOrderUUID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceLocation")]
		public string InvoiceLocation { get; set; }
		
		/// <summary>
		/// Invoice Sequence Number
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceSequenceNumber")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> InvoiceSequenceNumber { get; set; }
		
		/// <summary>
		/// Marketplace Technical Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceTechnicalCode")]
		public string MarketplaceTechnicalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateOrderInvoiceRequest
	{
		
		/// <summary>
		/// Invoice Sequence Number
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceSequenceNumber")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> InvoiceSequenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetChannelCatalogProductInfoListRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="catalogCategoryFilter")]
		public BeezUPCommonCatalogCategoryFilter CatalogCategoryFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelCategoryFilter")]
		public BeezUPCommonChannelCategoryFilter ChannelCategoryFilter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public ProductSetVisibilityCriteria Criteria { get; set; }
		
		/// <summary>
		/// Search overridden products. If null the filter will not be taken in account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overridden")]
		public System.Nullable<System.Boolean> Overridden { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		[System.ComponentModel.DataAnnotations.Range(100, System.Int32.MaxValue)]
		public int PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productFilters")]
		public ChannelCatalogProductFilters ProductFilters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductSetVisibilityCriteria
	{
		
		/// <summary>
		/// Search disabled products. If null the filter will not be taken in account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Search excluded products by at least an exclusion filter. If null the filter will not be taken in account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excluded")]
		public System.Nullable<System.Boolean> Excluded { get; set; }
		
		/// <summary>
		/// If false, search for products absent from the current catalog. If true, search for products currently in the catalog. If null the filter will not be taken in account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exist")]
		public System.Nullable<System.Boolean> Exist { get; set; }
		
		/// <summary>
		/// Indicate how you want to combine the filters:
		///* funnel: You will get the products which meet at least one of the product set criterion. The criteria are applied in the following order:
		///  - categorization
		///  - exclusion filters
		///  - deactivations
		///* cumulative: You will get the products which have all the product set criteria
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logic")]
		public ProductSetVisibilityCriteriaLogic Logic { get; set; }
		
		/// <summary>
		/// Search product WITHOUT category mapped with the channel. If null the filter will not be taken in account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uncategorized")]
		public System.Nullable<System.Boolean> Uncategorized { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProductSetVisibilityCriteriaLogic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		funnel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cumulative = 1,
	}
	
	/// <summary>
	/// Get Importation Products Report Request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImportationProductsReportRequest
	{
		
		/// <summary>
		/// Filter by EAN (equals)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Get Importation Products Report Request Error Codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCodes")]
		public GetImportationProductsReportRequestErrorCode[] ErrorCodes { get; set; }
		
		/// <summary>
		/// Filter by MPN (equals)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mpn")]
		public string Mpn { get; set; }
		
		/// <summary>
		/// Indicates the page number
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int PageNumber { get; set; } = 1;
		
		/// <summary>
		/// Indicate the item count per page
		/// Required
		/// Minimum: 25
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DefaultValue(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		[System.ComponentModel.DataAnnotations.Range(25, 100)]
		public int PageSize { get; set; } = 100;
		
		/// <summary>
		/// Filter by Sku (equals)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Filter by Title (StartsWith)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Get Importation Products Report Request Error Codes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImportationProductsReportRequestErrorCode
	{
		
		/// <summary>
		/// Error Code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Column named by the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userColumnName")]
		public string UserColumnName { get; set; }
	}
	
	/// <summary>
	/// Get Importation Products Report Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImportationProductsReportResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public BeezUPCommonPaginationResult PaginationResult { get; set; }
		
		/// <summary>
		/// Product Errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productErrors")]
		public ProductError[] ProductErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductError
	{
		
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ProductErrorCode[] Errors { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public int LineNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mpn")]
		public string Mpn { get; set; }
		
		/// <summary>
		/// The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. http://schema.org/sku
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Sku { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductErrorCode
	{
		
		/// <summary>
		/// The BeezUP column name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beezUPColumnName")]
		public string BeezUPColumnName { get; set; }
		
		/// <summary>
		/// Error Code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Column named by the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userColumName")]
		public string UserColumName { get; set; }
	}
	
	/// <summary>
	/// Get Importation Report Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImportationReportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public GetImportationReportResponseDiff Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public GetImportationReportResponseDiff Columns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public GetImportationReportResponseError[] Errors { get; set; }
		
		/// <summary>
		/// The execution identifier of the catalog importation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="importationInfo")]
		public GetImportationReportResponseImportationInfo ImportationInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productMetrics")]
		public GetImportationReportResponseProductMetrics ProductMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public GetImportationReportResponseDiff Products { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImportationReportResponseDiff
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdCount")]
		public int CreatedCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deletedCount")]
		public int DeletedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unchangedCount")]
		public System.Nullable<System.Int32> UnchangedCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedCount")]
		public int UpdatedCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImportationReportResponseError
	{
		
		/// <summary>
		/// The BeezUP column name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beezUPColumnName")]
		public string BeezUPColumnName { get; set; }
		
		/// <summary>
		/// Error Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productCount")]
		public int ProductCount { get; set; }
		
		/// <summary>
		/// Column named by the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userColumName")]
		public string UserColumName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImportationReportResponseImportationInfo
	{
		
		/// <summary>
		/// The start date of the importation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beginUtcDate")]
		public System.DateTimeOffset BeginUtcDate { get; set; }
		
		/// <summary>
		/// The start date of the importation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endUtcDate")]
		public System.DateTimeOffset EndUtcDate { get; set; }
		
		/// <summary>
		/// Describe how to get and read a file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputConfiguration")]
		public InputFileConfiguration InputConfiguration { get; set; }
		
		/// <summary>
		/// The user identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImportationReportResponseProductMetrics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activeCount")]
		public int ActiveCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detectedCount")]
		public int DetectedCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duplicatedCount")]
		public int DuplicatedCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failedCount")]
		public int FailedCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrderInvoiceDesignPreviewResponse
	{
		
		/// <summary>
		/// Invoice Content HTML
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoiceHtmlContent")]
		public string InvoiceHtmlContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrderInvoiceGeneralSettingsResponse : OrderInvoiceGeneralSettings
	{
		
		/// <summary>
		/// Invoice Sequence Number
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastInvoiceSequenceNumber")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> LastInvoiceSequenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrderInvoicePdfFromHtmlInvoiceUrlRequest
	{
		
		/// <summary>
		/// order invoice url
		/// Required
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.?&\%-=])*\/?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderInvoiceUri")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.?&\%-=])*\/?$")]
		public string OrderInvoiceUri { get; set; }
	}
	
	/// <summary>
	/// The request message to get products based on these filters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProductsRequest
	{
		
		/// <summary>
		/// The catalog category path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryPath")]
		public String[] CategoryPath { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnIdList")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] ColumnIdList { get; set; }
		
		/// <summary>
		/// Search for product by ean
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Search for existing products or not. If null you will received both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exists")]
		public System.Nullable<System.Boolean> Exists { get; set; }
		
		/// <summary>
		/// Search for product by mpn
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mpn")]
		public string Mpn { get; set; }
		
		/// <summary>
		/// The catalog column identifier (catalog or custom column)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderByCatalogColumnId")]
		public string OrderByCatalogColumnId { get; set; }
		
		/// <summary>
		/// Indicates the page number
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int PageNumber { get; set; } = 1;
		
		/// <summary>
		/// Indicate the item count per page
		/// Required
		/// Minimum: 25
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DefaultValue(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		[System.ComponentModel.DataAnnotations.Range(25, 100)]
		public int PageSize { get; set; } = 100;
		
		/// <summary>
		/// Filter with a list of product identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productIdList")]
		public string[] ProductIdList { get; set; }
		
		/// <summary>
		/// Search for product by sku
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Search for products containing this title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Do not retrieve sub categories. By default, this value is set to false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withoutSubCategories")]
		public System.Nullable<System.Boolean> WithoutSubCategories { get; set; }
	}
	
	/// <summary>
	/// The reporting related to a harvest order operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HarvestOrderReporting
	{
		
		/// <summary>
		/// The marketplace order status forced by BeezUP during the order change oepration. This could happend when there is no status on the marketplace side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beezUPForcedStatus")]
		public string BeezUPForcedStatus { get; set; }
		
		/// <summary>
		/// BeezUP order status. Unified for all marketplaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beezUPStatus")]
		public string BeezUPStatus { get; set; }
		
		/// <summary>
		/// The creation UTC date of the execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationUtcDate")]
		public System.Nullable<System.DateTimeOffset> CreationUtcDate { get; set; }
		
		/// <summary>
		/// The warning message during the execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The execution identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionUUID")]
		public string ExecutionUUID { get; set; }
		
		/// <summary>
		/// The last update UTC date of the execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateUtcDate")]
		public System.Nullable<System.DateTimeOffset> LastUpdateUtcDate { get; set; }
		
		/// <summary>
		/// The order marketplace status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketplaceStatus")]
		public string MarketplaceStatus { get; set; }
		
		/// <summary>
		/// The processing status of the execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingStatus")]
		public string ProcessingStatus { get; set; }
		
		/// <summary>
		/// The warning message during the execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warningMessage")]
		public string WarningMessage { get; set; }
	}
	
	/// <summary>
	/// Indicate the http method to use on this link
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HttpMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAD = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportAlreadyInProgressResponse
	{
		
		/// <summary>
		/// The error message list
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BeezUPCommonUserErrorMessage[] Errors { get; set; }
		
		/// <summary>
		/// The action links
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ImportAlreadyInProgressResponseLinks Links { get; set; }
	}
	
	/// <summary>
	/// The action links
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportAlreadyInProgressResponseLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cancelCurrentImportation")]
		public LinksImportation_CancelLink CancelCurrentImportation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currentImportation")]
		public LinksImportation_GetImportationMonitoringLink CurrentImportation { get; set; }
	}
	
	/// <summary>
	/// The custom column configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationCustomColumn
	{
		
		/// <summary>
		/// Indicates the configuration applied on the column (catalog or custom) during the importation process.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ColumnConfiguration Configuration { get; set; }
		
		/// <summary>
		/// The catalog column identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ImportationCustomColumnLinks Links { get; set; }
		
		/// <summary>
		/// Column named by the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userColumName")]
		public string UserColumName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationCustomColumnLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public LinksCatalog_DeleteCustomColumnLink Delete { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public LinksCatalog_GetCustomColumnExpressionLink Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map")]
		public LinksImportation_MapCustomColumnLink Map { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productSampleValue")]
		public LinksImportation_GetProductSampleCustomColumnValueLink ProductSampleValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="save")]
		public LinksImportation_SaveCustomColumnLink Save { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unmap")]
		public LinksImportation_UnmapCustomColumnLink Unmap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationCustomColumnList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customColumns")]
		public ImportationCustomColumn[] CustomColumns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CustomColumnListLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationCustomColumnListLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="add")]
		public LinksImportation_SaveCustomColumnLink Add { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksImportation_GetCustomColumnsLink Self { get; set; }
	}
	
	/// <summary>
	/// Describe the reporting of the catalog importation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationMonitoring
	{
		
		/// <summary>
		/// The start date of the importation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beginUtcDate")]
		public System.DateTimeOffset BeginUtcDate { get; set; }
		
		/// <summary>
		/// In case of error a description will be indicated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BeezUPCommonUserErrorMessage[] Errors { get; set; }
		
		/// <summary>
		/// The execution identifier of the catalog importation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// The last update of the reporting
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateUtcDate")]
		public System.DateTimeOffset LastUpdateUtcDate { get; set; }
		
		/// <summary>
		/// Applicable operations considering the state of the importation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ImportationMonitoringLinks Links { get; set; }
		
		/// <summary>
		/// Contains all steps of the importation process with a boolean. If true the step has been passed, false the step is not complete
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public System.Collections.Generic.Dictionary<string, bool> Steps { get; set; }
		
		/// <summary>
		/// Indicates if the importation was successfully completed or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
		
		/// <summary>
		/// The user identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Applicable operations considering the state of the importation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationMonitoringLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="activateAutoImport")]
		public LinksImportation_ActivateAutoImportLink ActivateAutoImport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancel")]
		public LinksImportation_CancelLink Cancel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="catalogColumns")]
		public LinksImportation_GetDetectedCatalogColumnsLink CatalogColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commit")]
		public LinksImportation_CommitLink Commit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitColumns")]
		public LinksImportation_CommitColumnsLink CommitColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configureRemainingCatalogColumns")]
		public LinksImportation_ConfigureRemainingCatalogColumnsLink ConfigureRemainingCatalogColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customColumns")]
		public LinksImportation_GetCustomColumnsLink CustomColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productSamples")]
		public LinksImportation_GetProductSampleLink ProductSamples { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksImportation_GetImportationMonitoringLink Self { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="technicalProgression")]
		public LinksImportation_TechnicalProgressionLink TechnicalProgression { get; set; }
	}
	
	/// <summary>
	/// The catalog importation reporting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationReporting
	{
		
		/// <summary>
		/// Indicate if this importation is an auto import or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoImported")]
		public System.Nullable<System.Boolean> AutoImported { get; set; }
		
		/// <summary>
		/// Indicate the begin UTC date of this importation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beginUtcDate")]
		public System.DateTimeOffset BeginUtcDate { get; set; }
		
		/// <summary>
		/// Indicate the end UTC date of this importation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endUtcDate")]
		public System.Nullable<System.DateTimeOffset> EndUtcDate { get; set; }
		
		/// <summary>
		/// Indicate the error message list related to this importation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BeezUPCommonUserErrorMessage[] Errors { get; set; }
		
		/// <summary>
		/// The execution identifier of the catalog importation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// Indicate the input url of this importation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputConfigurationUrl")]
		public string InputConfigurationUrl { get; set; }
		
		/// <summary>
		/// Indicate the last update UTC date of the reporting.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateUtcDate")]
		public System.DateTimeOffset LastUpdateUtcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ImportationReportingLinks Links { get; set; }
		
		/// <summary>
		/// The last step name of the importation process
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepName")]
		public string StepName { get; set; }
		
		/// <summary>
		/// Indicate the steps that have been passed during the importation process
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public System.Collections.Generic.Dictionary<string, bool> Steps { get; set; }
		
		/// <summary>
		/// Indicate if the importation succeed or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
		
		/// <summary>
		/// Indicate the total product count detected in the catalog during the importation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalProductCount")]
		public System.Nullable<System.Int32> TotalProductCount { get; set; }
		
		/// <summary>
		/// Indicate the total product count in error detected in the catalog during the importation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalProductErrorCount")]
		public System.Nullable<System.Int32> TotalProductErrorCount { get; set; }
		
		/// <summary>
		/// Indicate the total product count in success in the catalog during the importation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalProductSuccessCount")]
		public System.Nullable<System.Int32> TotalProductSuccessCount { get; set; }
		
		/// <summary>
		/// The user identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationReportingLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="report")]
		public LinksImportation_GetReportLink Report { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationTechnicalProgression
	{
		
		/// <summary>
		/// Indicate for each step of the importation the uris to look at
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepsProgression")]
		public System.Collections.Generic.Dictionary<string, string[]> StepsProgression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationsPerStoreResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="importations")]
		public ImportationReporting[] Importations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ImportationsResponseLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportationsResponseLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksImportation_GetReportingsLink Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public LinksImportation_StartManualUpdateLink Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InfoSummaries
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorSummary[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="informations")]
		public InfoSummary[] Informations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successes")]
		public SuccessSummary[] Successes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public WarningSummary[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InfoSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="informationArguments")]
		public System.Collections.Generic.Dictionary<string, string> InformationArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="informationCode")]
		public string InformationCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="informationMessage")]
		public string InformationMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyValue")]
		public string PropertyValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuccessSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyValue")]
		public string PropertyValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successArguments")]
		public System.Collections.Generic.Dictionary<string, string> SuccessArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successCode")]
		public string SuccessCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successMessage")]
		public string SuccessMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WarningSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="technicalErrorMessage")]
		public string TechnicalErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warningArguments")]
		public System.Collections.Generic.Dictionary<string, string> WarningArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warningCode")]
		public string WarningCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warningMessage")]
		public string WarningMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Invoice
	{
		
		/// <summary>
		/// The amount of your invoice
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The remaining amount to be paid for this invoice
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amountToBePaid")]
		public double AmountToBePaid { get; set; }
		
		/// <summary>
		/// Your contract identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contractId")]
		public string ContractId { get; set; }
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public System.DateOnly DueDate { get; set; }
		
		/// <summary>
		/// The invoice date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoiceDate")]
		public System.DateOnly InvoiceDate { get; set; }
		
		/// <summary>
		/// Your invoice number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoiceNumber")]
		public string InvoiceNumber { get; set; }
		
		/// <summary>
		/// The url of the invoice document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceUrl")]
		public string InvoiceUrl { get; set; }
		
		/// <summary>
		/// The payment status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentStatus")]
		public InvoicePaymentStatus PaymentStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InvoicePaymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Paid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotPaid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PartiallyPaid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Loss = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoices")]
		public Invoice[] Invoices { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public InvoiceListLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceListLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksgetInvoicesLink Self { get; set; }
	}
	
	/// <summary>
	/// Last manual import input configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LastManualImportInputConfiguration
	{
		
		/// <summary>
		/// Describe the input configuration
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public InputConfiguration Input { get; set; }
	}
	
	/// <summary>
	/// The channel catalog
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LegacyTrackingChannelCatalog
	{
		
		/// <summary>
		/// Indicates the actions you can do on a channel catalog
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public LegacyTrackingChannelCatalogLinks Links { get; set; }
	}
	
	/// <summary>
	/// Indicates the actions you can do on a channel catalog
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LegacyTrackingChannelCatalogLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="migrate")]
		public LinksMigrateLegacyTrackingChannelCatalogLink Migrate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetLegacyTrackingChannelCatalogLink Self { get; set; }
	}
	
	/// <summary>
	/// This is the index of the channel catalog API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LegacyTrackingChannelCatalogList
	{
		
		/// <summary>
		/// The channel catalog list. The key is the channel catalog identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCatalogs")]
		public System.Collections.Generic.Dictionary<string, LegacyTrackingChannelCatalog> ChannelCatalogs { get; set; }
		
		/// <summary>
		/// Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc...
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public LegacyTrackingChannelCatalogListLinks Links { get; set; }
	}
	
	/// <summary>
	/// Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc...
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LegacyTrackingChannelCatalogListLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetLegacyTrackingChannelCatalogsLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Link3
	{
		
		/// <summary>
		/// indicates whether all optionals params have been provided
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allOptionalParamsProvided")]
		public System.Nullable<System.Boolean> AllOptionalParamsProvided { get; set; }
		
		/// <summary>
		/// indicates whether all required params have been provided
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allRequiredParamsProvided")]
		public System.Nullable<System.Boolean> AllRequiredParamsProvided { get; set; }
		
		/// <summary>
		/// The description of the link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The documentation related to this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docUrl")]
		public string DocUrl { get; set; }
		
		/// <summary>
		/// Indicate the relative uri for this link
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public InfoSummaries Info { get; set; }
		
		/// <summary>
		/// The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Indicate the http method to use on this link
		/// </summary>
		[System.ComponentModel.DefaultValue(BeezUPCommonHttpMethod.GET)]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public BeezUPCommonHttpMethod Method { get; set; } = BeezUPCommonHttpMethod.GET;
		
		/// <summary>
		/// The operationId to call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public LinkParameter3Types Parameters { get; set; }
		
		/// <summary>
		/// Indicate the relation name related to the link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
		
		/// <summary>
		/// indicates whether the href is templated or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlTemplated")]
		public System.Nullable<System.Boolean> UrlTemplated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkParameter3Types
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LinkClickToOrderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnPurchaseDate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnClickDate = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkParameter3
	{
		
		/// <summary>
		/// description of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// * path: if the parameter must be pass in the path uri
		///* header: if the parameter must be passed in http header
		///* query: if the parameter must be passed in querystring
		///* body: if the parameter must be passed in the body
		///* file: if the parameter must be passed in a multipart/form-data (https://swagger.io/docs/specification/2-0/file-upload/)
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="in")]
		public LinkParameter3In In { get; set; }
		
		/// <summary>
		/// The label corresponding to the link parameter. This label is automatically translated based on the Accept-Language http header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lovLink")]
		public LOVLink3 LovLink { get; set; }
		
		/// <summary>
		/// If true, you MUST indicate a value from the list of values otherwise it's a freetext
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lovRequired")]
		public System.Nullable<System.Boolean> LovRequired { get; set; }
		
		/// <summary>
		/// The regular expression to validate the value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		/// <summary>
		/// If the parameter is an object with flexible properties (additionProperties/dictionary), we will describe the properties of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// schema of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		/// <summary>
		/// The value of the parameter. It can be an integer a string or an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LinkParameter3In
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		path = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		header = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		query = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		body = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		file = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkParameterProperty3
	{
		
		/// <summary>
		/// description of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The label corresponding to the link parameter property. This label is automatically translated based on the Accept-Language http header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lovLink")]
		public LOVLink3 LovLink { get; set; }
		
		/// <summary>
		/// If true, you MUST use indicate a value from the list of values otherwise it's a freetext
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lovRequired")]
		public System.Nullable<System.Boolean> LovRequired { get; set; }
		
		/// <summary>
		/// The regular expression to validate the value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// schema of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		/// <summary>
		/// The value type of the parameter
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(LinkParameterProperty3Type._string)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LinkParameterProperty3Type Type { get; set; } = LinkParameterProperty3Type._string;
		
		/// <summary>
		/// The value of the parameter. It can be an integer a string or an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LinkParameterProperty3Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		boolean = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="object")]
		_object = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		array = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date-time")]
		dateMinustime = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		file = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksAddChannelCatalogLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksAnalyticsIndexLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksAuto_ConfigureAutoImportIntervalLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksAuto_GetAutoImportConfigurationLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksAuto_PauseAutoImportLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksAuto_ResumeAutoImportLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksAuto_ScheduleAutoImportLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksAuto_StartAutoImportLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalogIndexLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalogStoreIndexLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_ChangeCatalogColumnUserNameLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_ChangeCustomColumnExpressionLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_ChangeCustomColumnUserNameLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_ComputeExpressionLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_DeleteCustomColumnLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_GetBeezUPColumnsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_GetCatalogColumnsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_GetCategoriesLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_GetCustomColumnExpressionLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_GetCustomColumnsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_GetProductsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_GetRandomProductsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCatalog_SaveCustomColumnLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksChangeOrderLink : BeezUPCommonLink3
	{
		
		/// <summary>
		/// Indicate the relation name related to the link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksChangeOrderV3Link : Link3
	{
		
		/// <summary>
		/// Indicate the relation name related to the link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksClearChannelCatalogExportationCacheLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksClearMerchantOrderInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksClearMerchantOrderInfoListLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksClearMerchantOrderInfoListV3Link : Link3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksClearMerchantOrderInfoV3Link : Link3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksConfigureAutomaticTransitionsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksConfigureChannelCatalogCategoryLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksConfigureChannelCatalogColumnMappingsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksConfigureChannelCatalogCostSettingsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksConfigureChannelCatalogExclusionFiltersCopyLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksConfigureChannelCatalogExclusionFiltersLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksConfigureChannelCatalogGeneralSettingsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksConfigureChannelCatalogProductValueOverrideCopyLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksCreateRuleLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksDeleteChannelCatalogLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksDeleteReportFilterLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksDeleteRuleLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksDisableChannelCatalogCategoryMappingLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksDisableChannelCatalogLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksDisableChannelCatalogProductLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksDisableRuleLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksEnableChannelCatalogLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksEnableRuleLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksExportChannelCatalogProductInfoListLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksExportOrdersLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetAutomaticTransitionsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogCategoriesLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogExclusionFiltersCopyLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogExclusionFiltersLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogExportationCacheInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogExportationHistoryLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogFilterOperatorsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogMarketplacePropertiesLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogMarketplaceSettingsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogProductInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogProductInfoListLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogProductValueOverrideCopyLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelCatalogsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelsIndexLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetChannelsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetCustomerIndexLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetLegacyTrackingChannelCatalogLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetLegacyTrackingChannelCatalogsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetMarketplaceAccountsSynchronizationLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetMarketplaceAccountsSynchronizationV3Link : Link3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetMarketplaceChannelCatalogsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetOrderExportationsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetOrderHistoryLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetOrderHistoryV3Link : Link3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetOrderIndexLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetOrderLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetOrderListFullLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetOrderListFullV3Link : Link3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetOrderListLightLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetOrderListLightV3Link : Link3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetOrderV3Link : Link3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetPublicListOfValuesLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetPublicLovIndexLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetPublicationsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetReportFilterLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetReportFiltersLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetRuleLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetRulesExecutionsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetRulesLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetStoreReportByCategoryLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetStoreReportByChannelLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetStoreReportByDayLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetStoreReportByProductLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetStoreTrackedClicksLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetStoreTrackedExternalOrdersLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetStoreTrackedOrdersLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetStoreTrackingStatusLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetTrackingStatusLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetUserListOfValuesLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksGetUserLovIndexLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksHarvestAllLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksHarvestAllV3Link : Link3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksHarvestOrderLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksHarvestOrderV3Link : Link3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_ActivateAutoImportLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_CancelLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_CommitColumnsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_CommitLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_ConfigureCatalogColumnLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_ConfigureRemainingCatalogColumnsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_DeleteCustomColumnLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_GetCustomColumnExpressionLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_GetCustomColumnsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_GetDetectedCatalogColumnsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_GetImportationMonitoringLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_GetManualUpdateLastInputConfigLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_GetProductSampleCustomColumnValueLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_GetProductSampleLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_GetReportLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_GetReportingsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_IgnoreColumnLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_MapCatalogColumnLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_MapCustomColumnLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_ReattendColumnLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_SaveCustomColumnLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_StartManualUpdateLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_TechnicalProgressionLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_UnmapCatalogColumnLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksImportation_UnmapCustomColumnLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksMigrateLegacyTrackingChannelCatalogLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksMoveDownRuleLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksMoveUpRuleLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksOptimiseAllLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksOptimiseByCategoryLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksOptimiseByChannelLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksOptimiseByProductLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksOptimiseLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksOverrideChannelCatalogProductValuesLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksPublishCatalogToMarketplaceLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksReenableChannelCatalogCategoryMappingLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksReenableChannelCatalogProductLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksRunRuleLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksRunRulesLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksSaveReportFilterLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksSetChannelCatalogMarketplaceSettingsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksSetMerchantOrderInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksSetMerchantOrderInfoListLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksSetMerchantOrderInfoListV3Link : Link3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksSetMerchantOrderInfoV3Link : Link3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksUpdateRuleLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksactivateUserAccountLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkschangeEmailLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkschangePasswordLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkscreateContractLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkscreateStoreLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksdeleteNextContractLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksdeleteStoreLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksdeleteStoreShareLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetBillingPeriodsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetContractsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetCreditCardInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetFriendInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetInvoicesLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetOfferLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetProfilePictureInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetStandardOffersLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetStoreLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetStoreSharesLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetStoresLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksgetUserAccountInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkslogoutLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksreactivateCurrentContractLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkssaveCompanyInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkssaveCreditCardInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkssavePersonalInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkssaveProfilePictureInfoLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkssaveStoreAlertsLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksshareStoreLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksterminateCurrentContractLink : BeezUPCommonLink3
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksupdateStoreLink : BeezUPCommonLink3
	{
	}
	
	/// <summary>
	/// This object is used by LOV apis
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfValueItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="codeIdentifier")]
		public string CodeIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intIdentifier")]
		public int IntIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translationText")]
		public string TranslationText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoginRequest
	{
		
		/// <summary>
		/// The email
		/// Required
		/// Pattern: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="login")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$")]
		public string Login { get; set; }
		
		/// <summary>
		/// Your password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MapBeezUPColumnRequest
	{
		
		/// <summary>
		/// The BeezUP column name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPColumnName")]
		public string BeezUPColumnName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MappingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		optional = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notConfigurable = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MarginType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tracker = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Global = 1,
	}
	
	/// <summary>
	/// This object indicates you the association between a channel catalog and a marketplace. The account identifier will be automatically defined based on your marketplace merchant identfier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketplaceChannelCatalog
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiSettingsStatus")]
		public BeezUPCommonApiSettingsStatus ApiSettingsStatus { get; set; }
		
		/// <summary>
		/// The channel catalog identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPChannelCatalogId")]
		public string BeezUPChannelCatalogId { get; set; }
		
		/// <summary>
		/// The channel identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPChannelId")]
		public string BeezUPChannelId { get; set; }
		
		/// <summary>
		/// The marketplace name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPMarketplaceName")]
		public object BeezUPMarketplaceName { get; set; }
		
		/// <summary>
		/// The store identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPStoreId")]
		public string BeezUPStoreId { get; set; }
		
		/// <summary>
		/// The store name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPStoreName")]
		public string BeezUPStoreName { get; set; }
		
		/// <summary>
		/// The enabled status of the Channel Catalog
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// Indicate the actions you can do on a channel catalog. If the settings are valid, you will be able to access to the publication history.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public MarketplaceChannelCatalogLinks Links { get; set; }
		
		/// <summary>
		/// Indicates the List Of Values related to the marketplace
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lovLinks")]
		public MarketplaceChannelCatalogLovLinks LovLinks { get; set; }
		
		/// <summary>
		/// The marketplace account identifier in BeezUP. This account identifier is based on your api settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketplaceAccountId")]
		public System.Nullable<System.Int32> MarketplaceAccountId { get; set; }
		
		/// <summary>
		/// In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceBusinessCode")]
		public string MarketplaceBusinessCode { get; set; }
		
		/// <summary>
		/// The marketplace country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Decoding_table for more details)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceIsoCountryCodeAlpha2")]
		public string MarketplaceIsoCountryCodeAlpha2 { get; set; }
		
		/// <summary>
		/// The marketplace identifier in the marketplace
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceMarketPlaceId")]
		public string MarketplaceMarketPlaceId { get; set; }
		
		/// <summary>
		/// The marketplace merchant identifier list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketplaceMerchantIdentifiers")]
		public System.Collections.Generic.Dictionary<string, string> MarketplaceMerchantIdentifiers { get; set; }
		
		/// <summary>
		/// The technical code of the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceTechnicalCode")]
		public string MarketplaceTechnicalCode { get; set; }
	}
	
	/// <summary>
	/// Indicate the actions you can do on a channel catalog. If the settings are valid, you will be able to access to the publication history.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketplaceChannelCatalogLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LinksGetChannelCatalogMarketplacePropertiesLink Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publications")]
		public LinksGetPublicationsLink Publications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishOptions")]
		public MarketplaceChannelCatalogPublicationOption[] PublishOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public LinksGetChannelCatalogMarketplaceSettingsLink Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketplaceChannelCatalogPublicationOption
	{
		
		/// <summary>
		/// The Feed Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feedType")]
		public PublicationFeedReportingFeedType FeedType { get; set; }
		
		/// <summary>
		/// Define the publication strategy kind, for that you have 2 choices 
		///* Delta - This is the recommanded publication strategy kind, this strategy will push to the marketplace only the difference between your catalog and the previous published feeds done by BeezUP. 
		///* Full - If you want to force the publication of all your catalog feeds to the marketplace. 
		///      !WARNING! Depending to the marketplace this operation will purge the existing offers on the marketplace that are not in the catalog or unknown from the publication feed referential.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(MarketplaceChannelCatalogPublicationOptionKind.Delta)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public MarketplaceChannelCatalogPublicationOptionKind Kind { get; set; } = MarketplaceChannelCatalogPublicationOptionKind.Delta;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public LinksPublishCatalogToMarketplaceLink Link { get; set; }
		
		/// <summary>
		/// The Publication Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public string Strategy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="withUnpublish")]
		public bool WithUnpublish { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MarketplaceChannelCatalogPublicationOptionKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delta = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Full = 1,
	}
	
	/// <summary>
	/// Indicates the List Of Values related to the marketplace
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketplaceChannelCatalogLovLinks
	{
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelationReasonCodeLOV")]
		public BeezUPCommonLOVLink3 CancelationReasonCodeLOV { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierCodeLOV")]
		public BeezUPCommonLOVLink3 CarrierCodeLOV { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketplaceStorePropertyGroupLOV")]
		public BeezUPCommonLOVLink3 MarketplaceStorePropertyGroupLOV { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketplaceStorePropertyLOV")]
		public BeezUPCommonLOVLink3 MarketplaceStorePropertyLOV { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundReasonCodeLOV")]
		public BeezUPCommonLOVLink3 RefundReasonCodeLOV { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingMethodLOV")]
		public BeezUPCommonLOVLink3 ShippingMethodLOV { get; set; }
	}
	
	/// <summary>
	/// The marketplace channel catalog list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketplaceChannelCatalogList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public MarketplaceChannelCatalogListLinks Links { get; set; }
		
		/// <summary>
		/// The list of marketplace channel catalog
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceChannelCatalogs")]
		public MarketplaceChannelCatalog[] MarketplaceChannelCatalogs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketplaceChannelCatalogListLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetMarketplaceChannelCatalogsLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NextContractInfo : ContractInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public NextContractInfoLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NextContractInfoLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public LinksdeleteNextContractLink Delete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Offer
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public OfferContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public BeezUPCommonInfoSummaries Info { get; set; }
		
		/// <summary>
		/// The different actions you can make on this offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OfferLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferContent
	{
		
		/// <summary>
		/// Describe the billing period information related to the offer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contractBillingPeriodInfo")]
		public ContractBillingPeriodInfo ContractBillingPeriodInfo { get; set; }
		
		/// <summary>
		/// Describe the bonus information related to your current contract.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contractBonusInfo")]
		public ContractBonusInfo ContractBonusInfo { get; set; }
		
		/// <summary>
		/// Describe the click information related to the offer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contractClickInfo")]
		public ContractClickInfo ContractClickInfo { get; set; }
		
		/// <summary>
		/// Describe the commitment information related to the offer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contractCommitmentInfo")]
		public ContractCommitmentInfo ContractCommitmentInfo { get; set; }
		
		/// <summary>
		/// Describe the discount information related to the offer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contractDiscountInfo")]
		public ContractDiscountInfo ContractDiscountInfo { get; set; }
		
		/// <summary>
		/// Describe the pricing information related to the offer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contractMoneyInfo")]
		public ContractMoneyInfo ContractMoneyInfo { get; set; }
		
		/// <summary>
		/// Describe the store information related to the offer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contractStoreInfo")]
		public ContractStoreInfo ContractStoreInfo { get; set; }
		
		/// <summary>
		/// The termination reason, if your current contract is scheduled to be terminated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contractTerminationReason")]
		public string ContractTerminationReason { get; set; }
		
		/// <summary>
		/// The contract termination reason type identifier, if your current contract is scheduled to be terminated. The value is based on the list of values /user/lov/ContractTerminationReason
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contractTerminationReasonType")]
		public System.Nullable<System.Int32> ContractTerminationReasonType { get; set; }
		
		/// <summary>
		/// Internal usage: Indicates if we have to notify you about VAT exemption.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notifyVatExemption")]
		public bool NotifyVatExemption { get; set; }
		
		/// <summary>
		/// Describe the prorata info based on your previous invoice
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousFixPeriodInvoiceProrataInfo")]
		public PreviousFixPeriodInvoiceProrataInfo PreviousFixPeriodInvoiceProrataInfo { get; set; }
	}
	
	/// <summary>
	/// Describe the prorata info based on your previous invoice
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PreviousFixPeriodInvoiceProrataInfo
	{
		
		/// <summary>
		/// The amout after tax of the previous invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountAfterTax")]
		public System.Nullable<System.Double> AmountAfterTax { get; set; }
		
		/// <summary>
		/// The amount to be payed of the previous invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountToBePaid")]
		public System.Nullable<System.Double> AmountToBePaid { get; set; }
		
		/// <summary>
		/// The prorata amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computedProrataToBeDeducted")]
		public System.Nullable<System.Double> ComputedProrataToBeDeducted { get; set; }
		
		/// <summary>
		/// The contract id related to the previous invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contractId")]
		public string ContractId { get; set; }
		
		/// <summary>
		/// The fixed end period of the previous invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPeriodEndDate")]
		public System.Nullable<System.DateOnly> FixedPeriodEndDate { get; set; }
		
		/// <summary>
		/// The fixed start period of the previous invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPeriodStartDate")]
		public System.Nullable<System.DateOnly> FixedPeriodStartDate { get; set; }
		
		/// <summary>
		/// The previous invoice number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceNumber")]
		public string InvoiceNumber { get; set; }
	}
	
	/// <summary>
	/// The different actions you can make on this offer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="createContract")]
		public LinkscreateContractLink CreateContract { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferFunctionality
	{
		
		/// <summary>
		/// The functionality code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="functionalityCode")]
		public string FunctionalityCode { get; set; }
		
		/// <summary>
		/// The max value in integer for this feature in this offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValueInteger")]
		public System.Nullable<System.Int32> MaxValueInteger { get; set; }
		
		/// <summary>
		/// A description text of this feature
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Is this feature is unlimited for this offer?
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public bool Unlimited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferRequest
	{
		
		/// <summary>
		/// Can be null. The billing period in month based on /billingPeriods
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billingPeriodInMonth")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int BillingPeriodInMonth { get; set; }
		
		/// <summary>
		/// The coupon discount code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="couponDiscountCode")]
		public string CouponDiscountCode { get; set; }
		
		/// <summary>
		/// Your special coupon offer identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="couponOfferCode")]
		public string CouponOfferCode { get; set; }
		
		/// <summary>
		/// The offer id based on /offers. Not a free offer of course.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int OfferId { get; set; }
		
		/// <summary>
		/// The store count you want to have in your contract.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeCount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int StoreCount { get; set; }
	}
	
	/// <summary>
	/// The optimisation action
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OptimisationActionName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reenable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptimiseAllRequest : OrderedReportFilterCommonParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="analyticsProductColumnFilters")]
		public AnalyticsProductColumnFilters AnalyticsProductColumnFilters { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productColumnsToDisplay")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] ProductColumnsToDisplay { get; set; }
		
		/// <summary>
		/// You can filter on the product state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productState")]
		public System.Nullable<OptimiseAllRequestProductState> ProductState { get; set; }
		
		/// <summary>
		/// The report type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportType")]
		public OptimiseAllRequestReportType ReportType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OptimiseAllRequestProductState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OptimiseAllRequestReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ByChannel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ByCategory = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ByProduct = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ByDay = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptimiseRequest : OptimiseAllRequest
	{
		
		/// <summary>
		/// Indicates the page number
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// Indicate the item count per page
		/// Minimum: 25
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		[System.ComponentModel.DataAnnotations.Range(25, 100)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Order : OrderHeader
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OrderLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderItems")]
		public OrderItem[] OrderItems { get; set; }
		
		/// <summary>
		/// The Buyer address city of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_AddressCity")]
		public string Order_Buyer_AddressCity { get; set; }
		
		/// <summary>
		/// The Buyer address country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#/decoding_table for more details)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_AddressCountryIsoCodeAlpha2")]
		public string Order_Buyer_AddressCountryIsoCodeAlpha2 { get; set; }
		
		/// <summary>
		/// The Buyer address country name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_AddressCountryName")]
		public string Order_Buyer_AddressCountryName { get; set; }
		
		/// <summary>
		/// The Buyer address line 1 of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_AddressLine1")]
		public string Order_Buyer_AddressLine1 { get; set; }
		
		/// <summary>
		/// The Buyer address line 2 of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_AddressLine2")]
		public string Order_Buyer_AddressLine2 { get; set; }
		
		/// <summary>
		/// The Buyer address line 3 of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_AddressLine3")]
		public string Order_Buyer_AddressLine3 { get; set; }
		
		/// <summary>
		/// The Buyer address postal code of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_AddressPostalCode")]
		public string Order_Buyer_AddressPostalCode { get; set; }
		
		/// <summary>
		/// The Buyer address state or region of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_AddressStateOrRegion")]
		public string Order_Buyer_AddressStateOrRegion { get; set; }
		
		/// <summary>
		/// The buyer civility for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_Civility")]
		public string Order_Buyer_Civility { get; set; }
		
		/// <summary>
		/// The buyer company name for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_CompanyName")]
		public string Order_Buyer_CompanyName { get; set; }
		
		/// <summary>
		/// The email of the buyer for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_Email")]
		public string Order_Buyer_Email { get; set; }
		
		/// <summary>
		/// Order Buyer first name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_FirstName")]
		public string Order_Buyer_FirstName { get; set; }
		
		/// <summary>
		/// The buyer identifier for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_Identifier")]
		public string Order_Buyer_Identifier { get; set; }
		
		/// <summary>
		/// Order Buyer last name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_LastName")]
		public string Order_Buyer_LastName { get; set; }
		
		/// <summary>
		/// The mobile phone number of the buyer for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_MobilePhone")]
		public string Order_Buyer_MobilePhone { get; set; }
		
		/// <summary>
		/// The phone number of the buyer for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_Phone")]
		public string Order_Buyer_Phone { get; set; }
		
		/// <summary>
		/// The comment associated to this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Comment")]
		public string Order_Comment { get; set; }
		
		/// <summary>
		/// The order FulfilledBy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_FulfilledBy")]
		public string Order_FulfilledBy { get; set; }
		
		/// <summary>
		/// The order IsBusiness
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_IsBusiness")]
		public System.Nullable<System.Boolean> Order_IsBusiness { get; set; }
		
		/// <summary>
		/// Indicates if the order is considered as Prime (only on Amazon)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_IsPrime")]
		public System.Nullable<System.Boolean> Order_IsPrime { get; set; }
		
		/// <summary>
		/// Useful to identify the origin of the order. For example in Amazon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_MarketPlaceChannel")]
		public string Order_MarketPlaceChannel { get; set; }
		
		/// <summary>
		/// Technical information: The url to the source of this order items. We received this information from the marketplace.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_OrderItemsSourceUri")]
		public string Order_OrderItemsSourceUri { get; set; }
		
		/// <summary>
		/// Technical information: The url to the source of this order. We received this information from the marketplace.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_OrderSourceUri")]
		public string Order_OrderSourceUri { get; set; }
		
		/// <summary>
		/// The UTC date of the payment of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_PayingUtcDate")]
		public System.Nullable<System.DateTimeOffset> Order_PayingUtcDate { get; set; }
		
		/// <summary>
		/// The payment method of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_PaymentMethod")]
		public string Order_PaymentMethod { get; set; }
		
		/// <summary>
		/// The shipping address city of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_AddressCity")]
		public string Order_Shipping_AddressCity { get; set; }
		
		/// <summary>
		/// The shipping address country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#/decoding_table for more details)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_AddressCountryIsoCodeAlpha2")]
		public string Order_Shipping_AddressCountryIsoCodeAlpha2 { get; set; }
		
		/// <summary>
		/// The shipping address country name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_AddressCountryName")]
		public string Order_Shipping_AddressCountryName { get; set; }
		
		/// <summary>
		/// The shipping address line 1 of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_AddressLine1")]
		public string Order_Shipping_AddressLine1 { get; set; }
		
		/// <summary>
		/// The shipping address line 2 of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_AddressLine2")]
		public string Order_Shipping_AddressLine2 { get; set; }
		
		/// <summary>
		/// The shipping address line 3 of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_AddressLine3")]
		public string Order_Shipping_AddressLine3 { get; set; }
		
		/// <summary>
		/// The name of the person in the shipping address for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_AddressName")]
		public string Order_Shipping_AddressName { get; set; }
		
		/// <summary>
		/// The shipping address postal code of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_AddressPostalCode")]
		public string Order_Shipping_AddressPostalCode { get; set; }
		
		/// <summary>
		/// The shipping address state or region of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_AddressStateOrRegion")]
		public string Order_Shipping_AddressStateOrRegion { get; set; }
		
		/// <summary>
		/// The civility of the person in the shipping address for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_Civility")]
		public string Order_Shipping_Civility { get; set; }
		
		/// <summary>
		/// The company name of the shipping address for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_CompanyName")]
		public string Order_Shipping_CompanyName { get; set; }
		
		/// <summary>
		/// The UTC date of the earliest ship for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_EarliestShipUtcDate")]
		public System.Nullable<System.DateTimeOffset> Order_Shipping_EarliestShipUtcDate { get; set; }
		
		/// <summary>
		/// The email of the person in the shipping address for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_Email")]
		public string Order_Shipping_Email { get; set; }
		
		/// <summary>
		/// Order Shipping first name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_FirstName")]
		public string Order_Shipping_FirstName { get; set; }
		
		/// <summary>
		/// Order Shipping last name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_LastName")]
		public string Order_Shipping_LastName { get; set; }
		
		/// <summary>
		/// The UTC date of the latest ship for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_LatestShipUtcDate")]
		public System.Nullable<System.DateTimeOffset> Order_Shipping_LatestShipUtcDate { get; set; }
		
		/// <summary>
		/// The shipping method of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_Method")]
		public string Order_Shipping_Method { get; set; }
		
		/// <summary>
		/// The mobile phone number of the person in the shipping address for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_MobilePhone")]
		public string Order_Shipping_MobilePhone { get; set; }
		
		/// <summary>
		/// The phone number of the person in the shipping address for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_Phone")]
		public string Order_Shipping_Phone { get; set; }
		
		/// <summary>
		/// The shipping price of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_Price")]
		public System.Nullable<System.Decimal> Order_Shipping_Price { get; set; }
		
		/// <summary>
		/// The shipping tax for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Shipping_ShippingTax")]
		public System.Nullable<System.Decimal> Order_Shipping_ShippingTax { get; set; }
		
		/// <summary>
		/// The total commission of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_TotalCommission")]
		public System.Nullable<System.Decimal> Order_TotalCommission { get; set; }
		
		/// <summary>
		/// The total tax of this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_TotalTax")]
		public System.Nullable<System.Decimal> Order_TotalTax { get; set; }
		
		/// <summary>
		/// Contains the authorized change actions for an order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transitionLinks")]
		public LinksChangeOrderLink[] TransitionLinks { get; set; }
	}
	
	/// <summary>
	/// Describe an order item. All properties with the prefix orderItem_ are translated in the list of values /user/lov/OrderMetaInfoOrderItems
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderItem
	{
		
		/// <summary>
		/// The BeezUP identifier of the order Item
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPOrderItemId")]
		public string BeezUPOrderItemId { get; set; }
		
		/// <summary>
		/// The store id in the beezup system related to the order item. This property will help you to match the order to the inventory system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_BeezUPStoreId")]
		public string OrderItem_BeezUPStoreId { get; set; }
		
		/// <summary>
		/// The merchant product condition of the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_Condition")]
		public string OrderItem_Condition { get; set; }
		
		/// <summary>
		/// The URL of the image of the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_ImageUrl")]
		public string OrderItem_ImageUrl { get; set; }
		
		/// <summary>
		/// The price of the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_ItemPrice")]
		public System.Nullable<System.Decimal> OrderItem_ItemPrice { get; set; }
		
		/// <summary>
		/// The tax of the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_ItemTax")]
		public System.Nullable<System.Decimal> OrderItem_ItemTax { get; set; }
		
		/// <summary>
		/// The marketplace product identifier of the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_MarketPlaceProductId")]
		public string OrderItem_MarketPlaceProductId { get; set; }
		
		/// <summary>
		/// The marketplace image uri
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_MarketplaceImageUri")]
		public string OrderItem_MarketplaceImageUri { get; set; }
		
		/// <summary>
		/// The merchant product uri of the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_MarketplaceProductUri")]
		public string OrderItem_MarketplaceProductUri { get; set; }
		
		/// <summary>
		/// The product id indicated in the catalog importation in BeezUP system for this order item. This property will help you to match the order to the inventory system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_MerchantImportedProductId")]
		public string OrderItem_MerchantImportedProductId { get; set; }
		
		/// <summary>
		/// The column name for the product id indicated in the catalog importation in BeezUP system related to this order item. This property will help you to match the order to the inventory system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_MerchantImportedProductIdColumnName")]
		public string OrderItem_MerchantImportedProductIdColumnName { get; set; }
		
		/// <summary>
		/// The product url indicated in the catalog importation in BeezUP system related to this order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_MerchantImportedProductUrl")]
		public string OrderItem_MerchantImportedProductUrl { get; set; }
		
		/// <summary>
		/// The merchant product id of the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_MerchantProductId")]
		public string OrderItem_MerchantProductId { get; set; }
		
		/// <summary>
		/// The column name indicate in the mapping for the product id related to the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_MerchantProductIdColumnName")]
		public string OrderItem_MerchantProductIdColumnName { get; set; }
		
		/// <summary>
		/// The order item type of the order item
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderItem_OrderItemType")]
		public string OrderItem_OrderItemType { get; set; }
		
		/// <summary>
		/// The quantity of the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_Quantity")]
		public System.Nullable<System.Decimal> OrderItem_Quantity { get; set; }
		
		/// <summary>
		/// The shipping price of the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_Shipping_Price")]
		public System.Nullable<System.Decimal> OrderItem_Shipping_Price { get; set; }
		
		/// <summary>
		/// The title of the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_Title")]
		public string OrderItem_Title { get; set; }
		
		/// <summary>
		/// The total price of the order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_TotalPrice")]
		public System.Nullable<System.Decimal> OrderItem_TotalPrice { get; set; }
		
		/// <summary>
		/// The order item gtin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItem_gtin")]
		public string OrderItem_gtin { get; set; }
	}
	
	/// <summary>
	/// Indicate which direction to order results by
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderByDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	/// <summary>
	/// Represent the reporting of the Order report exportations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderExportationReporting
	{
		
		[System.Runtime.Serialization.DataMember(Name="abortionUtcDate")]
		public System.Nullable<System.DateTimeOffset> AbortionUtcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginUtcDate")]
		public System.Nullable<System.DateTimeOffset> BeginUtcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blobNameUri")]
		public string BlobNameUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endUtcDate")]
		public System.Nullable<System.DateTimeOffset> EndUtcDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enqueuedUtcDate")]
		public System.DateTimeOffset EnqueuedUtcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionUUID")]
		public string ExecutionUUID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationUtcDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationUtcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureUtcDate")]
		public System.Nullable<System.DateTimeOffset> FailureUtcDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Raw representation of the JSON
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonCriteria")]
		public string JsonCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateUtcDate")]
		public System.Nullable<System.DateTimeOffset> LastUpdateUtcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderCount")]
		public System.Nullable<System.Int32> OrderCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="processingStatus")]
		public OrderExportationReportingProcessingStatus ProcessingStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remainingOrderCount")]
		public System.Nullable<System.Int32> RemainingOrderCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resumedUtcDate")]
		public System.Nullable<System.DateTimeOffset> ResumedUtcDate { get; set; }
		
		/// <summary>
		/// Indicates the origin of the operation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public ChangeOrderReportingSourceType SourceType { get; set; }
		
		/// <summary>
		/// The user identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUserId")]
		public string SourceUserId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceUserName")]
		public string SourceUserName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suspendedUtcDate")]
		public System.Nullable<System.DateTimeOffset> SuspendedUtcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutDuration")]
		public string TimeoutDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warningMessage")]
		public string WarningMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderExportationReportingProcessingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Done = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyInProgress = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Aborted = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 6,
	}
	
	/// <summary>
	/// The list of Order report exportations.\
	///The paginationResult properties can be null if the list is empty.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderExportations
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportations")]
		public OrderExportationReporting[] Exportations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OrderExportationsLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public BeezUPCommonPaginationResult PaginationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderExportationsLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetOrderExportationsLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderHarvestErrorValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="technicalCodePropertyName")]
		public string TechnicalCodePropertyName { get; set; }
	}
	
	/// <summary>
	/// The key is the OrderMetaInfo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderHarvestErrors
	{
	}
	
	/// <summary>
	/// Describe the basic information related to an order. All properties with the prefix order_ are translated in the list of values /user/lov/OrderMetaInfoOrderDetails
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderHeader
	{
		
		/// <summary>
		/// The marketplace account identifier in BeezUP. This account identifier is based on your api settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public int AccountId { get; set; }
		
		/// <summary>
		/// The BeezUP Order identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beezUPOrderId")]
		public string BeezUPOrderId { get; set; }
		
		/// <summary>
		/// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beezUPOrderUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string BeezUPOrderUrl { get; set; }
		
		/// <summary>
		/// ETag value to identify the order.\
		///This information is required for the operation GetOrder and ChangeOrder.\
		///For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OrderHeaderLinks Links { get; set; }
		
		/// <summary>
		/// In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceBusinessCode")]
		public string MarketplaceBusinessCode { get; set; }
		
		/// <summary>
		/// The technical code of the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceTechnicalCode")]
		public string MarketplaceTechnicalCode { get; set; }
		
		/// <summary>
		/// Buyer full name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Buyer_Name")]
		public string Order_Buyer_Name { get; set; }
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_CurrencyCode")]
		public string Order_CurrencyCode { get; set; }
		
		/// <summary>
		/// The order invoice number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Invoice_Number")]
		public string Order_Invoice_Number { get; set; }
		
		/// <summary>
		/// The order invoice URI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Invoice_Uri")]
		public string Order_Invoice_Uri { get; set; }
		
		/// <summary>
		/// The last modification UTC date done by BeezUP of this order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_LastModificationUtcDate")]
		public System.DateTimeOffset Order_LastModificationUtcDate { get; set; }
		
		/// <summary>
		/// The last modification UTC date done by the marketplace on this order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_MarketplaceLastModificationUtcDate")]
		public System.DateTimeOffset Order_MarketplaceLastModificationUtcDate { get; set; }
		
		/// <summary>
		/// The order marketplace identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_MarketplaceOrderId")]
		public string Order_MarketplaceOrderId { get; set; }
		
		/// <summary>
		/// The e-commerce software name of the merchant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_MerchantECommerceSoftwareName")]
		public string Order_MerchantECommerceSoftwareName { get; set; }
		
		/// <summary>
		/// The e-commece software version of the merchant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_MerchantECommerceSoftwareVersion")]
		public string Order_MerchantECommerceSoftwareVersion { get; set; }
		
		/// <summary>
		/// The order merchant identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_MerchantOrderId")]
		public string Order_MerchantOrderId { get; set; }
		
		/// <summary>
		/// The purchase date of this order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_PurchaseUtcDate")]
		public System.DateTimeOffset Order_PurchaseUtcDate { get; set; }
		
		/// <summary>
		/// BeezUP order status. Unified for all marketplaces.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_Status_BeezUPOrderStatus")]
		public string Order_Status_BeezUPOrderStatus { get; set; }
		
		/// <summary>
		/// The marketplace order state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_Status_MarketplaceOrderStatus")]
		public string Order_Status_MarketplaceOrderStatus { get; set; }
		
		/// <summary>
		/// The total price of this order (corresponding to the amount paid by the customer)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_TotalPrice")]
		public System.Nullable<System.Decimal> Order_TotalPrice { get; set; }
		
		/// <summary>
		/// If true, there is currently a harvest or an order change in progress. Otherwise false.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="processing")]
		public bool Processing { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderHeaderLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetOrderLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderHeaderWithLinks : OrderHeader
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OrderHeaderLinks Links { get; set; }
	}
	
	/// <summary>
	/// Describe the history related to an order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderHistory
	{
		
		/// <summary>
		/// The list of change order operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeOrderReportings")]
		public ChangeOrderReporting[] ChangeOrderReportings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="harvestOrderReportings")]
		public HarvestOrderReporting[] HarvestOrderReportings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModificationUtcDate")]
		public System.Nullable<System.DateTimeOffset> LastModificationUtcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderIdentifierWithETag : OrderIdentifier
	{
		
		/// <summary>
		/// ETag value to identify the order.\
		///This information is required for the operation GetOrder and ChangeOrder.\
		///For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderIndex
	{
		
		/// <summary>
		/// Gives you all entry point operations you can do on this API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OrderIndexLinks Links { get; set; }
		
		/// <summary>
		/// Gives you all the LOV to get the translations realated to operation name, codes, property names and statuses.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lovLinks")]
		public OrderIndexLovLinks LovLinks { get; set; }
	}
	
	/// <summary>
	/// Gives you all entry point operations you can do on this API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderIndexLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoTransitions")]
		public LinksGetAutomaticTransitionsLink AutoTransitions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clearMerchantInfos")]
		public LinksClearMerchantOrderInfoListLink ClearMerchantInfos { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="export")]
		public LinksExportOrdersLink Export { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportations")]
		public LinksGetOrderExportationsLink Exportations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="harvest")]
		public LinksHarvestAllLink Harvest { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lightOrders")]
		public LinksGetOrderListLightLink LightOrders { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public LinksGetOrderListFullLink Orders { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetOrderIndexLink Self { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="setMerchantInfos")]
		public LinksSetMerchantOrderInfoListLink SetMerchantInfos { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LinksGetMarketplaceAccountsSynchronizationLink Status { get; set; }
	}
	
	/// <summary>
	/// Gives you all the LOV to get the translations realated to operation name, codes, property names and statuses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderIndexLovLinks
	{
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderChangeBusinessOperationType")]
		public BeezUPCommonLOVLink3 OrderChangeBusinessOperationType { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderProperty")]
		public BeezUPCommonLOVLink3 OrderProperty { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderPropertyPosted")]
		public BeezUPCommonLOVLink3 OrderPropertyPosted { get; set; }
		
		/// <summary>
		/// Describe the way you have to follow to get access to the LOV
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderState")]
		public BeezUPCommonLOVLink3 OrderState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderInvoiceDesignSettings
	{
		
		/// <summary>
		/// Footer Content HTML
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footerContentHtml")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FooterContentHtml { get; set; }
		
		/// <summary>
		/// Header Content HTML
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headerContentHtml")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string HeaderContentHtml { get; set; }
	}
	
	/// <summary>
	/// Order Invoice General Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderInvoiceGeneralSettings
	{
		
		/// <summary>
		/// If the error is translated, the culture name will be indicated
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cultureName")]
		public string CultureName { get; set; }
		
		/// <summary>
		/// Invoice Prefix. Can contain 1 to 50 characters, with alphanumeric characters in lowercase uppercase and #, _, -
		/// Required
		/// Pattern: ^[a-zA-Z0-9#_-]{1,50}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoicePrefix")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9#_-]{1,50}$")]
		public string InvoicePrefix { get; set; }
		
		/// <summary>
		/// Invoice Sequence Number
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoiceStartingSequenceNumber")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int InvoiceStartingSequenceNumber { get; set; }
		
		/// <summary>
		/// Product VAT in percent
		/// Required
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productVATPercent")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public double ProductVATPercent { get; set; }
		
		/// <summary>
		/// Shipping cost VAT in percent
		/// Required
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shippingVATPercent")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public double ShippingVATPercent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderLinks : OrderHeaderLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clearMerchantInfo")]
		public LinksClearMerchantOrderInfoLink ClearMerchantInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="harvest")]
		public LinksHarvestOrderLink Harvest { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="history")]
		public LinksGetOrderHistoryLink History { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="setMerchantInfo")]
		public LinksSetMerchantOrderInfoLink SetMerchantInfo { get; set; }
	}
	
	/// <summary>
	/// Indicates on which date you want to make the filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderListDateSearchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Modification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Purchase = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MarketPlaceModification = 2,
	}
	
	/// <summary>
	/// The order list with all information we have from the orders and its items.\
	///The paginationResult properties can be null if the list is empty.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderListFull
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OrderListFullLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public Order[] Orders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public BeezUPCommonPaginationResult PaginationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderListFullLinks : OrderListLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetOrderListFullLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderListFullWithLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OrderListFullLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public OrderWithLinks[] Orders { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public PaginationResult PaginationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderWithLinks : Order
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OrderLinks Links { get; set; }
		
		/// <summary>
		/// Contains the authorized change actions for an order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transitionLinks")]
		public LinksChangeOrderLink[] TransitionLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaginationResult
	{
		
		/// <summary>
		/// The entry count currently returned
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entryCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int EntryCount { get; set; }
		
		/// <summary>
		/// The navigation links 'first', 'last', 'next', 'previous'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PaginationResultLinks Links { get; set; }
		
		/// <summary>
		/// The page count
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int PageCount { get; set; }
		
		/// <summary>
		/// The total entry count
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalEntryCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int TotalEntryCount { get; set; }
	}
	
	/// <summary>
	/// The navigation links 'first', 'last', 'next', 'previous'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaginationResultLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first")]
		public Link3 First { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last")]
		public Link3 Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public Link3 Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public Link3 Previous { get; set; }
	}
	
	/// <summary>
	/// The order list with minimum information we have from the orders.\
	///The paginationResult properties can be null if the list is empty.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderListLight
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OrderListLightLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public OrderHeader[] Orders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public BeezUPCommonPaginationResult PaginationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderListLightLinks : OrderListLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetOrderListLightLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderListLightWithLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OrderListLightLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public OrderHeaderWithLinks[] Orders { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public PaginationResult PaginationResult { get; set; }
	}
	
	/// <summary>
	/// The list of actions you can do from the order list response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderListLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clearMerchantInfos")]
		public LinksClearMerchantOrderInfoListLink ClearMerchantInfos { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="export")]
		public LinksExportOrdersLink Export { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="harvest")]
		public LinksHarvestAllLink Harvest { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="setMerchantInfos")]
		public LinksSetMerchantOrderInfoListLink SetMerchantInfos { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LinksGetMarketplaceAccountsSynchronizationLink Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderListRequest : OrderListRequestWithoutPagination
	{
		
		/// <summary>
		/// Indicates the page number
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int PageNumber { get; set; } = 1;
		
		/// <summary>
		/// Indicate the order count per page
		/// Required
		/// Minimum: 25
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DefaultValue(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		[System.ComponentModel.DataAnnotations.Range(25, 100)]
		public int PageSize { get; set; } = 100;
	}
	
	/// <summary>
	/// Contains common filter parameters with Order By functionnality
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderedReportFilterCommonParameters : ReportFilterCommonParameters
	{
		
		/// <summary>
		/// Indicate on which indicator or value you want to make your formula
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public System.Nullable<OrderedReportFilterCommonParametersOrderBy> OrderBy { get; set; }
		
		/// <summary>
		/// Indicate which direction to order results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderByDirection")]
		public OrderByDirection OrderByDirection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderedReportFilterCommonParametersOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClickCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cost = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OrderCount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProductCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoldProductCount = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DisabledProductCount = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnabledProductCount = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TotalSales = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Margin = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROI = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerformanceIndicator = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaginationRequestParameters
	{
		
		/// <summary>
		/// Indicates the page number
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// Indicate the item count per page
		/// Minimum: 25
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		[System.ComponentModel.DataAnnotations.Range(25, 100)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	/// <summary>
	/// * path: if the parameter must be pass in the path uri
	///* header: if the parameter must be passed in http header
	///* query: if the parameter must be passed in querystring
	///* body: if the parameter must be passed in the body
	///* file: if the parameter must be passed in a multipart/form-data (https://swagger.io/docs/specification/2-0/file-upload/)
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ParameterIn
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		path = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		header = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		query = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		body = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		file = 4,
	}
	
	/// <summary>
	/// The value type of the parameter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		boolean = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="object")]
		_object = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		array = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date-time")]
		dateMinustime = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		file = 8,
	}
	
	/// <summary>
	/// Payment method
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PaymentMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Transfer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Debit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Paypal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreditNote = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Loss = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnlinePayment = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerformanceIndicatorFilter
	{
		
		/// <summary>
		/// Indicates the operator you want to apply on this indicator
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
		
		/// <summary>
		/// Indicate on which indicator or value you want to make your formula
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="performanceIndicator")]
		public OrderedReportFilterCommonParametersOrderBy PerformanceIndicator { get; set; }
		
		/// <summary>
		/// Indicates the filter value to apply on this indicator
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public double Value { get; set; }
	}
	
	/// <summary>
	/// The KPI formula
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerformanceIndicatorFormula
	{
		
		/// <summary>
		/// Indicate on which indicator or value you want to make your formula
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstParameter")]
		public System.Nullable<PerformanceIndicatorFormulaFirstParameter> FirstParameter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public System.Nullable<PerformanceIndicatorFormulaOperatorName> OperatorName { get; set; }
		
		/// <summary>
		/// Indicate on which indicator or value you want to make your formula
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondParameter")]
		public PerformanceIndicatorFormulaFirstParameter SecondParameter { get; set; }
		
		/// <summary>
		/// Indicate the value of the third parameter of your formula
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdParameter")]
		public System.Nullable<System.Int32> ThirdParameter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PerformanceIndicatorFormulaFirstParameter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cost = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TotalSales = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Margin = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TotalSalesMinusCost = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MarginMinusCost = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OrderCount = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClickCount = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoldProductCount = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		One = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PerformanceIndicatorFormulaOperatorName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Multiply = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Divide = 1,
	}
	
	/// <summary>
	/// Indicate on which indicator or value you want to make your formula
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PerformanceIndicatorFormulaParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cost = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TotalSales = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Margin = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TotalSalesMinusCost = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MarginMinusCost = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OrderCount = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClickCount = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoldProductCount = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		One = 8,
	}
	
	/// <summary>
	/// Indicate on which indicator or value you want to make your formula
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PerformanceIndicatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClickCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cost = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OrderCount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProductCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoldProductCount = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DisabledProductCount = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnabledProductCount = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TotalSales = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Margin = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROI = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerformanceIndicator = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PreviewOrderInvoiceRequest
	{
		
		/// <summary>
		/// Invoice Sequence Number
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceSequenceNumber")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> InvoiceSequenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PreviewOrderInvoiceResponse
	{
		
		/// <summary>
		/// Invoice Content HTML
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoiceHtmlContent")]
		public string InvoiceHtmlContent { get; set; }
	}
	
	/// <summary>
	/// Represent a catalog product
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Product
	{
		
		/// <summary>
		/// The catalog category identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		/// <summary>
		/// Indicates if the product exists in the current catalog
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exists")]
		public bool Exists { get; set; }
		
		/// <summary>
		/// The product identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The key is the column identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public ProductValues Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public BeezUPCommonPaginationResult PaginationResult { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="products")]
		public Product[] Products { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOverrideWithCatalogValue
	{
		
		/// <summary>
		/// The catalog product value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalogValue")]
		public string CatalogValue { get; set; }
		
		/// <summary>
		/// The overridden product value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="override")]
		public string Override { get; set; }
	}
	
	/// <summary>
	/// The key is the channel column identifier
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOverrides
	{
	}
	
	/// <summary>
	/// Product overrides compatibilites list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOverridesCopyResponse
	{
	}
	
	/// <summary>
	/// Describe a product sample
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductSample
	{
		
		/// <summary>
		/// The key is the column identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productValues")]
		public ProductValues ProductValues { get; set; }
	}
	
	/// <summary>
	/// Indicate how you want to combine the filters:
	///* funnel: You will get the products which meet at least one of the product set criterion. The criteria are applied in the following order:
	///  - categorization
	///  - exclusion filters
	///  - deactivations
	///* cumulative: You will get the products which have all the product set criteria
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProductSetVisibilityCriteriaLogicType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		funnel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cumulative = 1,
	}
	
	/// <summary>
	/// You can filter on the product state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProductStateFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfilePictureInfo
	{
		
		/// <summary>
		/// Your profile picture choice about usage of gravatar picture, initials picture or uploaded picture.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profilePictureSelected")]
		public ProfilePictureInfoProfilePictureSelected ProfilePictureSelected { get; set; }
		
		/// <summary>
		/// Indicate the url of your picture profil
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilePictureUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string ProfilePictureUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProfilePictureInfoProfilePictureSelected
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gravatar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initials = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uploaded = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfilePictureInfoResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ProfilePictureInfoResponseLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profilePictureInfo")]
		public ProfilePictureInfoWithDefault ProfilePictureInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfilePictureInfoResponseLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="save")]
		public LinkssaveProfilePictureInfoLink Save { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksgetProfilePictureInfoLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfilePictureInfoWithDefault : ProfilePictureInfo
	{
		
		/// <summary>
		/// Indicate the url of your picture profil based on gravatar
		/// Required
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gravatarProfilePictureUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string GravatarProfilePictureUrl { get; set; }
		
		/// <summary>
		/// Indicate the url of your picture profil based on your initials
		/// Required
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initialsProfilePictureUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string InitialsProfilePictureUrl { get; set; }
	}
	
	/// <summary>
	/// Your profile picture choice about usage of gravatar picture, initials picture or uploaded picture.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProfilePictureSelected
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gravatar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initials = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uploaded = 2,
	}
	
	/// <summary>
	/// Indicate the validaty of the discount
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PromotionalCodeValidity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Valid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExpiredOrInactive = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicChannelIndex
	{
		
		/// <summary>
		/// The key is the country iso code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public System.Collections.Generic.Dictionary<string, LinksGetChannelsLink> Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PublicChannelIndexLinks Links { get; set; }
	}
	
	public class PublicChannelIndexLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="channelCountryLov")]
		public LinksGetPublicListOfValuesLink ChannelCountryLov { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelTypeLov")]
		public LinksGetPublicListOfValuesLink ChannelTypeLov { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sectorLov")]
		public LinksGetPublicListOfValuesLink SectorLov { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelsIndexLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicChannelInfo
	{
		
		/// <summary>
		/// The channel home url
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="homeUrl")]
		public string HomeUrl { get; set; }
		
		/// <summary>
		/// The channel logo url
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logoUrl")]
		public string LogoUrl { get; set; }
		
		/// <summary>
		/// The channel name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The sector list related to a channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectors")]
		public string[] Sectors { get; set; }
		
		/// <summary>
		/// The type list related to a channel
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicChannelInfoList
	{
		
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public PublicChannelInfo[] Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PublicChannelInfoListLinks Links { get; set; }
	}
	
	public class PublicChannelInfoListLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetChannelsLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicListOfValuesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BeezUPCommonListOfValueItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PublicListOfValuesResponseLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicListOfValuesResponseLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetPublicListOfValuesLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicLovIndex
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PublicLovIndexLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicLovIndexLinks
	{
		
		/// <summary>
		/// List of lov link. The key is the list name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lists")]
		public PublicLovLinks Lists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetPublicLovIndexLink Self { get; set; }
	}
	
	/// <summary>
	/// List of lov link. The key is the list name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicLovLinks
	{
	}
	
	/// <summary>
	/// Define the publication strategy kind, for that you have 2 choices 
	///* Delta - This is the recommanded publication strategy kind, this strategy will push to the marketplace only the difference between your catalog and the previous published feeds done by BeezUP. 
	///* Full - If you want to force the publication of all your catalog feeds to the marketplace. 
	///      !WARNING! Depending to the marketplace this operation will purge the existing offers on the marketplace that are not in the catalog or unknown from the publication feed referential.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PublicationStrategyKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delta = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Full = 1,
	}
	
	/// <summary>
	/// The Publication Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PublicationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublishProducts = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublishOffers = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unpublish = 2,
	}
	
	/// <summary>
	/// Publish the catalog to the marketplace
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishCatalogToMarketplaceRequest
	{
		
		/// <summary>
		/// The Feed Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feedType")]
		public PublicationFeedReportingFeedType FeedType { get; set; }
		
		/// <summary>
		/// Define the publication strategy kind, for that you have 2 choices 
		///* Delta - This is the recommanded publication strategy kind, this strategy will push to the marketplace only the difference between your catalog and the previous published feeds done by BeezUP. 
		///* Full - If you want to force the publication of all your catalog feeds to the marketplace. 
		///      !WARNING! Depending to the marketplace this operation will purge the existing offers on the marketplace that are not in the catalog or unknown from the publication feed referential.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(MarketplaceChannelCatalogPublicationOptionKind.Delta)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicationStrategyKind")]
		public MarketplaceChannelCatalogPublicationOptionKind PublicationStrategyKind { get; set; } = MarketplaceChannelCatalogPublicationOptionKind.Delta;
		
		/// <summary>
		/// In full publication strategy kind, for some marktetplace, you can ask to unpublish or not your existing feeds on the markeptlace absent from your exported catalog.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="withUnpublish")]
		public bool WithUnpublish { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RandomProductList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="products")]
		public Product[] Products { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterRequest
	{
		
		/// <summary>
		/// The user id of your commercial in BeezUP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialOwnerUserId")]
		public string CommercialOwnerUserId { get; set; }
		
		/// <summary>
		/// Can be null. Default: en-GB. The culture name you want to use. FYI. \
		///The email activation will use this culture.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cultureName")]
		public string CultureName { get; set; }
		
		/// <summary>
		/// Your email. We refuse disposable email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The password you want to use for your new account. \
		///The password length must be greater or equals to 6 and lower or equals to 128. \
		///The password must contains at least one number and one special character
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportAdvancedFilters
	{
		
		/// <summary>
		/// If the margin type is 'Global', indicate the percentage of sale price.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="globalMarginPercent")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> GlobalMarginPercent { get; set; }
		
		/// <summary>
		/// If the linkOrderType is OnClickDate, indicate the max day to search the click from the order
		/// Minimum: 0
		/// Maximum: 180
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkClickToOrderMaxDay")]
		[System.ComponentModel.DataAnnotations.Range(0, 180)]
		public System.Nullable<System.Int32> LinkClickToOrderMaxDay { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(LinkClickToOrderType.OnPurchaseDate)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkClickToOrderType")]
		public LinkClickToOrderType LinkClickToOrderType { get; set; } = LinkClickToOrderType.OnPurchaseDate;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(MarginType.Tracker)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marginType")]
		public MarginType MarginType { get; set; } = MarginType.Tracker;
		
		/// <summary>
		/// If true, you will get only direct sales. Otherwise the indirect sales will be included.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="onlyDirectSales")]
		public bool OnlyDirectSales { get; set; } = false;
		
		/// <summary>
		/// If true, you will get the only the orders with payment validated. Otherwise, you will get all orders validated or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="onlyPaymentValidatedOrders")]
		public bool OnlyPaymentValidatedOrders { get; set; } = false;
		
		/// <summary>
		/// The KPI formula
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="performanceIndicatorFormula")]
		public PerformanceIndicatorFormula PerformanceIndicatorFormula { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByCategory
	{
		
		/// <summary>
		/// The product count for this category. This includes all the products that have been imported and can still have associated clicks and orders.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allProductCount")]
		public int AllProductCount { get; set; }
		
		/// <summary>
		/// The catalog category identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalogCategoryId")]
		public string CatalogCategoryId { get; set; }
		
		/// <summary>
		/// The catalog category path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalogCategoryPath")]
		public String[] CatalogCategoryPath { get; set; }
		
		/// <summary>
		/// The catalog product count for this category. This includes all products that are still present in your imported catalog.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalogProductCount")]
		public int CatalogProductCount { get; set; }
		
		/// <summary>
		/// The click count for this category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickCount")]
		public int ClickCount { get; set; }
		
		/// <summary>
		/// The cost for this category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public double Cost { get; set; }
		
		/// <summary>
		/// The enabled product count for this category. This includes all products that are still present in your imported catalog and have not been disabled via the optimisation feature.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabledProductCount")]
		public int EnabledProductCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ReportByCategoryLinks Links { get; set; }
		
		/// <summary>
		/// The margin for this category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="margin")]
		public System.Nullable<System.Double> Margin { get; set; }
		
		/// <summary>
		/// The order count for this category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderCount")]
		public int OrderCount { get; set; }
		
		/// <summary>
		/// The performance indicator based on the performance indicator formula indicated in the request for this category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="performanceIndicator")]
		public double PerformanceIndicator { get; set; }
		
		/// <summary>
		/// The Return On Investment for this category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roi")]
		public System.Nullable<System.Double> Roi { get; set; }
		
		/// <summary>
		/// The product sold count count for this category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="soldProductCount")]
		public int SoldProductCount { get; set; }
		
		/// <summary>
		/// The total sales for this category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalSales")]
		public double TotalSales { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByCategoryLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="disableProducts")]
		public LinksOptimiseByCategoryLink DisableProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableProducts")]
		public LinksOptimiseByCategoryLink EnableProducts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByCategoryRequest : OrderedReportFilterCommonParameters
	{
		
		/// <summary>
		/// Indicates the page number
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// Indicate the item count per page
		/// Minimum: 25
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		[System.ComponentModel.DataAnnotations.Range(25, 100)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByCategoryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public ReportByCategory[] Categories { get; set; }
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ReportByCategoryResponseLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public BeezUPCommonPaginationResult PaginationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByCategoryResponseLinks
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByChannel
	{
		
		/// <summary>
		/// The catalog product count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalogProductCount")]
		public int CatalogProductCount { get; set; }
		
		/// <summary>
		/// The basic info related to a channel
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public BeezUPCommonChannelBasicInfo Channel { get; set; }
		
		/// <summary>
		/// The click count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickCount")]
		public int ClickCount { get; set; }
		
		/// <summary>
		/// The cost for
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public double Cost { get; set; }
		
		/// <summary>
		/// The enabled product count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabledProductCount")]
		public int EnabledProductCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ReportByChannelLinks Links { get; set; }
		
		/// <summary>
		/// The margin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="margin")]
		public System.Nullable<System.Double> Margin { get; set; }
		
		/// <summary>
		/// The order count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderCount")]
		public int OrderCount { get; set; }
		
		/// <summary>
		/// The performance indicator based on the performance indicator formula indicated in the request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="performanceIndicator")]
		public double PerformanceIndicator { get; set; }
		
		/// <summary>
		/// The Return On Investment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roi")]
		public System.Nullable<System.Double> Roi { get; set; }
		
		/// <summary>
		/// The product sold count count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="soldProductCount")]
		public int SoldProductCount { get; set; }
		
		/// <summary>
		/// The total sales
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalSales")]
		public double TotalSales { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByChannelLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="disableProducts")]
		public LinksOptimiseByChannelLink DisableProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableProducts")]
		public LinksOptimiseByChannelLink EnableProducts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByChannelRequest : OrderedReportFilterCommonParameters
	{
		
		/// <summary>
		/// Indicates the page number
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// Indicate the item count per page
		/// Minimum: 25
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		[System.ComponentModel.DataAnnotations.Range(25, 100)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByChannelResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public ReportByChannel[] Channels { get; set; }
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ReportByChannelResponseLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public BeezUPCommonPaginationResult PaginationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByChannelResponseLinks
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByCommonResponseLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="disableAllProducts")]
		public LinksOptimiseAllLink DisableAllProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableProducts")]
		public LinksOptimiseLink DisableProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableAllProducts")]
		public LinksOptimiseAllLink EnableAllProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableProducts")]
		public LinksOptimiseLink EnableProducts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByDay
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allChannels")]
		public ReportByDayAllChannels AllChannels { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="byChannels")]
		public ReportByDayByChannel[] ByChannels { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.DateOnly Day { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByDayAllChannels
	{
		
		/// <summary>
		/// The click count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickCount")]
		public int ClickCount { get; set; }
		
		/// <summary>
		/// The cost
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public double Cost { get; set; }
		
		/// <summary>
		/// The margin
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="margin")]
		public double Margin { get; set; }
		
		/// <summary>
		/// The order count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderCount")]
		public int OrderCount { get; set; }
		
		/// <summary>
		/// The performance indicator based on the performance indicator formula indicated in the request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="performanceIndicator")]
		public double PerformanceIndicator { get; set; }
		
		/// <summary>
		/// The Return On Investment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roi")]
		public double Roi { get; set; }
		
		/// <summary>
		/// The product sold count count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="soldProductCount")]
		public int SoldProductCount { get; set; }
		
		/// <summary>
		/// The total sales
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalSales")]
		public double TotalSales { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByDayByChannel : ReportByDayAllChannels
	{
		
		/// <summary>
		/// The basic info related to a channel
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public BeezUPCommonChannelBasicInfo Channel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByDayGlobal
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allChannels")]
		public ReportByDayGlobalAllChannels AllChannels { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="byChannels")]
		public ReportByDayGlobalByChannel[] ByChannels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByDayGlobalAllChannels
	{
		
		/// <summary>
		/// Indicates the global performance indicator
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="performanceIndicator")]
		public double PerformanceIndicator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByDayGlobalByChannel : ReportByDayGlobalAllChannels
	{
		
		/// <summary>
		/// The basic info related to a channel
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public BeezUPCommonChannelBasicInfo Channel { get; set; }
	}
	
	/// <summary>
	/// The key is the StoreId.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByDayPerStoreResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByDayRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="advancedFilters")]
		public ReportAdvancedFilters AdvancedFilters { get; set; }
		
		/// <summary>
		/// The begin date of the period for the report
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beginPeriodUtcDate")]
		public System.DateOnly BeginPeriodUtcDate { get; set; }
		
		/// <summary>
		/// The catalog category identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalogCategoryId")]
		public string CatalogCategoryId { get; set; }
		
		/// <summary>
		/// Indicate the channel identifier list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelIds")]
		public string[] ChannelIds { get; set; }
		
		/// <summary>
		/// The end date of the period for the report
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endPeriodUtcDate")]
		public System.DateOnly EndPeriodUtcDate { get; set; }
		
		/// <summary>
		/// The product identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByDayResponse
	{
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="days")]
		public ReportByDay[] Days { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="globalPerformanceIndicators")]
		public ReportByDayGlobal GlobalPerformanceIndicators { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByProduct
	{
		
		/// <summary>
		/// The channel count where this product can be enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelCount")]
		public int ChannelCount { get; set; }
		
		/// <summary>
		/// The click count for this product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickCount")]
		public int ClickCount { get; set; }
		
		/// <summary>
		/// The cost for this product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public double Cost { get; set; }
		
		/// <summary>
		/// The count of channel where this product is enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabledOnChannelCount")]
		public int EnabledOnChannelCount { get; set; }
		
		/// <summary>
		/// Depending if the report concerned multiple channels or one channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ReportByProductLinks Links { get; set; }
		
		/// <summary>
		/// The margin for this product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="margin")]
		public System.Nullable<System.Double> Margin { get; set; }
		
		/// <summary>
		/// The order count for this product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderCount")]
		public int OrderCount { get; set; }
		
		/// <summary>
		/// The performance indicator based on the performance indicator formula indicated in the request for this product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="performanceIndicator")]
		public double PerformanceIndicator { get; set; }
		
		/// <summary>
		/// The basic information related to a product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product")]
		public BeezUPCommonProductBasicInfo Product { get; set; }
		
		/// <summary>
		/// The Return On Investment for this product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roi")]
		public System.Nullable<System.Double> Roi { get; set; }
		
		/// <summary>
		/// The product sold count count for this product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="soldProductCount")]
		public int SoldProductCount { get; set; }
		
		/// <summary>
		/// The total sales for this product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalSales")]
		public double TotalSales { get; set; }
	}
	
	/// <summary>
	/// Depending if the report concerned multiple channels or one channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByProductLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="allChannelsLinks")]
		public ReportByProductAllChannelsLinks AllChannelsLinks { get; set; }
		
		/// <summary>
		/// If the report concerned one product for one channel the channel catalog product info will give you all you need to enable or disable the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneChannelLinks")]
		public ReportByProductOneChannelLinks OneChannelLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByProductAllChannelsLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disableProductForAllChannels")]
		public LinksOptimiseByProductLink DisableProductForAllChannels { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableProductForAllChannels")]
		public LinksOptimiseByProductLink EnableProductForAllChannels { get; set; }
	}
	
	/// <summary>
	/// If the report concerned one product for one channel the channel catalog product info will give you all you need to enable or disable the product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByProductOneChannelLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disableProductForOneChannel")]
		public LinksOptimiseByProductLink DisableProductForOneChannel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableProductForOneChannel")]
		public LinksOptimiseByProductLink EnableProductForOneChannel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productInfo")]
		public LinksGetChannelCatalogProductInfoLink ProductInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByProductRequest : OrderedReportFilterCommonParameters
	{
		
		/// <summary>
		/// Indicates the page number
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// Indicate the item count per page
		/// Minimum: 25
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		[System.ComponentModel.DataAnnotations.Range(25, 100)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByProductResponse
	{
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ReportByProductResponseLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public BeezUPCommonPaginationResult PaginationResult { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="products")]
		public ReportByProduct[] Products { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportByProductResponseLinks
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportFilter
	{
		
		/// <summary>
		/// Indicates the actions you can do on this report filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ReportFilterLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ReportFilterParameters Parameters { get; set; }
		
		/// <summary>
		/// Report filter identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportFilterId")]
		public string ReportFilterId { get; set; }
		
		/// <summary>
		/// Report filter name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportFilterName")]
		public string ReportFilterName { get; set; }
	}
	
	/// <summary>
	/// Indicates the actions you can do on this report filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportFilterLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public LinksDeleteReportFilterLink Delete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="save")]
		public LinksSaveReportFilterLink Save { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetReportFilterLink Self { get; set; }
	}
	
	/// <summary>
	/// Contains common filter parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportFilterCommonParameters
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="advancedFilters")]
		public ReportAdvancedFilters AdvancedFilters { get; set; }
		
		/// <summary>
		/// The begin date period you want to get the report. It's required only in case of custom period type !
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beginPeriodUtcDate")]
		public System.Nullable<System.DateTimeOffset> BeginPeriodUtcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryFilter")]
		public BeezUPCommonCatalogCategoryFilter CategoryFilter { get; set; }
		
		/// <summary>
		/// The channel identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The end date period you want to get the report. It's required only in case of custom period type !
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endPeriodUtcDate")]
		public System.Nullable<System.DateTimeOffset> EndPeriodUtcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="performanceIndicatorFilters")]
		public PerformanceIndicatorFilter[] PerformanceIndicatorFilters { get; set; }
		
		/// <summary>
		/// Indicates the period type we want use for the report filter
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="periodType")]
		public ReportFilterCommonParametersPeriodType PeriodType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportFilterCommonParametersPeriodType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yesterday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last7Days = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastWeek = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ThisMonth = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last30Days = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastMonth = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last60Days = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last90Days = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last3Months = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportFilterHeader
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ReportFilterHeaderLinks Links { get; set; }
		
		/// <summary>
		/// Report filter identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportFilterId")]
		public string ReportFilterId { get; set; }
		
		/// <summary>
		/// Report filter name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportFilterName")]
		public string ReportFilterName { get; set; }
		
		/// <summary>
		/// The report type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportType")]
		public OptimiseAllRequestReportType ReportType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportFilterHeaderLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetReportFilterLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportFilterList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ReportFiltersLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportFilters")]
		public ReportFilterHeader[] ReportFilters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportFiltersLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="save")]
		public LinksSaveReportFilterLink Save { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetReportFiltersLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportFilterParameters : ReportFilterCommonParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="analyticsProductColumnFilters")]
		public AnalyticsProductColumnFilters AnalyticsProductColumnFilters { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productColumnsToDisplay")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] ProductColumnsToDisplay { get; set; }
		
		/// <summary>
		/// You can filter on the product state.
		/// </summary>
		[System.ComponentModel.DefaultValue(OptimiseAllRequestProductState.All)]
		[System.Runtime.Serialization.DataMember(Name="productState")]
		public OptimiseAllRequestProductState ProductState { get; set; } = OptimiseAllRequestProductState.All;
		
		/// <summary>
		/// The report type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportType")]
		public OptimiseAllRequestReportType ReportType { get; set; }
	}
	
	/// <summary>
	/// Indicates the period type we want use for the report filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportFilterPeriodType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yesterday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last7Days = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastWeek = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ThisMonth = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last30Days = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastMonth = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last60Days = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last90Days = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last3Months = 9,
	}
	
	/// <summary>
	/// The report type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ByChannel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ByCategory = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ByProduct = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ByDay = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rule
	{
		
		/// <summary>
		/// The optimisation action
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public CreateRuleRequestOptimisationActionName ActionName { get; set; }
		
		/// <summary>
		/// Is the rule enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The status of the last execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastExecutionStatus")]
		public System.Nullable<RuleLastExecutionStatus> LastExecutionStatus { get; set; }
		
		/// <summary>
		/// The utc date of the last execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastExecutionUtcDate")]
		public System.Nullable<System.DateTimeOffset> LastExecutionUtcDate { get; set; }
		
		/// <summary>
		/// Links to retrieve/action on other entities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public RuleLinks Links { get; set; }
		
		/// <summary>
		/// Rule execution position
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		public int Position { get; set; }
		
		/// <summary>
		/// Report filter identifier linked to the rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportFilterId")]
		public string ReportFilterId { get; set; }
		
		/// <summary>
		/// The identifier of the rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleId")]
		public string RuleId { get; set; }
		
		/// <summary>
		/// The name of the rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleName")]
		public string RuleName { get; set; }
		
		/// <summary>
		/// Rule validity end utc date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validityEndUtcDate")]
		public System.Nullable<System.DateTimeOffset> ValidityEndUtcDate { get; set; }
		
		/// <summary>
		/// Rule validity start utc date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validityStartUtcDate")]
		public System.Nullable<System.DateTimeOffset> ValidityStartUtcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RuleLastExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 3,
	}
	
	/// <summary>
	/// Links to retrieve/action on other entities
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public LinksDeleteRuleLink Delete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disable")]
		public LinksDisableRuleLink Disable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enable")]
		public LinksEnableRuleLink Enable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="movedown")]
		public LinksMoveDownRuleLink Movedown { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moveup")]
		public LinksMoveUpRuleLink Moveup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportFilter")]
		public LinksGetReportFilterLink ReportFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="run")]
		public LinksRunRuleLink Run { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetRuleLink Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="update")]
		public LinksUpdateRuleLink Update { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleExecutionReporting
	{
		
		/// <summary>
		/// The count of affected active products
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeAffectedProductCount")]
		public System.Nullable<System.Int32> ActiveAffectedProductCount { get; set; }
		
		/// <summary>
		/// The count of affected Channels across all products
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedChannelCount")]
		public System.Nullable<System.Int32> AffectedChannelCount { get; set; }
		
		/// <summary>
		/// The count of affected products, active or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedProductCount")]
		public System.Nullable<System.Int32> AffectedProductCount { get; set; }
		
		/// <summary>
		/// The completed utc date of the execution of the rule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completedUtcDate")]
		public System.Nullable<System.DateTimeOffset> CompletedUtcDate { get; set; }
		
		/// <summary>
		/// The error type for this execution if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public System.Nullable<RuleExecutionReportingErrorType> ErrorType { get; set; }
		
		/// <summary>
		/// The requestor type for the execution of the rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionSource")]
		public RuleExecutionReportingExecutionSource ExecutionSource { get; set; }
		
		/// <summary>
		/// Links to retrieve/action on this rule execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public RuleExecutionReportingLinks Links { get; set; }
		
		/// <summary>
		/// The optimisation action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optimisationActionName")]
		public CreateRuleRequestOptimisationActionName OptimisationActionName { get; set; }
		
		/// <summary>
		/// The url for the excel report for this execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportUrl")]
		public string ReportUrl { get; set; }
		
		/// <summary>
		/// The rule identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleId")]
		public string RuleId { get; set; }
		
		/// <summary>
		/// The name of the rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleName")]
		public string RuleName { get; set; }
		
		/// <summary>
		/// The start utc date of the execution of the rule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startedUtcDate")]
		public System.Nullable<System.DateTimeOffset> StartedUtcDate { get; set; }
		
		/// <summary>
		/// The status of the execution of the rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RuleExecutionReportingStatus Status { get; set; }
		
		/// <summary>
		/// The userId that executed the rule if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RuleExecutionReportingErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChannelNotPresent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StoreIsInSystemBlockState = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RuleExecutionReportingExecutionSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scheduler = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 1,
	}
	
	/// <summary>
	/// Links to retrieve/action on this rule execution
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleExecutionReportingLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public LinksGetRuleLink Rule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RuleExecutionReportingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyInProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Aborted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleExecutionReportings
	{
		
		/// <summary>
		/// The rules executions history
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executions")]
		public RuleExecutionReporting[] Executions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paginationResult")]
		public BeezUPCommonPaginationResult PaginationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleList
	{
		
		/// <summary>
		/// Links to know if the user can create a rule or run all rules
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public RuleListLinks Links { get; set; }
		
		/// <summary>
		/// Rule list
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public Rule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Links to know if the user can create a rule or run all rules
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleListLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="create")]
		public LinksCreateRuleLink Create { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="history")]
		public LinksGetRulesExecutionsLink History { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="run")]
		public LinksRunRulesLink Run { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetRulesLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SaveReportFilterRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ReportFilterParameters Parameters { get; set; }
		
		/// <summary>
		/// Report filter name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportFilterName")]
		public string ReportFilterName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SaveStoreAlertRequest
	{
		
		/// <summary>
		/// Is the alert enable ?
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// Properties to configure the alert
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StoreAlertProperty[] Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreAlertProperty
	{
		
		/// <summary>
		/// The property identifier of the alert
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyId")]
		public int PropertyId { get; set; }
		
		/// <summary>
		/// The property value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyValue")]
		public string PropertyValue { get; set; }
	}
	
	/// <summary>
	/// The key is the alert identifier (alertId)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SaveStoreAlertsRequest
	{
	}
	
	/// <summary>
	/// The message request to schedule the auto import
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAutoImportRequest
	{
		
		/// <summary>
		/// If null the local time zone name will be "Romance Standard Time"
		/// </summary>
		[System.ComponentModel.DefaultValue("Romance Standard Time")]
		[System.Runtime.Serialization.DataMember(Name="localTimeZoneName")]
		public string LocalTimeZoneName { get; set; } = "Romance Standard Time";
		
		/// <summary>
		/// Indicate the time span you want to import your catalog. (i.e. "21:00:00" to import your catalog at 9PM)
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedules")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Schedules { get; set; }
	}
	
	/// <summary>
	/// Indicate the scheduling type. Schedule or Interval. We recommand you to use interval for a better reporting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SchedulingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Schedule = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interval = 1,
	}
	
	/// <summary>
	/// The channel catalog marketplace settings to save
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetChannelCatalogMarketplaceSettingsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public ChannelCatalogMarketplaceSetting[] Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetMerchantOrderInfoListRequest
	{
		
		/// <summary>
		/// The e-commerce software name of the merchant
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_MerchantECommerceSoftwareName")]
		public string Order_MerchantECommerceSoftwareName { get; set; }
		
		/// <summary>
		/// The e-commece software version of the merchant
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_MerchantECommerceSoftwareVersion")]
		public string Order_MerchantECommerceSoftwareVersion { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orders")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public SetMerchantOrderInfoListRequestItem[] Orders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetMerchantOrderInfoListRequestItem : OrderIdentifier
	{
		
		/// <summary>
		/// The order merchant identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_MerchantOrderId")]
		public string Order_MerchantOrderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetMerchantOrderInfoRequest
	{
		
		/// <summary>
		/// The e-commerce software name of the merchant
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_MerchantECommerceSoftwareName")]
		public string Order_MerchantECommerceSoftwareName { get; set; }
		
		/// <summary>
		/// The e-commece software version of the merchant
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_MerchantECommerceSoftwareVersion")]
		public string Order_MerchantECommerceSoftwareVersion { get; set; }
		
		/// <summary>
		/// The order merchant identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_MerchantOrderId")]
		public string Order_MerchantOrderId { get; set; }
	}
	
	/// <summary>
	/// Indicates the origin of the operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Api = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Go = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StandardOffer
	{
		
		/// <summary>
		/// The additional click price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalClickPrice")]
		public System.Nullable<System.Double> AdditionalClickPrice { get; set; }
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The fixed price of the offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPrice")]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="functionalities")]
		public OfferFunctionality[] Functionalities { get; set; }
		
		/// <summary>
		/// The included click
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedClick")]
		public System.Nullable<System.Int32> IncludedClick { get; set; }
		
		/// <summary>
		/// UI purpose. Is the offer is the most popular
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMostPopular")]
		public System.Nullable<System.Boolean> IsMostPopular { get; set; }
		
		/// <summary>
		/// Is an old offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOldOffer")]
		public System.Nullable<System.Boolean> IsOldOffer { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public StandardOfferLinks Links { get; set; }
		
		/// <summary>
		/// The offer name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The offer Id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public int OfferId { get; set; }
		
		/// <summary>
		/// UI purpose. The position of the offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StandardOfferLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="getOffer")]
		public LinksgetOfferLink GetOffer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StandardOffers
	{
		
		/// <summary>
		/// All functionalities...
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="functionalities")]
		public Functionality[] Functionalities { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public StandardOffersLinks Links { get; set; }
		
		/// <summary>
		/// All standard offers
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offers")]
		public StandardOffer[] Offers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StandardOffersLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksgetStandardOffersLink Self { get; set; }
	}
	
	/// <summary>
	/// The message request start a manual importation process. Indicate the way to handle duplicate product. Can be null if you want to reuse the configuration of the previous importation succeed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartManualImportRequest
	{
		
		/// <summary>
		/// Describe how you want to manage the duplication of the product value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateProductSkuConfiguration")]
		public DuplicateProductValueConfiguration DuplicateProductSkuConfiguration { get; set; }
		
		/// <summary>
		/// Describe the input configuration
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public InputConfiguration Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Store
	{
		
		/// <summary>
		/// The country iso code alpha 3 based on the list of values /user/lov/StoreCountry
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryIsoCodeAlpha3")]
		public string CountryIsoCodeAlpha3 { get; set; }
		
		/// <summary>
		/// The creation date of the store
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationUtcDate")]
		public System.DateTimeOffset CreationUtcDate { get; set; }
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The version of GO to use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="goVersion")]
		public int GoVersion { get; set; }
		
		/// <summary>
		/// Is the store a test or a production store
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isTest")]
		public bool IsTest { get; set; }
		
		/// <summary>
		/// The action links for this store
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public StoreLinks Links { get; set; }
		
		/// <summary>
		/// The store name. Must be unique.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The offer id based on /offers. Not a free offer of course.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int OfferId { get; set; }
		
		/// <summary>
		/// The offer Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offerName")]
		public string OfferName { get; set; }
		
		/// <summary>
		/// The user id of the owner of the store
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownerUserId")]
		public string OwnerUserId { get; set; }
		
		/// <summary>
		/// The store's sectors based on the list of values /user/lov/ParamSector
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sectors")]
		public string[] Sectors { get; set; }
		
		/// <summary>
		/// The share count related to this store
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shareCount")]
		public int ShareCount { get; set; }
		
		/// <summary>
		/// The store status
		///* Active:  When the store is active
		///* SystemBlocked:  When the store is blocked by the system
		///* UserBlocked: When the store is blocked on GO not on the system
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
		
		/// <summary>
		/// The store identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
		
		/// <summary>
		/// The url of your store
		/// Required
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string Url { get; set; }
		
		/// <summary>
		/// Indicates the role can have a user on a store.
		///* Owner: Indicates that you are the owner of this store
		///* User: Indicates that you are a simple user on this store
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userRole")]
		public StoreUserRole UserRole { get; set; }
	}
	
	/// <summary>
	/// The action links for this store
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="deleteStore")]
		public LinksdeleteStoreLink DeleteStore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksgetStoreLink Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="share")]
		public LinksshareStoreLink Share { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shares")]
		public LinksgetStoreSharesLink Shares { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateStore")]
		public LinksupdateStoreLink UpdateStore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StoreStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemBlocked = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserBlocked = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StoreUserRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Owner = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreAlert
	{
		
		/// <summary>
		/// Alert identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertId")]
		public int AlertId { get; set; }
		
		/// <summary>
		/// The alert name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertName")]
		public string AlertName { get; set; }
		
		/// <summary>
		/// Is the alert enable ?
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The different actions you can make on this alert
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public StoreAlertLinks Links { get; set; }
		
		/// <summary>
		/// The current configuration properties of the alert
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StoreAlertPropertyInfo[] Properties { get; set; }
	}
	
	/// <summary>
	/// The different actions you can make on this alert
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreAlertLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="save")]
		public LinkssaveStoreAlertsLink Save { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreAlertPropertyInfo : StoreAlertProperty
	{
		
		/// <summary>
		/// The property name of the alert
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
		
		/// <summary>
		/// The regular expression related to the alert property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyValidationExpression")]
		public string PropertyValidationExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreAlerts
	{
		
		[System.Runtime.Serialization.DataMember(Name="alerts")]
		public StoreAlert[] Alerts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreList
	{
		
		/// <summary>
		/// The action links you can do globally on stores
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public StoreListLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stores")]
		public Store[] Stores { get; set; }
	}
	
	/// <summary>
	/// The action links you can do globally on stores
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreListLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="createStore")]
		public LinkscreateStoreLink CreateStore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksgetStoresLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreShare
	{
		
		/// <summary>
		/// The different actions you can make on this store share
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public StoreShareLinks Links { get; set; }
		
		/// <summary>
		/// The user identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		/// <summary>
		/// Indicates the role can have a user on a store.
		///* Owner: Indicates that you are the owner of this store
		///* User: Indicates that you are a simple user on this store
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userRole")]
		public StoreUserRole UserRole { get; set; }
	}
	
	/// <summary>
	/// The different actions you can make on this store share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreShareLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="deleteShare")]
		public LinksdeleteStoreShareLink DeleteShare { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreShares
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public StoreSharesLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shares")]
		public StoreShare[] Shares { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreSharesLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksgetStoreSharesLink Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="share")]
		public LinksshareStoreLink Share { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreTrackingStatus
	{
		
		/// <summary>
		/// The utc date of the latest synchronized click
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickSynchronizationUtcDate")]
		public System.Nullable<System.DateTimeOffset> ClickSynchronizationUtcDate { get; set; }
		
		/// <summary>
		/// The utc date of the latest synchronized marketplace order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderSynchonizationUtcDate")]
		public System.Nullable<System.DateTimeOffset> MarketplaceOrderSynchonizationUtcDate { get; set; }
		
		/// <summary>
		/// The utc date of the latest synchronized order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderSynchonizationUtcDate")]
		public System.Nullable<System.DateTimeOffset> OrderSynchonizationUtcDate { get; set; }
	}
	
	/// <summary>
	/// The subscription definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		/// <summary>
		/// The subscription consumption status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerHealthStatus")]
		public ConsumptionAvailabilityStatus ConsumerHealthStatus { get; set; }
		
		/// <summary>
		/// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerLastRequestSentUri")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string ConsumerLastRequestSentUri { get; set; }
		
		/// <summary>
		/// This date indicates since when the subscription consumer is unavailable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerUnvailableSinceUtcDate")]
		public System.Nullable<System.DateTimeOffset> ConsumerUnvailableSinceUtcDate { get; set; }
		
		/// <summary>
		/// The identifier of the subscription to the orders for a merchant
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastErrorMessage")]
		public ErrorResponseMessage LastErrorMessage { get; set; }
		
		/// <summary>
		/// This modification date correspond to the last order pushed by your subscription consumer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastOrderPushedModificationUtcDate")]
		public System.Nullable<System.DateTimeOffset> LastOrderPushedModificationUtcDate { get; set; }
		
		/// <summary>
		/// The last date we retry to send orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRetryUtcDate")]
		public System.Nullable<System.DateTimeOffset> LastRetryUtcDate { get; set; }
		
		/// <summary>
		/// The date of the last pushed order successfully received by your subscription consumer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSuccessfulOrderPushedUtcDate")]
		public System.Nullable<System.DateTimeOffset> LastSuccessfulOrderPushedUtcDate { get; set; }
		
		/// <summary>
		/// The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxRetryCount")]
		public System.Nullable<System.Int32> MaxRetryCount { get; set; }
		
		/// <summary>
		/// The name of your application
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchantApplicationName")]
		public string MerchantApplicationName { get; set; }
		
		/// <summary>
		/// The version of your application
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1.0")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchantApplicationVersion")]
		public string MerchantApplicationVersion { get; set; } = "1.0";
		
		/// <summary>
		/// The email
		/// Pattern: ^(.+)@(.+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantEmailAlert")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(.+)@(.+)$")]
		public string MerchantEmailAlert { get; set; }
		
		/// <summary>
		/// The subscription name you want to use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The next scheduled  date we retry to send orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextScheduledRetryUtcDate")]
		public System.Nullable<System.DateTimeOffset> NextScheduledRetryUtcDate { get; set; }
		
		/// <summary>
		/// Recover existing orders using the begin period order last modification date. If not set then you will receive new/updated orders in real-time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoverBeginPeriodOrderLastModificationUtcDate")]
		public System.Nullable<System.DateTimeOffset> RecoverBeginPeriodOrderLastModificationUtcDate { get; set; }
		
		/// <summary>
		/// Recover existing orders using the begin and the end period order last modification date.
		///Otherwise, you will receive new/updated orders in real-time.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoverEndPeriodOrderLastModificationUtcDate")]
		public System.Nullable<System.DateTimeOffset> RecoverEndPeriodOrderLastModificationUtcDate { get; set; }
		
		/// <summary>
		/// The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryCount")]
		public System.Nullable<System.Int32> RetryCount { get; set; }
		
		/// <summary>
		/// The status of your subscription
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SubscriptionStatus Status { get; set; }
		
		/// <summary>
		/// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
		/// Required
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string TargetUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SubscriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionIndex : Subscription
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public SubscriptionLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="activate")]
		public Link3 Activate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deactivate")]
		public Link3 Deactivate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public Link3 Delete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reporting")]
		public Link3 Reporting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retry")]
		public Link3 Retry { get; set; }
	}
	
	/// <summary>
	/// The subscription push reporting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionPushReporting
	{
		
		/// <summary>
		/// The duration of the push operation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public ErrorResponseMessage ErrorMessage { get; set; }
		
		/// <summary>
		/// The message identifier. It's a guid.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// The HTTP status received from the consumer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatus")]
		public System.Nullable<System.Int32> HttpStatus { get; set; }
		
		/// <summary>
		/// This modification date correspond to the last order pushed by your subscription consumer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastOrderModificationUtcDate")]
		public System.DateTimeOffset LastOrderModificationUtcDate { get; set; }
		
		/// <summary>
		/// The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxRetryCount")]
		public System.Nullable<System.Int32> MaxRetryCount { get; set; }
		
		/// <summary>
		/// The next scheduled  date we retry to send orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextScheduledRetryUtcDate")]
		public System.Nullable<System.DateTimeOffset> NextScheduledRetryUtcDate { get; set; }
		
		/// <summary>
		/// The order count sent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderCount")]
		public int OrderCount { get; set; }
		
		/// <summary>
		/// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestUri")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string RequestUri { get; set; }
		
		/// <summary>
		/// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseUri")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string ResponseUri { get; set; }
		
		/// <summary>
		/// The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryCount")]
		public System.Nullable<System.Int32> RetryCount { get; set; }
		
		/// <summary>
		/// The identifier of the subscription to the orders for a merchant
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// Indicates if the push operation has succeed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="succeed")]
		public bool Succeed { get; set; }
	}
	
	/// <summary>
	/// The contract termination info
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminateContract
	{
		
		/// <summary>
		/// The termination reason, if your current contract is scheduled to be terminated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contractTerminationReason")]
		public string ContractTerminationReason { get; set; }
		
		/// <summary>
		/// The contract termination reason type identifier, if your current contract is scheduled to be terminated. The value is based on the list of values /user/lov/ContractTerminationReason
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contractTerminationReasonType")]
		public int ContractTerminationReasonType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackedClick
	{
		
		/// <summary>
		/// The basic info related to a channel
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public BeezUPCommonChannelBasicInfo Channel { get; set; }
		
		/// <summary>
		/// The user IP address for the click
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The basic information related to a product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product")]
		public BeezUPCommonProductBasicInfo Product { get; set; }
		
		/// <summary>
		/// The utc date of the click
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="utcDate")]
		public System.DateTimeOffset UtcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackedClicks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clicks")]
		public TrackedClick[] Clicks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackedExternalOrder
	{
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The merchant order identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		/// <summary>
		/// Indicate if the payment of this external order has been validated or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentValidated")]
		public bool PaymentValidated { get; set; }
		
		/// <summary>
		/// Can be null. The product list included in the external order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public TrackedExternalOrderProduct[] Products { get; set; }
		
		/// <summary>
		/// The total amount of the external order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalAmount")]
		public double TotalAmount { get; set; }
		
		/// <summary>
		/// The utc date of the external order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="utcDate")]
		public System.DateTimeOffset UtcDate { get; set; }
		
		/// <summary>
		/// Can be null. The visitor identifier of the external order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackedExternalOrderProduct
	{
		
		/// <summary>
		/// The product's margin for the external order. This property is voluntarily a string because the value could be an invalid one
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="margin")]
		public string Margin { get; set; }
		
		/// <summary>
		/// We tried to get the catalog product if it's still active based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productActive")]
		public System.Nullable<System.Boolean> ProductActive { get; set; }
		
		/// <summary>
		/// We tried to get the catalog product identifier based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// We tried to get the catalog product image Url based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productImageUrl")]
		public string ProductImageUrl { get; set; }
		
		/// <summary>
		/// The product sku received for the external order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productSku")]
		public string ProductSku { get; set; }
		
		/// <summary>
		/// We tried to get the catalog product title based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTitle")]
		public string ProductTitle { get; set; }
		
		/// <summary>
		/// The quantity of this product for the external order. This property is voluntarily a string because the value could be an invalid one
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// The product's unit price for the external order. This property is voluntarily a string because the value could be an invalid one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public string UnitPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackedExternalOrders
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="externalOrders")]
		public TrackedExternalOrder[] ExternalOrders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackedOrder
	{
		
		/// <summary>
		/// The basic info related to a channel
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public BeezUPCommonChannelBasicInfo Channel { get; set; }
		
		/// <summary>
		/// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The merchant order identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		/// <summary>
		/// Indicate if the payment of this order has been validated or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentValidated")]
		public bool PaymentValidated { get; set; }
		
		/// <summary>
		/// The product list of this order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="products")]
		public TrackedOrderProduct[] Products { get; set; }
		
		/// <summary>
		/// The total amount of the order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalAmount")]
		public double TotalAmount { get; set; }
		
		/// <summary>
		/// The utc date of the order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="utcDate")]
		public System.DateTimeOffset UtcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackedOrderProduct : BeezUPCommonProductBasicInfo
	{
		
		/// <summary>
		/// The product's margin for the order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="margin")]
		public double Margin { get; set; }
		
		/// <summary>
		/// The quantity of this product for the order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public double Quantity { get; set; }
		
		/// <summary>
		/// The product's unit price for the order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public double UnitPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackedOrders
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public TrackedOrder[] Orders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackingStatus
	{
		
		/// <summary>
		/// The utc date of the latest synchronized click
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clickSynchronizationUtcDate")]
		public System.DateTimeOffset ClickSynchronizationUtcDate { get; set; }
		
		/// <summary>
		/// The utc date of the latest synchronized marketplace order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderSynchonizationUtcDate")]
		public System.DateTimeOffset MarketplaceOrderSynchonizationUtcDate { get; set; }
		
		/// <summary>
		/// The utc date of the latest synchronized order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderSynchonizationUtcDate")]
		public System.DateTimeOffset OrderSynchonizationUtcDate { get; set; }
	}
	
	/// <summary>
	/// The Data Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		boolean = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 3,
	}
	
	/// <summary>
	/// The request message to unmap a catalog category path to a channel category path
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnmapCategoryRequest
	{
		
		/// <summary>
		/// The catalog category path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalogCategoryPath")]
		public String[] CatalogCategoryPath { get; set; }
	}
	
	/// <summary>
	/// This update will replace the following values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRuleRequest
	{
		
		/// <summary>
		/// Not required. The end validity utc date of the rule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endUtcDate")]
		public System.Nullable<System.DateTimeOffset> EndUtcDate { get; set; }
		
		/// <summary>
		/// The name of the rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleName")]
		public string RuleName { get; set; }
		
		/// <summary>
		/// Not required. The start validity utc date of the rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startUtcDate")]
		public System.Nullable<System.DateTimeOffset> StartUtcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateStoreRequest
	{
		
		/// <summary>
		/// The store name. Must be unique.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The store's sectors based on the list of values /user/lov/ParamSector
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sectors")]
		public string[] Sectors { get; set; }
		
		/// <summary>
		/// The url of your store
		/// Required
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The message contains the offer identifier required to execute this operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpgradeOfferRequired
	{
		
		/// <summary>
		/// The offer identifier required
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public int OfferId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserFriendInfo
	{
		
		/// <summary>
		/// Your friend's user company name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company")]
		public string Company { get; set; }
		
		/// <summary>
		/// Your friend's user country iso code alpha 3
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryIsoCodeAlpha3")]
		public string CountryIsoCodeAlpha3 { get; set; }
		
		/// <summary>
		/// Your friend's user email
		/// Required
		/// Pattern: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$")]
		public string Email { get; set; }
		
		/// <summary>
		/// Your friend's user first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Your friend's user last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Your friend's user profile picture url
		/// Pattern: ^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilePictureUrl")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$")]
		public string ProfilePictureUrl { get; set; }
		
		/// <summary>
		/// Your friend's user id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		/// <summary>
		/// Your friend's user occupation in his company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whatIDo")]
		public string WhatIDo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserListOfValuesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BeezUPCommonListOfValueItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public UserListOfValuesResponseLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserListOfValuesResponseLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetUserListOfValuesLink Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserLovIndex
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public UserLovIndexLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserLovIndexLinks
	{
		
		/// <summary>
		/// List of lov link. The key is the list name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lists")]
		public UserLovLinks Lists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public LinksGetUserLovIndexLink Self { get; set; }
	}
	
	/// <summary>
	/// List of lov link. The key is the list name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserLovLinks
	{
	}
	
	/// <summary>
	/// JWT token to access Zendesk restricted help center
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ZendeskToken
	{
		
		/// <summary>
		/// A JWT token build from your name and email to use on Zendesk
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Send a batch of operations to change your marketplace Order information: accept, ship, etc.  (max 100 items per call)
		/// The purpose of this operation is to reduce the amount of request to the API.
		/// Max 100 items per call.
		/// 
		/// OrdersV3BatchesChangeOrdersPostByUserNameAndTestMode orders/v3/batches/changeOrders
		/// </summary>
		/// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login.</param>
		/// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account.</param>
		public async Task OrdersV3BatchesChangeOrdersPostByUserNameAndTestModeAsync(string userName, bool testMode, ChangeOrderListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/batches/changeOrders?userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName))+"&testMode="+testMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send a batch of operations to change your marketplace Order information: accept, ship, etc.  (max 100 items per call)
		/// The purpose of this operation is to reduce the amount of request to the API.
		/// Max 100 items per call.
		/// 
		/// OrdersV3BatchesChangeOrders_changeOrderTypePostByUserNameAndTestMode orders/v3/batches/changeOrders/{changeOrderType}
		/// </summary>
		/// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login.</param>
		/// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account.</param>
		/// <param name="changeOrderType">The Order change type</param>
		public async Task OrdersV3BatchesChangeOrders_changeOrderTypePostByUserNameAndTestModeAsync(string userName, bool testMode, string changeOrderType, ChangeOrderListRequestV2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/batches/changeOrders/"+ (changeOrderType==null? "" : System.Uri.EscapeDataString(changeOrderType))+"?userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName))+"&testMode="+testMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send a batch of operations to clear an Order's merchant information (max 100 items per call)
		/// The purpose of this operation is to reduce the amount of request to the API.
		/// OrdersV3BatchesClearMerchantOrderInfosPostByTestMode orders/v3/batches/clearMerchantOrderInfos
		/// </summary>
		/// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account.</param>
		public async Task OrdersV3BatchesClearMerchantOrderInfosPostByTestModeAsync(bool testMode, ClearMerchantOrderInfoListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/batches/clearMerchantOrderInfos?testMode="+testMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send a batch of operations to set an Order's merchant information  (max 100 items per call)
		/// The purpose of this operation is to reduce the amount of request to the API.
		/// OrdersV3BatchesSetMerchantOrderInfosPostByTestMode orders/v3/batches/setMerchantOrderInfos
		/// </summary>
		/// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account.</param>
		public async Task OrdersV3BatchesSetMerchantOrderInfosPostByTestModeAsync(bool testMode, SetMerchantOrderInfoListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/batches/setMerchantOrderInfos?testMode="+testMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send harvest request to all your marketplaces
		/// OrdersV3HarvestPostByStoreId orders/v3/harvest
		/// </summary>
		/// <param name="storeId">The StoreId to filter by</param>
		public async Task OrdersV3HarvestPostByStoreIdAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/harvest?storeId=" + (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a paginated list of all Orders with all Order and Order Item(s) properties
		/// The purpose of this operation is to reduce the amount of request to the API.\
		/// \
		/// Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties.
		/// 
		/// OrdersV3ListFullPost orders/v3/list/full
		/// </summary>
		/// <returns>Successfully fetched the full list of Orders</returns>
		public async Task<OrderListFullWithLinks> OrdersV3ListFullPostAsync(OrderListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/list/full";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderListFullWithLinks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a paginated list of all Orders without details
		/// OrdersV3ListLightPost orders/v3/list/light
		/// </summary>
		/// <returns>Successfully fetched the list of Orders</returns>
		public async Task<OrderListLightWithLinks> OrdersV3ListLightPostAsync(OrderListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/list/light";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderListLightWithLinks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the list of MarketplaceBusinessCode ready for Order Management
		/// OrdersV3LovOrderManagementReadyMarketplaceBusinessCodeGetByStoreIds orders/v3/lov/orderManagementReadyMarketplaceBusinessCode
		/// </summary>
		/// <param name="storeIds">StoredIds to filter</param>
		/// <returns>Successfully fetched current synchronization status</returns>
		public async Task<ListOfValueItem[]> OrdersV3LovOrderManagementReadyMarketplaceBusinessCodeGetByStoreIdsAsync(string[] storeIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/lov/orderManagementReadyMarketplaceBusinessCode?"+string.Join("&", storeIds.Select(z => $"storeIds={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOfValueItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get current synchronization status between your marketplaces and BeezUP accounts
		/// OrdersV3StatusGetByStoreIds orders/v3/status
		/// </summary>
		/// <param name="storeIds">StoredIds to filter</param>
		/// <returns>Successfully fetched the list of MarketplaceBusinessCode ready for Order Management</returns>
		public async Task<AccountSynchronizationList> OrdersV3StatusGetByStoreIdsAsync(string[] storeIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/status?"+string.Join("&", storeIds.Select(z => $"storeIds={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountSynchronizationList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send harvest request for an Account
		/// OrdersV3_marketplaceTechnicalCode_accountIdHarvestPostByMarketplaceOrderIdAndBeezUPOrderId orders/v3/{marketplaceTechnicalCode}/{accountId}/harvest
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		public async Task OrdersV3_marketplaceTechnicalCode_accountIdHarvestPostByMarketplaceOrderIdAndBeezUPOrderIdAsync(string marketplaceTechnicalCode, int accountId, string marketplaceOrderId, string beezUPOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/harvest&marketplaceOrderId=" + (marketplaceOrderId==null? "" : System.Uri.EscapeDataString(marketplaceOrderId))+"&beezUPOrderId=" + (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get full Order and Order Item(s) properties
		/// OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdGet orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		/// <returns>Successfully fetched Order and Order Item(s) properties</returns>
		public async Task<OrderWithLinks> OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdGetAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderWithLinks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear an Order's merchant information
		/// OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdClearMerchantOrderInfoPostByTestMode orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		/// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account.</param>
		public async Task OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdClearMerchantOrderInfoPostByTestModeAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, bool testMode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId))+"/clearMerchantOrderInfo&testMode="+testMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send harvest request for a single Order
		/// OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdHarvestPost orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		public async Task OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdHarvestPostAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId))+"/harvest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an Order's harvest and change history
		/// OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdHistoryGet orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		/// <returns>Successfully fetched Order history</returns>
		public async Task<OrderHistory> OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdHistoryGetAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId))+"/history";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderHistory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the order change reporting
		/// This operation will help you to know the status of your order change operation
		/// OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdHistory_orderChangeExecutionUUIDGet orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history/{orderChangeExecutionUUID}
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		/// <param name="orderChangeExecutionUUID">The order change execution id</param>
		/// <returns>Successfully fetched Order change reporting</returns>
		public async Task<ChangeOrderReporting> OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdHistory_orderChangeExecutionUUIDGetAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, string orderChangeExecutionUUID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId))+"/history/"+ (orderChangeExecutionUUID==null? "" : System.Uri.EscapeDataString(orderChangeExecutionUUID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChangeOrderReporting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set an Order's merchant information
		/// OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdSetMerchantOrderInfoPostByTestMode orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		/// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account.</param>
		public async Task OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderIdSetMerchantOrderInfoPostByTestModeAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, bool testMode, SetMerchantOrderInfoRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId))+"/setMerchantOrderInfo&testMode="+testMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change your marketplace Order Information (accept, ship, etc.)
		/// OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderId_changeOrderTypePostByUserNameAndTestMode orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		/// <param name="changeOrderType">The Order change type</param>
		/// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login.</param>
		/// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account.</param>
		public async Task OrdersV3_marketplaceTechnicalCode_accountId_beezUPOrderId_changeOrderTypePostByUserNameAndTestModeAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, string changeOrderType, string userName, bool testMode, ChangeOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/v3/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId))+"/"+ (changeOrderType==null? "" : System.Uri.EscapeDataString(changeOrderType))+"&userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName))+"&testMode="+testMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get public channel index
		/// Use this operation to get the correct link to the channels and to the list of values
		/// V2PublicChannelsGet v2/public/channels/
		/// </summary>
		/// <returns>Channel list regrouped by country and links to list of values</returns>
		public async Task<PublicChannelIndex> V2PublicChannelsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/public/channels/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicChannelIndex>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The channel list for one country
		/// V2PublicChannels_countryIsoCodeGet v2/public/channels/{countryIsoCode}
		/// </summary>
		/// <param name="countryIsoCode">The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \
		///To know which country are available you have to use the operation: GetChannelsByCountry
		///</param>
		/// <returns>The channel list for one country</returns>
		public async Task<PublicChannelInfoList> V2PublicChannels_countryIsoCodeGetAsync(string countryIsoCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/public/channels/"+ (countryIsoCode==null? "" : System.Uri.EscapeDataString(countryIsoCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicChannelInfoList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all list names
		/// V2PublicLovGet v2/public/lov/
		/// </summary>
		/// <returns>Get the list names</returns>
		public async Task<PublicLovIndex> V2PublicLovGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/public/lov/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicLovIndex>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of values related to this list name
		/// V2PublicLov_listNameGet v2/public/lov/{listName}
		/// </summary>
		/// <param name="listName">The list of value name your want to get</param>
		/// <returns>The list of values</returns>
		public async Task<PublicListOfValuesResponse> V2PublicLov_listNameGetAsync(string listName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/public/lov/"+ (listName==null? "" : System.Uri.EscapeDataString(listName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicListOfValuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Login
		/// User Login - The login will give your tokens
		/// V2PublicSecurityLoginPost v2/public/security/login
		/// </summary>
		/// <returns>Your tokens</returns>
		public async Task<ApiCredentials> V2PublicSecurityLoginPostAsync(LoginRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/public/security/login";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiCredentials>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lost password
		/// Lost password - Your password will be regenerated and sent to your email
		/// V2PublicSecurityLostpasswordPost v2/public/security/lostpassword
		/// </summary>
		/// <param name="requestBody">Your email</param>
		public async Task V2PublicSecurityLostpasswordPostAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/public/security/lostpassword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// User Registration
		/// User Registration - Create a new user on BeezUP
		/// V2PublicSecurityRegisterPost v2/public/security/register
		/// </summary>
		public async Task V2PublicSecurityRegisterPostAsync(RegisterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/public/security/register";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the Analytics API operation index
		/// V2UserAnalyticsGet v2/user/analytics/
		/// </summary>
		/// <returns>Analytics API operation index</returns>
		public async Task<AnalyticsIndex> V2UserAnalyticsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalyticsIndex>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the report by day for a StoreId
		/// Get the report by day for a StoreId
		/// V2UserAnalyticsReportsBydayPost v2/user/analytics/reports/byday
		/// </summary>
		/// <returns>Your reporting by day</returns>
		public async Task<ReportByDayPerStoreResponse> V2UserAnalyticsReportsBydayPostAsync(ReportByDayRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/reports/byday";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportByDayPerStoreResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the global synchronization status of clicks and orders
		/// Clicks and orders are eventually consistent. \
		/// This operation gets the current global state of projections.
		/// 
		/// V2UserAnalyticsTrackingStatusGet v2/user/analytics/tracking/status
		/// </summary>
		/// <returns>The tracking status informations</returns>
		public async Task<TrackingStatus> V2UserAnalyticsTrackingStatusGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/tracking/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackingStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Analytics API operation index for one store
		/// V2UserAnalytics_storeIdGet v2/user/analytics/{storeId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Analytics API operation index for one store</returns>
		public async Task<AnalyticsStoreIndex> V2UserAnalytics_storeIdGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalyticsStoreIndex>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Optimise all products
		/// /!\ WARNING /!\ \
		/// Apply the operation on every product related to this request. \
		/// This operation is used at the bottom of the analytics page result.
		/// 
		/// V2UserAnalytics_storeIdOptimisationsAll_actionNamePost v2/user/analytics/{storeId}/optimisations/all/{actionName}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserAnalytics_storeIdOptimisationsAll_actionNamePostAsync(string storeId, CreateRuleRequestOptimisationActionName actionName, OptimiseAllRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/optimisations/all/"+actionName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Optimise products by category
		/// /!\ WARNING /!\ \
		/// This operation will reenable or disable products's category for every channel indicated in the body.
		/// 
		/// V2UserAnalytics_storeIdOptimisationsBycategory_catalogCategoryId_actionNamePost v2/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="catalogCategoryId">The category identifier concerned by this optimisation</param>
		/// <param name="requestBody">The channel identifier list concerned by this optimisation</param>
		public async Task V2UserAnalytics_storeIdOptimisationsBycategory_catalogCategoryId_actionNamePostAsync(string storeId, string catalogCategoryId, CreateRuleRequestOptimisationActionName actionName, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/optimisations/bycategory/"+ (catalogCategoryId==null? "" : System.Uri.EscapeDataString(catalogCategoryId))+"/"+actionName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Optimise products by channel
		/// /!\ WARNING /!\ \
		/// Apply the operation on every product on this channel.
		/// 
		/// V2UserAnalytics_storeIdOptimisationsBychannel_channelId_actionNamePost v2/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="channelId">The channel identifier concerned by this optimisation</param>
		public async Task V2UserAnalytics_storeIdOptimisationsBychannel_channelId_actionNamePostAsync(string storeId, string channelId, CreateRuleRequestOptimisationActionName actionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/optimisations/bychannel/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/"+actionName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Optimise product
		/// /!\ WARNING /!\ \
		/// This operation will reenable or disable this product for every channel indicated in the body.
		/// 
		/// V2UserAnalytics_storeIdOptimisationsByproduct_productId_actionNamePost v2/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="productId">The product identifier concerned by this optimisation</param>
		/// <param name="requestBody">The channel identifier list concerned by this optimisation</param>
		public async Task V2UserAnalytics_storeIdOptimisationsByproduct_productId_actionNamePostAsync(string storeId, string productId, CreateRuleRequestOptimisationActionName actionName, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/optimisations/byproduct/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/"+actionName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Copy product optimisations between 2 channels
		/// V2UserAnalytics_storeIdOptimisationsCopyPost v2/user/analytics/{storeId}/optimisations/copy
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Products optimisatisation copied</returns>
		public async Task<CopyOptimisationResponse> V2UserAnalytics_storeIdOptimisationsCopyPostAsync(string storeId, CopyOptimisationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/optimisations/copy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CopyOptimisationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Optimise products by page
		/// /!\ WARNING /!\ \
		/// Apply the operation on every product related to this request. \
		/// This operation is used at the bottom of the analytics page result.
		/// 
		/// V2UserAnalytics_storeIdOptimisations_actionNamePost v2/user/analytics/{storeId}/optimisations/{actionName}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserAnalytics_storeIdOptimisations_actionNamePostAsync(string storeId, CreateRuleRequestOptimisationActionName actionName, OptimiseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/optimisations/"+actionName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the report by category
		/// Get the report by category
		/// V2UserAnalytics_storeIdReportsBycategoryPost v2/user/analytics/{storeId}/reports/bycategory
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Your reporting by channel</returns>
		public async Task<ReportByCategoryResponse> V2UserAnalytics_storeIdReportsBycategoryPostAsync(string storeId, ReportByCategoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/reports/bycategory";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportByCategoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the report by channel
		/// Get the report by channel
		/// V2UserAnalytics_storeIdReportsBychannelPost v2/user/analytics/{storeId}/reports/bychannel
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Your reporting by channel</returns>
		public async Task<ReportByChannelResponse> V2UserAnalytics_storeIdReportsBychannelPostAsync(string storeId, ReportByChannelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/reports/bychannel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportByChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the report by day for a StoreId
		/// Get the report by day for a StoreId
		/// V2UserAnalytics_storeIdReportsBydayPost v2/user/analytics/{storeId}/reports/byday
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Your reporting by day</returns>
		public async Task<ReportByDayResponse> V2UserAnalytics_storeIdReportsBydayPostAsync(string storeId, ReportByDayRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/reports/byday";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportByDayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the report by product
		/// Get the report by product
		/// V2UserAnalytics_storeIdReportsByproductPost v2/user/analytics/{storeId}/reports/byproduct
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Your reporting by product</returns>
		public async Task<ReportByProductResponse> V2UserAnalytics_storeIdReportsByproductPostAsync(string storeId, ReportByProductRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/reports/byproduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportByProductResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get report filter list for the given store
		/// V2UserAnalytics_storeIdReportsFiltersGet v2/user/analytics/{storeId}/reports/filters
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Report filter list</returns>
		public async Task<ReportFilterList> V2UserAnalytics_storeIdReportsFiltersGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/reports/filters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportFilterList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the report filter
		/// V2UserAnalytics_storeIdReportsFilters_reportFilterIdDelete v2/user/analytics/{storeId}/reports/filters/{reportFilterId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="reportFilterId">Your report filter identifier</param>
		public async Task V2UserAnalytics_storeIdReportsFilters_reportFilterIdDeleteAsync(string storeId, string reportFilterId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/reports/filters/"+ (reportFilterId==null? "" : System.Uri.EscapeDataString(reportFilterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the report filter description
		/// V2UserAnalytics_storeIdReportsFilters_reportFilterIdGet v2/user/analytics/{storeId}/reports/filters/{reportFilterId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="reportFilterId">Your report filter identifier</param>
		/// <returns>Report filter</returns>
		public async Task<ReportFilter> V2UserAnalytics_storeIdReportsFilters_reportFilterIdGetAsync(string storeId, string reportFilterId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/reports/filters/"+ (reportFilterId==null? "" : System.Uri.EscapeDataString(reportFilterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportFilter>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save the report filter
		/// V2UserAnalytics_storeIdReportsFilters_reportFilterIdPut v2/user/analytics/{storeId}/reports/filters/{reportFilterId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="reportFilterId">Your report filter identifier</param>
		public async Task V2UserAnalytics_storeIdReportsFilters_reportFilterIdPutAsync(string storeId, string reportFilterId, SaveReportFilterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/reports/filters/"+ (reportFilterId==null? "" : System.Uri.EscapeDataString(reportFilterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the list of rules for a given store
		/// V2UserAnalytics_storeIdRulesGet v2/user/analytics/{storeId}/rules
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Rule list</returns>
		public async Task<RuleList> V2UserAnalytics_storeIdRulesGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RuleList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rule creation
		/// V2UserAnalytics_storeIdRulesPost v2/user/analytics/{storeId}/rules
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserAnalytics_storeIdRulesPostAsync(string storeId, CreateRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the rules execution history
		/// V2UserAnalytics_storeIdRulesExecutionsGetByPageNumberAndPageSize v2/user/analytics/{storeId}/rules/executions
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="pageNumber">The page to retrieve</param>
		/// <param name="pageSize">The count of rule history to retrieve</param>
		/// <returns>Rules executions list</returns>
		public async Task<RuleExecutionReportings> V2UserAnalytics_storeIdRulesExecutionsGetByPageNumberAndPageSizeAsync(string storeId, int pageNumber, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules/executions&pageNumber="+pageNumber+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RuleExecutionReportings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Run all rules for this store
		/// V2UserAnalytics_storeIdRulesRunPost v2/user/analytics/{storeId}/rules/run
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserAnalytics_storeIdRulesRunPostAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules/run";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Rule
		/// V2UserAnalytics_storeIdRules_ruleIdDelete v2/user/analytics/{storeId}/rules/{ruleId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="ruleId">Your rule identifier</param>
		public async Task V2UserAnalytics_storeIdRules_ruleIdDeleteAsync(string storeId, string ruleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the rule
		/// V2UserAnalytics_storeIdRules_ruleIdGet v2/user/analytics/{storeId}/rules/{ruleId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="ruleId">Your rule identifier</param>
		/// <returns>Get Rule</returns>
		public async Task<Rule> V2UserAnalytics_storeIdRules_ruleIdGetAsync(string storeId, string ruleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Rule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Rule
		/// V2UserAnalytics_storeIdRules_ruleIdPatch v2/user/analytics/{storeId}/rules/{ruleId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="ruleId">Your rule identifier</param>
		public async Task V2UserAnalytics_storeIdRules_ruleIdPatchAsync(string storeId, string ruleId, UpdateRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disable rule
		/// V2UserAnalytics_storeIdRules_ruleIdDisablePost v2/user/analytics/{storeId}/rules/{ruleId}/disable
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="ruleId">Your rule identifier</param>
		public async Task V2UserAnalytics_storeIdRules_ruleIdDisablePostAsync(string storeId, string ruleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable rule
		/// V2UserAnalytics_storeIdRules_ruleIdEnablePost v2/user/analytics/{storeId}/rules/{ruleId}/enable
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="ruleId">Your rule identifier</param>
		public async Task V2UserAnalytics_storeIdRules_ruleIdEnablePostAsync(string storeId, string ruleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Move the rule down
		/// V2UserAnalytics_storeIdRules_ruleIdMovedownPost v2/user/analytics/{storeId}/rules/{ruleId}/movedown
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="ruleId">Your rule identifier</param>
		public async Task V2UserAnalytics_storeIdRules_ruleIdMovedownPostAsync(string storeId, string ruleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId))+"/movedown";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Move the rule up
		/// V2UserAnalytics_storeIdRules_ruleIdMoveupPost v2/user/analytics/{storeId}/rules/{ruleId}/moveup
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="ruleId">Your rule identifier</param>
		public async Task V2UserAnalytics_storeIdRules_ruleIdMoveupPostAsync(string storeId, string ruleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId))+"/moveup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Run rule
		/// V2UserAnalytics_storeIdRules_ruleIdRunPost v2/user/analytics/{storeId}/rules/{ruleId}/run
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="ruleId">Your rule identifier</param>
		public async Task V2UserAnalytics_storeIdRules_ruleIdRunPostAsync(string storeId, string ruleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rules/"+ (ruleId==null? "" : System.Uri.EscapeDataString(ruleId))+"/run";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the latest tracked clicks
		/// V2UserAnalytics_storeIdTrackingClicksGetByCount v2/user/analytics/{storeId}/tracking/clicks
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="count">The amount of clicks to retrieve</param>
		/// <returns>Click list</returns>
		public async Task<TrackedClicks> V2UserAnalytics_storeIdTrackingClicksGetByCountAsync(string storeId, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/tracking/clicks&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackedClicks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the latest tracked external orders
		/// V2UserAnalytics_storeIdTrackingExternalordersGetByCount v2/user/analytics/{storeId}/tracking/externalorders
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="count">The amount of external orders to retrieve</param>
		/// <returns>External Order list</returns>
		public async Task<TrackedExternalOrders> V2UserAnalytics_storeIdTrackingExternalordersGetByCountAsync(string storeId, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/tracking/externalorders&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackedExternalOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the latest tracked orders
		/// V2UserAnalytics_storeIdTrackingOrdersGetByCount v2/user/analytics/{storeId}/tracking/orders
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="count">The amount of orders to retrieve</param>
		/// <returns>Order list</returns>
		public async Task<TrackedOrders> V2UserAnalytics_storeIdTrackingOrdersGetByCountAsync(string storeId, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/tracking/orders&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrackedOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the synchronization status of clicks and orders of a store
		/// Clicks and orders are eventually consistent. \
		/// This operation gets the current state of projections for a store.
		/// 
		/// V2UserAnalytics_storeIdTrackingStatusGet v2/user/analytics/{storeId}/tracking/status
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Store Tracking Status</returns>
		public async Task<StoreTrackingStatus> V2UserAnalytics_storeIdTrackingStatusGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/analytics/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/tracking/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StoreTrackingStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the index of the catalog API
		/// The operation will give you all the operations you will be able to do and all the LOV used in this API.
		/// V2UserCatalogsGet v2/user/catalogs/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CatalogIndex> V2UserCatalogsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CatalogIndex>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the BeezUP columns
		/// Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
		/// V2UserCatalogsBeezupColumnsGet v2/user/catalogs/beezupColumns
		/// </summary>
		/// <returns>The catalog API index</returns>
		public async Task<BeezUPColumnConfiguration[]> V2UserCatalogsBeezupColumnsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/beezupColumns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BeezUPColumnConfiguration[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the latest catalog importation reporting for all your stores
		/// V2UserCatalogsImportationsGet v2/user/catalogs/importations
		/// </summary>
		/// <returns>The last importation reportings</returns>
		public async Task<ImportationsPerStoreResponse> V2UserCatalogsImportationsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/importations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportationsPerStoreResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the index of the catalog API for this store
		/// The operation will give you all the operations you will be able to do on this store for this API.
		/// V2UserCatalogs_storeIdGet v2/user/catalogs/{storeId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>The catalog index</returns>
		public async Task<CatalogStoreIndex> V2UserCatalogs_storeIdGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CatalogStoreIndex>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Auto Import
		/// V2UserCatalogs_storeIdAutoImportDelete v2/user/catalogs/{storeId}/autoImport
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserCatalogs_storeIdAutoImportDeleteAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/autoImport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the auto import configuration
		/// V2UserCatalogs_storeIdAutoImportGet v2/user/catalogs/{storeId}/autoImport
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Auto import configuration</returns>
		public async Task<AutoImportConfiguration> V2UserCatalogs_storeIdAutoImportGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/autoImport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AutoImportConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activate the auto importation of the last successful manual catalog importation.
		/// Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
		/// V2UserCatalogs_storeIdAutoImportActivatePost v2/user/catalogs/{storeId}/autoImport/activate
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserCatalogs_storeIdAutoImportActivatePostAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/autoImport/activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pause Auto Import
		/// V2UserCatalogs_storeIdAutoImportPausePost v2/user/catalogs/{storeId}/autoImport/pause
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserCatalogs_storeIdAutoImportPausePostAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/autoImport/pause";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resume Auto Import
		/// V2UserCatalogs_storeIdAutoImportResumePost v2/user/catalogs/{storeId}/autoImport/resume
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserCatalogs_storeIdAutoImportResumePostAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/autoImport/resume";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configure Auto Import Interval
		/// V2UserCatalogs_storeIdAutoImportSchedulingIntervalPost v2/user/catalogs/{storeId}/autoImport/scheduling/interval
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserCatalogs_storeIdAutoImportSchedulingIntervalPostAsync(string storeId, ConfigureAutoImportIntervalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/autoImport/scheduling/interval";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Configure Auto Import Schedules
		/// V2UserCatalogs_storeIdAutoImportSchedulingSchedulesPost v2/user/catalogs/{storeId}/autoImport/scheduling/schedules
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserCatalogs_storeIdAutoImportSchedulingSchedulesPostAsync(string storeId, ScheduleAutoImportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/autoImport/scheduling/schedules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start Auto Import Manually
		/// V2UserCatalogs_storeIdAutoImportStartPost v2/user/catalogs/{storeId}/autoImport/start
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserCatalogs_storeIdAutoImportStartPostAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/autoImport/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get catalog column list
		/// V2UserCatalogs_storeIdCatalogColumnsGet v2/user/catalogs/{storeId}/catalogColumns
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Catalog column list</returns>
		public async Task<CatalogColumnList> V2UserCatalogs_storeIdCatalogColumnsGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/catalogColumns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CatalogColumnList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change Catalog Column User Name
		/// V2UserCatalogs_storeIdCatalogColumns_columnIdRenamePost v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="columnId">The catalog column identifier</param>
		public async Task V2UserCatalogs_storeIdCatalogColumns_columnIdRenamePostAsync(string storeId, string columnId, ChangeUserColumnNameRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/catalogColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId))+"/rename";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get category list
		/// V2UserCatalogs_storeIdCategoriesGet v2/user/catalogs/{storeId}/categories
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Categories</returns>
		public async Task<CategoryList> V2UserCatalogs_storeIdCategoriesGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoryList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get custom column list
		/// V2UserCatalogs_storeIdCustomColumnsGet v2/user/catalogs/{storeId}/customColumns
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Custom column list</returns>
		public async Task<CustomColumnList> V2UserCatalogs_storeIdCustomColumnsGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/customColumns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomColumnList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Compute the expression for this catalog.
		/// V2UserCatalogs_storeIdCustomColumnsComputeExpressionPost v2/user/catalogs/{storeId}/customColumns/computeExpression
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Compute an expression</returns>
		public async Task<string> V2UserCatalogs_storeIdCustomColumnsComputeExpressionPostAsync(string storeId, ComputeExpressionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/customColumns/computeExpression";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete custom column
		/// V2UserCatalogs_storeIdCustomColumns_columnIdDelete v2/user/catalogs/{storeId}/customColumns/{columnId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="columnId">The custom column identifier</param>
		public async Task V2UserCatalogs_storeIdCustomColumns_columnIdDeleteAsync(string storeId, string columnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/customColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace a custom column
		/// V2UserCatalogs_storeIdCustomColumns_columnIdPut v2/user/catalogs/{storeId}/customColumns/{columnId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="columnId">The custom column identifier</param>
		public async Task V2UserCatalogs_storeIdCustomColumns_columnIdPutAsync(string storeId, string columnId, CreateCustomColumnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/customColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the encrypted custom column expression
		/// V2UserCatalogs_storeIdCustomColumns_columnIdExpressionGet v2/user/catalogs/{storeId}/customColumns/{columnId}/expression
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="columnId">The custom column identifier</param>
		/// <returns>Encrypted expression</returns>
		public async Task<string> V2UserCatalogs_storeIdCustomColumns_columnIdExpressionGetAsync(string storeId, string columnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/customColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId))+"/expression";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change custom column expression
		/// V2UserCatalogs_storeIdCustomColumns_columnIdExpressionPut v2/user/catalogs/{storeId}/customColumns/{columnId}/expression
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="columnId">The custom column identifier</param>
		public async Task V2UserCatalogs_storeIdCustomColumns_columnIdExpressionPutAsync(string storeId, string columnId, ChangeCustomColumnExpressionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/customColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId))+"/expression";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change Custom Column User Name
		/// V2UserCatalogs_storeIdCustomColumns_columnIdRenamePost v2/user/catalogs/{storeId}/customColumns/{columnId}/rename
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="columnId">The custom column identifier</param>
		public async Task V2UserCatalogs_storeIdCustomColumns_columnIdRenamePostAsync(string storeId, string columnId, ChangeUserColumnNameRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/customColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId))+"/rename";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the latest catalog importation reporting
		/// V2UserCatalogs_storeIdImportationsGet v2/user/catalogs/{storeId}/importations
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>The last importation reportings</returns>
		public async Task<ImportationsResponse> V2UserCatalogs_storeIdImportationsGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start Manual Import
		/// V2UserCatalogs_storeIdImportationsStartPost v2/user/catalogs/{storeId}/importations/start
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserCatalogs_storeIdImportationsStartPostAsync(string storeId, StartManualImportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the importation status
		/// V2UserCatalogs_storeIdImportations_executionIdGet v2/user/catalogs/{storeId}/importations/{executionId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <returns>OK</returns>
		public async Task<ImportationMonitoring> V2UserCatalogs_storeIdImportations_executionIdGetAsync(string storeId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportationMonitoring>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel importation
		/// V2UserCatalogs_storeIdImportations_executionIdCancelPost v2/user/catalogs/{storeId}/importations/{executionId}/cancel
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCancelPostAsync(string storeId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get detected catalog columns during this importation.
		/// V2UserCatalogs_storeIdImportations_executionIdCatalogColumnsGet v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <returns>OK</returns>
		public async Task<DetectedCatalogColumnList> V2UserCatalogs_storeIdImportations_executionIdCatalogColumnsGetAsync(string storeId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/catalogColumns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetectedCatalogColumnList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configure catalog column
		/// V2UserCatalogs_storeIdImportations_executionIdCatalogColumns_columnIdPost v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="columnId">The custom column identifier</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCatalogColumns_columnIdPostAsync(string storeId, string executionId, string columnId, ConfigureCatalogColumnCatalogRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/catalogColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Ignore Column
		/// V2UserCatalogs_storeIdImportations_executionIdCatalogColumns_columnIdIgnorePost v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="columnId">The custom column identifier</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCatalogColumns_columnIdIgnorePostAsync(string storeId, string executionId, string columnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/catalogColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId))+"/ignore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Map catalog column to a BeezUP column
		/// V2UserCatalogs_storeIdImportations_executionIdCatalogColumns_columnIdMapPost v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="columnId">The catalog column identifier</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCatalogColumns_columnIdMapPostAsync(string storeId, string executionId, string columnId, MapBeezUPColumnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/catalogColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId))+"/map";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reattend Column
		/// V2UserCatalogs_storeIdImportations_executionIdCatalogColumns_columnIdReattendPost v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="columnId">The custom column identifier</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCatalogColumns_columnIdReattendPostAsync(string storeId, string executionId, string columnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/catalogColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId))+"/reattend";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unmap catalog column
		/// V2UserCatalogs_storeIdImportations_executionIdCatalogColumns_columnIdUnmapPost v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="columnId">The catalog column identifier</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCatalogColumns_columnIdUnmapPostAsync(string storeId, string executionId, string columnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/catalogColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId))+"/unmap";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Commit Importation
		/// V2UserCatalogs_storeIdImportations_executionIdCommitPost v2/user/catalogs/{storeId}/importations/{executionId}/commit
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCommitPostAsync(string storeId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/commit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Commit columns
		/// V2UserCatalogs_storeIdImportations_executionIdCommitColumnsPost v2/user/catalogs/{storeId}/importations/{executionId}/commitColumns
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCommitColumnsPostAsync(string storeId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/commitColumns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configure remaining catalog columns
		/// This operation should be used after you have mapped the required BeezUP Columns
		/// V2UserCatalogs_storeIdImportations_executionIdConfigureRemainingCatalogColumnsPost v2/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdConfigureRemainingCatalogColumnsPostAsync(string storeId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/configureRemainingCatalogColumns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get custom columns currently place in this importation
		/// V2UserCatalogs_storeIdImportations_executionIdCustomColumnsGet v2/user/catalogs/{storeId}/importations/{executionId}/customColumns
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <returns>Custom columns of current Importation successfully retrieved</returns>
		public async Task<ImportationCustomColumnList> V2UserCatalogs_storeIdImportations_executionIdCustomColumnsGetAsync(string storeId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/customColumns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportationCustomColumnList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Custom Column
		/// V2UserCatalogs_storeIdImportations_executionIdCustomColumns_columnIdDelete v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="columnId">The custom column identifier</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCustomColumns_columnIdDeleteAsync(string storeId, string executionId, string columnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/customColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace a custom column
		/// V2UserCatalogs_storeIdImportations_executionIdCustomColumns_columnIdPut v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="columnId">The custom column identifier</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCustomColumns_columnIdPutAsync(string storeId, string executionId, string columnId, ChangeCustomColumnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/customColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the encrypted custom column expression in this importation
		/// V2UserCatalogs_storeIdImportations_executionIdCustomColumns_columnIdExpressionGet v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="columnId">The custom column identifier</param>
		/// <returns>Encrypted expression</returns>
		public async Task<string> V2UserCatalogs_storeIdImportations_executionIdCustomColumns_columnIdExpressionGetAsync(string storeId, string executionId, string columnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/customColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId))+"/expression";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Map custom column to a BeezUP column
		/// V2UserCatalogs_storeIdImportations_executionIdCustomColumns_columnIdMapPost v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="columnId">The custom column identifier</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCustomColumns_columnIdMapPostAsync(string storeId, string executionId, string columnId, MapBeezUPColumnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/customColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId))+"/map";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unmap custom column
		/// V2UserCatalogs_storeIdImportations_executionIdCustomColumns_columnIdUnmapPost v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="columnId">The custom column identifier</param>
		public async Task V2UserCatalogs_storeIdImportations_executionIdCustomColumns_columnIdUnmapPostAsync(string storeId, string executionId, string columnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/customColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId))+"/unmap";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the product sample related to this importation with all columns (catalog and custom)
		/// V2UserCatalogs_storeIdImportations_executionIdProductSamples_productSampleIndexGet v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
		/// <returns>OK</returns>
		public async Task<ProductSample> V2UserCatalogs_storeIdImportations_executionIdProductSamples_productSampleIndexGetAsync(string storeId, string executionId, int productSampleIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/productSamples/"+productSampleIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductSample>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get product sample custom column value related to this importation.
		/// /!\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
		/// V2UserCatalogs_storeIdImportations_executionIdProductSamples_productSampleIndexCustomColumns_columnIdGet v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
		/// <param name="columnId">The custom column identifier</param>
		/// <returns>Product sample custom column value</returns>
		public async Task<string> V2UserCatalogs_storeIdImportations_executionIdProductSamples_productSampleIndexCustomColumns_columnIdGetAsync(string storeId, string executionId, int productSampleIndex, string columnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/productSamples/"+productSampleIndex+"/customColumns/"+ (columnId==null? "" : System.Uri.EscapeDataString(columnId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Importation Get Products Report
		/// V2UserCatalogs_storeIdImportations_executionIdProductsListPost v2/user/catalogs/{storeId}/importations/{executionId}/products/list
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <returns>Get Products Report Response</returns>
		public async Task<GetImportationProductsReportResponse> V2UserCatalogs_storeIdImportations_executionIdProductsListPostAsync(string storeId, string executionId, GetImportationProductsReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/products/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetImportationProductsReportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Importation Get Report
		/// V2UserCatalogs_storeIdImportations_executionIdReportGet v2/user/catalogs/{storeId}/importations/{executionId}/report
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <returns>Get Report Response</returns>
		public async Task<GetImportationReportResponse> V2UserCatalogs_storeIdImportations_executionIdReportGetAsync(string storeId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/report";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetImportationReportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get technical progression
		/// V2UserCatalogs_storeIdImportations_executionIdTechnicalProgressionGet v2/user/catalogs/{storeId}/importations/{executionId}/technicalProgression
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="executionId">The execution identifier of you catalog importation</param>
		/// <returns>When the technical progression is correctly retrived</returns>
		public async Task<ImportationTechnicalProgression> V2UserCatalogs_storeIdImportations_executionIdTechnicalProgressionGetAsync(string storeId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/importations/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/technicalProgression";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportationTechnicalProgression>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the last input configuration
		/// V2UserCatalogs_storeIdInputConfigurationGet v2/user/catalogs/{storeId}/inputConfiguration
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>OK</returns>
		public async Task<LastManualImportInputConfiguration> V2UserCatalogs_storeIdInputConfigurationGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/inputConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LastManualImportInputConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get product by Sku
		/// V2UserCatalogs_storeIdProductsGetBySku v2/user/catalogs/{storeId}/products
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="sku">The product sku you want to get</param>
		/// <returns>Product</returns>
		public async Task<Product> V2UserCatalogs_storeIdProductsGetBySkuAsync(string storeId, string sku, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/products&sku=" + (sku==null? "" : System.Uri.EscapeDataString(sku));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get product list
		/// V2UserCatalogs_storeIdProductsListPost v2/user/catalogs/{storeId}/products/list
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Product list</returns>
		public async Task<ProductList> V2UserCatalogs_storeIdProductsListPostAsync(string storeId, GetProductsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/products/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get random product list
		/// We will return 10 products randomly selected with all product values
		/// V2UserCatalogs_storeIdProductsRandomGet v2/user/catalogs/{storeId}/products/random
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>Random product list</returns>
		public async Task<RandomProductList> V2UserCatalogs_storeIdProductsRandomGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/products/random";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RandomProductList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get product by ProductId
		/// V2UserCatalogs_storeIdProducts_productIdGet v2/user/catalogs/{storeId}/products/{productId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="productId">The product identifier you want to get</param>
		/// <returns>Product</returns>
		public async Task<Product> V2UserCatalogs_storeIdProducts_productIdGetAsync(string storeId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/catalogs/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all your current channel catalogs
		/// V2UserChannelCatalogsGetByStoreId v2/user/channelCatalogs/
		/// </summary>
		/// <param name="storeId">The store identifier</param>
		/// <returns>OK</returns>
		public async Task<ChannelCatalogList> V2UserChannelCatalogsGetByStoreIdAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/?storeId=" + (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelCatalogList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new channel catalog
		/// V2UserChannelCatalogsPost v2/user/channelCatalogs/
		/// </summary>
		public async Task V2UserChannelCatalogsPostAsync(AddChannelCatalogRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get channel catalog filter operators
		/// V2UserChannelCatalogsFilterOperatorsGet v2/user/channelCatalogs/filterOperators
		/// </summary>
		/// <returns>Channel catalog  filter operator list</returns>
		public async Task<FilterOperator[]> V2UserChannelCatalogsFilterOperatorsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/filterOperators";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FilterOperator[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get channel catalog products related to these channel catalogs
		/// V2UserChannelCatalogsProductsPost v2/user/channelCatalogs/products
		/// </summary>
		/// <returns>The channel catalog product by channel catalog</returns>
		public async Task<ChannelCatalogProductByChannelCatalogResponse> V2UserChannelCatalogsProductsPostAsync(ChannelCatalogProductByChannelCatalogRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelCatalogProductByChannelCatalogResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the channel catalog
		/// V2UserChannelCatalogs_channelCatalogIdDelete v2/user/channelCatalogs/{channelCatalogId}
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdDeleteAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the channel catalog information
		/// V2UserChannelCatalogs_channelCatalogIdGet v2/user/channelCatalogs/{channelCatalogId}
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <returns>Channel catalog</returns>
		public async Task<ChannelCatalog> V2UserChannelCatalogs_channelCatalogIdGetAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelCatalog>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get channel catalog categories
		/// V2UserChannelCatalogs_channelCatalogIdCategoriesGet v2/user/channelCatalogs/{channelCatalogId}/categories
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <returns>Channel catalog category mappings</returns>
		public async Task<ChannelCatalogCategoryConfigurationList> V2UserChannelCatalogs_channelCatalogIdCategoriesGetAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelCatalogCategoryConfigurationList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configure channel catalog category
		/// V2UserChannelCatalogs_channelCatalogIdCategoriesConfigurePost v2/user/channelCatalogs/{channelCatalogId}/categories/configure
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdCategoriesConfigurePostAsync(string channelCatalogId, ConfigureCategoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/categories/configure";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disable a channel catalog category mapping
		/// V2UserChannelCatalogs_channelCatalogIdCategoriesDisableMappingPost v2/user/channelCatalogs/{channelCatalogId}/categories/disableMapping
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdCategoriesDisableMappingPostAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/categories/disableMapping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reenable a channel catalog category mapping
		/// V2UserChannelCatalogs_channelCatalogIdCategoriesReenableMappingPost v2/user/channelCatalogs/{channelCatalogId}/categories/reenableMapping
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdCategoriesReenableMappingPostAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/categories/reenableMapping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configure channel catalog column mappings
		/// V2UserChannelCatalogs_channelCatalogIdColumnMappingsPut v2/user/channelCatalogs/{channelCatalogId}/columnMappings
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdColumnMappingsPutAsync(string channelCatalogId, ChannelCatalogColumnMapping[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/columnMappings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disable a channel catalog
		/// V2UserChannelCatalogs_channelCatalogIdDisablePost v2/user/channelCatalogs/{channelCatalogId}/disable
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdDisablePostAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a channel catalog
		/// V2UserChannelCatalogs_channelCatalogIdEnablePost v2/user/channelCatalogs/{channelCatalogId}/enable
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdEnablePostAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get channel catalog exclusion filters
		/// V2UserChannelCatalogs_channelCatalogIdExclusionFiltersGet v2/user/channelCatalogs/{channelCatalogId}/exclusionFilters
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <returns>Channel catalog exclusion filter list</returns>
		public async Task<ExclusionFiltersResponse> V2UserChannelCatalogs_channelCatalogIdExclusionFiltersGetAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/exclusionFilters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExclusionFiltersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configure channel catalog exclusion filters
		/// V2UserChannelCatalogs_channelCatalogIdExclusionFiltersPut v2/user/channelCatalogs/{channelCatalogId}/exclusionFilters
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdExclusionFiltersPutAsync(string channelCatalogId, ExclusionFilter[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/exclusionFilters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the exportation cache information
		/// V2UserChannelCatalogs_channelCatalogIdExportationsCacheGet v2/user/channelCatalogs/{channelCatalogId}/exportations/cache
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <returns>Channel catalog exportation cache information</returns>
		public async Task<ChannelCatalogExportCacheInfoResponse> V2UserChannelCatalogs_channelCatalogIdExportationsCacheGetAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/exportations/cache";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelCatalogExportCacheInfoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear the exportation cache
		/// V2UserChannelCatalogs_channelCatalogIdExportationsCacheClearPost v2/user/channelCatalogs/{channelCatalogId}/exportations/cache/clear
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdExportationsCacheClearPostAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/exportations/cache/clear";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the exportation history
		/// V2UserChannelCatalogs_channelCatalogIdExportationsHistoryGetByPageNumberAndPageSize v2/user/channelCatalogs/{channelCatalogId}/exportations/history
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <param name="pageNumber">The page number you want to get</param>
		/// <param name="pageSize">The entry count you want to get</param>
		/// <returns>Channel catalog exportation history</returns>
		public async Task<ChannelCatalogExportationHistory> V2UserChannelCatalogs_channelCatalogIdExportationsHistoryGetByPageNumberAndPageSizeAsync(string channelCatalogId, int pageNumber, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/exportations/history&pageNumber="+pageNumber+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelCatalogExportationHistory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get channel catalog product information list
		/// V2UserChannelCatalogs_channelCatalogIdProductsPost v2/user/channelCatalogs/{channelCatalogId}/products
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <param name="requestBody">The channel catalog product list filter</param>
		/// <returns>Channel catalog product information</returns>
		public async Task<ChannelCatalogProductInfoList> V2UserChannelCatalogs_channelCatalogIdProductsPostAsync(string channelCatalogId, GetChannelCatalogProductInfoListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelCatalogProductInfoList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get channel catalog products' counters
		/// V2UserChannelCatalogs_channelCatalogIdProductsCountersGet v2/user/channelCatalogs/{channelCatalogId}/products/counters
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <returns>Channel catalog products' counters</returns>
		public async Task<ChannelCatalogProductsCounters> V2UserChannelCatalogs_channelCatalogIdProductsCountersGetAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/products/counters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelCatalogProductsCounters>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export channel catalog product information list
		/// V2UserChannelCatalogs_channelCatalogIdProductsExportPostByFormat v2/user/channelCatalogs/{channelCatalogId}/products/export
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <param name="format">The file type of the exportation</param>
		/// <param name="requestBody">The channel catalog product list filter</param>
		/// <returns>Channel catalog product information list exported</returns>
		public async Task<BeezUPCommonLink3> V2UserChannelCatalogs_channelCatalogIdProductsExportPostByFormatAsync(string channelCatalogId, V2UserChannelCatalogs_channelCatalogIdProductsExportPostByFormatFormat format, GetChannelCatalogProductInfoListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/products/export&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BeezUPCommonLink3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get channel catalog product information
		/// V2UserChannelCatalogs_channelCatalogIdProducts_productIdGet v2/user/channelCatalogs/{channelCatalogId}/products/{productId}
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <param name="productId">The product identifier</param>
		/// <returns>Channel catalog product information</returns>
		public async Task<ChannelCatalogProductInfo> V2UserChannelCatalogs_channelCatalogIdProducts_productIdGetAsync(string channelCatalogId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelCatalogProductInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable channel catalog product
		/// By default a all your catalog products are exposed to the channel.
		/// You can disable a product by using this operation.
		/// /!\ In case of massive optimisation we recommand you to use the analytics api
		/// 
		/// V2UserChannelCatalogs_channelCatalogIdProducts_productIdDisablePost v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/disable
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <param name="productId">The product identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdProducts_productIdDisablePostAsync(string channelCatalogId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Override channel catalog product values
		/// V2UserChannelCatalogs_channelCatalogIdProducts_productIdOverridesPut v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <param name="productId">The product identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdProducts_productIdOverridesPutAsync(string channelCatalogId, string productId, ProductOverrides requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/overrides";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get channel catalog product value override compatibilities status
		/// V2UserChannelCatalogs_channelCatalogIdProducts_productIdOverridesCopyGet v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/copy
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <param name="productId">The product identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdProducts_productIdOverridesCopyGetAsync(string channelCatalogId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/overrides/copy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copy channel catalog product value override
		/// V2UserChannelCatalogs_channelCatalogIdProducts_productIdOverridesCopyPost v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/copy
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <param name="productId">The product identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdProducts_productIdOverridesCopyPostAsync(string channelCatalogId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/overrides/copy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a specific channel catalog product value override
		/// V2UserChannelCatalogs_channelCatalogIdProducts_productIdOverrides_channelColumnIdDelete v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/{channelColumnId}
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <param name="productId">The product identifier</param>
		/// <param name="channelColumnId">The channel column identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdProducts_productIdOverrides_channelColumnIdDeleteAsync(string channelCatalogId, string productId, string channelColumnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/overrides/"+ (channelColumnId==null? "" : System.Uri.EscapeDataString(channelColumnId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reenable channel catalog product
		/// By default a all your catalog products are exposed to the channel.
		/// You can reenable a product by using this operation.
		/// /!\ In case of massive optimisation we recommand you to use the analytics api
		/// 
		/// V2UserChannelCatalogs_channelCatalogIdProducts_productIdReenablePost v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/reenable
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <param name="productId">The product identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdProducts_productIdReenablePostAsync(string channelCatalogId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/reenable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configure channel catalog cost settings
		/// V2UserChannelCatalogs_channelCatalogIdSettingsCostPut v2/user/channelCatalogs/{channelCatalogId}/settings/cost
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdSettingsCostPutAsync(string channelCatalogId, CostSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/settings/cost";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Configure channel catalog general settings
		/// V2UserChannelCatalogs_channelCatalogIdSettingsGeneralPut v2/user/channelCatalogs/{channelCatalogId}/settings/general
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserChannelCatalogs_channelCatalogIdSettingsGeneralPutAsync(string channelCatalogId, GeneralSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/settings/general";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all available channel for this store
		/// V2UserChannelsGetByStoreId v2/user/channels/
		/// </summary>
		/// <param name="storeId">The store identifier</param>
		/// <returns>Available channel list for this store</returns>
		public async Task<ChannelHeader[]> V2UserChannelsGetByStoreIdAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channels/?storeId=" + (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelHeader[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get channel information
		/// V2UserChannels_channelIdGet v2/user/channels/{channelId}
		/// </summary>
		/// <param name="channelId">The channel identifier</param>
		/// <returns>Channel information</returns>
		public async Task<ChannelInfo> V2UserChannels_channelIdGetAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get channel categories
		/// V2UserChannels_channelIdCategoriesGet v2/user/channels/{channelId}/categories
		/// </summary>
		/// <param name="channelId">The channel identifier</param>
		/// <returns>Channel categories</returns>
		public async Task<ChannelRootCategory> V2UserChannels_channelIdCategoriesGetAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelRootCategory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get channel columns
		/// V2UserChannels_channelIdColumnsPost v2/user/channels/{channelId}/columns
		/// </summary>
		/// <param name="channelId">The channel identifier</param>
		/// <param name="requestBody">Allow you to filter the channel column identifier list your want to get</param>
		/// <returns>Channel columns</returns>
		public async Task<ChannelColumn[]> V2UserChannels_channelIdColumnsPostAsync(string channelId, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/columns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelColumn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The index of all operations and LOV
		/// V2UserCustomerGet v2/user/customer/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CustomerIndex> V2UserCustomerGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerIndex>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user account information
		/// V2UserCustomerAccountGet v2/user/customer/account
		/// </summary>
		/// <returns>User account information</returns>
		public async Task<AccountInfo> V2UserCustomerAccountGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activate the user account
		/// V2UserCustomerAccountActivatePost v2/user/customer/account/activate
		/// </summary>
		/// <param name="requestBody">The email activation id received by email.</param>
		public async Task V2UserCustomerAccountActivatePostAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/account/activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change user email
		/// V2UserCustomerAccountChangeEmailPost v2/user/customer/account/changeEmail
		/// </summary>
		public async Task V2UserCustomerAccountChangeEmailPostAsync(ChangeEmailRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/account/changeEmail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change user password
		/// V2UserCustomerAccountChangePasswordPost v2/user/customer/account/changePassword
		/// </summary>
		public async Task V2UserCustomerAccountChangePasswordPostAsync(ChangePasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/account/changePassword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change company information
		/// V2UserCustomerAccountCompanyInfoPut v2/user/customer/account/companyInfo
		/// </summary>
		public async Task V2UserCustomerAccountCompanyInfoPutAsync(CompanyInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/account/companyInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get credit card information
		/// V2UserCustomerAccountCreditCardInfoGet v2/user/customer/account/creditCardInfo
		/// </summary>
		/// <returns>User credit card information</returns>
		public async Task<CreditCardInfoResponse> V2UserCustomerAccountCreditCardInfoGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/account/creditCardInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditCardInfoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save user credit card info
		/// V2UserCustomerAccountCreditCardInfoPut v2/user/customer/account/creditCardInfo
		/// </summary>
		/// <param name="requestBody">Credit card info</param>
		public async Task V2UserCustomerAccountCreditCardInfoPutAsync(CreditCardInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/account/creditCardInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Save user personal information
		/// V2UserCustomerAccountPersonalInfoPut v2/user/customer/account/personalInfo
		/// </summary>
		public async Task V2UserCustomerAccountPersonalInfoPutAsync(PersonalInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/account/personalInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get profile picture information
		/// V2UserCustomerAccountProfilePictureInfoGet v2/user/customer/account/profilePictureInfo
		/// </summary>
		/// <returns>Profile picture information</returns>
		public async Task<ProfilePictureInfoResponse> V2UserCustomerAccountProfilePictureInfoGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/account/profilePictureInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProfilePictureInfoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change user picture information
		/// V2UserCustomerAccountProfilePictureInfoPut v2/user/customer/account/profilePictureInfo
		/// </summary>
		public async Task V2UserCustomerAccountProfilePictureInfoPutAsync(ProfilePictureInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/account/profilePictureInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resend email activation
		/// V2UserCustomerAccountResendEmailActivationPost v2/user/customer/account/resendEmailActivation
		/// </summary>
		public async Task V2UserCustomerAccountResendEmailActivationPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/account/resendEmailActivation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get billing periods conditions
		/// V2UserCustomerBillingPeriodsGet v2/user/customer/billingPeriods
		/// </summary>
		/// <returns>Get the billing periods conditions</returns>
		public async Task<BillingPeriodList> V2UserCustomerBillingPeriodsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/billingPeriods";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillingPeriodList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get contract list
		/// V2UserCustomerContractsGet v2/user/customer/contracts
		/// </summary>
		/// <returns>Contract list</returns>
		public async Task<Contracts> V2UserCustomerContractsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/contracts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contracts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new contract
		/// Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers
		/// 
		/// V2UserCustomerContractsPost v2/user/customer/contracts
		/// </summary>
		/// <returns>New contract has been created. Some warnings can be present in response.</returns>
		public async Task<CreateContractResponse> V2UserCustomerContractsPostAsync(CreateContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/contracts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateContractResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Schedule termination of your current contract at the end of the commitment.
		/// By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
		/// V2UserCustomerContractsCurrentDisableAutoRenewalPost v2/user/customer/contracts/current/disableAutoRenewal
		/// </summary>
		/// <param name="requestBody">Indicate the termination reason</param>
		public async Task V2UserCustomerContractsCurrentDisableAutoRenewalPostAsync(TerminateContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/contracts/current/disableAutoRenewal";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reactivate your terminated contract.
		/// By calling this operation you can re-enable the auto renewal.
		/// V2UserCustomerContractsCurrentReenableAutoRenewalPost v2/user/customer/contracts/current/reenableAutoRenewal
		/// </summary>
		public async Task V2UserCustomerContractsCurrentReenableAutoRenewalPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/contracts/current/reenableAutoRenewal";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete your next contract
		/// V2UserCustomerContractsNextDelete v2/user/customer/contracts/next
		/// </summary>
		public async Task V2UserCustomerContractsNextDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/contracts/next";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get friend information
		/// V2UserCustomerFriends_userIdGet v2/user/customer/friends/{userId}
		/// </summary>
		/// <param name="userId">Your friend user id</param>
		/// <returns>Get friend info</returns>
		public async Task<UserFriendInfo> V2UserCustomerFriends_userIdGetAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/friends/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserFriendInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all your invoices
		/// V2UserCustomerInvoicesGet v2/user/customer/invoices
		/// </summary>
		/// <returns>Get all invoices of a customer</returns>
		public async Task<InvoiceList> V2UserCustomerInvoicesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/invoices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all standard offers
		/// V2UserCustomerOffersGet v2/user/customer/offers
		/// </summary>
		/// <returns>Get all standard offers</returns>
		public async Task<StandardOffers> V2UserCustomerOffersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/offers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StandardOffers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get offer pricing
		/// Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts
		/// 
		/// V2UserCustomerOffersPost v2/user/customer/offers
		/// </summary>
		/// <returns>Get the offer proposal considering your current contract</returns>
		public async Task<Offer> V2UserCustomerOffersPostAsync(OfferRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/offers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Offer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Log out the current user from go2
		/// Log out the current user from go2
		/// V2UserCustomerSecurityLogoutPost v2/user/customer/security/logout
		/// </summary>
		public async Task V2UserCustomerSecurityLogoutPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/security/logout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get store list
		/// V2UserCustomerStoresGet v2/user/customer/stores
		/// </summary>
		/// <returns>Store list</returns>
		public async Task<StoreList> V2UserCustomerStoresGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/stores";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StoreList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new store
		/// V2UserCustomerStoresPost v2/user/customer/stores
		/// </summary>
		public async Task V2UserCustomerStoresPostAsync(CreateStoreRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/stores";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a store
		/// V2UserCustomerStores_storeIdDelete v2/user/customer/stores/{storeId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserCustomerStores_storeIdDeleteAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/stores/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get store's information
		/// V2UserCustomerStores_storeIdGet v2/user/customer/stores/{storeId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>The store information</returns>
		public async Task<Store> V2UserCustomerStores_storeIdGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/stores/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Store>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update some store's information.
		/// Update some store's information. FYI, you cannot change the country.
		/// 
		/// V2UserCustomerStores_storeIdPatch v2/user/customer/stores/{storeId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserCustomerStores_storeIdPatchAsync(string storeId, UpdateStoreRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/stores/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get store's alerts
		/// V2UserCustomerStores_storeIdAlertsGet v2/user/customer/stores/{storeId}/alerts
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>User account alerts information</returns>
		public async Task<StoreAlerts> V2UserCustomerStores_storeIdAlertsGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/stores/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/alerts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StoreAlerts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save store alerts
		/// You just have to send the alert you want to update, does not need all alerts. (PARTIAL UPDATE ACCEPTED)
		/// V2UserCustomerStores_storeIdAlertsPost v2/user/customer/stores/{storeId}/alerts
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		public async Task V2UserCustomerStores_storeIdAlertsPostAsync(string storeId, SaveStoreAlertsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/stores/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/alerts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get store's rights
		/// V2UserCustomerStores_storeIdRightsGet v2/user/customer/stores/{storeId}/rights
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>The store's rights</returns>
		public async Task<FunctionalityRightInfo[]> V2UserCustomerStores_storeIdRightsGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/stores/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/rights";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FunctionalityRightInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get shares related to this store
		/// V2UserCustomerStores_storeIdSharesGet v2/user/customer/stores/{storeId}/shares
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <returns>The sharing list of the store</returns>
		public async Task<StoreShares> V2UserCustomerStores_storeIdSharesGetAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/stores/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/shares";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StoreShares>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Share a store to another user
		/// V2UserCustomerStores_storeIdSharesPost v2/user/customer/stores/{storeId}/shares
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="requestBody">Your friend's email</param>
		public async Task V2UserCustomerStores_storeIdSharesPostAsync(string storeId, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/stores/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/shares";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a share of a store to another user
		/// V2UserCustomerStores_storeIdShares_userIdDelete v2/user/customer/stores/{storeId}/shares/{userId}
		/// </summary>
		/// <param name="storeId">Your store identifier</param>
		/// <param name="userId">The friend user id</param>
		public async Task V2UserCustomerStores_storeIdShares_userIdDeleteAsync(string storeId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/stores/"+ (storeId==null? "" : System.Uri.EscapeDataString(storeId))+"/shares/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Zendesk token
		/// Zendesk token - Generates a JWT token to access BeezUP restricted Help Center in SSO as described here: https://support.zendesk.com/hc/en-us/articles/222874768-Using-restricted-Help-Center-content-with-the-Web-Widget
		/// V2UserCustomerZendeskTokenGet v2/user/customer/zendeskToken
		/// </summary>
		/// <returns>A JWT token to connect the Zendesk Web Widget</returns>
		public async Task<ZendeskToken> V2UserCustomerZendeskTokenGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/customer/zendeskToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ZendeskToken>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all your current channel catalogs configured to use legacy tracking format
		/// V2UserLegacyTrackingChannelCatalogsGetByStoreId v2/user/legacyTracking/channelCatalogs/
		/// </summary>
		/// <param name="storeId">The store identifier</param>
		/// <returns>OK</returns>
		public async Task<LegacyTrackingChannelCatalogList> V2UserLegacyTrackingChannelCatalogsGetByStoreIdAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/legacyTracking/channelCatalogs/?storeId=" + (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LegacyTrackingChannelCatalogList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the channel catalog configured to use legacy tracking format information
		/// V2UserLegacyTrackingChannelCatalogs_channelCatalogIdGet v2/user/legacyTracking/channelCatalogs/{channelCatalogId}
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		/// <returns>Channel catalog configured to use legacy tracking format</returns>
		public async Task<LegacyTrackingChannelCatalog> V2UserLegacyTrackingChannelCatalogs_channelCatalogIdGetAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/legacyTracking/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LegacyTrackingChannelCatalog>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Migrate a channel catalog to current tracking format
		/// V2UserLegacyTrackingChannelCatalogs_channelCatalogIdMigratePost v2/user/legacyTracking/channelCatalogs/{channelCatalogId}/migrate
		/// </summary>
		/// <param name="channelCatalogId">The channel catalog identifier</param>
		public async Task V2UserLegacyTrackingChannelCatalogs_channelCatalogIdMigratePostAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/legacyTracking/channelCatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/migrate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all list names
		/// V2UserLovGet v2/user/lov/
		/// </summary>
		/// <returns>Get the list names</returns>
		public async Task<UserLovIndex> V2UserLovGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/lov/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserLovIndex>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of values related to this list name
		/// V2UserLov_listNameGet v2/user/lov/{listName}
		/// </summary>
		/// <param name="listName">The list of value name your want to get</param>
		/// <returns>The list of values</returns>
		public async Task<UserListOfValuesResponse> V2UserLov_listNameGetAsync(string listName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/lov/"+ (listName==null? "" : System.Uri.EscapeDataString(listName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserListOfValuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get your marketplace channel catalog list
		/// V2UserMarketplacesChannelcatalogsGetByStoreId v2/user/marketplaces/channelcatalogs/
		/// </summary>
		/// <param name="storeId">The StoreId to filter by</param>
		/// <returns>Marketplace channel catalog list</returns>
		public async Task<MarketplaceChannelCatalogList> V2UserMarketplacesChannelcatalogsGetByStoreIdAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/channelcatalogs/?storeId=" + (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarketplaceChannelCatalogList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch the publication history for an account, sorted by descending start date
		/// V2UserMarketplacesChannelcatalogsPublications_marketplaceTechnicalCode_accountIdHistoryGetByChannelCatalogIdAndCountAndPublicationTypes v2/user/marketplaces/channelcatalogs/publications/{marketplaceTechnicalCode}/{accountId}/history
		/// </summary>
		/// <param name="marketplaceTechnicalCode">Marketplace Technical Code to query (required)</param>
		/// <param name="accountId">Account Id to query (required)</param>
		/// <param name="channelCatalogId">Channel Catalog Id by which to filter (optional)</param>
		/// <param name="count">Amount of entries to fetch (optional, default set to 10)</param>
		/// <param name="publicationTypes">Publication types by which to filter (optional)</param>
		/// <returns>Successfully fetched channel catalog settings</returns>
		public async Task<AccountPublications> V2UserMarketplacesChannelcatalogsPublications_marketplaceTechnicalCode_accountIdHistoryGetByChannelCatalogIdAndCountAndPublicationTypesAsync(string marketplaceTechnicalCode, int accountId, string channelCatalogId, int count, string[] publicationTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/channelcatalogs/publications/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/history&channelCatalogId=" + (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"&count="+count+"&"+string.Join("&", publicationTypes.Select(z => $"publicationTypes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountPublications>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [PREVIEW] Launch a publication of the catalog to the marketplace
		/// V2UserMarketplacesChannelcatalogsPublications_marketplaceTechnicalCode_accountIdPublishPost v2/user/marketplaces/channelcatalogs/publications/{marketplaceTechnicalCode}/{accountId}/publish
		/// </summary>
		/// <param name="marketplaceTechnicalCode">Marketplace Technical Code to query (required)</param>
		/// <param name="accountId">Account Id to query (required)</param>
		public async Task V2UserMarketplacesChannelcatalogsPublications_marketplaceTechnicalCode_accountIdPublishPostAsync(string marketplaceTechnicalCode, int accountId, PublishCatalogToMarketplaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/channelcatalogs/publications/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/publish";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the marketplace properties for a channel catalog
		/// V2UserMarketplacesChannelcatalogs_channelCatalogIdPropertiesGetByRedirectionPageUrl v2/user/marketplaces/channelcatalogs/{channelCatalogId}/properties
		/// </summary>
		/// <returns>Successfully fetched channel catalog properties</returns>
		public async Task<ChannelCatalogMarketplaceProperties> V2UserMarketplacesChannelcatalogs_channelCatalogIdPropertiesGetByRedirectionPageUrlAsync(string channelCatalogId, string redirectionPageUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/channelcatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/properties&redirectionPageUrl=" + (redirectionPageUrl==null? "" : System.Uri.EscapeDataString(redirectionPageUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelCatalogMarketplaceProperties>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the marketplace settings for a channel catalog
		/// V2UserMarketplacesChannelcatalogs_channelCatalogIdSettingsGet v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings
		/// </summary>
		/// <param name="channelCatalogId">Channel Catalog Id to query (required)</param>
		/// <returns>Successfully fetched channel catalog settings</returns>
		public async Task<ChannelCatalogMarketplaceSettings> V2UserMarketplacesChannelcatalogs_channelCatalogIdSettingsGetAsync(string channelCatalogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/channelcatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelCatalogMarketplaceSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save new marketplace settings for a channel catalog
		/// Allow you to configure your marketplace settings.
		/// Partial update accepted.
		/// 
		/// V2UserMarketplacesChannelcatalogs_channelCatalogIdSettingsPost v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings
		/// </summary>
		/// <param name="channelCatalogId">Channel Catalog Id to query</param>
		/// <param name="requestBody">Settings to save</param>
		public async Task V2UserMarketplacesChannelcatalogs_channelCatalogIdSettingsPostAsync(string channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/channelcatalogs/"+ (channelCatalogId==null? "" : System.Uri.EscapeDataString(channelCatalogId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Get all actions you can do on the order API
		/// V2UserMarketplacesOrdersGet v2/user/marketplaces/orders/
		/// </summary>
		/// <returns>Order index</returns>
		public async Task<OrderIndex> V2UserMarketplacesOrdersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderIndex>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of configured automatic Order status transitions
		/// V2UserMarketplacesOrdersAutomaticTransitionsGetByStoreId v2/user/marketplaces/orders/automaticTransitions
		/// </summary>
		/// <param name="storeId">The StoreId to filter by</param>
		/// <returns>Successfully fetched list of configured automatic Order status transitions</returns>
		public async Task<AutomaticTransitionInfoList> V2UserMarketplacesOrdersAutomaticTransitionsGetByStoreIdAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/automaticTransitions?storeId=" + (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AutomaticTransitionInfoList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configure new or existing automatic Order status transition
		/// V2UserMarketplacesOrdersAutomaticTransitionsPost v2/user/marketplaces/orders/automaticTransitions
		/// </summary>
		public async Task V2UserMarketplacesOrdersAutomaticTransitionsPostAsync(ConfigureAutomaticTransitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/automaticTransitions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Send a batch of operations to change your marketplace Order information: accept, ship, etc.  (max 100 items per call)
		/// The purpose of this operation is to reduce the amount of request to the API.
		/// Max 100 items per call.
		/// 
		/// V2UserMarketplacesOrdersBatchesChangeOrders_changeOrderTypePostByUserNameAndTestMode v2/user/marketplaces/orders/batches/changeOrders/{changeOrderType}
		/// </summary>
		/// <param name="changeOrderType">The Order change type</param>
		/// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login.</param>
		/// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account.</param>
		public async Task V2UserMarketplacesOrdersBatchesChangeOrders_changeOrderTypePostByUserNameAndTestModeAsync(string changeOrderType, string userName, bool testMode, ChangeOrderListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/batches/changeOrders/"+ (changeOrderType==null? "" : System.Uri.EscapeDataString(changeOrderType))+"&userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName))+"&testMode="+testMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Send a batch of operations to clear an Order's merchant information (max 100 items per call)
		/// The purpose of this operation is to reduce the amount of request to the API.
		/// V2UserMarketplacesOrdersBatchesClearMerchantOrderInfosPost v2/user/marketplaces/orders/batches/clearMerchantOrderInfos
		/// </summary>
		public async Task V2UserMarketplacesOrdersBatchesClearMerchantOrderInfosPostAsync(ClearMerchantOrderInfoListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/batches/clearMerchantOrderInfos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Send a batch of operations to set an Order's merchant information  (max 100 items per call)
		/// The purpose of this operation is to reduce the amount of request to the API.
		/// V2UserMarketplacesOrdersBatchesSetMerchantOrderInfosPost v2/user/marketplaces/orders/batches/setMerchantOrderInfos
		/// </summary>
		public async Task V2UserMarketplacesOrdersBatchesSetMerchantOrderInfosPostAsync(SetMerchantOrderInfoListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/batches/setMerchantOrderInfos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a paginated list of Order report exportations
		/// V2UserMarketplacesOrdersExportationsGetByPageNumberAndPageSizeAndStoreId v2/user/marketplaces/orders/exportations
		/// </summary>
		/// <param name="pageNumber">The page number you want to get</param>
		/// <param name="pageSize">The entry count you want to get</param>
		/// <param name="storeId">The store identifier to regroup the order exportations</param>
		/// <returns>Successfully fetched the list of Order report exportations</returns>
		public async Task<OrderExportations> V2UserMarketplacesOrdersExportationsGetByPageNumberAndPageSizeAndStoreIdAsync(int pageNumber, int pageSize, string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/exportations?pageNumber="+pageNumber+"&pageSize="+pageSize+"&storeId=" + (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderExportations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request a new Order report exportation to be generated
		/// A new file will be generated containing a summary of all the Orders matching the requested filter settings.
		/// V2UserMarketplacesOrdersExportationsPost v2/user/marketplaces/orders/exportations
		/// </summary>
		public async Task V2UserMarketplacesOrdersExportationsPostAsync(ExportOrderListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/exportations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Send harvest request to all your marketplaces
		/// V2UserMarketplacesOrdersHarvestPostByStoreId v2/user/marketplaces/orders/harvest
		/// </summary>
		/// <param name="storeId">The StoreId to filter by</param>
		public async Task V2UserMarketplacesOrdersHarvestPostByStoreIdAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/harvest?storeId=" + (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate an Order Invoice batch
		/// V2UserMarketplacesOrdersInvoicesGeneratePostByUserName v2/user/marketplaces/orders/invoices/generate
		/// </summary>
		/// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login.</param>
		public async Task V2UserMarketplacesOrdersInvoicesGeneratePostByUserNameAsync(string userName, GenerateBatchOrderInvoiceRequestItem[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/invoices/generate?userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the PDF version of the invoice
		/// V2UserMarketplacesOrdersInvoicesGetPdfInvoicePost v2/user/marketplaces/orders/invoices/getPdfInvoice
		/// </summary>
		/// <returns>The PDF version of the HTML invoice URL in the request</returns>
		public async Task V2UserMarketplacesOrdersInvoicesGetPdfInvoicePostAsync(GetOrderInvoicePdfFromHtmlInvoiceUrlRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/invoices/getPdfInvoice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Order Invoice design settings
		/// V2UserMarketplacesOrdersInvoicesSettingsDesignGet v2/user/marketplaces/orders/invoices/settings/design
		/// </summary>
		/// <returns>Design successfully retrieved</returns>
		public async Task<OrderInvoiceDesignSettings> V2UserMarketplacesOrdersInvoicesSettingsDesignGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/invoices/settings/design";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderInvoiceDesignSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save Order Invoice design settings
		/// V2UserMarketplacesOrdersInvoicesSettingsDesignPut v2/user/marketplaces/orders/invoices/settings/design
		/// </summary>
		public async Task V2UserMarketplacesOrdersInvoicesSettingsDesignPutAsync(OrderInvoiceDesignSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/invoices/settings/design";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View a preview an Order Invoice using custom design settings
		/// V2UserMarketplacesOrdersInvoicesSettingsDesignPreviewPost v2/user/marketplaces/orders/invoices/settings/design/preview
		/// </summary>
		/// <returns>Design Preview successfully retrieved</returns>
		public async Task<GetOrderInvoiceDesignPreviewResponse> V2UserMarketplacesOrdersInvoicesSettingsDesignPreviewPostAsync(OrderInvoiceDesignSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/invoices/settings/design/preview";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrderInvoiceDesignPreviewResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Order Invoice general settings
		/// V2UserMarketplacesOrdersInvoicesSettingsGeneralGet v2/user/marketplaces/orders/invoices/settings/general
		/// </summary>
		/// <returns>Settings successfully retrieved</returns>
		public async Task<GetOrderInvoiceGeneralSettingsResponse> V2UserMarketplacesOrdersInvoicesSettingsGeneralGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/invoices/settings/general";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrderInvoiceGeneralSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save Order Invoice general settings
		/// V2UserMarketplacesOrdersInvoicesSettingsGeneralPut v2/user/marketplaces/orders/invoices/settings/general
		/// </summary>
		public async Task V2UserMarketplacesOrdersInvoicesSettingsGeneralPutAsync(OrderInvoiceGeneralSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/invoices/settings/general";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate an Order Invoice
		/// V2UserMarketplacesOrdersInvoices_marketplaceTechnicalCode_accountId_beezUPOrderUUIDGeneratePostByUserName v2/user/marketplaces/orders/invoices/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderUUID}/generate
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The Marketplace Technical Code</param>
		/// <param name="accountId">The Account Identifier</param>
		/// <param name="beezUPOrderUUID">The BeezUP Order UUID</param>
		/// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login.</param>
		public async Task V2UserMarketplacesOrdersInvoices_marketplaceTechnicalCode_accountId_beezUPOrderUUIDGeneratePostByUserNameAsync(string marketplaceTechnicalCode, string accountId, string beezUPOrderUUID, string userName, GenerateOrderInvoiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/invoices/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (beezUPOrderUUID==null? "" : System.Uri.EscapeDataString(beezUPOrderUUID))+"/generate&userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View a preview an Order Invoice
		/// V2UserMarketplacesOrdersInvoices_marketplaceTechnicalCode_accountId_beezUPOrderUUIDPreviewPost v2/user/marketplaces/orders/invoices/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderUUID}/preview
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The Marketplace Technical Code</param>
		/// <param name="accountId">The Account Identifier</param>
		/// <param name="beezUPOrderUUID">The BeezUP Order UUID</param>
		/// <returns>Order Invoice preview successfully returned.</returns>
		public async Task<PreviewOrderInvoiceResponse> V2UserMarketplacesOrdersInvoices_marketplaceTechnicalCode_accountId_beezUPOrderUUIDPreviewPostAsync(string marketplaceTechnicalCode, string accountId, string beezUPOrderUUID, PreviewOrderInvoiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/invoices/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (beezUPOrderUUID==null? "" : System.Uri.EscapeDataString(beezUPOrderUUID))+"/preview";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PreviewOrderInvoiceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Get a paginated list of all Orders with all Order and Order Item(s) properties
		/// DEPRECATED - Use /orders/v3 instead
		/// The purpose of this operation is to reduce the amount of request to the API.\
		/// \
		/// Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties.
		/// 
		/// V2UserMarketplacesOrdersListFullPost v2/user/marketplaces/orders/list/full
		/// </summary>
		/// <returns>Successfully fetched the full list of Orders</returns>
		public async Task<OrderListFull> V2UserMarketplacesOrdersListFullPostAsync(OrderListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/list/full";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderListFull>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Get a paginated list of all Orders without details
		/// Use /orders/v3 instead
		/// V2UserMarketplacesOrdersListLightPost v2/user/marketplaces/orders/list/light
		/// </summary>
		/// <returns>Successfully fetched the list of Orders</returns>
		public async Task<OrderListLight> V2UserMarketplacesOrdersListLightPostAsync(OrderListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/list/light";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderListLight>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Get current synchronization status between your marketplaces and BeezUP accounts
		/// Use /orders/v3
		/// V2UserMarketplacesOrdersStatusGetByStoreId v2/user/marketplaces/orders/status
		/// </summary>
		/// <param name="storeId">The StoreId to filter by</param>
		/// <returns>Successfully fetched current synchronization status</returns>
		public async Task<AccountSynchronizationList> V2UserMarketplacesOrdersStatusGetByStoreIdAsync(string storeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/status?storeId=" + (storeId==null? "" : System.Uri.EscapeDataString(storeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountSynchronizationList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the subscription list
		/// V2UserMarketplacesOrdersSubscriptionsGet v2/user/marketplaces/orders/subscriptions/
		/// </summary>
		/// <returns>The subscription list</returns>
		public async Task<SubscriptionIndex[]> V2UserMarketplacesOrdersSubscriptionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/subscriptions/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubscriptionIndex[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a subscription to the orders
		/// V2UserMarketplacesOrdersSubscriptions_idDelete v2/user/marketplaces/orders/subscriptions/{id}
		/// </summary>
		public async Task V2UserMarketplacesOrdersSubscriptions_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/subscriptions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a subscription to the orders
		/// V2UserMarketplacesOrdersSubscriptions_idGet v2/user/marketplaces/orders/subscriptions/{id}
		/// </summary>
		/// <returns>Subscription info</returns>
		public async Task<SubscriptionIndex> V2UserMarketplacesOrdersSubscriptions_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/subscriptions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubscriptionIndex>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a subscription to the orders
		/// Please take a look at this sequence diagram to understand the subscription process to follow [here](https://www.websequencediagrams.com/files/render?link=SBYbeIc8NGshk6ooCbmjoBLIMl4fIGO1xjJbPBQAglBo0n6BwEReh7NXQiPSjOTX)
		/// V2UserMarketplacesOrdersSubscriptions_idPost v2/user/marketplaces/orders/subscriptions/{id}
		/// </summary>
		public async Task V2UserMarketplacesOrdersSubscriptions_idPostAsync(string id, CreateSubscriptionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/subscriptions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Activate a subscription to the orders
		/// At this moment, BeezUP will ensure that your callback url is respecting this specification:
		/// - https://api.beezup.com/swaggerhub/apis/BeezUP/public_marketplaces_orders_subscriptions_consumer-dev/1.0#/Subscriptions/Verification
		/// 
		/// After that we will send you the orders related to your subscription, respecting this specification:
		/// - https://api.beezup.com/swaggerhub/apis/BeezUP/public_marketplaces_orders_subscriptions_consumer-dev/1.0#/Subscriptions/PushOrders
		/// 
		/// V2UserMarketplacesOrdersSubscriptions_idActivatePost v2/user/marketplaces/orders/subscriptions/{id}/activate
		/// </summary>
		public async Task V2UserMarketplacesOrdersSubscriptions_idActivatePostAsync(string id, ActivateSubscriptionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/subscriptions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deactivate a subscription to the orders
		/// V2UserMarketplacesOrdersSubscriptions_idDeactivatePost v2/user/marketplaces/orders/subscriptions/{id}/deactivate
		/// </summary>
		public async Task V2UserMarketplacesOrdersSubscriptions_idDeactivatePostAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/subscriptions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/deactivate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the push reporting related to this subscription
		/// V2UserMarketplacesOrdersSubscriptions_idReportingGetByPageNumberAndPageSize v2/user/marketplaces/orders/subscriptions/{id}/reporting
		/// </summary>
		/// <returns>Subscription push reporting info</returns>
		public async Task<SubscriptionPushReporting[]> V2UserMarketplacesOrdersSubscriptions_idReportingGetByPageNumberAndPageSizeAsync(string id, string pageNumber, string pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/subscriptions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/reporting&pageNumber=" + (pageNumber==null? "" : System.Uri.EscapeDataString(pageNumber))+"&pageSize=" + (pageSize==null? "" : System.Uri.EscapeDataString(pageSize));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubscriptionPushReporting[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Force retry push orders immediatly
		/// In case your subscription consumption is unavailable and your subscription is still active you can ask to retry immediatly to push orders instead of waiting the next scheduled retry date
		/// V2UserMarketplacesOrdersSubscriptions_idRetryPost v2/user/marketplaces/orders/subscriptions/{id}/retry
		/// </summary>
		public async Task V2UserMarketplacesOrdersSubscriptions_idRetryPostAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/subscriptions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/retry";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] DEPRECATED - Get full Order and Order Item(s) properties
		/// DEPRECATED - Use /orders/v3 instead
		/// V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderIdGet v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		/// <returns>Successfully fetched Order and Order Item(s) properties</returns>
		public async Task<Order> V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderIdGetAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Clear an Order's merchant information
		/// V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderIdClearMerchantOrderInfoPost v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		public async Task V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderIdClearMerchantOrderInfoPostAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId))+"/clearMerchantOrderInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Send harvest request for a single Order
		/// V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderIdHarvestPost v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		public async Task V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderIdHarvestPostAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId))+"/harvest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Get an Order's harvest and change history
		/// V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderIdHistoryGet v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		/// <returns>Successfully fetched Order history</returns>
		public async Task<OrderHistory> V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderIdHistoryGetAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId))+"/history";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderHistory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Set an Order's merchant information
		/// V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderIdSetMerchantOrderInfoPost v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		public async Task V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderIdSetMerchantOrderInfoPostAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, SetMerchantOrderInfoRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId))+"/setMerchantOrderInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [DEPRECATED] Change your marketplace Order Information (accept, ship, etc.)
		/// V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderId_changeOrderTypePostByUserNameAndTestMode v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}
		/// </summary>
		/// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
		/// <param name="beezUPOrderId">The BeezUP Order identifier</param>
		/// <param name="changeOrderType">The Order change type</param>
		/// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login.</param>
		/// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account.</param>
		public async Task V2UserMarketplacesOrders_marketplaceTechnicalCode_accountId_beezUPOrderId_changeOrderTypePostByUserNameAndTestModeAsync(string marketplaceTechnicalCode, int accountId, string beezUPOrderId, string changeOrderType, string userName, bool testMode, ChangeOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/marketplaces/orders/"+ (marketplaceTechnicalCode==null? "" : System.Uri.EscapeDataString(marketplaceTechnicalCode))+"/"+accountId+"/"+ (beezUPOrderId==null? "" : System.Uri.EscapeDataString(beezUPOrderId))+"/"+ (changeOrderType==null? "" : System.Uri.EscapeDataString(changeOrderType))+"&userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName))+"&testMode="+testMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum V2UserChannelCatalogs_channelCatalogIdProductsExportPostByFormatFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xlsx = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		csv = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
