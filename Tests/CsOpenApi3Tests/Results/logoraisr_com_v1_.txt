//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Color
	{
		
		/// <summary>
		/// RGB-Blue color value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public System.Nullable<System.Int32> Blue { get; set; }
		
		/// <summary>
		/// RGB-Green color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="green")]
		public System.Nullable<System.Int32> Green { get; set; }
		
		/// <summary>
		/// Hex-label of this color.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hex")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Hex { get; set; }
		
		/// <summary>
		/// Number of pixels that holds this color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number_of_pixel")]
		public System.Nullable<System.Int32> Number_of_pixel { get; set; }
		
		/// <summary>
		/// Percentage of pixels that holds this color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
		
		/// <summary>
		/// RGB-Red color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red")]
		public System.Nullable<System.Int32> Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileResponse
	{
		
		/// <summary>
		/// Returns the file_id. To apply processes to the uploaded file, this file_id must be referenced in the API-calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PreviewResponse
	{
		
		/// <summary>
		/// Url from which the preview file can be downloaded.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_img_url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Preview_img_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Process
	{
		
		/// <summary>
		/// Crops the image according to the specified mechanism. If you specify the size "WidthexHeight", the image will be cropped centered. If coordinates "x1,y1,x2,y2" are given, the image is cropped according to the coordinates. The image will be cropped to the size of the stories if "faces" are specified as. Example Centered: "crop": "200x300". Example Region: "crop": "200,300,150,300". Example Faces: "crop": "faces".
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crop")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Crop { get; set; }
		
		/// <summary>
		/// Flips the image around the horizontal axis, from top to bottom. Example: "flip": true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flip")]
		public System.Nullable<System.Boolean> Flip { get; set; }
		
		/// <summary>
		/// Mirrors the image around the vertical axis, i.e. from right to left. Example: "mirror": true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mirror")]
		public System.Nullable<System.Boolean> Mirror { get; set; }
		
		/// <summary>
		/// Schl√ºssel welcher Verarbeitungs-Algorithmus angewendet wird. Zur Auswahl stehen "logo-to-vector", "logo-super-resolution", "logo-segmentation" und "image-processing".
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="processing_algorithm")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Processing_algorithm { get; set; }
		
		/// <summary>
		/// Changes the size of the image according to the specified size. Example: "resize": "200x300".
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resize")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Resize { get; set; }
		
		/// <summary>
		/// Rotates the image around the center according to the specified degree. Example: "rotate": 90
		/// Minimum: 0
		/// Maximum: 360
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotate")]
		[System.ComponentModel.DataAnnotations.Range(0, 360)]
		public System.Nullable<System.Int32> Rotate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Project
	{
		
		/// <summary>
		/// The Date when the project was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Id of the file on which the process was applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// Id of the created project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Id of the paypal payment.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paypal_payment_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Paypal_payment_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="process")]
		public Process Process { get; set; }
		
		/// <summary>
		/// Process which should applied. Processes are "color-classification".
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="process_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Process_id { get; set; }
		
		/// <summary>
		/// Number of the created project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project_number")]
		public System.Nullable<System.Int32> Project_number { get; set; }
		
		/// <summary>
		/// Name of the project with which it was saved.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project_title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Project_title { get; set; }
		
		/// <summary>
		/// Id of the result file which the process created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_file_id")]
		public string Result_file_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectRequest
	{
		
		/// <summary>
		/// Id of the file on which the process is to be applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="process")]
		public Process Process { get; set; }
		
		/// <summary>
		/// Name of the project with which it is saved.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project_title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Project_title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectResponse
	{
		
		/// <summary>
		/// Id of the created project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project_id")]
		public System.Nullable<System.Int32> Project_id { get; set; }
		
		/// <summary>
		/// Number of the created project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project_number")]
		public System.Nullable<System.Int32> Project_number { get; set; }
		
		/// <summary>
		/// Id of the result_file. This id must be specified to create the result_file_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_file_id")]
		public string Result_file_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Report
	{
		
		/// <summary>
		/// The Date when the report was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Id of the file on which the report was applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// Process_id of the process which was applied. Processes are "color-classification".
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="process_id")]
		public int Process_id { get; set; }
		
		/// <summary>
		/// Number of the created report.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="report_number")]
		public int Report_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public Result Result { get; set; }
		
		/// <summary>
		/// Result_id of the result which was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result_id")]
		public int Result_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Result
	{
		
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public Color[] Colors { get; set; }
		
		/// <summary>
		/// Height of image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Number of pixel in image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number_of_pixel_in_image")]
		public System.Nullable<System.Int32> Number_of_pixel_in_image { get; set; }
		
		/// <summary>
		/// Width of image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRequest
	{
		
		/// <summary>
		/// Id of the file on which the process is to be applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// Process which should applied. Processes are "color-classification".
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="process")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Process { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportResponse
	{
		
		/// <summary>
		/// The Date when the project was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Id of the file on which the process was applied.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string File_id { get; set; }
		
		/// <summary>
		/// Process which was applied. Processes are "color-classification".
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processing_algorithm")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Processing_algorithm { get; set; }
		
		/// <summary>
		/// Number of the report which was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_number")]
		public System.Nullable<System.Int32> Report_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public Result Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultResponse
	{
		
		/// <summary>
		/// Url from which the result file can be downloaded.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_file_url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Result_file_url { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get preview image of uploaded file
		/// This GET-Method returns the URL where the preview image of uploaded file can downloaded from.
		/// Previews_read previews/{file_id}/
		/// </summary>
		/// <param name="file_id">Id of the file for which the preview_img_url is generated.</param>
		public async Task<PreviewResponse> Previews_readAsync(string file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "previews/"+ (file_id==null? "" : System.Uri.EscapeDataString(file_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PreviewResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get process list.
		/// This GET-Method lists all on logoraisr available processes.
		/// Processes_list processes/
		/// </summary>
		public async Task<Process> Processes_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "processes/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Process>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user project list.
		/// This GET-Method lists the user's projects.
		/// Projects_list projects/
		/// </summary>
		public async Task<Project> Projects_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Project>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new project.
		/// This POST-Method creates a new project.
		/// Projects_create projects/
		/// </summary>
		public async Task Projects_createAsync(ProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project details.
		/// This GET-Method returns a specific project.
		/// Projects_read projects/{project_number}/
		/// </summary>
		/// <param name="project_number">Number of the project.</param>
		public async Task<Project> Projects_readAsync(string project_number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_number==null? "" : System.Uri.EscapeDataString(project_number))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Project>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user report list.
		/// This GET method lists the user's reports.
		/// Reports_list reports/
		/// </summary>
		public async Task<Report> Reports_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Report>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new report.
		/// This POST-Method creates a new report.
		/// Reports_create reports/
		/// </summary>
		public async Task Reports_createAsync(ReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get report details.
		/// This GET-Method returns the details of a specific report.
		/// Reports_read reports/{report_number}/
		/// </summary>
		public async Task<Report> Reports_readAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/{report_number}/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Report>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the result from image processing
		/// This GET-Method returns the URL where the result can downloaded from.
		/// Results_read results/{result_file_id}/
		/// </summary>
		/// <param name="result_file_id">Id of the result_file for which the result_file_url is generated.</param>
		public async Task<ResultResponse> Results_readAsync(string result_file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "results/"+ (result_file_id==null? "" : System.Uri.EscapeDataString(result_file_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResultResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
