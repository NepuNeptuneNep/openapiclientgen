//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelImageCreationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdempotentParameterMismatchException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForbiddenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallRateLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentBuildVersionArn")]
		public string ComponentBuildVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidVersionNumberException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterCombinationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContainerRecipeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		public string ContainerRecipeArn { get; set; }
	}
	
	/// <summary>
	/// Configuration details of the component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentArn")]
		public string ComponentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ComponentParameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// Contains a key/value pair that sets the named component parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string[] Value { get; set; }
	}
	
	/// <summary>
	/// Defines block device mappings for the instance used to configure your image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceBlockDeviceMapping
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebs")]
		public EbsInstanceBlockDeviceSpecification Ebs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="virtualName")]
		public string VirtualName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noDevice")]
		public string NoDevice { get; set; }
	}
	
	/// <summary>
	/// Amazon EBS-specific block device mapping specifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EbsInstanceBlockDeviceSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="encrypted")]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleteOnTermination")]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iops")]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snapshotId")]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeSize")]
		public System.Nullable<System.Int32> VolumeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeType")]
		public EbsVolumeType VolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throughput")]
		public System.Nullable<System.Int32> Throughput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EbsVolumeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="standard")]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="io1")]
		io1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="io2")]
		io2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gp2")]
		gp2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gp3")]
		gp3 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sc1")]
		sc1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="st1")]
		st1 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContainerRepositoryService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ECR")]
		ECR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDistributionConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		public string DistributionConfigurationArn { get; set; }
	}
	
	/// <summary>
	/// Defines the settings for a specific Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Distribution
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amiDistributionConfiguration")]
		public AmiDistributionConfiguration AmiDistributionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerDistributionConfiguration")]
		public ContainerDistributionConfiguration ContainerDistributionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseConfigurationArns")]
		public string[] LicenseConfigurationArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchTemplateConfigurations")]
		public LaunchTemplateConfiguration[] LaunchTemplateConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3ExportConfiguration")]
		public S3ExportConfiguration S3ExportConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fastLaunchConfigurations")]
		public FastLaunchConfiguration[] FastLaunchConfigurations { get; set; }
	}
	
	/// <summary>
	/// Define and configure the output AMIs of the pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmiDistributionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetAccountIds")]
		public string[] TargetAccountIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amiTags")]
		public TagMap AmiTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchPermission")]
		public LaunchPermissionConfiguration LaunchPermission { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	/// <summary>
	/// Describes the configuration for a launch permission. The launch permission modification request is sent to the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyImageAttribute.html">Amazon EC2 ModifyImageAttribute</a> API on behalf of the user for each Region they have selected to distribute the AMI. To make an AMI public, set the launch permission authorized accounts to <code>all</code>. See the examples for making an AMI public at <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyImageAttribute.html">Amazon EC2 ModifyImageAttribute</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchPermissionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="userIds")]
		public string[] UserIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userGroups")]
		public string[] UserGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationArns")]
		public string[] OrganizationArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationalUnitArns")]
		public string[] OrganizationalUnitArns { get; set; }
	}
	
	/// <summary>
	/// Container distribution settings for encryption, licensing, and sharing in a specific Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerDistributionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerTags")]
		public string[] ContainerTags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetRepository")]
		public TargetContainerRepository TargetRepository { get; set; }
	}
	
	/// <summary>
	/// The container repository where the output container image is stored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetContainerRepository
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public ContainerRepositoryService Service { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	/// <summary>
	/// Identifies an Amazon EC2 launch template to use for a specific account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchTemplateConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchTemplateId")]
		public string LaunchTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setDefaultVersion")]
		public System.Nullable<System.Boolean> SetDefaultVersion { get; set; }
	}
	
	/// <summary>
	/// Properties that configure export from your build instance to a compatible file format for your VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3ExportConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskImageFormat")]
		public DiskImageFormat DiskImageFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Prefix")]
		public string S3Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DiskImageFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VMDK")]
		VMDK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RAW")]
		RAW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VHD")]
		VHD = 2,
	}
	
	/// <summary>
	/// Define and configure faster launching for output Windows AMIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FastLaunchConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snapshotConfiguration")]
		public FastLaunchSnapshotConfiguration SnapshotConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxParallelLaunches")]
		public System.Nullable<System.Int32> MaxParallelLaunches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchTemplate")]
		public FastLaunchLaunchTemplateSpecification LaunchTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
	}
	
	/// <summary>
	/// Configuration settings for creating and managing pre-provisioned snapshots for a fast-launch enabled Windows AMI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FastLaunchSnapshotConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetResourceCount")]
		public System.Nullable<System.Int32> TargetResourceCount { get; set; }
	}
	
	/// <summary>
	/// <p>Identifies the launch template that the associated Windows AMI uses for launching an instance when faster launching is enabled.</p> <note> <p>You can specify either the <code>launchTemplateName</code> or the <code>launchTemplateId</code>, but not both.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FastLaunchLaunchTemplateSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchTemplateId")]
		public string LaunchTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchTemplateName")]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchTemplateVersion")]
		public string LaunchTemplateVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateImageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
	}
	
	/// <summary>
	/// Settings that Image Builder uses to configure the ECR repository and the output container images that Amazon Inspector scans.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EcrConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerTags")]
		public string[] ContainerTags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateImagePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePipelineArn")]
		public string ImagePipelineArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PipelineExecutionStartCondition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPRESSION_MATCH_ONLY")]
		EXPRESSION_MATCH_ONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE")]
		EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateImageRecipeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		public string ImageRecipeArn { get; set; }
	}
	
	/// <summary>
	/// Contains settings for the Systems Manager agent on your build instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SystemsManagerAgent
	{
		
		[System.Runtime.Serialization.DataMember(Name="uninstallAfterBuild")]
		public System.Nullable<System.Boolean> UninstallAfterBuild { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInfrastructureConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		public string InfrastructureConfigurationArn { get; set; }
	}
	
	/// <summary>
	/// Amazon S3 logging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Logs
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketName")]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3KeyPrefix")]
		public string S3KeyPrefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentBuildVersionArn")]
		public string ComponentBuildVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceDependencyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteContainerRecipeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		public string ContainerRecipeArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDistributionConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		public string DistributionConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteImageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteImagePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePipelineArn")]
		public string ImagePipelineArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteImageRecipeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		public string ImageRecipeArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInfrastructureConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		public string InfrastructureConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="component")]
		public Component Component { get; set; }
	}
	
	/// <summary>
	/// A detailed view of a component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Component
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changeDescription")]
		public string ChangeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ComponentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedOsVersions")]
		public string[] SupportedOsVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ComponentState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ComponentParameterDetail[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encrypted")]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="obfuscate")]
		public System.Nullable<System.Boolean> Obfuscate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ComponentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUILD")]
		BUILD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEST")]
		TEST = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Platform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Windows")]
		Windows = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Linux")]
		Linux = 1,
	}
	
	/// <summary>
	/// A group of fields that describe the current status of components that are no longer active.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentState
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ComponentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ComponentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPRECATED")]
		DEPRECATED = 0,
	}
	
	/// <summary>
	/// Defines a parameter that is used to provide configuration details for the component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentParameterDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string[] DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComponentPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerRecipeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerRecipe")]
		public ContainerRecipe ContainerRecipe { get; set; }
	}
	
	/// <summary>
	/// A container recipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerRecipe
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerType")]
		public ContainerType ContainerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="components")]
		public ComponentConfiguration[] Components { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceConfiguration")]
		public InstanceConfiguration InstanceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dockerfileTemplateData")]
		public string DockerfileTemplateData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encrypted")]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentImage")]
		public string ParentImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workingDirectory")]
		public string WorkingDirectory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetRepository")]
		public TargetContainerRepository TargetRepository { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContainerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOCKER")]
		DOCKER = 0,
	}
	
	/// <summary>
	/// Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blockDeviceMappings")]
		public InstanceBlockDeviceMapping[] BlockDeviceMappings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerRecipePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDistributionConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributionConfiguration")]
		public DistributionConfiguration DistributionConfiguration { get; set; }
	}
	
	/// <summary>
	/// A distribution configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DistributionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributions")]
		public Distribution[] Distributions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeoutMinutes")]
		public int TimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateUpdated")]
		public string DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
	}
	
	/// <summary>
	/// An Image Builder image. You must specify exactly one recipe for the image – either a container recipe (<code>containerRecipe</code>), which creates a container image, or an image recipe (<code>imageRecipe</code>), which creates an AMI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Image
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ImageType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enhancedImageMetadataEnabled")]
		public System.Nullable<System.Boolean> EnhancedImageMetadataEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ImageState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageRecipe")]
		public ImageRecipe ImageRecipe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerRecipe")]
		public ContainerRecipe ContainerRecipe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourcePipelineName")]
		public string SourcePipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourcePipelineArn")]
		public string SourcePipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfiguration")]
		public InfrastructureConfiguration InfrastructureConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributionConfiguration")]
		public DistributionConfiguration DistributionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTestsConfiguration")]
		public ImageTestsConfiguration ImageTestsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputResources")]
		public OutputResources OutputResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildType")]
		public BuildType BuildType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSource")]
		public ImageSource ImageSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scanState")]
		public ImageScanState ScanState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public ImageScanningConfiguration ImageScanningConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMI")]
		AMI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOCKER")]
		DOCKER = 1,
	}
	
	/// <summary>
	/// Image status and the reason for that status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageState
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ImageStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUILDING")]
		BUILDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TESTING")]
		TESTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISTRIBUTING")]
		DISTRIBUTING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTEGRATING")]
		INTEGRATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPRECATED")]
		DEPRECATED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 10,
	}
	
	/// <summary>
	/// An image recipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageRecipe
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ImageType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="components")]
		public ComponentConfiguration[] Components { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentImage")]
		public string ParentImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blockDeviceMappings")]
		public InstanceBlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workingDirectory")]
		public string WorkingDirectory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalInstanceConfiguration")]
		public AdditionalInstanceConfiguration AdditionalInstanceConfiguration { get; set; }
	}
	
	/// <summary>
	/// <p>In addition to your infrastructure configuration, these settings provide an extra layer of control over your build instances. You can also specify commands to run on launch for all of your build instances.</p> <p>Image Builder does not automatically install the Systems Manager agent on Windows instances. If your base image includes the Systems Manager agent, then the AMI that you create will also include the agent. For Linux instances, if the base image does not already include the Systems Manager agent, Image Builder installs it. For Linux instances where Image Builder installs the Systems Manager agent, you can choose whether to keep it for the AMI that you create.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdditionalInstanceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="systemsManagerAgent")]
		public SystemsManagerAgent SystemsManagerAgent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userDataOverride")]
		public string UserDataOverride { get; set; }
	}
	
	/// <summary>
	/// Details of the infrastructure configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InfrastructureConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceTypes")]
		public string[] InstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceProfileName")]
		public string InstanceProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logging")]
		public Logging Logging { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPair")]
		public string KeyPair { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="terminateInstanceOnFailure")]
		public System.Nullable<System.Boolean> TerminateInstanceOnFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snsTopicArn")]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateUpdated")]
		public string DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public ResourceTagMap ResourceTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceMetadataOptions")]
		public InstanceMetadataOptions InstanceMetadataOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Logging configuration defines where Image Builder uploads your logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Logging
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Logs")]
		public S3Logs S3Logs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceTagMap
	{
	}
	
	/// <summary>
	/// The instance metadata options that apply to the HTTP requests that pipeline builds use to launch EC2 build and test instances. For more information about instance metadata options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 User Guide</i> </i> for Linux instances, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 Windows Guide</i> </i> for Windows instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceMetadataOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpTokens")]
		public string HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpPutResponseHopLimit")]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
	}
	
	/// <summary>
	/// Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageTestsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageTestsEnabled")]
		public System.Nullable<System.Boolean> ImageTestsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutMinutes")]
		public System.Nullable<System.Int32> TimeoutMinutes { get; set; }
	}
	
	/// <summary>
	/// The resources produced by this image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputResources
	{
		
		[System.Runtime.Serialization.DataMember(Name="amis")]
		public Ami[] Amis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public Container[] Containers { get; set; }
	}
	
	/// <summary>
	/// Details of an Amazon EC2 AMI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ami
	{
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Image status and the reason for that status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ImageState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
	}
	
	/// <summary>
	/// A container encapsulates the runtime environment for an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Container
	{
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUris")]
		public string[] ImageUris { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BuildType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER_INITIATED")]
		USER_INITIATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCHEDULED")]
		SCHEDULED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT")]
		IMPORT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImageSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMAZON_MANAGED")]
		AMAZON_MANAGED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_MARKETPLACE")]
		AWS_MARKETPLACE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORTED")]
		IMPORTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM")]
		CUSTOM = 3,
	}
	
	/// <summary>
	/// Shows the vulnerability scan status for a specific image, and the reason for that status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageScanState
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ImageScanStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImageScanStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCANNING")]
		SCANNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COLLECTING")]
		COLLECTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ABANDONED")]
		ABANDONED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIMED_OUT")]
		TIMED_OUT = 6,
	}
	
	/// <summary>
	/// Contains settings for Image Builder image resource and container image scans.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageScanningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageScanningEnabled")]
		public System.Nullable<System.Boolean> ImageScanningEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ecrConfiguration")]
		public EcrConfiguration EcrConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImagePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePipeline")]
		public ImagePipeline ImagePipeline { get; set; }
	}
	
	/// <summary>
	/// Details of an image pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImagePipeline
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enhancedImageMetadataEnabled")]
		public System.Nullable<System.Boolean> EnhancedImageMetadataEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		public string ImageRecipeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		public string ContainerRecipeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		public string InfrastructureConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		public string DistributionConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTestsConfiguration")]
		public ImageTestsConfiguration ImageTestsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PipelineStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateUpdated")]
		public string DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateLastRun")]
		public string DateLastRun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateNextRun")]
		public string DateNextRun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public ImageScanningConfiguration ImageScanningConfiguration { get; set; }
	}
	
	/// <summary>
	/// A schedule configures how often and when a pipeline will automatically create a new image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Schedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="scheduleExpression")]
		public string ScheduleExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionStartCondition")]
		public PipelineExecutionStartCondition PipelineExecutionStartCondition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PipelineStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImagePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImageRecipeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageRecipe")]
		public ImageRecipe ImageRecipe { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImageRecipePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	/// <summary>
	/// GetInfrastructureConfiguration response object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInfrastructureConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfiguration")]
		public InfrastructureConfiguration InfrastructureConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkflowExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowBuildVersionArn")]
		public string WorkflowBuildVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionId")]
		public string WorkflowExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public WorkflowType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public WorkflowExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalStepCount")]
		public System.Nullable<System.Int32> TotalStepCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalStepsSucceeded")]
		public System.Nullable<System.Int32> TotalStepsSucceeded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalStepsFailed")]
		public System.Nullable<System.Int32> TotalStepsFailed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalStepsSkipped")]
		public System.Nullable<System.Int32> TotalStepsSkipped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WorkflowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUILD")]
		BUILD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEST")]
		TEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISTRIBUTION")]
		DISTRIBUTION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WorkflowExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SKIPPED")]
		SKIPPED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ROLLBACK_IN_PROGRESS")]
		ROLLBACK_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ROLLBACK_COMPLETED")]
		ROLLBACK_COMPLETED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkflowStepExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepExecutionId")]
		public string StepExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowBuildVersionArn")]
		public string WorkflowBuildVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionId")]
		public string WorkflowExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public WorkflowStepExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rollbackStatus")]
		public WorkflowStepExecutionRollbackStatus RollbackStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public string Inputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public string Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onFailure")]
		public string OnFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WorkflowStepExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SKIPPED")]
		SKIPPED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WorkflowStepExecutionRollbackStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SKIPPED")]
		SKIPPED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentBuildVersionArn")]
		public string ComponentBuildVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportVmImageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageArn")]
		public string ImageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListComponentBuildVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentSummaryList")]
		public ComponentSummary[] ComponentSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A high-level summary of a component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedOsVersions")]
		public string[] SupportedOsVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ComponentState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ComponentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changeDescription")]
		public string ChangeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="obfuscate")]
		public System.Nullable<System.Boolean> Obfuscate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidPaginationTokenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListComponentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentVersionList")]
		public ComponentVersion[] ComponentVersionList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The defining characteristics of a specific version of an Amazon Web Services TOE component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedOsVersions")]
		public string[] SupportedOsVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ComponentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
	}
	
	/// <summary>
	/// A filter name and value pair that is used to return a more specific list of results from a list operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Filter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListContainerRecipesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerRecipeSummaryList")]
		public ContainerRecipeSummary[] ContainerRecipeSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of a container recipe
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerRecipeSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerType")]
		public ContainerType ContainerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentImage")]
		public string ParentImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDistributionConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationSummaryList")]
		public DistributionConfigurationSummary[] DistributionConfigurationSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A high-level overview of a distribution configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DistributionConfigurationSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateUpdated")]
		public string DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImageBuildVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSummaryList")]
		public ImageSummary[] ImageSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An image summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ImageType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ImageState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputResources")]
		public OutputResources OutputResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildType")]
		public BuildType BuildType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSource")]
		public ImageSource ImageSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImagePackagesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePackageList")]
		public ImagePackage[] ImagePackageList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a package installed on an Image Builder image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImagePackage
	{
		
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageVersion")]
		public string PackageVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImagePipelineImagesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSummaryList")]
		public ImageSummary[] ImageSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImagePipelinesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePipelineList")]
		public ImagePipeline[] ImagePipelineList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImageRecipesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageRecipeSummaryList")]
		public ImageRecipeSummary[] ImageRecipeSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of an image recipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageRecipeSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentImage")]
		public string ParentImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImageScanFindingAggregationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public string AggregationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public ImageScanFindingAggregation[] Responses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// This returns exactly one type of aggregation, based on the filter that Image Builder applies in its API action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageScanFindingAggregation
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountAggregation")]
		public AccountAggregation AccountAggregation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageAggregation")]
		public ImageAggregation ImageAggregation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePipelineAggregation")]
		public ImagePipelineAggregation ImagePipelineAggregation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vulnerabilityIdAggregation")]
		public VulnerabilityIdAggregation VulnerabilityIdAggregation { get; set; }
	}
	
	/// <summary>
	/// Contains counts of vulnerability findings from image scans that run when you create new Image Builder images, or build new versions of existing images. The vulnerability counts are grouped by severity level. The counts are aggregated across resources to create the final tally for the account that owns them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountAggregation
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severityCounts")]
		public SeverityCounts SeverityCounts { get; set; }
	}
	
	/// <summary>
	/// Includes counts by severity level for medium severity and higher level findings, plus a total for all of the findings for the specified filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SeverityCounts
	{
		
		[System.Runtime.Serialization.DataMember(Name="all")]
		public System.Nullable<System.Int32> All { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Int32> Critical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Int32> High { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public System.Nullable<System.Int32> Medium { get; set; }
	}
	
	/// <summary>
	/// Contains vulnerability counts for a specific image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageAggregation
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severityCounts")]
		public SeverityCounts SeverityCounts { get; set; }
	}
	
	/// <summary>
	/// Contains vulnerability counts for a specific image pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImagePipelineAggregation
	{
		
		[System.Runtime.Serialization.DataMember(Name="imagePipelineArn")]
		public string ImagePipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severityCounts")]
		public SeverityCounts SeverityCounts { get; set; }
	}
	
	/// <summary>
	/// Includes counts of image and pipeline resource findings by vulnerability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VulnerabilityIdAggregation
	{
		
		[System.Runtime.Serialization.DataMember(Name="vulnerabilityId")]
		public string VulnerabilityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severityCounts")]
		public SeverityCounts SeverityCounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImageScanFindingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="findings")]
		public ImageScanFinding[] Findings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains details about a vulnerability scan finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageScanFinding
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountId")]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePipelineArn")]
		public string ImagePipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remediation")]
		public Remediation Remediation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstObservedAt")]
		public System.DateTimeOffset FirstObservedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inspectorScore")]
		public System.Nullable<System.Double> InspectorScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inspectorScoreDetails")]
		public InspectorScoreDetails InspectorScoreDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageVulnerabilityDetails")]
		public PackageVulnerabilityDetails PackageVulnerabilityDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fixAvailable")]
		public string FixAvailable { get; set; }
	}
	
	/// <summary>
	/// Information about how to remediate a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Remediation
	{
		
		[System.Runtime.Serialization.DataMember(Name="recommendation")]
		public RemediationRecommendation Recommendation { get; set; }
	}
	
	/// <summary>
	/// Details about the recommended course of action to remediate the finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemediationRecommendation
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Information about the factors that influenced the score that Amazon Inspector assigned for a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InspectorScoreDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustedCvss")]
		public CvssScoreDetails AdjustedCvss { get; set; }
	}
	
	/// <summary>
	/// Details about the source of the score, and the factors that determined the adjustments to create the final score.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CvssScoreDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="scoreSource")]
		public string ScoreSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cvssSource")]
		public string CvssSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scoringVector")]
		public string ScoringVector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adjustments")]
		public CvssScoreAdjustment[] Adjustments { get; set; }
	}
	
	/// <summary>
	/// Details about an adjustment that Amazon Inspector made to the CVSS score for a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CvssScoreAdjustment
	{
		
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public string Metric { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Information about package vulnerability findings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PackageVulnerabilityDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vulnerabilityId")]
		public string VulnerabilityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vulnerablePackages")]
		public VulnerablePackage[] VulnerablePackages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cvss")]
		public CvssScore[] Cvss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedVulnerabilities")]
		public string[] RelatedVulnerabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		public string SourceUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorSeverity")]
		public string VendorSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorCreatedAt")]
		public System.DateTimeOffset VendorCreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorUpdatedAt")]
		public System.DateTimeOffset VendorUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceUrls")]
		public string[] ReferenceUrls { get; set; }
	}
	
	/// <summary>
	/// Information about a vulnerable package that Amazon Inspector identifies in a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VulnerablePackage
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceLayerHash")]
		public string SourceLayerHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="epoch")]
		public System.Nullable<System.Int32> Epoch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="release")]
		public string Release { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arch")]
		public string Arch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageManager")]
		public string PackageManager { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fixedInVersion")]
		public string FixedInVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remediation")]
		public string Remediation { get; set; }
	}
	
	/// <summary>
	/// Amazon Inspector generates a risk score for each finding. This score helps you to prioritize findings, to focus on the most critical findings and the most vulnerable resources. The score uses the Common Vulnerability Scoring System (CVSS) format. This format is a modification of the base CVSS score that the National Vulnerability Database (NVD) provides. For more information about severity levels, see <a href="https://docs.aws.amazon.com/inspector/latest/user/findings-understanding-severity.html">Severity levels for Amazon Inspector findings</a> in the <i>Amazon Inspector User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CvssScore
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseScore")]
		public System.Nullable<System.Double> BaseScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scoringVector")]
		public string ScoringVector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	/// <summary>
	/// A name value pair that Image Builder applies to streamline results from the vulnerability scan findings list action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageScanFindingsFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImagesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageVersionList")]
		public ImageVersion[] ImageVersionList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The defining characteristics of a specific version of an Image Builder image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ImageType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildType")]
		public BuildType BuildType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSource")]
		public ImageSource ImageSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInfrastructureConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationSummaryList")]
		public InfrastructureConfigurationSummary[] InfrastructureConfigurationSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The infrastructure used when building Amazon EC2 AMIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InfrastructureConfigurationSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public string DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateUpdated")]
		public string DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public ResourceTagMap ResourceTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceTypes")]
		public string[] InstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceProfileName")]
		public string InstanceProfileName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkflowExecutionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutions")]
		public WorkflowExecutionMetadata[] WorkflowExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Metadata that includes details and status from this runtime instance of the workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowExecutionMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="workflowBuildVersionArn")]
		public string WorkflowBuildVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionId")]
		public string WorkflowExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public WorkflowType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public WorkflowExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalStepCount")]
		public System.Nullable<System.Int32> TotalStepCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalStepsSucceeded")]
		public System.Nullable<System.Int32> TotalStepsSucceeded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalStepsFailed")]
		public System.Nullable<System.Int32> TotalStepsFailed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalStepsSkipped")]
		public System.Nullable<System.Int32> TotalStepsSkipped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkflowStepExecutionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public WorkflowStepMetadata[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowBuildVersionArn")]
		public string WorkflowBuildVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionId")]
		public string WorkflowExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Runtime details and status for the workflow step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="stepExecutionId")]
		public string StepExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public WorkflowStepExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rollbackStatus")]
		public WorkflowStepExecutionRollbackStatus RollbackStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public string Inputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public string Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutComponentPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentArn")]
		public string ComponentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterValueException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutContainerRecipePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		public string ContainerRecipeArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutImagePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageArn")]
		public string ImageArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutImageRecipePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		public string ImageRecipeArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartImagePipelineExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDistributionConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		public string DistributionConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateImagePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePipelineArn")]
		public string ImagePipelineArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInfrastructureConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		public string InfrastructureConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelImageCreationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ComponentFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHELL")]
		SHELL = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateComponentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="semanticVersion")]
		public string SemanticVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changeDescription")]
		public string ChangeDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedOsVersions")]
		public string[] SupportedOsVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContainerRecipeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerType")]
		public ContainerType ContainerType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="semanticVersion")]
		public string SemanticVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="components")]
		public ComponentConfiguration[] Components { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceConfiguration")]
		public InstanceConfiguration InstanceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dockerfileTemplateData")]
		public string DockerfileTemplateData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dockerfileTemplateUri")]
		public string DockerfileTemplateUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformOverride")]
		public Platform PlatformOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageOsVersionOverride")]
		public string ImageOsVersionOverride { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentImage")]
		public string ParentImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workingDirectory")]
		public string WorkingDirectory { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetRepository")]
		public TargetContainerRepository TargetRepository { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDistributionConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distributions")]
		public Distribution[] Distributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateImagePipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		public string ImageRecipeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		public string ContainerRecipeArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		public string InfrastructureConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		public string DistributionConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTestsConfiguration")]
		public ImageTestsConfiguration ImageTestsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enhancedImageMetadataEnabled")]
		public System.Nullable<System.Boolean> EnhancedImageMetadataEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PipelineStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public ImageScanningConfiguration ImageScanningConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateImageRecipeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="semanticVersion")]
		public string SemanticVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="components")]
		public ComponentConfiguration[] Components { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentImage")]
		public string ParentImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blockDeviceMappings")]
		public InstanceBlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workingDirectory")]
		public string WorkingDirectory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalInstanceConfiguration")]
		public AdditionalInstanceConfiguration AdditionalInstanceConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateImageRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		public string ImageRecipeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		public string ContainerRecipeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		public string DistributionConfigurationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		public string InfrastructureConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTestsConfiguration")]
		public ImageTestsConfiguration ImageTestsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enhancedImageMetadataEnabled")]
		public System.Nullable<System.Boolean> EnhancedImageMetadataEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public ImageScanningConfiguration ImageScanningConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInfrastructureConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceTypes")]
		public string[] InstanceTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceProfileName")]
		public string InstanceProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logging")]
		public Logging Logging { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPair")]
		public string KeyPair { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="terminateInstanceOnFailure")]
		public System.Nullable<System.Boolean> TerminateInstanceOnFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snsTopicArn")]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public ResourceTagMap ResourceTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceMetadataOptions")]
		public InstanceMetadataOptions InstanceMetadataOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteComponentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteContainerRecipeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDistributionConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteImagePipelineRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteImageRecipeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteImageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInfrastructureConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComponentPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComponentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerRecipePolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerRecipeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDistributionConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImagePipelineRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImagePolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImageRecipePolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImageRecipeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImageRequest
	{
	}
	
	/// <summary>
	/// GetInfrastructureConfiguration request object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInfrastructureConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkflowExecutionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkflowStepExecutionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportComponentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="semanticVersion")]
		public string SemanticVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changeDescription")]
		public string ChangeDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ComponentType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public ComponentFormat Format { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportVmImageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="semanticVersion")]
		public string SemanticVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmImportTaskId")]
		public string VmImportTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListComponentBuildVersionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentVersionArn")]
		public string ComponentVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ownership
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Self")]
		Self = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Shared")]
		Shared = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon")]
		Amazon = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ThirdParty")]
		ThirdParty = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListComponentsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Ownership Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byName")]
		public System.Nullable<System.Boolean> ByName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListContainerRecipesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Ownership Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDistributionConfigurationsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImageBuildVersionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageVersionArn")]
		public string ImageVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImagePackagesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImagePipelineImagesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imagePipelineArn")]
		public string ImagePipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImagePipelinesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImageRecipesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Ownership Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImageScanFindingAggregationsRequest
	{
		
		/// <summary>
		/// A filter name and value pair that is used to return a more specific list of results from a list operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public Filter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImageScanFindingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ImageScanFindingsFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImagesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Ownership Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byName")]
		public System.Nullable<System.Boolean> ByName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeDeprecated")]
		public System.Nullable<System.Boolean> IncludeDeprecated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInfrastructureConfigurationsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkflowExecutionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		public string ImageBuildVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkflowStepExecutionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionId")]
		public string WorkflowExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutComponentPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentArn")]
		public string ComponentArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutContainerRecipePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		public string ContainerRecipeArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutImagePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageArn")]
		public string ImageArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutImageRecipePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		public string ImageRecipeArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartImagePipelineExecutionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imagePipelineArn")]
		public string ImagePipelineArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDistributionConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		public string DistributionConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distributions")]
		public Distribution[] Distributions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateImagePipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imagePipelineArn")]
		public string ImagePipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		public string ImageRecipeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		public string ContainerRecipeArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		public string InfrastructureConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		public string DistributionConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTestsConfiguration")]
		public ImageTestsConfiguration ImageTestsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enhancedImageMetadataEnabled")]
		public System.Nullable<System.Boolean> EnhancedImageMetadataEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PipelineStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public ImageScanningConfiguration ImageScanningConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInfrastructureConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		public string InfrastructureConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceTypes")]
		public string[] InstanceTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceProfileName")]
		public string InstanceProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logging")]
		public Logging Logging { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPair")]
		public string KeyPair { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="terminateInstanceOnFailure")]
		public System.Nullable<System.Boolean> TerminateInstanceOnFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snsTopicArn")]
		public string SnsTopicArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public ResourceTagMap ResourceTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceMetadataOptions")]
		public InstanceMetadataOptions InstanceMetadataOptions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// CancelImageCreation cancels the creation of Image. This operation can only be used on images in a non-terminal state.
		/// CancelImageCreation CancelImageCreation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelImageCreationResponse> CancelImageCreationAsync(CancelImageCreationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CancelImageCreation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelImageCreationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new component that can be used to build, validate, test, and assess your image. The component is based on a YAML document that you specify using exactly one of the following methods:</p> <ul> <li> <p>Inline, using the <code>data</code> property in the request body.</p> </li> <li> <p>A URL that points to a YAML document file stored in Amazon S3, using the <code>uri</code> property in the request body.</p> </li> </ul>
		/// CreateComponent CreateComponent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateComponentResponse> CreateComponentAsync(CreateComponentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateComponent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new container recipe. Container recipes define how images are configured, tested, and assessed.
		/// CreateContainerRecipe CreateContainerRecipe
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateContainerRecipeResponse> CreateContainerRecipeAsync(CreateContainerRecipePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateContainerRecipe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateContainerRecipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new distribution configuration. Distribution configurations define and configure the outputs of your pipeline.
		/// CreateDistributionConfiguration CreateDistributionConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDistributionConfigurationResponse> CreateDistributionConfigurationAsync(CreateDistributionConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateDistributionConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDistributionConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new image. This request will create a new image along with all of the configured output resources defined in the distribution configuration. You must specify exactly one recipe for your image, using either a ContainerRecipeArn or an ImageRecipeArn.
		/// CreateImage CreateImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateImageResponse> CreateImageAsync(CreateImagePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateImage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateImageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new image pipeline. Image pipelines enable you to automate the creation and distribution of images.
		/// CreateImagePipeline CreateImagePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateImagePipelineResponse> CreateImagePipelineAsync(CreateImagePipelinePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateImagePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateImagePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new image recipe. Image recipes define how images are configured, tested, and assessed.
		/// CreateImageRecipe CreateImageRecipe
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateImageRecipeResponse> CreateImageRecipeAsync(CreateImageRecipePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateImageRecipe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateImageRecipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new infrastructure configuration. An infrastructure configuration defines the environment in which your image will be built and tested.
		/// CreateInfrastructureConfiguration CreateInfrastructureConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInfrastructureConfigurationResponse> CreateInfrastructureConfigurationAsync(CreateInfrastructureConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateInfrastructureConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateInfrastructureConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a component build version.
		/// DeleteComponent DeleteComponent#componentBuildVersionArn
		/// </summary>
		/// <param name="componentBuildVersionArn">The Amazon Resource Name (ARN) of the component build version to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteComponentResponse> DeleteComponentAsync(string componentBuildVersionArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteComponent#componentBuildVersionArn?componentBuildVersionArn=" + (componentBuildVersionArn==null? "" : System.Uri.EscapeDataString(componentBuildVersionArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a container recipe.
		/// DeleteContainerRecipe DeleteContainerRecipe#containerRecipeArn
		/// </summary>
		/// <param name="containerRecipeArn">The Amazon Resource Name (ARN) of the container recipe to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteContainerRecipeResponse> DeleteContainerRecipeAsync(string containerRecipeArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteContainerRecipe#containerRecipeArn?containerRecipeArn=" + (containerRecipeArn==null? "" : System.Uri.EscapeDataString(containerRecipeArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteContainerRecipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a distribution configuration.
		/// DeleteDistributionConfiguration DeleteDistributionConfiguration#distributionConfigurationArn
		/// </summary>
		/// <param name="distributionConfigurationArn">The Amazon Resource Name (ARN) of the distribution configuration to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDistributionConfigurationResponse> DeleteDistributionConfigurationAsync(string distributionConfigurationArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteDistributionConfiguration#distributionConfigurationArn?distributionConfigurationArn=" + (distributionConfigurationArn==null? "" : System.Uri.EscapeDataString(distributionConfigurationArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDistributionConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an Image Builder image resource. This does not delete any EC2 AMIs or ECR container images that are created during the image build process. You must clean those up separately, using the appropriate Amazon EC2 or Amazon ECR console actions, or API or CLI commands.</p> <ul> <li> <p>To deregister an EC2 Linux AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/deregister-ami.html">Deregister your Linux AMI</a> in the <i> <i>Amazon EC2 User Guide</i> </i>.</p> </li> <li> <p>To deregister an EC2 Windows AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/deregister-ami.html">Deregister your Windows AMI</a> in the <i> <i>Amazon EC2 Windows Guide</i> </i>.</p> </li> <li> <p>To delete a container image from Amazon ECR, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/delete_image.html">Deleting an image</a> in the <i>Amazon ECR User Guide</i>.</p> </li> </ul>
		/// DeleteImage DeleteImage#imageBuildVersionArn
		/// </summary>
		/// <param name="imageBuildVersionArn">The Amazon Resource Name (ARN) of the Image Builder image resource to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteImageResponse> DeleteImageAsync(string imageBuildVersionArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteImage#imageBuildVersionArn?imageBuildVersionArn=" + (imageBuildVersionArn==null? "" : System.Uri.EscapeDataString(imageBuildVersionArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteImageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an image pipeline.
		/// DeleteImagePipeline DeleteImagePipeline#imagePipelineArn
		/// </summary>
		/// <param name="imagePipelineArn">The Amazon Resource Name (ARN) of the image pipeline to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteImagePipelineResponse> DeleteImagePipelineAsync(string imagePipelineArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteImagePipeline#imagePipelineArn?imagePipelineArn=" + (imagePipelineArn==null? "" : System.Uri.EscapeDataString(imagePipelineArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteImagePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an image recipe.
		/// DeleteImageRecipe DeleteImageRecipe#imageRecipeArn
		/// </summary>
		/// <param name="imageRecipeArn">The Amazon Resource Name (ARN) of the image recipe to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteImageRecipeResponse> DeleteImageRecipeAsync(string imageRecipeArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteImageRecipe#imageRecipeArn?imageRecipeArn=" + (imageRecipeArn==null? "" : System.Uri.EscapeDataString(imageRecipeArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteImageRecipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an infrastructure configuration.
		/// DeleteInfrastructureConfiguration DeleteInfrastructureConfiguration#infrastructureConfigurationArn
		/// </summary>
		/// <param name="infrastructureConfigurationArn">The Amazon Resource Name (ARN) of the infrastructure configuration to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteInfrastructureConfigurationResponse> DeleteInfrastructureConfigurationAsync(string infrastructureConfigurationArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteInfrastructureConfiguration#infrastructureConfigurationArn?infrastructureConfigurationArn=" + (infrastructureConfigurationArn==null? "" : System.Uri.EscapeDataString(infrastructureConfigurationArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteInfrastructureConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a component object.
		/// GetComponent GetComponent#componentBuildVersionArn
		/// </summary>
		/// <param name="componentBuildVersionArn">The Amazon Resource Name (ARN) of the component that you want to get. Regex requires the suffix <code>/\d+$</code>.</param>
		/// <returns>Success</returns>
		public async Task<GetComponentResponse> GetComponentAsync(string componentBuildVersionArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetComponent#componentBuildVersionArn?componentBuildVersionArn=" + (componentBuildVersionArn==null? "" : System.Uri.EscapeDataString(componentBuildVersionArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a component policy.
		/// GetComponentPolicy GetComponentPolicy#componentArn
		/// </summary>
		/// <param name="componentArn">The Amazon Resource Name (ARN) of the component whose policy you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetComponentPolicyResponse> GetComponentPolicyAsync(string componentArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetComponentPolicy#componentArn?componentArn=" + (componentArn==null? "" : System.Uri.EscapeDataString(componentArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetComponentPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a container recipe.
		/// GetContainerRecipe GetContainerRecipe#containerRecipeArn
		/// </summary>
		/// <param name="containerRecipeArn">The Amazon Resource Name (ARN) of the container recipe to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetContainerRecipeResponse> GetContainerRecipeAsync(string containerRecipeArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetContainerRecipe#containerRecipeArn?containerRecipeArn=" + (containerRecipeArn==null? "" : System.Uri.EscapeDataString(containerRecipeArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetContainerRecipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the policy for a container recipe.
		/// GetContainerRecipePolicy GetContainerRecipePolicy#containerRecipeArn
		/// </summary>
		/// <param name="containerRecipeArn">The Amazon Resource Name (ARN) of the container recipe for the policy being requested.</param>
		/// <returns>Success</returns>
		public async Task<GetContainerRecipePolicyResponse> GetContainerRecipePolicyAsync(string containerRecipeArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetContainerRecipePolicy#containerRecipeArn?containerRecipeArn=" + (containerRecipeArn==null? "" : System.Uri.EscapeDataString(containerRecipeArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetContainerRecipePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a distribution configuration.
		/// GetDistributionConfiguration GetDistributionConfiguration#distributionConfigurationArn
		/// </summary>
		/// <param name="distributionConfigurationArn">The Amazon Resource Name (ARN) of the distribution configuration that you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetDistributionConfigurationResponse> GetDistributionConfigurationAsync(string distributionConfigurationArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetDistributionConfiguration#distributionConfigurationArn?distributionConfigurationArn=" + (distributionConfigurationArn==null? "" : System.Uri.EscapeDataString(distributionConfigurationArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDistributionConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an image.
		/// GetImage GetImage#imageBuildVersionArn
		/// </summary>
		/// <param name="imageBuildVersionArn">The Amazon Resource Name (ARN) of the image that you want to get.</param>
		/// <returns>Success</returns>
		public async Task<GetImageResponse> GetImageAsync(string imageBuildVersionArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetImage#imageBuildVersionArn?imageBuildVersionArn=" + (imageBuildVersionArn==null? "" : System.Uri.EscapeDataString(imageBuildVersionArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetImageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an image pipeline.
		/// GetImagePipeline GetImagePipeline#imagePipelineArn
		/// </summary>
		/// <param name="imagePipelineArn">The Amazon Resource Name (ARN) of the image pipeline that you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetImagePipelineResponse> GetImagePipelineAsync(string imagePipelineArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetImagePipeline#imagePipelineArn?imagePipelineArn=" + (imagePipelineArn==null? "" : System.Uri.EscapeDataString(imagePipelineArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetImagePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an image policy.
		/// GetImagePolicy GetImagePolicy#imageArn
		/// </summary>
		/// <param name="imageArn">The Amazon Resource Name (ARN) of the image whose policy you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetImagePolicyResponse> GetImagePolicyAsync(string imageArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetImagePolicy#imageArn?imageArn=" + (imageArn==null? "" : System.Uri.EscapeDataString(imageArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetImagePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an image recipe.
		/// GetImageRecipe GetImageRecipe#imageRecipeArn
		/// </summary>
		/// <param name="imageRecipeArn">The Amazon Resource Name (ARN) of the image recipe that you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetImageRecipeResponse> GetImageRecipeAsync(string imageRecipeArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetImageRecipe#imageRecipeArn?imageRecipeArn=" + (imageRecipeArn==null? "" : System.Uri.EscapeDataString(imageRecipeArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetImageRecipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an image recipe policy.
		/// GetImageRecipePolicy GetImageRecipePolicy#imageRecipeArn
		/// </summary>
		/// <param name="imageRecipeArn">The Amazon Resource Name (ARN) of the image recipe whose policy you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetImageRecipePolicyResponse> GetImageRecipePolicyAsync(string imageRecipeArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetImageRecipePolicy#imageRecipeArn?imageRecipeArn=" + (imageRecipeArn==null? "" : System.Uri.EscapeDataString(imageRecipeArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetImageRecipePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an infrastructure configuration.
		/// GetInfrastructureConfiguration GetInfrastructureConfiguration#infrastructureConfigurationArn
		/// </summary>
		/// <param name="infrastructureConfigurationArn">The Amazon Resource Name (ARN) of the infrastructure configuration that you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetInfrastructureConfigurationResponse> GetInfrastructureConfigurationAsync(string infrastructureConfigurationArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetInfrastructureConfiguration#infrastructureConfigurationArn?infrastructureConfigurationArn=" + (infrastructureConfigurationArn==null? "" : System.Uri.EscapeDataString(infrastructureConfigurationArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInfrastructureConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the runtime information that was logged for a specific runtime instance of the workflow.
		/// GetWorkflowExecution GetWorkflowExecution#workflowExecutionId
		/// </summary>
		/// <param name="workflowExecutionId">Use the unique identifier for a runtime instance of the workflow to get runtime details.</param>
		/// <returns>Success</returns>
		public async Task<GetWorkflowExecutionResponse> GetWorkflowExecutionAsync(string workflowExecutionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetWorkflowExecution#workflowExecutionId?workflowExecutionId=" + (workflowExecutionId==null? "" : System.Uri.EscapeDataString(workflowExecutionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkflowExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the runtime information that was logged for a specific runtime instance of the workflow step.
		/// GetWorkflowStepExecution GetWorkflowStepExecution#stepExecutionId
		/// </summary>
		/// <param name="stepExecutionId">Use the unique identifier for a specific runtime instance of the workflow step to get runtime details for that step.</param>
		/// <returns>Success</returns>
		public async Task<GetWorkflowStepExecutionResponse> GetWorkflowStepExecutionAsync(string stepExecutionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetWorkflowStepExecution#stepExecutionId?stepExecutionId=" + (stepExecutionId==null? "" : System.Uri.EscapeDataString(stepExecutionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkflowStepExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Imports a component and transforms its data into a component document.
		/// ImportComponent ImportComponent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportComponentResponse> ImportComponentAsync(ImportComponentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ImportComponent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>When you export your virtual machine (VM) from its virtualization environment, that process creates a set of one or more disk container files that act as snapshots of your VM’s environment, settings, and data. The Amazon EC2 API <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportImage.html">ImportImage</a> action uses those files to import your VM and create an AMI. To import using the CLI command, see <a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/import-image.html">import-image</a> </p> <p>You can reference the task ID from the VM import to pull in the AMI that the import created as the base image for your Image Builder recipe.</p>
		/// ImportVmImage ImportVmImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportVmImageResponse> ImportVmImageAsync(ImportVmImagePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ImportVmImage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportVmImageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the list of component build versions for the specified semantic version.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>
		/// ListComponentBuildVersions ListComponentBuildVersions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListComponentBuildVersionsResponse> ListComponentBuildVersionsAsync(string maxResults, string nextToken, ListComponentBuildVersionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListComponentBuildVersions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListComponentBuildVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the list of components that can be filtered by name, or by using the listed <code>filters</code> to streamline results. Newly created components can take up to two minutes to appear in the ListComponents API Results.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>
		/// ListComponents ListComponents
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListComponentsResponse> ListComponentsAsync(string maxResults, string nextToken, ListComponentsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListComponents?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListComponentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of container recipes.
		/// ListContainerRecipes ListContainerRecipes
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListContainerRecipesResponse> ListContainerRecipesAsync(string maxResults, string nextToken, ListContainerRecipesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListContainerRecipes?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListContainerRecipesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of distribution configurations.
		/// ListDistributionConfigurations ListDistributionConfigurations
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDistributionConfigurationsResponse> ListDistributionConfigurationsAsync(string maxResults, string nextToken, ListDistributionConfigurationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListDistributionConfigurations?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDistributionConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of image build versions.
		/// ListImageBuildVersions ListImageBuildVersions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImageBuildVersionsResponse> ListImageBuildVersionsAsync(string maxResults, string nextToken, ListImageBuildVersionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListImageBuildVersions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImageBuildVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the Packages that are associated with an Image Build Version, as determined by Amazon Web Services Systems Manager Inventory at build time.
		/// ListImagePackages ListImagePackages
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImagePackagesResponse> ListImagePackagesAsync(string maxResults, string nextToken, ListImagePackagesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListImagePackages?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImagePackagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of images created by the specified pipeline.
		/// ListImagePipelineImages ListImagePipelineImages
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImagePipelineImagesResponse> ListImagePipelineImagesAsync(string maxResults, string nextToken, ListImagePipelineImagesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListImagePipelineImages?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImagePipelineImagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of image pipelines.
		/// ListImagePipelines ListImagePipelines
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImagePipelinesResponse> ListImagePipelinesAsync(string maxResults, string nextToken, ListImagePipelinesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListImagePipelines?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImagePipelinesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of image recipes.
		/// ListImageRecipes ListImageRecipes
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImageRecipesResponse> ListImageRecipesAsync(string maxResults, string nextToken, ListImageRecipesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListImageRecipes?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImageRecipesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of image scan aggregations for your account. You can filter by the type of key that Image Builder uses to group results. For example, if you want to get a list of findings by severity level for one of your pipelines, you might specify your pipeline with the <code>imagePipelineArn</code> filter. If you don't specify a filter, Image Builder returns an aggregation for your account.</p> <p>To streamline results, you can use the following filters in your request:</p> <ul> <li> <p> <code>accountId</code> </p> </li> <li> <p> <code>imageBuildVersionArn</code> </p> </li> <li> <p> <code>imagePipelineArn</code> </p> </li> <li> <p> <code>vulnerabilityId</code> </p> </li> </ul>
		/// ListImageScanFindingAggregations ListImageScanFindingAggregations
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImageScanFindingAggregationsResponse> ListImageScanFindingAggregationsAsync(string nextToken, ListImageScanFindingAggregationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListImageScanFindingAggregations?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImageScanFindingAggregationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of image scan findings for your account.
		/// ListImageScanFindings ListImageScanFindings
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImageScanFindingsResponse> ListImageScanFindingsAsync(string maxResults, string nextToken, ListImageScanFindingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListImageScanFindings?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImageScanFindingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the list of images that you have access to. Newly created images can take up to two minutes to appear in the ListImages API Results.
		/// ListImages ListImages
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImagesResponse> ListImagesAsync(string maxResults, string nextToken, ListImagesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListImages?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of infrastructure configurations.
		/// ListInfrastructureConfigurations ListInfrastructureConfigurations
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInfrastructureConfigurationsResponse> ListInfrastructureConfigurationsAsync(string maxResults, string nextToken, ListInfrastructureConfigurationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListInfrastructureConfigurations?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInfrastructureConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the list of tags for the specified resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a tag to a resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource that you want to tag.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of workflow runtime instance metadata objects for a specific image build version.
		/// ListWorkflowExecutions ListWorkflowExecutions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListWorkflowExecutionsResponse> ListWorkflowExecutionsAsync(string maxResults, string nextToken, ListWorkflowExecutionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListWorkflowExecutions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkflowExecutionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Shows runtime data for each step in a runtime instance of the workflow that you specify in the request.
		/// ListWorkflowStepExecutions ListWorkflowStepExecutions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListWorkflowStepExecutionsResponse> ListWorkflowStepExecutionsAsync(string maxResults, string nextToken, ListWorkflowStepExecutionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListWorkflowStepExecutions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkflowStepExecutionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Applies a policy to a component. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API <code>PutComponentPolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to all principals with whom the resource is shared.
		/// PutComponentPolicy PutComponentPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutComponentPolicyResponse> PutComponentPolicyAsync(PutComponentPolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PutComponentPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutComponentPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Applies a policy to a container image. We recommend that you call the RAM API CreateResourceShare (https://docs.aws.amazon.com//ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API <code>PutContainerImagePolicy</code>, you must also call the RAM API PromoteResourceShareCreatedFromPolicy (https://docs.aws.amazon.com//ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.
		/// PutContainerRecipePolicy PutContainerRecipePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutContainerRecipePolicyResponse> PutContainerRecipePolicyAsync(PutContainerRecipePolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PutContainerRecipePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutContainerRecipePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Applies a policy to an image. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API <code>PutImagePolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to all principals with whom the resource is shared.
		/// PutImagePolicy PutImagePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutImagePolicyResponse> PutImagePolicyAsync(PutImagePolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PutImagePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutImagePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Applies a policy to an image recipe. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API <code>PutImageRecipePolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to all principals with whom the resource is shared.
		/// PutImageRecipePolicy PutImageRecipePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutImageRecipePolicyResponse> PutImageRecipePolicyAsync(PutImageRecipePolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PutImageRecipePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutImageRecipePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Manually triggers a pipeline to create an image.
		/// StartImagePipelineExecution StartImagePipelineExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartImagePipelineExecutionResponse> StartImagePipelineExecutionAsync(StartImagePipelineExecutionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StartImagePipelineExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartImagePipelineExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a tag from a resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource that you want to untag.</param>
		/// <param name="tagKeys">The tag keys to remove from the resource.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a new distribution configuration. Distribution configurations define and configure the outputs of your pipeline.
		/// UpdateDistributionConfiguration UpdateDistributionConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDistributionConfigurationResponse> UpdateDistributionConfigurationAsync(UpdateDistributionConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateDistributionConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDistributionConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates an image pipeline. Image pipelines enable you to automate the creation and distribution of images.</p> <note> <p>UpdateImagePipeline does not support selective updates for the pipeline. You must specify all of the required properties in the update request, not just the properties that have changed.</p> </note>
		/// UpdateImagePipeline UpdateImagePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateImagePipelineResponse> UpdateImagePipelineAsync(UpdateImagePipelinePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateImagePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateImagePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a new infrastructure configuration. An infrastructure configuration defines the environment in which your image will be built and tested.
		/// UpdateInfrastructureConfiguration UpdateInfrastructureConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateInfrastructureConfigurationResponse> UpdateInfrastructureConfigurationAsync(UpdateInfrastructureConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateInfrastructureConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateInfrastructureConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CancelImageCreationPutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the image that you want to cancel creation for.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$")]
		public string ImageBuildVersionArn { get; set; }
		
		/// <summary>
		/// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
	}
	
	public class CreateComponentPutBody
	{
		
		/// <summary>
		/// The name of the component.
		/// Required
		/// Pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// <p>The semantic version of the component. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>
		/// Required
		/// Pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="semanticVersion")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]+\.[0-9]+\.[0-9]+$")]
		public string SemanticVersion { get; set; }
		
		/// <summary>
		/// Describes the contents of the component.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeDescription")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string ChangeDescription { get; set; }
		
		/// <summary>
		/// The operating system platform of the component.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		/// <summary>
		/// The operating system (OS) version supported by the component. If the OS information is available, a prefix match is performed against the base image OS version during image recipe creation.
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedOsVersions")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string[] SupportedOsVersions { get; set; }
		
		/// <summary>
		/// Component <code>data</code> contains inline YAML document content for the component. Alternatively, you can specify the <code>uri</code> of a YAML document file stored in Amazon S3. However, you cannot specify both properties.
		/// Max length: 16000
		/// Min length: 1
		/// Pattern: [^\x00]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\x00]+")]
		public string Data { get; set; }
		
		/// <summary>
		/// <p>The <code>uri</code> of a YAML component document file. This must be an S3 URL (<code>s3://bucket/key</code>), and the requester must have permission to access the S3 bucket it points to. If you use Amazon S3, you can specify component content up to your service quota.</p> <p>Alternatively, you can specify the YAML document inline, using the component <code>data</code> property. You cannot specify both properties.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The ID of the KMS key that is used to encrypt this component.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// The tags that apply to the component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The idempotency token of the component.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
	}
	
	public class CreateContainerRecipePutBody
	{
		
		/// <summary>
		/// The type of container to create.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerType")]
		public ContainerType ContainerType { get; set; }
		
		/// <summary>
		/// The name of the container recipe.
		/// Required
		/// Pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the container recipe.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>The semantic version of the container recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>
		/// Required
		/// Pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="semanticVersion")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]+\.[0-9]+\.[0-9]+$")]
		public string SemanticVersion { get; set; }
		
		/// <summary>
		/// Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="components")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ComponentConfiguration[] Components { get; set; }
		
		/// <summary>
		/// Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceConfiguration")]
		public CreateContainerRecipePutBodyInstanceConfiguration InstanceConfiguration { get; set; }
		
		/// <summary>
		/// The Dockerfile template used to build your image as an inline data blob.
		/// Max length: 16000
		/// Min length: 1
		/// Pattern: [^\x00]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockerfileTemplateData")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\x00]+")]
		public string DockerfileTemplateData { get; set; }
		
		/// <summary>
		/// The Amazon S3 URI for the Dockerfile that will be used to build your container image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockerfileTemplateUri")]
		public string DockerfileTemplateUri { get; set; }
		
		/// <summary>
		/// Specifies the operating system platform when you use a custom base image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformOverride")]
		public Platform PlatformOverride { get; set; }
		
		/// <summary>
		/// Specifies the operating system version for the base image.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageOsVersionOverride")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string ImageOsVersionOverride { get; set; }
		
		/// <summary>
		/// The base image for the container recipe.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentImage")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string ParentImage { get; set; }
		
		/// <summary>
		/// Tags that are attached to the container recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The working directory for use during build and test workflows.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workingDirectory")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string WorkingDirectory { get; set; }
		
		/// <summary>
		/// The container repository where the output container image is stored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetRepository")]
		public CreateContainerRecipePutBodyTargetRepository TargetRepository { get; set; }
		
		/// <summary>
		/// Identifies which KMS key is used to encrypt the container image.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// The client token used to make this request idempotent.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
	}
	
	public class CreateContainerRecipePutBodyInstanceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blockDeviceMappings")]
		public InstanceBlockDeviceMapping[] BlockDeviceMappings { get; set; }
	}
	
	public class CreateContainerRecipePutBodyTargetRepository
	{
		
		[System.Runtime.Serialization.DataMember(Name="service")]
		public ContainerRepositoryService Service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	public class CreateDistributionConfigurationPutBody
	{
		
		/// <summary>
		/// The name of the distribution configuration.
		/// Required
		/// Pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the distribution configuration.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The distributions of the distribution configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distributions")]
		public Distribution[] Distributions { get; set; }
		
		/// <summary>
		/// The tags of the distribution configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The idempotency token of the distribution configuration.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
	}
	
	public class CreateImagePutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$")]
		public string ImageRecipeArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$")]
		public string ContainerRecipeArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the distribution configuration that defines and configures the outputs of your pipeline.
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$")]
		public string DistributionConfigurationArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the infrastructure configuration that defines the environment in which your image will be built and tested.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$")]
		public string InfrastructureConfigurationArn { get; set; }
		
		/// <summary>
		/// Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageTestsConfiguration")]
		public CreateImagePutBodyImageTestsConfiguration ImageTestsConfiguration { get; set; }
		
		/// <summary>
		/// Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enhancedImageMetadataEnabled")]
		public System.Nullable<System.Boolean> EnhancedImageMetadataEnabled { get; set; }
		
		/// <summary>
		/// The tags of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The idempotency token used to make this request idempotent.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Contains settings for Image Builder image resource and container image scans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public CreateImagePutBodyImageScanningConfiguration ImageScanningConfiguration { get; set; }
	}
	
	public class CreateImagePutBodyImageTestsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageTestsEnabled")]
		public System.Nullable<System.Boolean> ImageTestsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutMinutes")]
		public System.Nullable<System.Int32> TimeoutMinutes { get; set; }
	}
	
	public class CreateImagePutBodyImageScanningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageScanningEnabled")]
		public System.Nullable<System.Boolean> ImageScanningEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ecrConfiguration")]
		public EcrConfiguration EcrConfiguration { get; set; }
	}
	
	public class CreateImagePipelinePutBody
	{
		
		/// <summary>
		/// The name of the image pipeline.
		/// Required
		/// Pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the image pipeline.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the image recipe that will be used to configure images created by this image pipeline.
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$")]
		public string ImageRecipeArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the container recipe that is used to configure images created by this container pipeline.
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$")]
		public string ContainerRecipeArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the infrastructure configuration that will be used to build images created by this image pipeline.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$")]
		public string InfrastructureConfigurationArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the distribution configuration that will be used to configure and distribute images created by this image pipeline.
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$")]
		public string DistributionConfigurationArn { get; set; }
		
		/// <summary>
		/// Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageTestsConfiguration")]
		public CreateImagePipelinePutBodyImageTestsConfiguration ImageTestsConfiguration { get; set; }
		
		/// <summary>
		/// Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enhancedImageMetadataEnabled")]
		public System.Nullable<System.Boolean> EnhancedImageMetadataEnabled { get; set; }
		
		/// <summary>
		/// A schedule configures how often and when a pipeline will automatically create a new image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public CreateImagePipelinePutBodySchedule Schedule { get; set; }
		
		/// <summary>
		/// The status of the image pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PipelineStatus Status { get; set; }
		
		/// <summary>
		/// The tags of the image pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The idempotency token used to make this request idempotent.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Contains settings for Image Builder image resource and container image scans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public CreateImagePipelinePutBodyImageScanningConfiguration ImageScanningConfiguration { get; set; }
	}
	
	public class CreateImagePipelinePutBodyImageTestsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageTestsEnabled")]
		public System.Nullable<System.Boolean> ImageTestsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutMinutes")]
		public System.Nullable<System.Int32> TimeoutMinutes { get; set; }
	}
	
	public class CreateImagePipelinePutBodySchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="scheduleExpression")]
		public string ScheduleExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionStartCondition")]
		public PipelineExecutionStartCondition PipelineExecutionStartCondition { get; set; }
	}
	
	public class CreateImagePipelinePutBodyImageScanningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageScanningEnabled")]
		public System.Nullable<System.Boolean> ImageScanningEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ecrConfiguration")]
		public EcrConfiguration EcrConfiguration { get; set; }
	}
	
	public class CreateImageRecipePutBody
	{
		
		/// <summary>
		/// The name of the image recipe.
		/// Required
		/// Pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the image recipe.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>The semantic version of the image recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>
		/// Required
		/// Pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="semanticVersion")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]+\.[0-9]+\.[0-9]+$")]
		public string SemanticVersion { get; set; }
		
		/// <summary>
		/// The components included in the image recipe.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="components")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ComponentConfiguration[] Components { get; set; }
		
		/// <summary>
		/// The base image of the image recipe. The value of the string can be the ARN of the base image or an AMI ID. The format for the ARN follows this example: <code>arn:aws:imagebuilder:us-west-2:aws:image/windows-server-2016-english-full-base-x86/x.x.x</code>. You can provide the specific version that you want to use, or you can use a wildcard in all of the fields. If you enter an AMI ID for the string value, you must have access to the AMI, and the AMI must be in the same Region in which you are using Image Builder.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentImage")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string ParentImage { get; set; }
		
		/// <summary>
		/// The block device mappings of the image recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockDeviceMappings")]
		public InstanceBlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		/// <summary>
		/// The tags of the image recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The working directory used during build and test workflows.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workingDirectory")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string WorkingDirectory { get; set; }
		
		/// <summary>
		/// <p>In addition to your infrastructure configuration, these settings provide an extra layer of control over your build instances. You can also specify commands to run on launch for all of your build instances.</p> <p>Image Builder does not automatically install the Systems Manager agent on Windows instances. If your base image includes the Systems Manager agent, then the AMI that you create will also include the agent. For Linux instances, if the base image does not already include the Systems Manager agent, Image Builder installs it. For Linux instances where Image Builder installs the Systems Manager agent, you can choose whether to keep it for the AMI that you create.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInstanceConfiguration")]
		public CreateImageRecipePutBodyAdditionalInstanceConfiguration AdditionalInstanceConfiguration { get; set; }
		
		/// <summary>
		/// The idempotency token used to make this request idempotent.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
	}
	
	public class CreateImageRecipePutBodyAdditionalInstanceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="systemsManagerAgent")]
		public SystemsManagerAgent SystemsManagerAgent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userDataOverride")]
		public string UserDataOverride { get; set; }
	}
	
	public class CreateInfrastructureConfigurationPutBody
	{
		
		/// <summary>
		/// The name of the infrastructure configuration.
		/// Required
		/// Pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the infrastructure configuration.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The instance types of the infrastructure configuration. You can specify one or more instance types to use for this build. The service will pick one of these instance types based on availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceTypes")]
		public string[] InstanceTypes { get; set; }
		
		/// <summary>
		/// The instance profile to associate with the instance used to customize your Amazon EC2 AMI.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[\w+=,.@-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceProfileName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w+=,.@-]+$")]
		public string InstanceProfileName { get; set; }
		
		/// <summary>
		/// The security group IDs to associate with the instance used to customize your Amazon EC2 AMI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// The subnet ID in which to place the instance used to customize your Amazon EC2 AMI.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string SubnetId { get; set; }
		
		/// <summary>
		/// Logging configuration defines where Image Builder uploads your logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logging")]
		public CreateInfrastructureConfigurationPutBodyLogging Logging { get; set; }
		
		/// <summary>
		/// The key pair of the infrastructure configuration. You can use this to log on to and debug the instance used to create your image.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyPair")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string KeyPair { get; set; }
		
		/// <summary>
		/// The terminate instance on failure setting of the infrastructure configuration. Set to false if you want Image Builder to retain the instance used to configure your AMI if the build or test phase of your workflow fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminateInstanceOnFailure")]
		public System.Nullable<System.Boolean> TerminateInstanceOnFailure { get; set; }
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN) for the SNS topic to which we send image build event notifications.</p> <note> <p>EC2 Image Builder is unable to send notifications to SNS topics that are encrypted using keys from other accounts. The key that is used to encrypt the SNS topic must reside in the account that the Image Builder service runs under.</p> </note>
		/// Pattern: ^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snsTopicArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$")]
		public string SnsTopicArn { get; set; }
		
		/// <summary>
		/// The tags attached to the resource created by Image Builder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public System.Collections.Generic.Dictionary<string, string> ResourceTags { get; set; }
		
		/// <summary>
		/// The instance metadata options that apply to the HTTP requests that pipeline builds use to launch EC2 build and test instances. For more information about instance metadata options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 User Guide</i> </i> for Linux instances, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 Windows Guide</i> </i> for Windows instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceMetadataOptions")]
		public CreateInfrastructureConfigurationPutBodyInstanceMetadataOptions InstanceMetadataOptions { get; set; }
		
		/// <summary>
		/// The tags of the infrastructure configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The idempotency token used to make this request idempotent.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
	}
	
	public class CreateInfrastructureConfigurationPutBodyLogging
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Logs")]
		public S3Logs S3Logs { get; set; }
	}
	
	public class CreateInfrastructureConfigurationPutBodyInstanceMetadataOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpTokens")]
		public string HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpPutResponseHopLimit")]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
	}
	
	public class ImportComponentPutBody
	{
		
		/// <summary>
		/// The name of the component.
		/// Required
		/// Pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// <p>The semantic version of the component. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>
		/// Required
		/// Pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="semanticVersion")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]+\.[0-9]+\.[0-9]+$")]
		public string SemanticVersion { get; set; }
		
		/// <summary>
		/// The description of the component. Describes the contents of the component.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The change description of the component. This description indicates the change that has been made in this version, or what makes this version different from other versions of this component.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeDescription")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string ChangeDescription { get; set; }
		
		/// <summary>
		/// The type of the component denotes whether the component is used to build the image, or only to test it.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ComponentType Type { get; set; }
		
		/// <summary>
		/// The format of the resource that you want to import as a component.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public ComponentFormat Format { get; set; }
		
		/// <summary>
		/// The platform of the component.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		/// <summary>
		/// The data of the component. Used to specify the data inline. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Data { get; set; }
		
		/// <summary>
		/// The uri of the component. Must be an Amazon S3 URL and the requester must have permission to access the Amazon S3 bucket. If you use Amazon S3, you can specify component content up to your service quota. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The ID of the KMS key that should be used to encrypt this component.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// The tags of the component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The idempotency token of the component.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
	}
	
	public class ImportVmImagePutBody
	{
		
		/// <summary>
		/// The name of the base image that is created by the import process.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Name { get; set; }
		
		/// <summary>
		/// <p>The semantic version to attach to the base image that was created during the import process. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>
		/// Required
		/// Pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="semanticVersion")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]+\.[0-9]+\.[0-9]+$")]
		public string SemanticVersion { get; set; }
		
		/// <summary>
		/// The description for the base image that is created by the import process.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The operating system platform for the imported VM.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		/// <summary>
		/// The operating system version for the imported VM.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string OsVersion { get; set; }
		
		/// <summary>
		/// The <code>importTaskId</code> (API) or <code>ImportTaskId</code> (CLI) from the Amazon EC2 VM import process. Image Builder retrieves information from the import process to pull in the AMI that is created from the VM source as the base image for your recipe.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmImportTaskId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string VmImportTaskId { get; set; }
		
		/// <summary>
		/// Tags that are attached to the import resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
	}
	
	public class ListComponentBuildVersionsPostBody
	{
		
		/// <summary>
		/// The component version Amazon Resource Name (ARN) whose versions you want to list.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentVersionArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$")]
		public string ComponentVersionArn { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
	}
	
	public class ListComponentsPostBody
	{
		
		/// <summary>
		/// Filters results based on the type of owner for the component. By default, this request returns a list of components that your account owns. To see results for other types of owners, you can specify components that Amazon manages, third party components, or components that other accounts have shared with you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Ownership Owner { get; set; }
		
		/// <summary>
		/// <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>description</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>supportedOsVersion</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Returns the list of components for the specified name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="byName")]
		public System.Nullable<System.Boolean> ByName { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
	}
	
	public class ListContainerRecipesPostBody
	{
		
		/// <summary>
		/// Returns container recipes belonging to the specified owner, that have been shared with you. You can omit this field to return container recipes belonging to your account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Ownership Owner { get; set; }
		
		/// <summary>
		/// <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>containerType</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>parentImage</code> </p> </li> <li> <p> <code>platform</code> </p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string NextToken { get; set; }
	}
	
	public class ListDistributionConfigurationsPostBody
	{
		
		/// <summary>
		/// You can filter on <code>name</code> to streamline results.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
	}
	
	public class ListImageBuildVersionsPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the image whose build versions you want to retrieve.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageVersionArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$")]
		public string ImageVersionArn { get; set; }
		
		/// <summary>
		/// <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>osVersion</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
	}
	
	public class ListImagePackagesPostBody
	{
		
		/// <summary>
		/// Filter results for the ListImagePackages request by the Image Build Version ARN
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$")]
		public string ImageBuildVersionArn { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
	}
	
	public class ListImagePipelineImagesPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the image pipeline whose images you want to view.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imagePipelineArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$")]
		public string ImagePipelineArn { get; set; }
		
		/// <summary>
		/// <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
	}
	
	public class ListImagePipelinesPostBody
	{
		
		/// <summary>
		/// <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>description</code> </p> </li> <li> <p> <code>distributionConfigurationArn</code> </p> </li> <li> <p> <code>imageRecipeArn</code> </p> </li> <li> <p> <code>infrastructureConfigurationArn</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>status</code> </p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
	}
	
	public class ListImageRecipesPostBody
	{
		
		/// <summary>
		/// The owner defines which image recipes you want to list. By default, this request will only show image recipes owned by your account. You can use this field to specify if you want to view image recipes owned by yourself, by Amazon, or those image recipes that have been shared with you by other customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Ownership Owner { get; set; }
		
		/// <summary>
		/// <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>parentImage</code> </p> </li> <li> <p> <code>platform</code> </p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
	}
	
	public class ListImageScanFindingAggregationsPostBody
	{
		
		/// <summary>
		/// A filter name and value pair that is used to return a more specific list of results from a list operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListImageScanFindingAggregationsPostBodyFilter Filter { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
	}
	
	public class ListImageScanFindingAggregationsPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	public class ListImageScanFindingsPostBody
	{
		
		/// <summary>
		/// <p>An array of name value pairs that you can use to filter your results. You can use the following filters to streamline results:</p> <ul> <li> <p> <code>imageBuildVersionArn</code> </p> </li> <li> <p> <code>imagePipelineArn</code> </p> </li> <li> <p> <code>vulnerabilityId</code> </p> </li> <li> <p> <code>severity</code> </p> </li> </ul> <p>If you don't request a filter, then all findings in your account are listed.</p>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public ImageScanFindingsFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
	}
	
	public class ListImagesPostBody
	{
		
		/// <summary>
		/// The owner defines which images you want to list. By default, this request will only show images owned by your account. You can use this field to specify if you want to view images owned by yourself, by Amazon, or those images that have been shared with you by other customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Ownership Owner { get; set; }
		
		/// <summary>
		/// <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>osVersion</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Requests a list of images with a specific recipe name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="byName")]
		public System.Nullable<System.Boolean> ByName { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Includes deprecated images in the response list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeDeprecated")]
		public System.Nullable<System.Boolean> IncludeDeprecated { get; set; }
	}
	
	public class ListInfrastructureConfigurationsPostBody
	{
		
		/// <summary>
		/// You can filter on <code>name</code> to streamline results.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags to apply to the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ListWorkflowExecutionsPostBody
	{
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// List all workflow runtime instances for the specified image build version resource ARN.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageBuildVersionArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$")]
		public string ImageBuildVersionArn { get; set; }
	}
	
	public class ListWorkflowStepExecutionsPostBody
	{
		
		/// <summary>
		/// The maximum items to return in a request.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.
		/// Required
		/// Pattern: ^wf-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^wf-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")]
		public string WorkflowExecutionId { get; set; }
	}
	
	public class PutComponentPolicyPutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the component that this policy should be applied to.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$")]
		public string ComponentArn { get; set; }
		
		/// <summary>
		/// The policy to apply.
		/// Required
		/// Max length: 30000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30000)]
		public string Policy { get; set; }
	}
	
	public class PutContainerRecipePolicyPutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the container recipe that this policy should be applied to.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$")]
		public string ContainerRecipeArn { get; set; }
		
		/// <summary>
		/// The policy to apply to the container recipe.
		/// Required
		/// Max length: 30000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30000)]
		public string Policy { get; set; }
	}
	
	public class PutImagePolicyPutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the image that this policy should be applied to.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$")]
		public string ImageArn { get; set; }
		
		/// <summary>
		/// The policy to apply.
		/// Required
		/// Max length: 30000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30000)]
		public string Policy { get; set; }
	}
	
	public class PutImageRecipePolicyPutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the image recipe that this policy should be applied to.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$")]
		public string ImageRecipeArn { get; set; }
		
		/// <summary>
		/// The policy to apply.
		/// Required
		/// Max length: 30000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30000)]
		public string Policy { get; set; }
	}
	
	public class StartImagePipelineExecutionPutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the image pipeline that you want to manually invoke.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imagePipelineArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$")]
		public string ImagePipelineArn { get; set; }
		
		/// <summary>
		/// The idempotency token used to make this request idempotent.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
	}
	
	public class UpdateDistributionConfigurationPutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the distribution configuration that you want to update.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$")]
		public string DistributionConfigurationArn { get; set; }
		
		/// <summary>
		/// The description of the distribution configuration.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The distributions of the distribution configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distributions")]
		public Distribution[] Distributions { get; set; }
		
		/// <summary>
		/// The idempotency token of the distribution configuration.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
	}
	
	public class UpdateImagePipelinePutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the image pipeline that you want to update.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imagePipelineArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$")]
		public string ImagePipelineArn { get; set; }
		
		/// <summary>
		/// The description of the image pipeline.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the image recipe that will be used to configure images updated by this image pipeline.
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageRecipeArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$")]
		public string ImageRecipeArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the container pipeline to update.
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerRecipeArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$")]
		public string ContainerRecipeArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the infrastructure configuration that Image Builder uses to build images that this image pipeline has updated.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$")]
		public string InfrastructureConfigurationArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the distribution configuration that Image Builder uses to configure and distribute images that this image pipeline has updated.
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributionConfigurationArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$")]
		public string DistributionConfigurationArn { get; set; }
		
		/// <summary>
		/// Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageTestsConfiguration")]
		public UpdateImagePipelinePutBodyImageTestsConfiguration ImageTestsConfiguration { get; set; }
		
		/// <summary>
		/// Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enhancedImageMetadataEnabled")]
		public System.Nullable<System.Boolean> EnhancedImageMetadataEnabled { get; set; }
		
		/// <summary>
		/// A schedule configures how often and when a pipeline will automatically create a new image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public UpdateImagePipelinePutBodySchedule Schedule { get; set; }
		
		/// <summary>
		/// The status of the image pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PipelineStatus Status { get; set; }
		
		/// <summary>
		/// The idempotency token used to make this request idempotent.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Contains settings for Image Builder image resource and container image scans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public UpdateImagePipelinePutBodyImageScanningConfiguration ImageScanningConfiguration { get; set; }
	}
	
	public class UpdateImagePipelinePutBodyImageTestsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageTestsEnabled")]
		public System.Nullable<System.Boolean> ImageTestsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutMinutes")]
		public System.Nullable<System.Int32> TimeoutMinutes { get; set; }
	}
	
	public class UpdateImagePipelinePutBodySchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="scheduleExpression")]
		public string ScheduleExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionStartCondition")]
		public PipelineExecutionStartCondition PipelineExecutionStartCondition { get; set; }
	}
	
	public class UpdateImagePipelinePutBodyImageScanningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageScanningEnabled")]
		public System.Nullable<System.Boolean> ImageScanningEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ecrConfiguration")]
		public EcrConfiguration EcrConfiguration { get; set; }
	}
	
	public class UpdateInfrastructureConfigurationPutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the infrastructure configuration that you want to update.
		/// Required
		/// Pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="infrastructureConfigurationArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$")]
		public string InfrastructureConfigurationArn { get; set; }
		
		/// <summary>
		/// The description of the infrastructure configuration.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The instance types of the infrastructure configuration. You can specify one or more instance types to use for this build. The service will pick one of these instance types based on availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceTypes")]
		public string[] InstanceTypes { get; set; }
		
		/// <summary>
		/// The instance profile to associate with the instance used to customize your Amazon EC2 AMI.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[\w+=,.@-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceProfileName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w+=,.@-]+$")]
		public string InstanceProfileName { get; set; }
		
		/// <summary>
		/// The security group IDs to associate with the instance used to customize your Amazon EC2 AMI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// The subnet ID to place the instance used to customize your Amazon EC2 AMI in.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string SubnetId { get; set; }
		
		/// <summary>
		/// Logging configuration defines where Image Builder uploads your logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logging")]
		public UpdateInfrastructureConfigurationPutBodyLogging Logging { get; set; }
		
		/// <summary>
		/// The key pair of the infrastructure configuration. You can use this to log on to and debug the instance used to create your image.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyPair")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string KeyPair { get; set; }
		
		/// <summary>
		/// The terminate instance on failure setting of the infrastructure configuration. Set to false if you want Image Builder to retain the instance used to configure your AMI if the build or test phase of your workflow fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminateInstanceOnFailure")]
		public System.Nullable<System.Boolean> TerminateInstanceOnFailure { get; set; }
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN) for the SNS topic to which we send image build event notifications.</p> <note> <p>EC2 Image Builder is unable to send notifications to SNS topics that are encrypted using keys from other accounts. The key that is used to encrypt the SNS topic must reside in the account that the Image Builder service runs under.</p> </note>
		/// Pattern: ^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snsTopicArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$")]
		public string SnsTopicArn { get; set; }
		
		/// <summary>
		/// The idempotency token used to make this request idempotent.
		/// Required
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The tags attached to the resource created by Image Builder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public System.Collections.Generic.Dictionary<string, string> ResourceTags { get; set; }
		
		/// <summary>
		/// The instance metadata options that apply to the HTTP requests that pipeline builds use to launch EC2 build and test instances. For more information about instance metadata options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 User Guide</i> </i> for Linux instances, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 Windows Guide</i> </i> for Windows instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceMetadataOptions")]
		public UpdateInfrastructureConfigurationPutBodyInstanceMetadataOptions InstanceMetadataOptions { get; set; }
	}
	
	public class UpdateInfrastructureConfigurationPutBodyLogging
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Logs")]
		public S3Logs S3Logs { get; set; }
	}
	
	public class UpdateInfrastructureConfigurationPutBodyInstanceMetadataOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpTokens")]
		public string HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpPutResponseHopLimit")]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
