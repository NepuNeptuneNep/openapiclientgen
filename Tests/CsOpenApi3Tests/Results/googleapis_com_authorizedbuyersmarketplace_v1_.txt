//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Request to accept a proposal. Accepting a proposal implies acceptance of the publisher terms_and_conditions, if any.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcceptProposalRequest
	{
		
		/// <summary>
		/// The last known client revision number of the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevision")]
		public string ProposalRevision { get; set; }
	}
	
	/// <summary>
	/// Request message for activating a client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateClientRequest
	{
	}
	
	/// <summary>
	/// Request message for activating a client user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateClientUserRequest
	{
	}
	
	/// <summary>
	/// Represents size of a single ad slot, or a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdSize
	{
		
		/// <summary>
		/// The height of the ad slot in pixels. This field will be present only when size type is `PIXEL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public string Height { get; set; }
		
		/// <summary>
		/// The type of the ad slot size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AdSizeType> Type { get; set; }
		
		/// <summary>
		/// The width of the ad slot in pixels. This field will be present only when size type is `PIXEL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public string Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AdSizeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIXEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERSTITIAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLUID = 4,
	}
	
	/// <summary>
	/// Request message for adding creative to be used in the bidding process for the finalized deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddCreativeRequest
	{
		
		/// <summary>
		/// Name of the creative to add to the finalized deal, in the format `buyers/{buyerAccountId}/creatives/{creativeId}`. See creative.name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creative")]
		public string Creative { get; set; }
	}
	
	/// <summary>
	/// Request to add a note.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddNoteRequest
	{
		
		/// <summary>
		/// A text note attached to the proposal to facilitate the communication between buyers and sellers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public Note Note { get; set; }
	}
	
	/// <summary>
	/// A text note attached to the proposal to facilitate the communication between buyers and sellers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Note
	{
		
		/// <summary>
		/// Output only. When this note was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The role who created the note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorRole")]
		public System.Nullable<NoteCreatorRole> CreatorRole { get; set; }
		
		/// <summary>
		/// The text of the note. Maximum length is 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NoteCreatorRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUYER_SELLER_ROLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUYER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELLER = 2,
	}
	
	/// <summary>
	/// Defines a segment of inventory that buyer wants to buy. It's created by buyer and could be shared with multiple buyers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuctionPackage
	{
		
		/// <summary>
		/// Output only. Time the auction package was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The buyer that created this auction package. Format: `buyers/{buyerAccountId}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// Output only. A description of the auction package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display_name assigned to the auction package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Immutable. The unique identifier for the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}` The auction_package_id part of name is sent in the BidRequest to all RTB bidders and is returned as deal_id by the bidder in the BidResponse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The list of clients of the current buyer that are subscribed to the AuctionPackage. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscribedClients")]
		public string[] SubscribedClients { get; set; }
		
		/// <summary>
		/// Output only. Time the auction package was last updated. This value is only increased when this auction package is updated but never when a buyer subscribed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Request message for batch updating deals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateDealsRequest
	{
		
		/// <summary>
		/// Required. List of request messages to update deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public UpdateDealRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request message for updating the deal at the given revision number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDealRequest
	{
		
		/// <summary>
		/// A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deal")]
		public Deal Deal { get; set; }
		
		/// <summary>
		/// List of fields to be updated. If empty or unspecified, the service will update all fields populated in the update request excluding the output only fields and primitive fields with default value. Note that explicit field mask is required in order to reset a primitive field back to its default value, for example, false for boolean fields, 0 for integer fields. A special field mask consisting of a single path "*" can be used to indicate full replacement(the equivalent of PUT method), updatable fields unset or unspecified in the input will be cleared or set to default value. Output only fields will be ignored regardless of the value of updateMask.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Deal
	{
		
		/// <summary>
		/// Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billedBuyer")]
		public string BilledBuyer { get; set; }
		
		/// <summary>
		/// Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer")]
		public string Buyer { get; set; }
		
		/// <summary>
		/// Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client")]
		public string Client { get; set; }
		
		/// <summary>
		/// Output only. The time of the deal creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Message captures data about the creatives in the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeRequirements")]
		public CreativeRequirements CreativeRequirements { get; set; }
		
		/// <summary>
		/// Output only. Type of deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealType")]
		public System.Nullable<DealDealType> DealType { get; set; }
		
		/// <summary>
		/// Message contains details about how the deal will be paced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryControl")]
		public DeliveryControl DeliveryControl { get; set; }
		
		/// <summary>
		/// Output only. Free text description for the deal terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. The name of the deal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedGrossSpend")]
		public Money EstimatedGrossSpend { get; set; }
		
		/// <summary>
		/// Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightEndTime")]
		public string FlightEndTime { get; set; }
		
		/// <summary>
		/// Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightStartTime")]
		public string FlightStartTime { get; set; }
		
		/// <summary>
		/// Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pricing terms for Preferred Deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredDealTerms")]
		public PreferredDealTerms PreferredDealTerms { get; set; }
		
		/// <summary>
		/// Pricing terms for Private Auctions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateAuctionTerms")]
		public PrivateAuctionTerms PrivateAuctionTerms { get; set; }
		
		/// <summary>
		/// Pricing terms for Programmatic Guaranteed Deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programmaticGuaranteedTerms")]
		public ProgrammaticGuaranteedTerms ProgrammaticGuaranteedTerms { get; set; }
		
		/// <summary>
		/// Output only. The revision number for the proposal and is the same value as proposal.proposal_revision. Each update to deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevision")]
		public string ProposalRevision { get; set; }
		
		/// <summary>
		/// Immutable. Reference to the seller on the deal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherProfile")]
		public string PublisherProfile { get; set; }
		
		/// <summary>
		/// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerTimeZone")]
		public TimeZone SellerTimeZone { get; set; }
		
		/// <summary>
		/// Targeting represents different criteria that can be used to target inventory. For example, they can choose to target inventory only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targeting")]
		public MarketplaceTargeting Targeting { get; set; }
		
		/// <summary>
		/// Output only. The time when the deal was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Message captures data about the creatives in the deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeRequirements
	{
		
		/// <summary>
		/// Output only. The format of the creative, only applicable for programmatic guaranteed and preferred deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeFormat")]
		public System.Nullable<CreativeRequirementsCreativeFormat> CreativeFormat { get; set; }
		
		/// <summary>
		/// Output only. Specifies the creative pre-approval policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativePreApprovalPolicy")]
		public System.Nullable<CreativeRequirementsCreativePreApprovalPolicy> CreativePreApprovalPolicy { get; set; }
		
		/// <summary>
		/// Output only. Specifies whether the creative is safeFrame compatible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeSafeFrameCompatibility")]
		public System.Nullable<CreativeRequirementsCreativeSafeFrameCompatibility> CreativeSafeFrameCompatibility { get; set; }
		
		/// <summary>
		/// Output only. The max duration of the video creative in milliseconds. only applicable for deals with video creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAdDurationMs")]
		public string MaxAdDurationMs { get; set; }
		
		/// <summary>
		/// Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by the buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programmaticCreativeSource")]
		public System.Nullable<CreativeRequirementsProgrammaticCreativeSource> ProgrammaticCreativeSource { get; set; }
		
		/// <summary>
		/// Output only. Skippable video ads allow viewers to skip ads after 5 seconds. Only applicable for deals with video creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippableAdType")]
		public System.Nullable<CreativeRequirementsSkippableAdType> SkippableAdType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeRequirementsCreativeFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeRequirementsCreativePreApprovalPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELLER_PRE_APPROVAL_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELLER_PRE_APPROVAL_NOT_REQUIRED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeRequirementsCreativeSafeFrameCompatibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPATIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPATIBLE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeRequirementsProgrammaticCreativeSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeRequirementsSkippableAdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPABLE_AD_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTREAM_SELECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_SKIPPABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DealDealType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEAL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFERRED_DEAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE_AUCTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRAMMATIC_GUARANTEED = 3,
	}
	
	/// <summary>
	/// Message contains details about how the deal will be paced.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeliveryControl
	{
		
		/// <summary>
		/// Output only. Specifies roadblocking in a main companion lineitem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companionDeliveryType")]
		public System.Nullable<DeliveryControlCompanionDeliveryType> CompanionDeliveryType { get; set; }
		
		/// <summary>
		/// Output only. Specifies strategy to use for selecting a creative when multiple creatives of the same size are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeRotationType")]
		public System.Nullable<DeliveryControlCreativeRotationType> CreativeRotationType { get; set; }
		
		/// <summary>
		/// Output only. Specifies how the impression delivery will be paced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryRateType")]
		public System.Nullable<DeliveryControlDeliveryRateType> DeliveryRateType { get; set; }
		
		/// <summary>
		/// Output only. Specifies any frequency caps. Cannot be filtered within ListDealsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequencyCap")]
		public FrequencyCap[] FrequencyCap { get; set; }
		
		/// <summary>
		/// Output only. Specifies the roadblocking type in display creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roadblockingType")]
		public System.Nullable<DeliveryControlRoadblockingType> RoadblockingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeliveryControlCompanionDeliveryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANION_DELIVERY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERY_OPTIONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERY_AT_LEAST_ONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERY_ALL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeliveryControlCreativeRotationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_ROTATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROTATION_EVEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROTATION_OPTIMIZED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROTATION_MANUAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROTATION_SEQUENTIAL = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeliveryControlDeliveryRateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERY_RATE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRONT_LOADED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS_FAST_AS_POSSIBLE = 3,
	}
	
	/// <summary>
	/// Message contains details about publisher-set frequency caps of the delivery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FrequencyCap
	{
		
		/// <summary>
		/// The maximum number of impressions that can be served to a user within the specified time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxImpressions")]
		public System.Nullable<System.Int32> MaxImpressions { get; set; }
		
		/// <summary>
		/// The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeUnitType")]
		public System.Nullable<FrequencyCapTimeUnitType> TimeUnitType { get; set; }
		
		/// <summary>
		/// The amount of time, in the units specified by time_unit_type. Defines the amount of time over which impressions per user are counted and capped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeUnitsCount")]
		public System.Nullable<System.Int32> TimeUnitsCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FrequencyCapTimeUnitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_UNIT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINUTE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIFETIME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeliveryControlRoadblockingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROADBLOCKING_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLY_ONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_OR_MORE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS_MANY_AS_POSSIBLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_ROADBLOCK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_SET = 5,
	}
	
	/// <summary>
	/// Represents an amount of money with its currency type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Money
	{
		
		/// <summary>
		/// The three-letter currency code defined in ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	/// <summary>
	/// Pricing terms for Preferred Deals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PreferredDealTerms
	{
		
		/// <summary>
		/// Represents a price and a pricing type for a deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPrice")]
		public Price FixedPrice { get; set; }
	}
	
	/// <summary>
	/// Represents a price and a pricing type for a deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Price
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Money Amount { get; set; }
		
		/// <summary>
		/// The pricing type for the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PriceType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PriceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPD = 2,
	}
	
	/// <summary>
	/// Pricing terms for Private Auctions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivateAuctionTerms
	{
		
		/// <summary>
		/// Represents a price and a pricing type for a deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorPrice")]
		public Price FloorPrice { get; set; }
		
		/// <summary>
		/// Output only. True if open auction buyers are allowed to compete with invited buyers in this private auction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openAuctionAllowed")]
		public System.Nullable<System.Boolean> OpenAuctionAllowed { get; set; }
	}
	
	/// <summary>
	/// Pricing terms for Programmatic Guaranteed Deals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProgrammaticGuaranteedTerms
	{
		
		/// <summary>
		/// Represents a price and a pricing type for a deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPrice")]
		public Price FixedPrice { get; set; }
		
		/// <summary>
		/// Count of guaranteed looks. For CPD deals, buyer changes to guaranteed_looks will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guaranteedLooks")]
		public string GuaranteedLooks { get; set; }
		
		/// <summary>
		/// The lifetime impression cap for CPM Sponsorship deals. Deal will stop serving when cap is reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionCap")]
		public string ImpressionCap { get; set; }
		
		/// <summary>
		/// Daily minimum looks for CPD deal types. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumDailyLooks")]
		public string MinimumDailyLooks { get; set; }
		
		/// <summary>
		/// For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached. Valid value is within range 0~100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentShareOfVoice")]
		public string PercentShareOfVoice { get; set; }
		
		/// <summary>
		/// The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservationType")]
		public System.Nullable<ProgrammaticGuaranteedTermsReservationType> ReservationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProgrammaticGuaranteedTermsReservationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPONSORSHIP = 2,
	}
	
	/// <summary>
	/// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeZone
	{
		
		/// <summary>
		/// IANA Time Zone Database time zone, e.g. "America/New_York".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Optional. IANA Time Zone Database version number, e.g. "2019a".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Targeting represents different criteria that can be used to target inventory. For example, they can choose to target inventory only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketplaceTargeting
	{
		
		/// <summary>
		/// Represents Daypart targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daypartTargeting")]
		public DayPartTargeting DaypartTargeting { get; set; }
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoTargeting")]
		public CriteriaTargeting GeoTargeting { get; set; }
		
		/// <summary>
		/// Represents the size of an ad unit that can be targeted on a bid request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySizeTargeting")]
		public InventorySizeTargeting InventorySizeTargeting { get; set; }
		
		/// <summary>
		/// Targeting of the inventory types a bid request can originate from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryTypeTargeting")]
		public InventoryTypeTargeting InventoryTypeTargeting { get; set; }
		
		/// <summary>
		/// Represents targeting about where the ads can appear, for example, certain sites or mobile applications. Different placement targeting types will be logically OR'ed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementTargeting")]
		public PlacementTargeting PlacementTargeting { get; set; }
		
		/// <summary>
		/// Represents targeting about various types of technology.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="technologyTargeting")]
		public TechnologyTargeting TechnologyTargeting { get; set; }
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userListTargeting")]
		public CriteriaTargeting UserListTargeting { get; set; }
		
		/// <summary>
		/// Represents targeting information about video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoTargeting")]
		public VideoTargeting VideoTargeting { get; set; }
	}
	
	/// <summary>
	/// Represents Daypart targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DayPartTargeting
	{
		
		/// <summary>
		/// The targeted weekdays and times
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayParts")]
		public DayPart[] DayParts { get; set; }
		
		/// <summary>
		/// The time zone type of the day parts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneType")]
		public System.Nullable<DayPartTargetingTimeZoneType> TimeZoneType { get; set; }
	}
	
	/// <summary>
	/// Defines targeting for a period of time on a specific week day.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DayPart
	{
		
		/// <summary>
		/// Day of week for the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public System.Nullable<DayPartDayOfWeek> DayOfWeek { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public TimeOfDay EndTime { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public TimeOfDay StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DayPartDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_WEEK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 7,
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DayPartTargetingTimeZoneType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_ZONE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELLER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 2,
	}
	
	/// <summary>
	/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CriteriaTargeting
	{
		
		/// <summary>
		/// A list of numeric IDs to be excluded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedCriteriaIds")]
		public string[] ExcludedCriteriaIds { get; set; }
		
		/// <summary>
		/// A list of numeric IDs to be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedCriteriaIds")]
		public string[] TargetedCriteriaIds { get; set; }
	}
	
	/// <summary>
	/// Represents the size of an ad unit that can be targeted on a bid request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySizeTargeting
	{
		
		/// <summary>
		/// A list of inventory sizes to be excluded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedInventorySizes")]
		public AdSize[] ExcludedInventorySizes { get; set; }
		
		/// <summary>
		/// A list of inventory sizes to be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedInventorySizes")]
		public AdSize[] TargetedInventorySizes { get; set; }
	}
	
	/// <summary>
	/// Targeting of the inventory types a bid request can originate from.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryTypeTargeting
	{
		
		/// <summary>
		/// The list of targeted inventory types for the bid request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryTypes")]
		public string[] InventoryTypes { get; set; }
	}
	
	/// <summary>
	/// Represents targeting about where the ads can appear, for example, certain sites or mobile applications. Different placement targeting types will be logically OR'ed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementTargeting
	{
		
		/// <summary>
		/// Mobile application targeting settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileApplicationTargeting")]
		public MobileApplicationTargeting MobileApplicationTargeting { get; set; }
		
		/// <summary>
		/// Represents a list of targeted and excluded URLs (for example, google.com). For Private Auction Deals, URLs are either included or excluded. For Programmatic Guaranteed and Preferred Deals, this doesn't apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uriTargeting")]
		public UriTargeting UriTargeting { get; set; }
	}
	
	/// <summary>
	/// Mobile application targeting settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MobileApplicationTargeting
	{
		
		/// <summary>
		/// Represents a list of targeted and excluded mobile application IDs that publishers own. Android App ID, for example, com.google.android.apps.maps, can be found in Google Play Store URL. iOS App ID (which is a number) can be found at the end of iTunes store URL. First party mobile applications is either included or excluded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPartyTargeting")]
		public FirstPartyMobileApplicationTargeting FirstPartyTargeting { get; set; }
	}
	
	/// <summary>
	/// Represents a list of targeted and excluded mobile application IDs that publishers own. Android App ID, for example, com.google.android.apps.maps, can be found in Google Play Store URL. iOS App ID (which is a number) can be found at the end of iTunes store URL. First party mobile applications is either included or excluded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FirstPartyMobileApplicationTargeting
	{
		
		/// <summary>
		/// A list of application IDs to be excluded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedAppIds")]
		public string[] ExcludedAppIds { get; set; }
		
		/// <summary>
		/// A list of application IDs to be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedAppIds")]
		public string[] TargetedAppIds { get; set; }
	}
	
	/// <summary>
	/// Represents a list of targeted and excluded URLs (for example, google.com). For Private Auction Deals, URLs are either included or excluded. For Programmatic Guaranteed and Preferred Deals, this doesn't apply.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UriTargeting
	{
		
		/// <summary>
		/// A list of URLs to be excluded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedUris")]
		public string[] ExcludedUris { get; set; }
		
		/// <summary>
		/// A list of URLs to be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedUris")]
		public string[] TargetedUris { get; set; }
	}
	
	/// <summary>
	/// Represents targeting about various types of technology.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TechnologyTargeting
	{
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceCapabilityTargeting")]
		public CriteriaTargeting DeviceCapabilityTargeting { get; set; }
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceCategoryTargeting")]
		public CriteriaTargeting DeviceCategoryTargeting { get; set; }
		
		/// <summary>
		/// Represents targeting information for operating systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemTargeting")]
		public OperatingSystemTargeting OperatingSystemTargeting { get; set; }
	}
	
	/// <summary>
	/// Represents targeting information for operating systems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperatingSystemTargeting
	{
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemCriteria")]
		public CriteriaTargeting OperatingSystemCriteria { get; set; }
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemVersionCriteria")]
		public CriteriaTargeting OperatingSystemVersionCriteria { get; set; }
	}
	
	/// <summary>
	/// Represents targeting information about video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoTargeting
	{
		
		/// <summary>
		/// A list of video positions to be excluded. When this field is populated, the targeted_position_types field must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedPositionTypes")]
		public string[] ExcludedPositionTypes { get; set; }
		
		/// <summary>
		/// A list of video positions to be included. When this field is populated, the excluded_position_types field must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedPositionTypes")]
		public string[] TargetedPositionTypes { get; set; }
	}
	
	/// <summary>
	/// Response message for batch updating deals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateDealsResponse
	{
		
		/// <summary>
		/// Deals updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deals")]
		public Deal[] Deals { get; set; }
	}
	
	/// <summary>
	/// Request to cancel an ongoing negotiation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelNegotiationRequest
	{
	}
	
	/// <summary>
	/// A client represents an agency, a brand, or an advertiser customer of the buyer. Based on the client's role, its client users will have varying levels of restricted access to the Marketplace and certain other sections of the Authorized Buyers UI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Client
	{
		
		/// <summary>
		/// Required. Display name shown to publishers. Must be unique for clients without partnerClientId specified. Maximum length of 255 characters is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the client. Format: `buyers/{accountId}/clients/{clientAccountId}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Arbitrary unique identifier provided by the buyer. This field can be used to associate a client with an identifier in the namespace of the buyer, lookup clients by that identifier and verify whether an Authorized Buyers account of the client already exists. If present, must be unique across all the clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerClientId")]
		public string PartnerClientId { get; set; }
		
		/// <summary>
		/// Required. The role assigned to the client. Each role implies a set of permissions granted to the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<ClientRole> Role { get; set; }
		
		/// <summary>
		/// Whether the client will be visible to sellers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerVisible")]
		public System.Nullable<System.Boolean> SellerVisible { get; set; }
		
		/// <summary>
		/// Output only. The state of the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ClientState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClientRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_ROLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_DEAL_VIEWER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_DEAL_NEGOTIATOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_DEAL_APPROVER = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClientState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	/// <summary>
	/// A user of a client who has restricted access to the Marketplace and certain other sections of the Authorized Buyers UI based on the role granted to the associated client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientUser
	{
		
		/// <summary>
		/// Required. The client user's email address that has to be unique across all users for the same client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the client user. Format: `buyers/{accountId}/clients/{clientAccountId}/users/{userId}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The state of the client user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ClientUserState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClientUserState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVITED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 3,
	}
	
	/// <summary>
	/// Contains information on how a buyer or seller can be reached.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Contact
	{
		
		/// <summary>
		/// The display_name of the contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Email address for the contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	/// <summary>
	/// Request message for disabling a client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeactivateClientRequest
	{
	}
	
	/// <summary>
	/// Request message for deactivating a client user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeactivateClientUserRequest
	{
	}
	
	/// <summary>
	/// Information related to deal pausing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealPausingInfo
	{
		
		/// <summary>
		/// The reason for the pausing of the deal; empty for active deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pauseReason")]
		public string PauseReason { get; set; }
		
		/// <summary>
		/// The party that first paused the deal; unspecified for active deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pauseRole")]
		public NoteCreatorRole PauseRole { get; set; }
		
		/// <summary>
		/// Whether pausing is consented between buyer and seller for the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pausingConsented")]
		public System.Nullable<System.Boolean> PausingConsented { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// A finalized deal is a snapshot of the deal when both buyer and seller accept the deal. The buyer or seller can update the deal after it's been finalized and renegotiate on the deal targeting, terms and other fields, while at the same time the finalized snapshot of the deal can still be retrieved using this API. The finalized deal contains a copy of the deal as it existed when most recently finalized, as well as fields related to deal serving such as pause/resume status, RTB metrics, and more.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FinalizedDeal
	{
		
		/// <summary>
		/// A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deal")]
		public Deal Deal { get; set; }
		
		/// <summary>
		/// Information related to deal pausing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealPausingInfo")]
		public DealPausingInfo DealPausingInfo { get; set; }
		
		/// <summary>
		/// Serving status of the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealServingStatus")]
		public System.Nullable<FinalizedDealDealServingStatus> DealServingStatus { get; set; }
		
		/// <summary>
		/// The resource name of the finalized deal. Format: `buyers/{accountId}/finalizedDeals/{finalizedDealId}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether the Programmatic Guaranteed deal is ready for serving.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readyToServe")]
		public System.Nullable<System.Boolean> ReadyToServe { get; set; }
		
		/// <summary>
		/// Real-time bidding metrics. For what each metric means refer to [Report metrics](https://support.google.com/adxbuyer/answer/6115195#report-metrics)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rtbMetrics")]
		public RtbMetrics RtbMetrics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FinalizedDealDealServingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEAL_SERVING_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED_BY_BUYER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED_BY_SELLER = 4,
	}
	
	/// <summary>
	/// Real-time bidding metrics. For what each metric means refer to [Report metrics](https://support.google.com/adxbuyer/answer/6115195#report-metrics)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RtbMetrics
	{
		
		/// <summary>
		/// Ad impressions in last 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adImpressions7Days")]
		public string AdImpressions7Days { get; set; }
		
		/// <summary>
		/// Bid rate in last 7 days, calculated by (bids / bid requests).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidRate7Days")]
		public System.Nullable<System.Double> BidRate7Days { get; set; }
		
		/// <summary>
		/// Bid requests in last 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidRequests7Days")]
		public string BidRequests7Days { get; set; }
		
		/// <summary>
		/// Bids in last 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bids7Days")]
		public string Bids7Days { get; set; }
		
		/// <summary>
		/// Filtered bid rate in last 7 days, calculated by (filtered bids / bids).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteredBidRate7Days")]
		public System.Nullable<System.Double> FilteredBidRate7Days { get; set; }
		
		/// <summary>
		/// Must bid rate for current month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustBidRateCurrentMonth")]
		public System.Nullable<System.Double> MustBidRateCurrentMonth { get; set; }
	}
	
	/// <summary>
	/// Response message for listing auction packages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAuctionPackagesResponse
	{
		
		/// <summary>
		/// The list of auction packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auctionPackages")]
		public AuctionPackage[] AuctionPackages { get; set; }
		
		/// <summary>
		/// Continuation token for fetching the next page of results. Pass this value in the ListAuctionPackagesRequest.pageToken field in the subsequent call to the `ListAuctionPackages` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for the list method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListClientUsersResponse
	{
		
		/// <summary>
		/// The returned list of client users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientUsers")]
		public ClientUser[] ClientUsers { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListClientUsersRequest.pageToken field in the subsequent call to the list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for the list method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListClientsResponse
	{
		
		/// <summary>
		/// The returned list of clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clients")]
		public Client[] Clients { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListClientsRequest.pageToken field in the subsequent call to the list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing deals in a proposal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDealsResponse
	{
		
		/// <summary>
		/// The list of deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deals")]
		public Deal[] Deals { get; set; }
		
		/// <summary>
		/// Token to fetch the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing finalized deals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFinalizedDealsResponse
	{
		
		/// <summary>
		/// The list of finalized deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalizedDeals")]
		public FinalizedDeal[] FinalizedDeals { get; set; }
		
		/// <summary>
		/// Token to fetch the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing proposals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProposalsResponse
	{
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of proposals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposals")]
		public Proposal[] Proposals { get; set; }
	}
	
	/// <summary>
	/// Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Proposal
	{
		
		/// <summary>
		/// Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billedBuyer")]
		public string BilledBuyer { get; set; }
		
		/// <summary>
		/// Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer")]
		public string Buyer { get; set; }
		
		/// <summary>
		/// Contact information for the buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerContacts")]
		public Contact[] BuyerContacts { get; set; }
		
		/// <summary>
		/// Buyers are allowed to store certain types of private data in a proposal or deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerPrivateData")]
		public PrivateData BuyerPrivateData { get; set; }
		
		/// <summary>
		/// Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client")]
		public string Client { get; set; }
		
		/// <summary>
		/// Output only. Type of deal the proposal contains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealType")]
		public DealDealType DealType { get; set; }
		
		/// <summary>
		/// Output only. The descriptive name for the proposal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. True if the proposal was previously finalized and is now being renegotiated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRenegotiating")]
		public System.Nullable<System.Boolean> IsRenegotiating { get; set; }
		
		/// <summary>
		/// Output only. The role of the last user that either updated the proposal or left a comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterOrCommentorRole")]
		public NoteCreatorRole LastUpdaterOrCommentorRole { get; set; }
		
		/// <summary>
		/// Immutable. The name of the proposal serving as a unique identifier. Format: buyers/{accountId}/proposals/{proposalId}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of notes from the buyer and the seller attached to this proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public Note[] Notes { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the buyer/seller created the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorRole")]
		public NoteCreatorRole OriginatorRole { get; set; }
		
		/// <summary>
		/// Whether pausing is allowed for the proposal. This is a negotiable term between buyers and publishers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pausingConsented")]
		public System.Nullable<System.Boolean> PausingConsented { get; set; }
		
		/// <summary>
		/// Output only. The revision number for the proposal. Each update to the proposal or deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevision")]
		public string ProposalRevision { get; set; }
		
		/// <summary>
		/// Immutable. Reference to the seller on the proposal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}` Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherProfile")]
		public string PublisherProfile { get; set; }
		
		/// <summary>
		/// Output only. Contact information for the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerContacts")]
		public Contact[] SellerContacts { get; set; }
		
		/// <summary>
		/// Output only. Indicates the state of the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ProposalState> State { get; set; }
		
		/// <summary>
		/// Output only. The terms and conditions associated with this proposal. Accepting a proposal implies acceptance of this field. This is created by the seller, the buyer can only view it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsAndConditions")]
		public string TermsAndConditions { get; set; }
		
		/// <summary>
		/// Output only. The time when the proposal was last revised.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Buyers are allowed to store certain types of private data in a proposal or deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivateData
	{
		
		/// <summary>
		/// A buyer specified reference ID. This can be queried in the list operations (max-length: 1024 unicode code units).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public string ReferenceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProposalState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUYER_REVIEW_REQUESTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELLER_REVIEW_REQUESTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUYER_ACCEPTANCE_REQUESTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINALIZED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 5,
	}
	
	/// <summary>
	/// Response message for profiles visible to the buyer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPublisherProfilesResponse
	{
		
		/// <summary>
		/// Token to fetch the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of matching publisher profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherProfiles")]
		public PublisherProfile[] PublisherProfiles { get; set; }
	}
	
	/// <summary>
	/// The values in the publisher profile are supplied by the publisher. All fields are not filterable unless stated otherwise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublisherProfile
	{
		
		/// <summary>
		/// Description on the publisher's audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceDescription")]
		public string AudienceDescription { get; set; }
		
		/// <summary>
		/// Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDealsContact")]
		public string DirectDealsContact { get; set; }
		
		/// <summary>
		/// Display name of the publisher profile. Can be used to filter the response of the publisherProfiles.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like "photos.google.co.uk/123", but will instead contain "google.co.uk". Can be used to filter the response of the publisherProfiles.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public string[] Domains { get; set; }
		
		/// <summary>
		/// Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a portion of inventory. One seller has only one parent publisher profile, and can have multiple child profiles. See https://support.google.com/admanager/answer/6035806 for details. Can be used to filter the response of the publisherProfiles.list method by setting the filter to "is_parent: true".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isParent")]
		public System.Nullable<System.Boolean> IsParent { get; set; }
		
		/// <summary>
		/// A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logoUrl")]
		public string LogoUrl { get; set; }
		
		/// <summary>
		/// URL to additional marketing and sales materials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaKitUrl")]
		public string MediaKitUrl { get; set; }
		
		/// <summary>
		/// The list of apps represented in this publisher profile. Empty if this is a parent profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileApps")]
		public PublisherProfileMobileApplication[] MobileApps { get; set; }
		
		/// <summary>
		/// Name of the publisher profile. Format: `buyers/{buyer}/publisherProfiles/{publisher_profile}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Overview of the publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
		
		/// <summary>
		/// Statement explaining what's unique about publisher's business, and why buyers should partner with the publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pitchStatement")]
		public string PitchStatement { get; set; }
		
		/// <summary>
		/// Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programmaticDealsContact")]
		public string ProgrammaticDealsContact { get; set; }
		
		/// <summary>
		/// A unique identifying code for the seller. This value is the same for all of the seller's parent and child publisher profiles. Can be used to filter the response of the publisherProfiles.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherCode")]
		public string PublisherCode { get; set; }
		
		/// <summary>
		/// URL to a sample content page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplePageUrl")]
		public string SamplePageUrl { get; set; }
		
		/// <summary>
		/// Up to three key metrics and rankings. For example, "#1 Mobile News Site for 20 Straight Months".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topHeadlines")]
		public string[] TopHeadlines { get; set; }
	}
	
	/// <summary>
	/// A mobile application that contains a external app ID, name, and app store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublisherProfileMobileApplication
	{
		
		/// <summary>
		/// The app store the app belongs to. Can be used to filter the response of the publisherProfiles.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appStore")]
		public System.Nullable<PublisherProfileMobileApplicationAppStore> AppStore { get; set; }
		
		/// <summary>
		/// The external ID for the app from its app store. Can be used to filter the response of the publisherProfiles.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalAppId")]
		public string ExternalAppId { get; set; }
		
		/// <summary>
		/// The name of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PublisherProfileMobileApplicationAppStore
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_STORE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_ITUNES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_PLAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROKU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_FIRE_TV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAYSTATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XBOX = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMSUNG_TV = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPPO = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMSUNG = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIVO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XIAOMI = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LG_TV = 13,
	}
	
	/// <summary>
	/// Request message for pausing a finalized deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PauseFinalizedDealRequest
	{
		
		/// <summary>
		/// The reason to pause the finalized deal, will be displayed to the seller. Maximum length is 1000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Request message for resuming a finalized deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResumeFinalizedDealRequest
	{
	}
	
	/// <summary>
	/// Request to send an RFP. All fields in this request are proposed to publisher and subject to changes by publisher during later negotiation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendRfpRequest
	{
		
		/// <summary>
		/// Contact information for the buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerContacts")]
		public Contact[] BuyerContacts { get; set; }
		
		/// <summary>
		/// If the current buyer is sending the RFP on behalf of its client, use this field to specify the name of the client in the format: `buyers/{accountId}/clients/{clientAccountid}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client")]
		public string Client { get; set; }
		
		/// <summary>
		/// Required. The display name of the proposal being created by this RFP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedGrossSpend")]
		public Money EstimatedGrossSpend { get; set; }
		
		/// <summary>
		/// Required. Proposed flight end time of the RFP. A timestamp in RFC3339 UTC "Zulu" format. Note that the specified value will be truncated to a granularity of one second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightEndTime")]
		public string FlightEndTime { get; set; }
		
		/// <summary>
		/// Required. Proposed flight start time of the RFP. A timestamp in RFC3339 UTC "Zulu" format. Note that the specified value will be truncated to a granularity of one second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightStartTime")]
		public string FlightStartTime { get; set; }
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoTargeting")]
		public CriteriaTargeting GeoTargeting { get; set; }
		
		/// <summary>
		/// Represents the size of an ad unit that can be targeted on a bid request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySizeTargeting")]
		public InventorySizeTargeting InventorySizeTargeting { get; set; }
		
		/// <summary>
		/// A message that is sent to the publisher. Maximum length is 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Pricing terms for Preferred Deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredDealTerms")]
		public PreferredDealTerms PreferredDealTerms { get; set; }
		
		/// <summary>
		/// Pricing terms for Programmatic Guaranteed Deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programmaticGuaranteedTerms")]
		public ProgrammaticGuaranteedTerms ProgrammaticGuaranteedTerms { get; set; }
		
		/// <summary>
		/// Required. The profile of the publisher who will receive this RFP in the format: `buyers/{accountId}/publisherProfiles/{publisherProfileId}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherProfile")]
		public string PublisherProfile { get; set; }
	}
	
	/// <summary>
	/// Request message for setting ready to serve for a finalized deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetReadyToServeRequest
	{
	}
	
	/// <summary>
	/// Request message for SubscribeAuctionPackage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribeAuctionPackageRequest
	{
	}
	
	/// <summary>
	/// Request message for SubscribeAuctionPackageClients.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribeClientsRequest
	{
		
		/// <summary>
		/// Optional. A list of client buyers to subscribe to the auction package, with client buyer in the format `buyers/{accountId}/clients/{clientAccountId}`. The current buyer will be subscribed to the auction package regardless of the list contents if not already.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clients")]
		public string[] Clients { get; set; }
	}
	
	/// <summary>
	/// Request message for UnsubscribeAuctionPackage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsubscribeAuctionPackageRequest
	{
	}
	
	/// <summary>
	/// Request message for UnsubscribeAuctionPackage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsubscribeClientsRequest
	{
		
		/// <summary>
		/// Optional. A list of client buyers to unsubscribe from the auction package, with client buyer in the format `buyers/{accountId}/clients/{clientAccountId}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clients")]
		public string[] Clients { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Subscribe the specified clients of the buyer to the auction package. If a client in the list does not belong to the buyer, an error response will be returned, and all of the following clients in the list will not be subscribed. Subscribing an already subscribed client will have no effect.
		/// Authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClients v1/{auctionPackage}:subscribeClients
		/// </summary>
		/// <param name="auctionPackage">Required. Name of the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}`</param>
		/// <returns>Successful response</returns>
		public async Task<AuctionPackage> Authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClientsAsync(string auctionPackage, SubscribeClientsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (auctionPackage==null? "" : System.Uri.EscapeDataString(auctionPackage))+":subscribeClients";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuctionPackage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe from the auction package for the specified clients of the buyer. Unsubscribing a client that is not subscribed will have no effect.
		/// Authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClients v1/{auctionPackage}:unsubscribeClients
		/// </summary>
		/// <param name="auctionPackage">Required. Name of the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}`</param>
		/// <returns>Successful response</returns>
		public async Task<AuctionPackage> Authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClientsAsync(string auctionPackage, UnsubscribeClientsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (auctionPackage==null? "" : System.Uri.EscapeDataString(auctionPackage))+":unsubscribeClients";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuctionPackage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sends a request for proposal (RFP) to a publisher to initiate the negotiation regarding certain inventory. In the RFP, buyers can specify the deal type, deal terms, start and end dates, targeting, and a message to the publisher. Once the RFP is sent, a proposal in `SELLER_REVIEW_REQUESTED` state will be created and returned in the response. The publisher may review your request and respond with detailed deals in the proposal.
		/// Authorizedbuyersmarketplace_buyers_proposals_sendRfp v1/{buyer}/proposals:sendRfp
		/// </summary>
		/// <param name="buyer">Required. The current buyer who is sending the RFP in the format: `buyers/{accountId}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Authorizedbuyersmarketplace_buyers_proposals_sendRfpAsync(string buyer, SendRfpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (buyer==null? "" : System.Uri.EscapeDataString(buyer))+"/proposals:sendRfp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Proposal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add creative to be used in the bidding process for a finalized deal. For programmatic guaranteed deals, it's recommended that you associate at least one approved creative with the deal before calling SetReadyToServe, to help reduce the number of bid responses filtered because they don't contain approved creatives. Creatives successfully added to a deal can be found in the Realtime-bidding Creatives API creative.deal_ids. This method only applies to programmatic guaranteed deals. Maximum number of 1000 creatives can be added to a finalized deal.
		/// Authorizedbuyersmarketplace_buyers_finalizedDeals_addCreative v1/{deal}:addCreative
		/// </summary>
		/// <param name="deal">Required. Name of the finalized deal in the format of: `buyers/{accountId}/finalizedDeals/{dealId}`</param>
		/// <returns>Successful response</returns>
		public async Task<FinalizedDeal> Authorizedbuyersmarketplace_buyers_finalizedDeals_addCreativeAsync(string deal, AddCreativeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (deal==null? "" : System.Uri.EscapeDataString(deal))+":addCreative";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FinalizedDeal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the given finalized deal as ready to serve. By default, deals are set as ready to serve as soon as they're finalized. If you want to opt out of the default behavior, and manually indicate that deals are ready to serve, ask your Technical Account Manager to add you to the allowlist. If you choose to use this method, finalized deals belonging to the bidder and its child seats don't start serving until after you call `setReadyToServe`, and after the deals become active. For example, you can use this method to delay receiving bid requests until your creative is ready. This method only applies to programmatic guaranteed deals.
		/// Authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServe v1/{deal}:setReadyToServe
		/// </summary>
		/// <param name="deal">Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}`</param>
		/// <returns>Successful response</returns>
		public async Task<FinalizedDeal> Authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServeAsync(string deal, SetReadyToServeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (deal==null? "" : System.Uri.EscapeDataString(deal))+":setReadyToServe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FinalizedDeal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing client user. The client user will lose access to the Authorized Buyers UI. Note that if a client user is deleted, the user's access to the UI can't be restored unless a new client user is created and activated.
		/// Authorizedbuyersmarketplace_buyers_clients_users_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Authorizedbuyersmarketplace_buyers_clients_users_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the requested publisher profile by name.
		/// Authorizedbuyersmarketplace_buyers_publisherProfiles_get v1/{name}
		/// </summary>
		/// <param name="name">Required. Name of the publisher profile. Format: `buyers/{buyerId}/publisherProfiles/{publisherProfileId}`</param>
		/// <returns>Successful response</returns>
		public async Task<PublisherProfile> Authorizedbuyersmarketplace_buyers_publisherProfiles_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublisherProfile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the given deal at the buyer known revision number. If the server revision has advanced since the passed-in proposal.proposal_revision an ABORTED error message will be returned. The revision number is incremented by the server whenever the proposal or its constituent deals are updated. Note: The revision number is kept at a proposal level. The buyer of the API is expected to keep track of the revision number after the last update operation and send it in as part of the next update request. This way, if there are further changes on the server (for example, seller making new updates), then the server can detect conflicts and reject the proposed changes.
		/// Authorizedbuyersmarketplace_buyers_proposals_deals_patch v1/{name}
		/// </summary>
		/// <param name="name">Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}</param>
		/// <param name="updateMask">List of fields to be updated. If empty or unspecified, the service will update all fields populated in the update request excluding the output only fields and primitive fields with default value. Note that explicit field mask is required in order to reset a primitive field back to its default value, for example, false for boolean fields, 0 for integer fields. A special field mask consisting of a single path "*" can be used to indicate full replacement(the equivalent of PUT method), updatable fields unset or unspecified in the input will be cleared or set to default value. Output only fields will be ignored regardless of the value of updateMask.</param>
		/// <returns>Successful response</returns>
		public async Task<Deal> Authorizedbuyersmarketplace_buyers_proposals_deals_patchAsync(string name, string updateMask, Deal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Deal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Accepts the proposal at the given revision number. If the revision number in the request is behind the latest from the server, an error message will be returned. This call updates the Proposal.state from `BUYER_ACCEPTANCE_REQUESTED` to `FINALIZED`; it has no side effect if the Proposal.state is already `FINALIZED` and throws exception if the Proposal.state is not either `BUYER_ACCEPTANCE_REQUESTED` or `FINALIZED`. Accepting a proposal means the buyer understands and accepts the Proposal.terms_and_conditions proposed by the seller.
		/// Authorizedbuyersmarketplace_buyers_proposals_accept v1/{name}:accept
		/// </summary>
		/// <param name="name">Name of the proposal. Format: `buyers/{accountId}/proposals/{proposalId}`</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Authorizedbuyersmarketplace_buyers_proposals_acceptAsync(string name, AcceptProposalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":accept";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Proposal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Activates an existing client user. The state of the client user will be updated from "INACTIVE" to "ACTIVE". This method has no effect if the client user is already in "ACTIVE" state. An error will be returned if the client user to activate is still in "INVITED" state.
		/// Authorizedbuyersmarketplace_buyers_clients_users_activate v1/{name}:activate
		/// </summary>
		/// <param name="name">Required. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`</param>
		/// <returns>Successful response</returns>
		public async Task<ClientUser> Authorizedbuyersmarketplace_buyers_clients_users_activateAsync(string name, ActivateClientUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClientUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deactivates an existing client user. The state of the client user will be updated from "ACTIVE" to "INACTIVE". This method has no effect if the client user is already in "INACTIVE" state. An error will be returned if the client user to deactivate is still in "INVITED" state.
		/// Authorizedbuyersmarketplace_buyers_clients_users_deactivate v1/{name}:deactivate
		/// </summary>
		/// <param name="name">Required. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`</param>
		/// <returns>Successful response</returns>
		public async Task<ClientUser> Authorizedbuyersmarketplace_buyers_clients_users_deactivateAsync(string name, DeactivateClientUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":deactivate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClientUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Pauses serving of the given finalized deal. This call only pauses the serving status, and does not affect other fields of the finalized deal. Calling this method for an already paused deal has no effect. This method only applies to programmatic guaranteed deals.
		/// Authorizedbuyersmarketplace_buyers_finalizedDeals_pause v1/{name}:pause
		/// </summary>
		/// <param name="name">Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}`</param>
		/// <returns>Successful response</returns>
		public async Task<FinalizedDeal> Authorizedbuyersmarketplace_buyers_finalizedDeals_pauseAsync(string name, PauseFinalizedDealRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":pause";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FinalizedDeal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resumes serving of the given finalized deal. Calling this method for an running deal has no effect. If a deal is initially paused by the seller, calling this method will not resume serving of the deal until the seller also resumes the deal. This method only applies to programmatic guaranteed deals.
		/// Authorizedbuyersmarketplace_buyers_finalizedDeals_resume v1/{name}:resume
		/// </summary>
		/// <param name="name">Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}`</param>
		/// <returns>Successful response</returns>
		public async Task<FinalizedDeal> Authorizedbuyersmarketplace_buyers_finalizedDeals_resumeAsync(string name, ResumeFinalizedDealRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":resume";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FinalizedDeal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Subscribe to the auction package for the specified buyer. Once subscribed, the bidder will receive a call out for inventory matching the auction package targeting criteria with the auction package deal ID and the specified buyer.
		/// Authorizedbuyersmarketplace_buyers_auctionPackages_subscribe v1/{name}:subscribe
		/// </summary>
		/// <param name="name">Required. Name of the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}`</param>
		/// <returns>Successful response</returns>
		public async Task<AuctionPackage> Authorizedbuyersmarketplace_buyers_auctionPackages_subscribeAsync(string name, SubscribeAuctionPackageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":subscribe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuctionPackage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe from the auction package for the specified buyer. Once unsubscribed, the bidder will no longer receive a call out for the auction package deal ID and the specified buyer.
		/// Authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribe v1/{name}:unsubscribe
		/// </summary>
		/// <param name="name">Required. Name of the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}`</param>
		/// <returns>Successful response</returns>
		public async Task<AuctionPackage> Authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeAsync(string name, UnsubscribeAuctionPackageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":unsubscribe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuctionPackage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the auction packages subscribed by a buyer and its clients.
		/// Authorizedbuyersmarketplace_buyers_auctionPackages_list v1/{parent}/auctionPackages
		/// </summary>
		/// <param name="parent">Required. Name of the parent buyer that can access the auction package. Format: `buyers/{accountId}`</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. Max allowed page size is 500.</param>
		/// <param name="pageToken">The page token as returned. ListAuctionPackagesResponse.nextPageToken</param>
		/// <returns>Successful response</returns>
		public async Task<ListAuctionPackagesResponse> Authorizedbuyersmarketplace_buyers_auctionPackages_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/auctionPackages&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAuctionPackagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the clients for the current buyer.
		/// Authorizedbuyersmarketplace_buyers_clients_list v1/{parent}/clients
		/// </summary>
		/// <param name="parent">Required. The name of the buyer. Format: `buyers/{accountId}`</param>
		/// <param name="filter">Query string using the [Filtering Syntax](https://developers.google.com/authorized-buyers/apis/guides/list-filters) Supported fields for filtering are: * partnerClientId Use this field to filter the clients by the partnerClientId. For example, if the partnerClientId of the client is "1234", the value of this field should be `partnerClientId = "1234"`, in order to get only the client whose partnerClientId is "1234" in the response.</param>
		/// <param name="pageSize">Requested page size. If left blank, a default page size of 500 will be applied.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListClientsResponse.nextPageToken returned from the previous call to the list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListClientsResponse> Authorizedbuyersmarketplace_buyers_clients_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/clients&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListClientsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new client.
		/// Authorizedbuyersmarketplace_buyers_clients_create v1/{parent}/clients
		/// </summary>
		/// <param name="parent">Required. The name of the buyer. Format: `buyers/{accountId}`</param>
		/// <returns>Successful response</returns>
		public async Task<Client> Authorizedbuyersmarketplace_buyers_clients_createAsync(string parent, Client requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/clients";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Client>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all deals in a proposal. To retrieve only the finalized revision deals regardless if a deal is being renegotiated, see the FinalizedDeals resource.
		/// Authorizedbuyersmarketplace_buyers_proposals_deals_list v1/{parent}/deals
		/// </summary>
		/// <param name="parent">Required. The name of the proposal containing the deals to retrieve. Format: buyers/{accountId}/proposals/{proposalId}</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If requested more than 500, the server will return 500 results per page. If unspecified, the server will pick a default page size of 100.</param>
		/// <param name="pageToken">The page token as returned from ListDealsResponse.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDealsResponse> Authorizedbuyersmarketplace_buyers_proposals_deals_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/deals&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDealsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batch updates multiple deals in the same proposal.
		/// Authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdate v1/{parent}/deals:batchUpdate
		/// </summary>
		/// <param name="parent">Required. The name of the proposal containing the deals to batch update. Format: buyers/{accountId}/proposals/{proposalId}</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateDealsResponse> Authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdateAsync(string parent, BatchUpdateDealsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/deals:batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpdateDealsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists finalized deals. Use the URL path "/v1/buyers/{accountId}/finalizedDeals" to list finalized deals for the current buyer and its clients. Bidders can use the URL path "/v1/bidders/{accountId}/finalizedDeals" to list finalized deals for the bidder, its buyers and all their clients.
		/// Authorizedbuyersmarketplace_buyers_finalizedDeals_list v1/{parent}/finalizedDeals
		/// </summary>
		/// <param name="parent">Required. The buyer to list the finalized deals for, in the format: `buyers/{accountId}`. When used to list finalized deals for a bidder, its buyers and clients, in the format `bidders/{accountId}`.</param>
		/// <param name="filter">Optional query string using the [Cloud API list filtering syntax](https://developers.google.com/authorized-buyers/apis/guides/list-filters) Supported columns for filtering are: * deal.displayName * deal.dealType * deal.createTime * deal.updateTime * deal.flightStartTime * deal.flightEndTime * dealServingStatus</param>
		/// <param name="orderBy">An optional query string to sort finalized deals using the [Cloud API sorting syntax](https://cloud.google.com/apis/design/design_patterns#sorting_order). If no sort order is specified, results will be returned in an arbitrary order. Supported columns for sorting are: * deal.displayName * deal.createTime * deal.updateTime * deal.flightStartTime * deal.flightEndTime * rtbMetrics.bidRequests7Days * rtbMetrics.bids7Days * rtbMetrics.adImpressions7Days * rtbMetrics.bidRate7Days * rtbMetrics.filteredBidRate7Days * rtbMetrics.mustBidRateCurrentMonth Example: 'deal.displayName, deal.updateTime desc'</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If requested more than 500, the server will return 500 results per page. If unspecified, the server will pick a default page size of 100.</param>
		/// <param name="pageToken">The page token as returned from ListFinalizedDealsResponse.</param>
		/// <returns>Successful response</returns>
		public async Task<ListFinalizedDealsResponse> Authorizedbuyersmarketplace_buyers_finalizedDeals_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/finalizedDeals&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFinalizedDealsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists proposals. A filter expression using [Cloud API list filtering syntax](https://developers.google.com/authorized-buyers/apis/guides/list-filters) may be specified to filter the results.
		/// Authorizedbuyersmarketplace_buyers_proposals_list v1/{parent}/proposals
		/// </summary>
		/// <param name="parent">Required. Parent that owns the collection of proposals Format: `buyers/{accountId}`</param>
		/// <param name="filter">Optional query string using the [Cloud API list filtering syntax](https://developers.google.com/authorized-buyers/apis/guides/list-filters) Supported columns for filtering are: * displayName * dealType * updateTime * state</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will put a size of 500.</param>
		/// <param name="pageToken">The page token as returned from ListProposalsResponse.</param>
		/// <returns>Successful response</returns>
		public async Task<ListProposalsResponse> Authorizedbuyersmarketplace_buyers_proposals_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/proposals&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProposalsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists publisher profiles. The returned publisher profiles aren't in any defined order. The order of the results might change. A new publisher profile can appear in any place in the list of returned results.
		/// Authorizedbuyersmarketplace_buyers_publisherProfiles_list v1/{parent}/publisherProfiles
		/// </summary>
		/// <param name="parent">Required. Parent that owns the collection of publisher profiles Format: `buyers/{buyerId}`</param>
		/// <param name="filter">Optional query string using the [Cloud API list filtering] (https://developers.google.com/authorized-buyers/apis/guides/list-filters) syntax.</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If requested more than 500, the server will return 500 results per page. If unspecified, the server will pick a default page size of 100.</param>
		/// <param name="pageToken">The page token as returned from a previous ListPublisherProfilesResponse.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPublisherProfilesResponse> Authorizedbuyersmarketplace_buyers_publisherProfiles_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/publisherProfiles&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPublisherProfilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all client users for a specified client.
		/// Authorizedbuyersmarketplace_buyers_clients_users_list v1/{parent}/users
		/// </summary>
		/// <param name="parent">Required. The name of the client. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}`</param>
		/// <param name="pageSize">Requested page size. If left blank, a default page size of 500 will be applied.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListClientUsersResponse.nextPageToken returned from the previous call to the list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListClientUsersResponse> Authorizedbuyersmarketplace_buyers_clients_users_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/users&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListClientUsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new client user in "INVITED" state. An email invitation will be sent to the new user, once accepted the user will become active.
		/// Authorizedbuyersmarketplace_buyers_clients_users_create v1/{parent}/users
		/// </summary>
		/// <param name="parent">Required. The name of the client. Format: `buyers/{accountId}/clients/{clientAccountId}`</param>
		/// <returns>Successful response</returns>
		public async Task<ClientUser> Authorizedbuyersmarketplace_buyers_clients_users_createAsync(string parent, ClientUser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClientUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a note for this proposal and sends to the seller.
		/// Authorizedbuyersmarketplace_buyers_proposals_addNote v1/{proposal}:addNote
		/// </summary>
		/// <param name="proposal">Name of the proposal. Format: `buyers/{accountId}/proposals/{proposalId}`</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Authorizedbuyersmarketplace_buyers_proposals_addNoteAsync(string proposal, AddNoteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (proposal==null? "" : System.Uri.EscapeDataString(proposal))+":addNote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Proposal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized. If the proposal has not been finalized before, calling this method will set the Proposal.state to `TERMINATED` and increment the Proposal.proposal_revision. If the proposal has been finalized before and is under renegotiation now, calling this method will reset the Proposal.state to `FINALIZED` and increment the Proposal.proposal_revision. This method does not support private auction proposals whose Proposal.deal_type is 'PRIVATE_AUCTION'.
		/// Authorizedbuyersmarketplace_buyers_proposals_cancelNegotiation v1/{proposal}:cancelNegotiation
		/// </summary>
		/// <param name="proposal">Name of the proposal. Format: `buyers/{accountId}/proposals/{proposalId}`</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Authorizedbuyersmarketplace_buyers_proposals_cancelNegotiationAsync(string proposal, CancelNegotiationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (proposal==null? "" : System.Uri.EscapeDataString(proposal))+":cancelNegotiation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Proposal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
