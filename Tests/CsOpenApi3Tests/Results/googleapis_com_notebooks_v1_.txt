//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcceleratorConfig
	{
		
		/// <summary>
		/// Count of cores of this accelerator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coreCount")]
		public string CoreCount { get; set; }
		
		/// <summary>
		/// Type of this accelerator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AcceleratorConfigType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AcceleratorConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCELERATOR_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_K80 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_P100 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_V100 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_P4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_T4 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_A100 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_L4 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_T4_VWS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_P100_VWS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_P4_VWS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TPU_V2 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TPU_V3 = 12,
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Definition of the boot image used by the Runtime. Used to facilitate runtime upgradeability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BootImage
	{
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// Definition of a container image for starting a notebook instance with the environment installed in a container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerImage
	{
		
		/// <summary>
		/// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// The tag of the container image. If not specified, this defaults to the latest tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Parameters used in Dataproc JobType executions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataprocParameters
	{
		
		/// <summary>
		/// URI for cluster used to run Dataproc execution. Format: `projects/{PROJECT_ID}/regions/{REGION}/clusters/{CLUSTER_NAME}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public string Cluster { get; set; }
	}
	
	/// <summary>
	/// Request for creating a notebook instance diagnostic file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DiagnoseInstanceRequest
	{
		
		/// <summary>
		/// Defines flags that are used to run the diagnostic tool
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diagnosticConfig")]
		public DiagnosticConfig DiagnosticConfig { get; set; }
		
		/// <summary>
		/// Optional. Maxmium amount of time in minutes before the operation times out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutMinutes")]
		public System.Nullable<System.Int32> TimeoutMinutes { get; set; }
	}
	
	/// <summary>
	/// Defines flags that are used to run the diagnostic tool
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DiagnosticConfig
	{
		
		/// <summary>
		/// Optional. Enables flag to copy all `/home/jupyter` folder contents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyHomeFilesFlagEnabled")]
		public System.Nullable<System.Boolean> CopyHomeFilesFlagEnabled { get; set; }
		
		/// <summary>
		/// Required. User Cloud Storage bucket location (REQUIRED). Must be formatted with path prefix (`gs://$GCS_BUCKET`). Permissions: User Managed Notebooks: - storage.buckets.writer: Must be given to the project's service account attached to VM. Google Managed Notebooks: - storage.buckets.writer: Must be given to the project's service account or user credentials attached to VM depending on authentication mode. Cloud Storage bucket Log file will be written to `gs://$GCS_BUCKET/$RELATIVE_PATH/$VM_DATE_$TIME.tar.gz`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsBucket")]
		public string GcsBucket { get; set; }
		
		/// <summary>
		/// Optional. Enables flag to capture packets from the instance for 30 seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packetCaptureFlagEnabled")]
		public System.Nullable<System.Boolean> PacketCaptureFlagEnabled { get; set; }
		
		/// <summary>
		/// Optional. Defines the relative storage path in the Cloud Storage bucket where the diagnostic logs will be written: Default path will be the root directory of the Cloud Storage bucket (`gs://$GCS_BUCKET/$DATE_$TIME.tar.gz`) Example of full path where Log file will be written: `gs://$GCS_BUCKET/$RELATIVE_PATH/`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
		
		/// <summary>
		/// Optional. Enables flag to repair service for instance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repairFlagEnabled")]
		public System.Nullable<System.Boolean> RepairFlagEnabled { get; set; }
	}
	
	/// <summary>
	/// Request for creating a notebook instance diagnostic file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DiagnoseRuntimeRequest
	{
		
		/// <summary>
		/// Defines flags that are used to run the diagnostic tool
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diagnosticConfig")]
		public DiagnosticConfig DiagnosticConfig { get; set; }
		
		/// <summary>
		/// Optional. Maxmium amount of time in minutes before the operation times out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutMinutes")]
		public System.Nullable<System.Int32> TimeoutMinutes { get; set; }
	}
	
	/// <summary>
	/// An instance-attached disk resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Disk
	{
		
		/// <summary>
		/// Indicates whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDelete")]
		public System.Nullable<System.Boolean> AutoDelete { get; set; }
		
		/// <summary>
		/// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boot")]
		public System.Nullable<System.Boolean> Boot { get; set; }
		
		/// <summary>
		/// Indicates a unique device name of your choice that is reflected into the `/dev/disk/by-id/google-*` tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine.This field is only applicable for persistent disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Indicates the size of the disk in base-2 GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public string DiskSizeGb { get; set; }
		
		/// <summary>
		/// Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestOsFeatures")]
		public GuestOsFeature[] GuestOsFeatures { get; set; }
		
		/// <summary>
		/// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		/// <summary>
		/// Indicates the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interface")]
		public string Interface { get; set; }
		
		/// <summary>
		/// Type of the resource. Always compute#attachedDisk for attached disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A list of publicly visible licenses. Reserved for Google's use. A License represents billing and aggregate usage data for public and marketplace images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public string[] Licenses { get; set; }
		
		/// <summary>
		/// The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		/// <summary>
		/// Indicates a valid partial or full URL to an existing Persistent Disk resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Indicates the type of the disk, either `SCRATCH` or `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Guest OS features for boot disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GuestOsFeature
	{
		
		/// <summary>
		/// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options. Valid values: * `FEATURE_TYPE_UNSPECIFIED` * `MULTI_IP_SUBNET` * `SECURE_BOOT` * `UEFI_COMPATIBLE` * `VIRTIO_SCSI_MULTIQUEUE` * `WINDOWS`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Represents a custom encryption key configuration that can be applied to a resource. This will encrypt all disks in Virtual Machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionConfig
	{
		
		/// <summary>
		/// The Cloud KMS resource identifier of the customer-managed encryption key used to protect a resource, such as a disks. It has the following format: `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		public string KmsKey { get; set; }
	}
	
	/// <summary>
	/// Definition of a software environment that is used to start a notebook instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Environment
	{
		
		/// <summary>
		/// Definition of a container image for starting a notebook instance with the environment installed in a container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImage")]
		public ContainerImage ContainerImage { get; set; }
		
		/// <summary>
		/// Output only. The time at which this environment was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// A brief description of this environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Display name of this environment for the UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Name of this environment. Format: `projects/{project_id}/locations/{location}/environments/{environment_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path. Example: `"gs://path-to-file/file-name"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postStartupScript")]
		public string PostStartupScript { get; set; }
		
		/// <summary>
		/// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmImage")]
		public VmImage VmImage { get; set; }
	}
	
	/// <summary>
	/// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VmImage
	{
		
		/// <summary>
		/// Use this VM image family to find the image; the newest image in this family will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageFamily")]
		public string ImageFamily { get; set; }
		
		/// <summary>
		/// Use VM image name to find the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageName")]
		public string ImageName { get; set; }
		
		/// <summary>
		/// Required. The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
	}
	
	/// <summary>
	/// The definition of an Event for a managed / semi-managed notebook instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event
	{
		
		/// <summary>
		/// Optional. Event details. This field is used to pass event information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public System.Collections.Generic.Dictionary<string, string> Details { get; set; }
		
		/// <summary>
		/// Event report time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
		
		/// <summary>
		/// Event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EventType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARTBEAT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTENANCE = 4,
	}
	
	/// <summary>
	/// The definition of a single executed notebook.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Execution
	{
		
		/// <summary>
		/// Output only. Time the Execution was instantiated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// A brief description of this execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The description a notebook execution workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionTemplate")]
		public ExecutionTemplate ExecutionTemplate { get; set; }
		
		/// <summary>
		/// Output only. The URI of the external job used to execute the notebook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobUri")]
		public string JobUri { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the execute. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output notebook file generated by this execution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputNotebookFile")]
		public string OutputNotebookFile { get; set; }
		
		/// <summary>
		/// Output only. State of the underlying AI Platform job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ExecutionState> State { get; set; }
		
		/// <summary>
		/// Output only. Time the Execution was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// The description a notebook execution workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionTemplate
	{
		
		/// <summary>
		/// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus) to find a valid combination. TPUs are not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorConfig")]
		public SchedulerAcceleratorConfig AcceleratorConfig { get; set; }
		
		/// <summary>
		/// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImageUri")]
		public string ContainerImageUri { get; set; }
		
		/// <summary>
		/// Parameters used in Dataproc JobType executions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataprocParameters")]
		public DataprocParameters DataprocParameters { get; set; }
		
		/// <summary>
		/// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: `gs://{bucket_name}/{folder}/{notebook_file_name}` Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputNotebookFile")]
		public string InputNotebookFile { get; set; }
		
		/// <summary>
		/// The type of Job to be used on this execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobType")]
		public System.Nullable<ExecutionTemplateJobType> JobType { get; set; }
		
		/// <summary>
		/// Name of the kernel spec to use. This must be specified if the kernel spec name on the execution target does not match the name in the input notebook file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kernelSpec")]
		public string KernelSpec { get; set; }
		
		/// <summary>
		/// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterType")]
		public string MasterType { get; set; }
		
		/// <summary>
		/// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: `gs://{bucket_name}/{folder}` Ex: `gs://notebook_user/scheduled_notebooks`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputNotebookFolder")]
		public string OutputNotebookFolder { get; set; }
		
		/// <summary>
		/// Parameters used within the 'input_notebook_file' notebook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paramsYamlFile")]
		public string ParamsYamlFile { get; set; }
		
		/// <summary>
		/// Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleTier")]
		public System.Nullable<ExecutionTemplateScaleTier> ScaleTier { get; set; }
		
		/// <summary>
		/// The email address of a service account to use when running the execution. You must have the `iam.serviceAccounts.actAs` permission for the specified service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// The name of a Vertex AI [Tensorboard] resource to which this execution will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tensorboard")]
		public string Tensorboard { get; set; }
		
		/// <summary>
		/// Parameters used in Vertex AI JobType executions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vertexAiParameters")]
		public VertexAIParameters VertexAiParameters { get; set; }
	}
	
	/// <summary>
	/// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus) to find a valid combination. TPUs are not supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchedulerAcceleratorConfig
	{
		
		/// <summary>
		/// Count of cores of this accelerator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coreCount")]
		public string CoreCount { get; set; }
		
		/// <summary>
		/// Type of this accelerator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SchedulerAcceleratorConfigType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SchedulerAcceleratorConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULER_ACCELERATOR_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_K80 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_P100 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_V100 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_P4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_T4 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_A100 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TPU_V2 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TPU_V3 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExecutionTemplateJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERTEX_AI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATAPROC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExecutionTemplateScaleTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCALE_TIER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREMIUM_1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_GPU = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_TPU = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 6,
	}
	
	/// <summary>
	/// Parameters used in Vertex AI JobType executions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VertexAIParameters
	{
		
		/// <summary>
		/// Environment variables. At most 100 environment variables can be specified and unique. Example: `GCP_BUCKET=gs://my-bucket/samples/`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public System.Collections.Generic.Dictionary<string, string> Env { get; set; }
		
		/// <summary>
		/// The full name of the Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is a network name. Private services access must already be configured for the network. If left unspecified, the job is not peered with any network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExecutionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 9,
	}
	
	/// <summary>
	/// Response for checking if a notebook instance is healthy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetInstanceHealthResponse
	{
		
		/// <summary>
		/// Output only. Additional information about instance health. Example: healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status": "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthInfo")]
		public System.Collections.Generic.Dictionary<string, string> HealthInfo { get; set; }
		
		/// <summary>
		/// Output only. Runtime health_state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthState")]
		public System.Nullable<GetInstanceHealthResponseHealthState> HealthState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetInstanceHealthResponseHealthState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTH_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_NOT_INSTALLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_NOT_RUNNING = 4,
	}
	
	/// <summary>
	/// The definition of a notebook instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Instance
	{
		
		/// <summary>
		/// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorConfig")]
		public AcceleratorConfig AcceleratorConfig { get; set; }
		
		/// <summary>
		/// Input only. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB. If not specified, this defaults to 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDiskSizeGb")]
		public string BootDiskSizeGb { get; set; }
		
		/// <summary>
		/// Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDiskType")]
		public System.Nullable<InstanceBootDiskType> BootDiskType { get; set; }
		
		/// <summary>
		/// Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canIpForward")]
		public System.Nullable<System.Boolean> CanIpForward { get; set; }
		
		/// <summary>
		/// Definition of a container image for starting a notebook instance with the environment installed in a container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImage")]
		public ContainerImage ContainerImage { get; set; }
		
		/// <summary>
		/// Output only. Instance creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. Email address of entity that sent original CreateInstance request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customGpuDriverPath")]
		public string CustomGpuDriverPath { get; set; }
		
		/// <summary>
		/// Input only. The size of the data disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). You can choose the size of the data disk based on how big your notebooks and data are. If not specified, this defaults to 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskSizeGb")]
		public string DataDiskSizeGb { get; set; }
		
		/// <summary>
		/// Input only. The type of the data disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskType")]
		public InstanceBootDiskType DataDiskType { get; set; }
		
		/// <summary>
		/// Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskEncryption")]
		public System.Nullable<InstanceDiskEncryption> DiskEncryption { get; set; }
		
		/// <summary>
		/// Output only. Attached disks to notebook instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public Disk[] Disks { get; set; }
		
		/// <summary>
		/// Whether the end user authorizes Google Cloud to install GPU driver on this instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installGpuDriver")]
		public System.Nullable<System.Boolean> InstallGpuDriver { get; set; }
		
		/// <summary>
		/// InstanceMigrationEligibility represents the feasibility information of a migration from UmN to WbI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceMigrationEligibility")]
		public InstanceMigrationEligibility InstanceMigrationEligibility { get; set; }
		
		/// <summary>
		/// Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceOwners")]
		public string[] InstanceOwners { get; set; }
		
		/// <summary>
		/// Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about [using your own encryption keys](/kms/docs/quickstart).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		public string KmsKey { get; set; }
		
		/// <summary>
		/// Labels to apply to this instance. These can be later modified by the setLabels method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. The [Compute Engine machine type](https://cloud.google.com/compute/docs/machine-types) of this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// Custom metadata to apply to this instance. For example, to specify a Cloud Storage bucket for automatic backup, you can use the `gcs-data-bucket` metadata tag. Format: `"--metadata=gcs-data-bucket=``BUCKET''"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Output only. Bool indicating whether this notebook has been migrated to a Workbench Instance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migrated")]
		public System.Nullable<System.Boolean> Migrated { get; set; }
		
		/// <summary>
		/// Output only. The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the VPC that this instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nicType")]
		public System.Nullable<InstanceNicType> NicType { get; set; }
		
		/// <summary>
		/// If true, the notebook instance will not register with the proxy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noProxyAccess")]
		public System.Nullable<System.Boolean> NoProxyAccess { get; set; }
		
		/// <summary>
		/// If true, no external IP will be assigned to this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noPublicIp")]
		public System.Nullable<System.Boolean> NoPublicIp { get; set; }
		
		/// <summary>
		/// Input only. If true, the data disk will not be auto deleted when deleting the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noRemoveDataDisk")]
		public System.Nullable<System.Boolean> NoRemoveDataDisk { get; set; }
		
		/// <summary>
		/// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postStartupScript")]
		public string PostStartupScript { get; set; }
		
		/// <summary>
		/// Output only. The proxy endpoint that is used to access the Jupyter notebook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxyUri")]
		public string ProxyUri { get; set; }
		
		/// <summary>
		/// Reservation Affinity for consuming Zonal reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservationAffinity")]
		public ReservationAffinity ReservationAffinity { get; set; }
		
		/// <summary>
		/// The service account on this instance, giving access to other Google Cloud services. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// Optional. The URIs of service account scopes to be included in Compute Engine instances. If not specified, the following [scopes](https://cloud.google.com/compute/docs/access/service-accounts#accesscopesiam) are defined: - https://www.googleapis.com/auth/cloud-platform - https://www.googleapis.com/auth/userinfo.email If not using default scopes, you need at least: https://www.googleapis.com/auth/compute
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountScopes")]
		public string[] ServiceAccountScopes { get; set; }
		
		/// <summary>
		/// A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shieldedInstanceConfig")]
		public ShieldedInstanceConfig ShieldedInstanceConfig { get; set; }
		
		/// <summary>
		/// Output only. The state of this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<InstanceState> State { get; set; }
		
		/// <summary>
		/// The name of the subnet that this instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public string Subnet { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Output only. Instance update time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// The upgrade history of this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeHistory")]
		public UpgradeHistoryEntry[] UpgradeHistory { get; set; }
		
		/// <summary>
		/// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmImage")]
		public VmImage VmImage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceBootDiskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISK_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PD_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PD_SSD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PD_BALANCED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PD_EXTREME = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceDiskEncryption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISK_ENCRYPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GMEK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CMEK = 2,
	}
	
	/// <summary>
	/// InstanceMigrationEligibility represents the feasibility information of a migration from UmN to WbI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceMigrationEligibility
	{
		
		/// <summary>
		/// Output only. Certain configurations make the UmN ineligible for an automatic migration. A manual migration is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string[] Errors { get; set; }
		
		/// <summary>
		/// Output only. Certain configurations will be defaulted during the migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceNicType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_NIC_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTIO_NET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GVNIC = 2,
	}
	
	/// <summary>
	/// Reservation Affinity for consuming Zonal reservation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReservationAffinity
	{
		
		/// <summary>
		/// Optional. Type of reservation to consume
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumeReservationType")]
		public System.Nullable<ReservationAffinityConsumeReservationType> ConsumeReservationType { get; set; }
		
		/// <summary>
		/// Optional. Corresponds to the label key of reservation resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Optional. Corresponds to the label values of reservation resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReservationAffinityConsumeReservationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_RESERVATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY_RESERVATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIC_RESERVATION = 3,
	}
	
	/// <summary>
	/// A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShieldedInstanceConfig
	{
		
		/// <summary>
		/// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableIntegrityMonitoring")]
		public System.Nullable<System.Boolean> EnableIntegrityMonitoring { get; set; }
		
		/// <summary>
		/// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSecureBoot")]
		public System.Nullable<System.Boolean> EnableSecureBoot { get; set; }
		
		/// <summary>
		/// Defines whether the instance has the vTPM enabled. Enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableVtpm")]
		public System.Nullable<System.Boolean> EnableVtpm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPGRADING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDING = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 11,
	}
	
	/// <summary>
	/// The entry of VM image upgrade history.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpgradeHistoryEntry
	{
		
		/// <summary>
		/// Action. Rolloback or Upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<UpgradeHistoryEntryAction> Action { get; set; }
		
		/// <summary>
		/// The container image before this instance upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImage")]
		public string ContainerImage { get; set; }
		
		/// <summary>
		/// The time that this instance upgrade history entry is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The framework of this notebook instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public string Framework { get; set; }
		
		/// <summary>
		/// The snapshot of the boot disk of this notebook instance before upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshot")]
		public string Snapshot { get; set; }
		
		/// <summary>
		/// The state of this instance upgrade history entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<UpgradeHistoryEntryState> State { get; set; }
		
		/// <summary>
		/// Target VM Image. Format: `ainotebooks-vm/project/image-name/name`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetImage")]
		public string TargetImage { get; set; }
		
		/// <summary>
		/// Target VM Version, like m63.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetVersion")]
		public string TargetVersion { get; set; }
		
		/// <summary>
		/// The version of the notebook instance before this upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// The VM image before this instance upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmImage")]
		public string VmImage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpgradeHistoryEntryAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPGRADE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLLBACK = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpgradeHistoryEntryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// Notebook instance configurations that can be updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceConfig
	{
		
		/// <summary>
		/// Verifies core internal services are running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableHealthMonitoring")]
		public System.Nullable<System.Boolean> EnableHealthMonitoring { get; set; }
		
		/// <summary>
		/// Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notebookUpgradeSchedule")]
		public string NotebookUpgradeSchedule { get; set; }
	}
	
	/// <summary>
	/// Response for checking if a notebook instance is upgradeable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IsInstanceUpgradeableResponse
	{
		
		/// <summary>
		/// The new image self link this instance will be upgraded to if calling the upgrade endpoint. This field will only be populated if field upgradeable is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeImage")]
		public string UpgradeImage { get; set; }
		
		/// <summary>
		/// Additional information about upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeInfo")]
		public string UpgradeInfo { get; set; }
		
		/// <summary>
		/// The version this instance will be upgraded to if calling the upgrade endpoint. This field will only be populated if field upgradeable is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeVersion")]
		public string UpgradeVersion { get; set; }
		
		/// <summary>
		/// If an instance is upgradeable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeable")]
		public System.Nullable<System.Boolean> Upgradeable { get; set; }
	}
	
	/// <summary>
	/// Response for listing environments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEnvironmentsResponse
	{
		
		/// <summary>
		/// A list of returned environments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public Environment[] Environments { get; set; }
		
		/// <summary>
		/// A page token that can be used to continue listing from the last result in the next list call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response for listing scheduled notebook executions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExecutionsResponse
	{
		
		/// <summary>
		/// A list of returned instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executions")]
		public Execution[] Executions { get; set; }
		
		/// <summary>
		/// Page token that can be used to continue listing from the last result in the next list call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Executions IDs that could not be reached. For example: ['projects/{project_id}/location/{location}/executions/imagenet_test1', 'projects/{project_id}/location/{location}/executions/classifier_train1']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response for listing notebook instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInstancesResponse
	{
		
		/// <summary>
		/// A list of returned instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public Instance[] Instances { get; set; }
		
		/// <summary>
		/// Page token that can be used to continue listing from the last result in the next list call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached. For example, `['us-west1-a', 'us-central1-b']`. A ListInstancesResponse will only contain either instances or unreachables,
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response for listing Managed Notebook Runtimes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRuntimesResponse
	{
		
		/// <summary>
		/// Page token that can be used to continue listing from the last result in the next list call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of returned Runtimes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimes")]
		public Runtime[] Runtimes { get; set; }
		
		/// <summary>
		/// Locations that could not be reached. For example, `['us-west1', 'us-central1']`. A ListRuntimesResponse will only contain either runtimes or unreachables,
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The definition of a Runtime for a managed notebook instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Runtime
	{
		
		/// <summary>
		/// Specifies the login configuration for Runtime
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessConfig")]
		public RuntimeAccessConfig AccessConfig { get; set; }
		
		/// <summary>
		/// Output only. Runtime creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. Runtime health_state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthState")]
		public GetInstanceHealthResponseHealthState HealthState { get; set; }
		
		/// <summary>
		/// Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Contains runtime daemon metrics, such as OS and kernels and sessions stats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public RuntimeMetrics Metrics { get; set; }
		
		/// <summary>
		/// Output only. Bool indicating whether this notebook has been migrated to a Workbench Instance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migrated")]
		public System.Nullable<System.Boolean> Migrated { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtimeId}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// RuntimeMigrationEligibility represents the feasibility information of a migration from GmN to WbI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeMigrationEligibility")]
		public RuntimeMigrationEligibility RuntimeMigrationEligibility { get; set; }
		
		/// <summary>
		/// Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareConfig")]
		public RuntimeSoftwareConfig SoftwareConfig { get; set; }
		
		/// <summary>
		/// Output only. Runtime state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<RuntimeState> State { get; set; }
		
		/// <summary>
		/// Output only. Runtime update time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Runtime using Virtual Machine for computing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachine")]
		public VirtualMachine VirtualMachine { get; set; }
	}
	
	/// <summary>
	/// Specifies the login configuration for Runtime
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeAccessConfig
	{
		
		/// <summary>
		/// The type of access mode this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessType")]
		public System.Nullable<RuntimeAccessConfigAccessType> AccessType { get; set; }
		
		/// <summary>
		/// Output only. The proxy endpoint that is used to access the runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxyUri")]
		public string ProxyUri { get; set; }
		
		/// <summary>
		/// The owner of this runtime after creation. Format: `alias@example.com` Currently supports one owner only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeOwner")]
		public string RuntimeOwner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RuntimeAccessConfigAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNTIME_ACCESS_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_USER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_ACCOUNT = 2,
	}
	
	/// <summary>
	/// Contains runtime daemon metrics, such as OS and kernels and sessions stats.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeMetrics
	{
		
		/// <summary>
		/// Output only. The system metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemMetrics")]
		public System.Collections.Generic.Dictionary<string, string> SystemMetrics { get; set; }
	}
	
	/// <summary>
	/// RuntimeMigrationEligibility represents the feasibility information of a migration from GmN to WbI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeMigrationEligibility
	{
		
		/// <summary>
		/// Output only. Certain configurations make the GmN ineligible for an automatic migration. A manual migration is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string[] Errors { get; set; }
		
		/// <summary>
		/// Output only. Certain configurations will be defaulted during the migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeSoftwareConfig
	{
		
		/// <summary>
		/// Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customGpuDriverPath")]
		public string CustomGpuDriverPath { get; set; }
		
		/// <summary>
		/// Bool indicating whether JupyterLab terminal will be available or not. Default: False
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableTerminal")]
		public System.Nullable<System.Boolean> DisableTerminal { get; set; }
		
		/// <summary>
		/// Verifies core internal services are running. Default: True
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableHealthMonitoring")]
		public System.Nullable<System.Boolean> EnableHealthMonitoring { get; set; }
		
		/// <summary>
		/// Runtime will automatically shutdown after idle_shutdown_time. Default: True
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleShutdown")]
		public System.Nullable<System.Boolean> IdleShutdown { get; set; }
		
		/// <summary>
		/// Time in minutes to wait before shutting down runtime. Default: 180 minutes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleShutdownTimeout")]
		public System.Nullable<System.Int32> IdleShutdownTimeout { get; set; }
		
		/// <summary>
		/// Install Nvidia Driver automatically. Default: True
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installGpuDriver")]
		public System.Nullable<System.Boolean> InstallGpuDriver { get; set; }
		
		/// <summary>
		/// Optional. Use a list of container images to use as Kernels in the notebook instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kernels")]
		public ContainerImage[] Kernels { get; set; }
		
		/// <summary>
		/// Bool indicating whether mixer client should be disabled. Default: False
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mixerDisabled")]
		public System.Nullable<System.Boolean> MixerDisabled { get; set; }
		
		/// <summary>
		/// Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notebookUpgradeSchedule")]
		public string NotebookUpgradeSchedule { get; set; }
		
		/// <summary>
		/// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postStartupScript")]
		public string PostStartupScript { get; set; }
		
		/// <summary>
		/// Behavior for the post startup script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postStartupScriptBehavior")]
		public System.Nullable<RuntimeSoftwareConfigPostStartupScriptBehavior> PostStartupScriptBehavior { get; set; }
		
		/// <summary>
		/// Output only. Bool indicating whether an newer image is available in an image family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeable")]
		public System.Nullable<System.Boolean> Upgradeable { get; set; }
		
		/// <summary>
		/// Output only. version of boot image such as M100, from release label of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RuntimeSoftwareConfigPostStartupScriptBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN_EVERY_START = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWNLOAD_AND_RUN_EVERY_START = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RuntimeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPGRADING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 8,
	}
	
	/// <summary>
	/// Runtime using Virtual Machine for computing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VirtualMachine
	{
		
		/// <summary>
		/// Output only. The unique identifier of the Managed Compute Engine instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Output only. The user-friendly name of the Managed Compute Engine instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		/// <summary>
		/// The config settings for virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineConfig")]
		public VirtualMachineConfig VirtualMachineConfig { get; set; }
	}
	
	/// <summary>
	/// The config settings for virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VirtualMachineConfig
	{
		
		/// <summary>
		/// Definition of the types of hardware accelerators that can be used. See [Compute Engine AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes). Examples: * `nvidia-tesla-k80` * `nvidia-tesla-p100` * `nvidia-tesla-v100` * `nvidia-tesla-p4` * `nvidia-tesla-t4` * `nvidia-tesla-a100`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorConfig")]
		public RuntimeAcceleratorConfig AcceleratorConfig { get; set; }
		
		/// <summary>
		/// Definition of the boot image used by the Runtime. Used to facilitate runtime upgradeability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootImage")]
		public BootImage BootImage { get; set; }
		
		/// <summary>
		/// Optional. Use a list of container images to use as Kernels in the notebook instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImages")]
		public ContainerImage[] ContainerImages { get; set; }
		
		/// <summary>
		/// A Local attached disk resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisk")]
		public LocalDisk DataDisk { get; set; }
		
		/// <summary>
		/// Represents a custom encryption key configuration that can be applied to a resource. This will encrypt all disks in Virtual Machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// Output only. The Compute Engine guest attributes. (see [Project and instance guest attributes](https://cloud.google.com/compute/docs/storing-retrieving-metadata#guest_attributes)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestAttributes")]
		public System.Collections.Generic.Dictionary<string, string> GuestAttributes { get; set; }
		
		/// <summary>
		/// Optional. If true, runtime will only have internal IP addresses. By default, runtimes are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each vm. This `internal_ip_only` restriction can only be enabled for subnetwork enabled networks, and all dependencies must be configured to be accessible without external IP addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalIpOnly")]
		public System.Nullable<System.Boolean> InternalIpOnly { get; set; }
		
		/// <summary>
		/// Optional. The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. The Compute Engine machine type used for runtimes. Short name is valid. Examples: * `n1-standard-2` * `e2-standard-8`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine metadata entries to add to virtual machine. (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork. If neither `network` nor `subnet` is specified, the "default" network of the project is used, if it exists. A full URL or partial URI. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default` * `projects/[project_id]/global/networks/default` Runtimes are managed resources inside Google Infrastructure. Runtimes support the following network configurations: * Google Managed Network (Network & subnet are empty) * Consumer Project VPC (network & subnet are required). Requires configuring Private Service Access. * Shared VPC (network & subnet are required). Requires configuring Private Service Access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nicType")]
		public InstanceNicType NicType { get; set; }
		
		/// <summary>
		/// Optional. Reserved IP Range name is used for VPC Peering. The subnetwork allocation will use the range *name* if it's assigned. Example: managed-notebooks-range-c PEERING_RANGE_NAME_3=managed-notebooks-range-c gcloud compute addresses create $PEERING_RANGE_NAME_3 \ --global \ --prefix-length=24 \ --description="Google Cloud Managed Notebooks Range 24 c" \ --network=$NETWORK \ --addresses=192.168.0.0 \ --purpose=VPC_PEERING Field value will be: `managed-notebooks-range-c`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedIpRange")]
		public string ReservedIpRange { get; set; }
		
		/// <summary>
		/// A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shieldedInstanceConfig")]
		public RuntimeShieldedInstanceConfig ShieldedInstanceConfig { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network. A full URL or partial URI are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0` * `projects/[project_id]/regions/us-east1/subnetworks/sub0`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public string Subnet { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Output only. The zone where the virtual machine is located. If using regional request, the notebooks service will pick a location in the corresponding runtime region. On a get request, zone will always be present. Example: * `us-central1-b`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// Definition of the types of hardware accelerators that can be used. See [Compute Engine AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes). Examples: * `nvidia-tesla-k80` * `nvidia-tesla-p100` * `nvidia-tesla-v100` * `nvidia-tesla-p4` * `nvidia-tesla-t4` * `nvidia-tesla-a100`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeAcceleratorConfig
	{
		
		/// <summary>
		/// Count of cores of this accelerator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coreCount")]
		public string CoreCount { get; set; }
		
		/// <summary>
		/// Accelerator model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<RuntimeAcceleratorConfigType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RuntimeAcceleratorConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCELERATOR_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_K80 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_P100 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_V100 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_P4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_T4 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_A100 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_L4 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TPU_V2 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TPU_V3 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_T4_VWS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_P100_VWS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA_TESLA_P4_VWS = 12,
	}
	
	/// <summary>
	/// A Local attached disk resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalDisk
	{
		
		/// <summary>
		/// Optional. Output only. Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDelete")]
		public System.Nullable<System.Boolean> AutoDelete { get; set; }
		
		/// <summary>
		/// Optional. Output only. Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boot")]
		public System.Nullable<System.Boolean> Boot { get; set; }
		
		/// <summary>
		/// Optional. Output only. Specifies a unique device name of your choice that is reflected into the `/dev/disk/by-id/google-*` tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Output only. Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestOsFeatures")]
		public RuntimeGuestOsFeature[] GuestOsFeatures { get; set; }
		
		/// <summary>
		/// Output only. A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new runtime. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initializeParams")]
		public LocalDiskInitializeParams InitializeParams { get; set; }
		
		/// <summary>
		/// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interface")]
		public string Interface { get; set; }
		
		/// <summary>
		/// Output only. Type of the resource. Always compute#attachedDisk for attached disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Output only. Any valid publicly visible licenses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public string[] Licenses { get; set; }
		
		/// <summary>
		/// The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		/// <summary>
		/// Specifies a valid partial or full URL to an existing Persistent Disk resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Specifies the type of the disk, either `SCRATCH` or `PERSISTENT`. If not specified, the default is `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Optional. A list of features to enable on the guest operating system. Applicable only for bootable images. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options. Guest OS features for boot disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeGuestOsFeature
	{
		
		/// <summary>
		/// The ID of a supported feature. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options. Valid values: * `FEATURE_TYPE_UNSPECIFIED` * `MULTI_IP_SUBNET` * `SECURE_BOOT` * `UEFI_COMPATIBLE` * `VIRTIO_SCSI_MULTIQUEUE` * `WINDOWS`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new runtime. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalDiskInitializeParams
	{
		
		/// <summary>
		/// Optional. Provide this property when creating the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. Specifies the disk name. If not specified, the default is to use the name of the instance. If the disk with the instance name exists already in the given zone/region, a new name will be automatically generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskName")]
		public string DiskName { get; set; }
		
		/// <summary>
		/// Optional. Specifies the size of the disk in base-2 GB. If not specified, the disk will be the same size as the image (usually 10GB). If specified, the size must be equal to or larger than 10GB. Default 100 GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public string DiskSizeGb { get; set; }
		
		/// <summary>
		/// Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskType")]
		public InstanceBootDiskType DiskType { get; set; }
		
		/// <summary>
		/// Optional. Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
	}
	
	/// <summary>
	/// A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeShieldedInstanceConfig
	{
		
		/// <summary>
		/// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableIntegrityMonitoring")]
		public System.Nullable<System.Boolean> EnableIntegrityMonitoring { get; set; }
		
		/// <summary>
		/// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSecureBoot")]
		public System.Nullable<System.Boolean> EnableSecureBoot { get; set; }
		
		/// <summary>
		/// Defines whether the instance has the vTPM enabled. Enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableVtpm")]
		public System.Nullable<System.Boolean> EnableVtpm { get; set; }
	}
	
	/// <summary>
	/// Response for listing scheduled notebook job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSchedulesResponse
	{
		
		/// <summary>
		/// Page token that can be used to continue listing from the last result in the next list call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of returned instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedules")]
		public Schedule[] Schedules { get; set; }
		
		/// <summary>
		/// Schedules that could not be reached. For example: ['projects/{project_id}/location/{location}/schedules/monthly_digest', 'projects/{project_id}/location/{location}/schedules/weekly_sentiment']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The definition of a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Schedule
	{
		
		/// <summary>
		/// Output only. Time the schedule was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. `0 0 * * WED` = every Wednesday More examples: https://crontab.guru/examples.html
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cronSchedule")]
		public string CronSchedule { get; set; }
		
		/// <summary>
		/// A brief description of this environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens `-`, and underscores `_`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The description a notebook execution workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionTemplate")]
		public ExecutionTemplate ExecutionTemplate { get; set; }
		
		/// <summary>
		/// Output only. The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The most recent execution names triggered from this schedule and their corresponding states.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentExecutions")]
		public Execution[] RecentExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ScheduleState> State { get; set; }
		
		/// <summary>
		/// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// Output only. Time the schedule was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScheduleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 6,
	}
	
	/// <summary>
	/// Request for migrating a User-Managed Notebook to Workbench Instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MigrateInstanceRequest
	{
		
		/// <summary>
		/// Optional. Specifies the behavior of post startup script during migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postStartupScriptOption")]
		public System.Nullable<MigrateInstanceRequestPostStartupScriptOption> PostStartupScriptOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MigrateInstanceRequestPostStartupScriptOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_STARTUP_SCRIPT_OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_STARTUP_SCRIPT_OPTION_SKIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_STARTUP_SCRIPT_OPTION_RERUN = 2,
	}
	
	/// <summary>
	/// Request for migrating a Runtime to a Workbench Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MigrateRuntimeRequest
	{
		
		/// <summary>
		/// Optional. Name of the VPC that the new Instance is in. This is required if the Runtime uses google-managed network. If the Runtime uses customer-owned network, it will reuse the same VPC, and this field must be empty. Format: `projects/{project_id}/global/networks/{network_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Optional. Specifies the behavior of post startup script during migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postStartupScriptOption")]
		public MigrateInstanceRequestPostStartupScriptOption PostStartupScriptOption { get; set; }
		
		/// <summary>
		/// Optional. Idempotent request UUID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Optional. The service account to be included in the Compute Engine instance of the new Workbench Instance when the Runtime uses "single user only" mode for permission. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used. When the Runtime uses service account mode for permission, it will reuse the same service account, and this field must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// Optional. Name of the subnet that the new Instance is in. This is required if the Runtime uses google-managed network. If the Runtime uses customer-owned network, it will reuse the same subnet, and this field must be empty. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public string Subnet { get; set; }
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// API endpoint name of this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedCancellation")]
		public System.Nullable<System.Boolean> RequestedCancellation { get; set; }
		
		/// <summary>
		/// Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Request for getting a new access token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefreshRuntimeTokenInternalRequest
	{
		
		/// <summary>
		/// Required. The VM hardware token for authenticating the VM. https://cloud.google.com/compute/docs/instances/verifying-instance-identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
	}
	
	/// <summary>
	/// Response with a new access token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefreshRuntimeTokenInternalResponse
	{
		
		/// <summary>
		/// The OAuth 2.0 access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Output only. Token expiration time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
	}
	
	/// <summary>
	/// Request for registering a notebook instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterInstanceRequest
	{
		
		/// <summary>
		/// Required. User defined unique ID of this instance. The `instance_id` must be 1 to 63 characters long and contain only lowercase letters, numeric characters, and dashes. The first character must be a lowercase letter and the last character cannot be a dash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
	}
	
	/// <summary>
	/// Request for reporting a Managed Notebook Event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportInstanceEventRequest
	{
		
		/// <summary>
		/// The definition of an Event for a managed / semi-managed notebook instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public Event Event { get; set; }
		
		/// <summary>
		/// Required. The VM hardware token for authenticating the VM. https://cloud.google.com/compute/docs/instances/verifying-instance-identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
	}
	
	/// <summary>
	/// Request for notebook instances to report information to Notebooks API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportInstanceInfoRequest
	{
		
		/// <summary>
		/// The metadata reported to Notebooks API. This will be merged to the instance metadata store
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Required. The VM hardware token for authenticating the VM. https://cloud.google.com/compute/docs/instances/verifying-instance-identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
	}
	
	/// <summary>
	/// Request for reporting a Managed Notebook Event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRuntimeEventRequest
	{
		
		/// <summary>
		/// The definition of an Event for a managed / semi-managed notebook instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public Event Event { get; set; }
		
		/// <summary>
		/// Required. The VM hardware token for authenticating the VM. https://cloud.google.com/compute/docs/instances/verifying-instance-identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
	}
	
	/// <summary>
	/// Request for resetting a notebook instance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetInstanceRequest
	{
	}
	
	/// <summary>
	/// Request for resetting a Managed Notebook Runtime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetRuntimeRequest
	{
		
		/// <summary>
		/// Idempotent request UUID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Request for rollbacking a notebook instance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RollbackInstanceRequest
	{
		
		/// <summary>
		/// Required. The snapshot for rollback. Example: `projects/test-project/global/snapshots/krwlzipynril`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetSnapshot")]
		public string TargetSnapshot { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
	}
	
	/// <summary>
	/// Request for setting instance accelerator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetInstanceAcceleratorRequest
	{
		
		/// <summary>
		/// Required. Count of cores of this accelerator. Note that not all combinations of `type` and `core_count` are valid. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coreCount")]
		public string CoreCount { get; set; }
		
		/// <summary>
		/// Required. Type of this accelerator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AcceleratorConfigType Type { get; set; }
	}
	
	/// <summary>
	/// Request for setting instance labels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetInstanceLabelsRequest
	{
		
		/// <summary>
		/// Labels to apply to this instance. These can be later modified by the setLabels method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
	}
	
	/// <summary>
	/// Request for setting instance machine type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetInstanceMachineTypeRequest
	{
		
		/// <summary>
		/// Required. The [Compute Engine machine type](https://cloud.google.com/compute/docs/machine-types).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
	}
	
	/// <summary>
	/// Request for starting a notebook instance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartInstanceRequest
	{
	}
	
	/// <summary>
	/// Request for starting a Managed Notebook Runtime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartRuntimeRequest
	{
		
		/// <summary>
		/// Idempotent request UUID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Request for stopping a notebook instance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopInstanceRequest
	{
	}
	
	/// <summary>
	/// Request for stopping a Managed Notebook Runtime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopRuntimeRequest
	{
		
		/// <summary>
		/// Idempotent request UUID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Request for switching a Managed Notebook Runtime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SwitchRuntimeRequest
	{
		
		/// <summary>
		/// Definition of the types of hardware accelerators that can be used. See [Compute Engine AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes). Examples: * `nvidia-tesla-k80` * `nvidia-tesla-p100` * `nvidia-tesla-v100` * `nvidia-tesla-p4` * `nvidia-tesla-t4` * `nvidia-tesla-a100`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorConfig")]
		public RuntimeAcceleratorConfig AcceleratorConfig { get; set; }
		
		/// <summary>
		/// machine type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// Idempotent request UUID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Request for created scheduled notebooks
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TriggerScheduleRequest
	{
	}
	
	/// <summary>
	/// Request for updating instance configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateInstanceConfigRequest
	{
		
		/// <summary>
		/// Notebook instance configurations that can be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public InstanceConfig Config { get; set; }
	}
	
	/// <summary>
	/// Request for adding/changing metadata items for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateInstanceMetadataItemsRequest
	{
		
		/// <summary>
		/// Metadata items to add/update for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public System.Collections.Generic.Dictionary<string, string> Items { get; set; }
	}
	
	/// <summary>
	/// Response for adding/changing metadata items for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateInstanceMetadataItemsResponse
	{
		
		/// <summary>
		/// Map of items that were added/updated to/in the metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public System.Collections.Generic.Dictionary<string, string> Items { get; set; }
	}
	
	/// <summary>
	/// Request for updating the Shielded Instance config for a notebook instance. You can only use this method on a stopped instance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateShieldedInstanceConfigRequest
	{
		
		/// <summary>
		/// A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shieldedInstanceConfig")]
		public ShieldedInstanceConfig ShieldedInstanceConfig { get; set; }
	}
	
	/// <summary>
	/// Request for upgrading a notebook instance from within the VM
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpgradeInstanceInternalRequest
	{
		
		/// <summary>
		/// Optional. The optional UpgradeType. Setting this field will search for additional compute images to upgrade this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<UpgradeInstanceInternalRequestType> Type { get; set; }
		
		/// <summary>
		/// Required. The VM hardware token for authenticating the VM. https://cloud.google.com/compute/docs/instances/verifying-instance-identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpgradeInstanceInternalRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPGRADE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPGRADE_FRAMEWORK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPGRADE_OS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPGRADE_CUDA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPGRADE_ALL = 4,
	}
	
	/// <summary>
	/// Request for upgrading a notebook instance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpgradeInstanceRequest
	{
		
		/// <summary>
		/// Optional. The optional UpgradeType. Setting this field will search for additional compute images to upgrade this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UpgradeInstanceInternalRequestType Type { get; set; }
	}
	
	/// <summary>
	/// Request for upgrading a Managed Notebook Runtime to the latest version. option (google.api.message_visibility).restriction = "TRUSTED_TESTER,SPECIAL_TESTER";
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpgradeRuntimeRequest
	{
		
		/// <summary>
		/// Idempotent request UUID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes schedule and all underlying jobs
		/// Notebooks_projects_locations_schedules_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`</param>
		/// <param name="requestId">Idempotent request UUID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_schedules_deleteAsync(string name, string requestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details of schedule
		/// Notebooks_projects_locations_schedules_get v1/{name}
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Schedule> Notebooks_projects_locations_schedules_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Notebook Runtime configuration.
		/// Notebooks_projects_locations_runtimes_patch v1/{name}
		/// </summary>
		/// <param name="name">Output only. The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtimeId}`</param>
		/// <param name="requestId">Idempotent request UUID.</param>
		/// <param name="updateMask">Required. Specifies the path, relative to `Runtime`, of the field to update. For example, to change the software configuration kernels, the `update_mask` parameter would be specified as `software_config.kernels`, and the `PATCH` request body would specify the new value, as follows: { "software_config":{ "kernels": [{ 'repository': 'gcr.io/deeplearning-platform-release/pytorch-gpu', 'tag': 'latest' }], } } Currently, only the following fields can be updated: - `software_config.kernels` - `software_config.post_startup_script` - `software_config.custom_gpu_driver_path` - `software_config.idle_shutdown` - `software_config.idle_shutdown_timeout` - `software_config.disable_terminal` - `labels`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_runtimes_patchAsync(string name, string requestId, string updateMask, Runtime requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Notebooks_projects_locations_list v1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Notebooks_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Notebooks_projects_locations_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Notebooks_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Notebooks_projects_locations_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Notebooks_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Diagnostic File and runs Diagnostic Tool given a Runtime.
		/// Notebooks_projects_locations_runtimes_diagnose v1/{name}:diagnose
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/runtimes/{runtimes_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_runtimes_diagnoseAsync(string name, DiagnoseRuntimeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":diagnose";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether a notebook instance is healthy.
		/// Notebooks_projects_locations_instances_getInstanceHealth v1/{name}:getInstanceHealth
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<GetInstanceHealthResponse> Notebooks_projects_locations_instances_getInstanceHealthAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":getInstanceHealth";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetInstanceHealthResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Migrate an existing Runtime to a new Workbench Instance.
		/// Notebooks_projects_locations_runtimes_migrate v1/{name}:migrate
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_runtimes_migrateAsync(string name, MigrateRuntimeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":migrate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an access token for the consumer service account that the customer attached to the runtime. Only accessible from the tenant instance.
		/// Notebooks_projects_locations_runtimes_refreshRuntimeTokenInternal v1/{name}:refreshRuntimeTokenInternal
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<RefreshRuntimeTokenInternalResponse> Notebooks_projects_locations_runtimes_refreshRuntimeTokenInternalAsync(string name, RefreshRuntimeTokenInternalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":refreshRuntimeTokenInternal";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RefreshRuntimeTokenInternalResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows notebook instances to report their latest instance information to the Notebooks API server. The server will merge the reported information to the instance metadata store. Do not use this method directly.
		/// Notebooks_projects_locations_instances_report v1/{name}:report
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_instances_reportAsync(string name, ReportInstanceInfoRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":report";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reports and processes a runtime event.
		/// Notebooks_projects_locations_runtimes_reportEvent v1/{name}:reportEvent
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_runtimes_reportEventAsync(string name, ReportRuntimeEventRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":reportEvent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets a Managed Notebook Runtime.
		/// Notebooks_projects_locations_runtimes_reset v1/{name}:reset
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_runtimes_resetAsync(string name, ResetRuntimeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rollbacks a notebook instance to the previous version.
		/// Notebooks_projects_locations_instances_rollback v1/{name}:rollback
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_instances_rollbackAsync(string name, RollbackInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":rollback";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the guest accelerators of a single Instance.
		/// Notebooks_projects_locations_instances_setAccelerator v1/{name}:setAccelerator
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_instances_setAcceleratorAsync(string name, SetInstanceAcceleratorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setAccelerator";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces all the labels of an Instance.
		/// Notebooks_projects_locations_instances_setLabels v1/{name}:setLabels
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_instances_setLabelsAsync(string name, SetInstanceLabelsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setLabels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the machine type of a single Instance.
		/// Notebooks_projects_locations_instances_setMachineType v1/{name}:setMachineType
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_instances_setMachineTypeAsync(string name, SetInstanceMachineTypeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setMachineType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a Managed Notebook Runtime. Perform "Start" on GPU instances; "Resume" on CPU instances See: https://cloud.google.com/compute/docs/instances/stop-start-instance https://cloud.google.com/compute/docs/instances/suspend-resume-instance
		/// Notebooks_projects_locations_runtimes_start v1/{name}:start
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_runtimes_startAsync(string name, StartRuntimeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a Managed Notebook Runtime. Perform "Stop" on GPU instances; "Suspend" on CPU instances See: https://cloud.google.com/compute/docs/instances/stop-start-instance https://cloud.google.com/compute/docs/instances/suspend-resume-instance
		/// Notebooks_projects_locations_runtimes_stop v1/{name}:stop
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_runtimes_stopAsync(string name, StopRuntimeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Switch a Managed Notebook Runtime.
		/// Notebooks_projects_locations_runtimes_switch v1/{name}:switch
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_runtimes_switchAsync(string name, SwitchRuntimeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":switch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Triggers execution of an existing schedule.
		/// Notebooks_projects_locations_schedules_trigger v1/{name}:trigger
		/// </summary>
		/// <param name="name">Required. Format: `parent=projects/{project_id}/locations/{location}/schedules/{schedule_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_schedules_triggerAsync(string name, TriggerScheduleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":trigger";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Notebook Instance configurations.
		/// Notebooks_projects_locations_instances_updateConfig v1/{name}:updateConfig
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_instances_updateConfigAsync(string name, UpdateInstanceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":updateConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add/update metadata items for an instance.
		/// Notebooks_projects_locations_instances_updateMetadataItems v1/{name}:updateMetadataItems
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<UpdateInstanceMetadataItemsResponse> Notebooks_projects_locations_instances_updateMetadataItemsAsync(string name, UpdateInstanceMetadataItemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":updateMetadataItems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateInstanceMetadataItemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Shielded instance configuration of a single Instance.
		/// Notebooks_projects_locations_instances_updateShieldedInstanceConfig v1/{name}:updateShieldedInstanceConfig
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_instances_updateShieldedInstanceConfigAsync(string name, UpdateShieldedInstanceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":updateShieldedInstanceConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upgrades a Managed Notebook Runtime to the latest version.
		/// Notebooks_projects_locations_runtimes_upgrade v1/{name}:upgrade
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_runtimes_upgradeAsync(string name, UpgradeRuntimeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":upgrade";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows notebook instances to call this endpoint to upgrade themselves. Do not use this method directly.
		/// Notebooks_projects_locations_instances_upgradeInternal v1/{name}:upgradeInternal
		/// </summary>
		/// <param name="name">Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_instances_upgradeInternalAsync(string name, UpgradeInstanceInternalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":upgradeInternal";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether a notebook instance is upgradable.
		/// Notebooks_projects_locations_instances_isUpgradeable v1/{notebookInstance}:isUpgradeable
		/// </summary>
		/// <param name="notebookInstance">Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`</param>
		/// <param name="type">Optional. The optional UpgradeType. Setting this field will search for additional compute images to upgrade this instance.</param>
		/// <returns>Successful response</returns>
		public async Task<IsInstanceUpgradeableResponse> Notebooks_projects_locations_instances_isUpgradeableAsync(string notebookInstance, UpgradeInstanceInternalRequestType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (notebookInstance==null? "" : System.Uri.EscapeDataString(notebookInstance))+":isUpgradeable&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IsInstanceUpgradeableResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists environments in a project.
		/// Notebooks_projects_locations_environments_list v1/{parent}/environments
		/// </summary>
		/// <param name="parent">Required. Format: `projects/{project_id}/locations/{location}`</param>
		/// <param name="pageSize">Maximum return size of the list call.</param>
		/// <param name="pageToken">A previous returned page token that can be used to continue listing from the last result.</param>
		/// <returns>Successful response</returns>
		public async Task<ListEnvironmentsResponse> Notebooks_projects_locations_environments_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/environments&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListEnvironmentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Environment.
		/// Notebooks_projects_locations_environments_create v1/{parent}/environments
		/// </summary>
		/// <param name="parent">Required. Format: `projects/{project_id}/locations/{location}`</param>
		/// <param name="environmentId">Required. User-defined unique ID of this environment. The `environment_id` must be 1 to 63 characters long and contain only lowercase letters, numeric characters, and dashes. The first character must be a lowercase letter and the last character cannot be a dash.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_environments_createAsync(string parent, string environmentId, Environment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/environments&environmentId=" + (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists executions in a given project and location
		/// Notebooks_projects_locations_executions_list v1/{parent}/executions
		/// </summary>
		/// <param name="parent">Required. Format: `parent=projects/{project_id}/locations/{location}`</param>
		/// <param name="filter">Filter applied to resulting executions. Currently only supports filtering executions by a specified `schedule_id`. Format: `schedule_id=`</param>
		/// <param name="orderBy">Sort by field.</param>
		/// <param name="pageSize">Maximum return size of the list call.</param>
		/// <param name="pageToken">A previous returned page token that can be used to continue listing from the last result.</param>
		/// <returns>Successful response</returns>
		public async Task<ListExecutionsResponse> Notebooks_projects_locations_executions_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/executions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListExecutionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Execution in a given project and location.
		/// Notebooks_projects_locations_executions_create v1/{parent}/executions
		/// </summary>
		/// <param name="parent">Required. Format: `parent=projects/{project_id}/locations/{location}`</param>
		/// <param name="executionId">Required. User-defined unique ID of this execution.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_executions_createAsync(string parent, string executionId, Execution requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/executions&executionId=" + (executionId==null? "" : System.Uri.EscapeDataString(executionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists instances in a given project and location.
		/// Notebooks_projects_locations_instances_list v1/{parent}/instances
		/// </summary>
		/// <param name="parent">Required. Format: `parent=projects/{project_id}/locations/{location}`</param>
		/// <param name="filter">Optional. List filter.</param>
		/// <param name="orderBy">Optional. Sort results. Supported values are "name", "name desc" or "" (unsorted).</param>
		/// <param name="pageSize">Maximum return size of the list call.</param>
		/// <param name="pageToken">A previous returned page token that can be used to continue listing from the last result.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInstancesResponse> Notebooks_projects_locations_instances_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/instances&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListInstancesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Instance in a given project and location.
		/// Notebooks_projects_locations_instances_create v1/{parent}/instances
		/// </summary>
		/// <param name="parent">Required. Format: `parent=projects/{project_id}/locations/{location}`</param>
		/// <param name="instanceId">Required. User-defined unique ID of this instance.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_instances_createAsync(string parent, string instanceId, Instance requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/instances&instanceId=" + (instanceId==null? "" : System.Uri.EscapeDataString(instanceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Registers an existing legacy notebook instance to the Notebooks API server. Legacy instances are instances created with the legacy Compute Engine calls. They are not manageable by the Notebooks API out of the box. This call makes these instances manageable by the Notebooks API.
		/// Notebooks_projects_locations_instances_register v1/{parent}/instances:register
		/// </summary>
		/// <param name="parent">Required. Format: `parent=projects/{project_id}/locations/{location}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_instances_registerAsync(string parent, RegisterInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/instances:register";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Runtimes in a given project and location.
		/// Notebooks_projects_locations_runtimes_list v1/{parent}/runtimes
		/// </summary>
		/// <param name="parent">Required. Format: `parent=projects/{project_id}/locations/{location}`</param>
		/// <param name="filter">Optional. List filter.</param>
		/// <param name="orderBy">Optional. Sort results. Supported values are "name", "name desc" or "" (unsorted).</param>
		/// <param name="pageSize">Maximum return size of the list call.</param>
		/// <param name="pageToken">A previous returned page token that can be used to continue listing from the last result.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRuntimesResponse> Notebooks_projects_locations_runtimes_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/runtimes&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRuntimesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Runtime in a given project and location.
		/// Notebooks_projects_locations_runtimes_create v1/{parent}/runtimes
		/// </summary>
		/// <param name="parent">Required. Format: `parent=projects/{project_id}/locations/{location}`</param>
		/// <param name="requestId">Idempotent request UUID.</param>
		/// <param name="runtimeId">Required. User-defined unique ID of this Runtime.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_runtimes_createAsync(string parent, string requestId, string runtimeId, Runtime requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/runtimes&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&runtimeId=" + (runtimeId==null? "" : System.Uri.EscapeDataString(runtimeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists schedules in a given project and location.
		/// Notebooks_projects_locations_schedules_list v1/{parent}/schedules
		/// </summary>
		/// <param name="parent">Required. Format: `parent=projects/{project_id}/locations/{location}`</param>
		/// <param name="filter">Filter applied to resulting schedules.</param>
		/// <param name="orderBy">Field to order results by.</param>
		/// <param name="pageSize">Maximum return size of the list call.</param>
		/// <param name="pageToken">A previous returned page token that can be used to continue listing from the last result.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSchedulesResponse> Notebooks_projects_locations_schedules_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/schedules&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSchedulesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Scheduled Notebook in a given project and location.
		/// Notebooks_projects_locations_schedules_create v1/{parent}/schedules
		/// </summary>
		/// <param name="parent">Required. Format: `parent=projects/{project_id}/locations/{location}`</param>
		/// <param name="scheduleId">Required. User-defined unique ID of this schedule.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Notebooks_projects_locations_schedules_createAsync(string parent, string scheduleId, Schedule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/schedules&scheduleId=" + (scheduleId==null? "" : System.Uri.EscapeDataString(scheduleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Notebooks_projects_locations_runtimes_getIamPolicy v1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <param name="options_requestedPolicyVersion">Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Notebooks_projects_locations_runtimes_getIamPolicyAsync(string resource, int options_requestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy&options.requestedPolicyVersion="+options_requestedPolicyVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		/// Notebooks_projects_locations_runtimes_setIamPolicy v1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Notebooks_projects_locations_runtimes_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Notebooks_projects_locations_runtimes_testIamPermissions v1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Notebooks_projects_locations_runtimes_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TestIamPermissionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
