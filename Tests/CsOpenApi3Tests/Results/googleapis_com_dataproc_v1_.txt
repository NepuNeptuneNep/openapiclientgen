//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Specifies the type and number of accelerator cards attached to the instances of an instance. See GPUs on Compute Engine (https://cloud.google.com/compute/docs/gpus/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceleratorConfig
	{
		
		/// <summary>
		/// The number of the accelerator cards of this type exposed to this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorCount")]
		public System.Nullable<System.Int32> AcceleratorCount { get; set; }
		
		/// <summary>
		/// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See Compute Engine AcceleratorTypes (https://cloud.google.com/compute/docs/reference/v1/acceleratorTypes).Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]/acceleratorTypes/nvidia-tesla-k80 projects/[project_id]/zones/[zone]/acceleratorTypes/nvidia-tesla-k80 nvidia-tesla-k80Auto Zone Exception: If you are using the Dataproc Auto Zone Placement (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorTypeUri")]
		public string AcceleratorTypeUri { get; set; }
	}
	
	/// <summary>
	/// Autoscaling Policy config associated with the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoscalingConfig
	{
		
		/// <summary>
		/// Optional. The autoscaling policy used by the cluster.Only resource names including projectid and location (region) are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/autoscalingPolicies/[policy_id] projects/[project_id]/locations/[dataproc_region]/autoscalingPolicies/[policy_id]Note that the policy must be in the same project and Dataproc region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyUri")]
		public string PolicyUri { get; set; }
	}
	
	/// <summary>
	/// Describes an autoscaling policy for Dataproc cluster autoscaler.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoscalingPolicy
	{
		
		/// <summary>
		/// Basic algorithm for autoscaling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAlgorithm")]
		public BasicAutoscalingAlgorithm BasicAlgorithm { get; set; }
		
		/// <summary>
		/// Required. The policy id.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Optional. The labels to associate with this autoscaling policy. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with an autoscaling policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The "resource name" of the autoscaling policy, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.autoscalingPolicies, the resource name of the policy has the following format: projects/{project_id}/regions/{region}/autoscalingPolicies/{policy_id} For projects.locations.autoscalingPolicies, the resource name of the policy has the following format: projects/{project_id}/locations/{location}/autoscalingPolicies/{policy_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Configuration for the size bounds of an instance group, including its proportional size to other groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryWorkerConfig")]
		public InstanceGroupAutoscalingPolicyConfig SecondaryWorkerConfig { get; set; }
		
		/// <summary>
		/// Configuration for the size bounds of an instance group, including its proportional size to other groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerConfig")]
		public InstanceGroupAutoscalingPolicyConfig WorkerConfig { get; set; }
	}
	
	/// <summary>
	/// Basic algorithm for autoscaling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BasicAutoscalingAlgorithm
	{
		
		/// <summary>
		/// Optional. Duration between scaling events. A scaling period starts after the update operation from the previous event has completed.Bounds: 2m, 1d. Default: 2m.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cooldownPeriod")]
		public string CooldownPeriod { get; set; }
		
		/// <summary>
		/// Basic autoscaling configurations for Spark Standalone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkStandaloneConfig")]
		public SparkStandaloneAutoscalingConfig SparkStandaloneConfig { get; set; }
		
		/// <summary>
		/// Basic autoscaling configurations for YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yarnConfig")]
		public BasicYarnAutoscalingConfig YarnConfig { get; set; }
	}
	
	/// <summary>
	/// Basic autoscaling configurations for Spark Standalone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SparkStandaloneAutoscalingConfig
	{
		
		/// <summary>
		/// Required. Timeout for Spark graceful decommissioning of spark workers. Specifies the duration to wait for spark worker to complete spark decommissioning tasks before forcefully removing workers. Only applicable to downscaling operations.Bounds: 0s, 1d.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gracefulDecommissionTimeout")]
		public string GracefulDecommissionTimeout { get; set; }
		
		/// <summary>
		/// Optional. Remove only idle workers when scaling down cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeOnlyIdleWorkers")]
		public System.Nullable<System.Boolean> RemoveOnlyIdleWorkers { get; set; }
		
		/// <summary>
		/// Required. Fraction of required executors to remove from Spark Serverless clusters. A scale-down factor of 1.0 will result in scaling down so that there are no more executors for the Spark Job.(more aggressive scaling). A scale-down factor closer to 0 will result in a smaller magnitude of scaling donw (less aggressive scaling).Bounds: 0.0, 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleDownFactor")]
		public System.Nullable<System.Double> ScaleDownFactor { get; set; }
		
		/// <summary>
		/// Optional. Minimum scale-down threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0 means the autoscaler will scale down on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleDownMinWorkerFraction")]
		public System.Nullable<System.Double> ScaleDownMinWorkerFraction { get; set; }
		
		/// <summary>
		/// Required. Fraction of required workers to add to Spark Standalone clusters. A scale-up factor of 1.0 will result in scaling up so that there are no more required workers for the Spark Job (more aggressive scaling). A scale-up factor closer to 0 will result in a smaller magnitude of scaling up (less aggressive scaling).Bounds: 0.0, 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleUpFactor")]
		public System.Nullable<System.Double> ScaleUpFactor { get; set; }
		
		/// <summary>
		/// Optional. Minimum scale-up threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of 0 means the autoscaler will scale up on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleUpMinWorkerFraction")]
		public System.Nullable<System.Double> ScaleUpMinWorkerFraction { get; set; }
	}
	
	/// <summary>
	/// Basic autoscaling configurations for YARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BasicYarnAutoscalingConfig
	{
		
		/// <summary>
		/// Required. Timeout for YARN graceful decommissioning of Node Managers. Specifies the duration to wait for jobs to complete before forcefully removing workers (and potentially interrupting jobs). Only applicable to downscaling operations.Bounds: 0s, 1d.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gracefulDecommissionTimeout")]
		public string GracefulDecommissionTimeout { get; set; }
		
		/// <summary>
		/// Required. Fraction of average YARN pending memory in the last cooldown period for which to remove workers. A scale-down factor of 1 will result in scaling down so that there is no available memory remaining after the update (more aggressive scaling). A scale-down factor of 0 disables removing workers, which can be beneficial for autoscaling a single job. See How autoscaling works (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/autoscaling#how_autoscaling_works) for more information.Bounds: 0.0, 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleDownFactor")]
		public System.Nullable<System.Double> ScaleDownFactor { get; set; }
		
		/// <summary>
		/// Optional. Minimum scale-down threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0 means the autoscaler will scale down on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleDownMinWorkerFraction")]
		public System.Nullable<System.Double> ScaleDownMinWorkerFraction { get; set; }
		
		/// <summary>
		/// Required. Fraction of average YARN pending memory in the last cooldown period for which to add workers. A scale-up factor of 1.0 will result in scaling up so that there is no pending memory remaining after the update (more aggressive scaling). A scale-up factor closer to 0 will result in a smaller magnitude of scaling up (less aggressive scaling). See How autoscaling works (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/autoscaling#how_autoscaling_works) for more information.Bounds: 0.0, 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleUpFactor")]
		public System.Nullable<System.Double> ScaleUpFactor { get; set; }
		
		/// <summary>
		/// Optional. Minimum scale-up threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of 0 means the autoscaler will scale up on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleUpMinWorkerFraction")]
		public System.Nullable<System.Double> ScaleUpMinWorkerFraction { get; set; }
	}
	
	/// <summary>
	/// Configuration for the size bounds of an instance group, including its proportional size to other groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceGroupAutoscalingPolicyConfig
	{
		
		/// <summary>
		/// Required. Maximum number of instances for this group. Required for primary workers. Note that by default, clusters will not use secondary workers. Required for secondary workers if the minimum secondary instances is set.Primary workers - Bounds: [min_instances, ). Secondary workers - Bounds: [min_instances, ). Default: 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxInstances")]
		public System.Nullable<System.Int32> MaxInstances { get; set; }
		
		/// <summary>
		/// Optional. Minimum number of instances for this group.Primary workers - Bounds: 2, max_instances. Default: 2. Secondary workers - Bounds: 0, max_instances. Default: 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minInstances")]
		public System.Nullable<System.Int32> MinInstances { get; set; }
		
		/// <summary>
		/// Optional. Weight for the instance group, which is used to determine the fraction of total workers in the cluster from this instance group. For example, if primary workers have weight 2, and secondary workers have weight 1, the cluster will have approximately 2 primary workers for each secondary worker.The cluster may not reach the specified balance if constrained by min/max bounds or other autoscaling settings. For example, if max_instances for secondary workers is 0, then only primary workers will be added. The cluster can also be out of balance when created.If weight is not set on any instance group, the cluster will default to equal weight for all groups: the cluster will attempt to maintain an equal number of workers in each group within the configured size bounds for each group. If weight is set for one group only, the cluster will default to zero weight on the unset group. For example if weight is set only on primary workers, the cluster will use primary workers only and no secondary workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// Node group identification and configuration information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuxiliaryNodeGroup
	{
		
		/// <summary>
		/// Dataproc Node Group. The Dataproc NodeGroup resource is not related to the Dataproc NodeGroupAffinity resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeGroup")]
		public NodeGroup NodeGroup { get; set; }
		
		/// <summary>
		/// Optional. A node group ID. Generated if not specified.The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of from 3 to 33 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeGroupId")]
		public string NodeGroupId { get; set; }
	}
	
	/// <summary>
	/// Dataproc Node Group. The Dataproc NodeGroup resource is not related to the Dataproc NodeGroupAffinity resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeGroup
	{
		
		/// <summary>
		/// Optional. Node group labels. Label keys must consist of from 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty. If specified, they must consist of from 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). The node group must have no more than 32 labelsn.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The Node group resource name (https://aip.dev/122).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The config settings for Compute Engine resources in an instance group, such as a master or worker group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeGroupConfig")]
		public InstanceGroupConfig NodeGroupConfig { get; set; }
		
		/// <summary>
		/// Required. Node group roles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
	}
	
	/// <summary>
	/// The config settings for Compute Engine resources in an instance group, such as a master or worker group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceGroupConfig
	{
		
		/// <summary>
		/// Optional. The Compute Engine accelerator configuration for these instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accelerators")]
		public AcceleratorConfig[] Accelerators { get; set; }
		
		/// <summary>
		/// Specifies the config of disk options for a group of VM instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskConfig")]
		public DiskConfig DiskConfig { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine image resource used for cluster instances.The URI can represent an image or image family.Image examples: https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/[image-id] projects/[project_id]/global/images/[image-id] image-idImage family examples. Dataproc will use the most recent image from the family: https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/family/[custom-image-family-name] projects/[project_id]/global/images/family/[custom-image-family-name]If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
		
		/// <summary>
		/// Instance flexibility Policy allowing a mixture of VM shapes and provisioning models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceFlexibilityPolicy")]
		public InstanceFlexibilityPolicy InstanceFlexibilityPolicy { get; set; }
		
		/// <summary>
		/// Output only. The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceNames")]
		public string[] InstanceNames { get; set; }
		
		/// <summary>
		/// Output only. List of references to Compute Engine instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceReferences")]
		public InstanceReference[] InstanceReferences { get; set; }
		
		/// <summary>
		/// Output only. Specifies that this instance group contains preemptible instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPreemptible")]
		public System.Nullable<System.Boolean> IsPreemptible { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine machine type used for cluster instances.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2 projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2 n1-standard-2Auto Zone Exception: If you are using the Dataproc Auto Zone Placement (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineTypeUri")]
		public string MachineTypeUri { get; set; }
		
		/// <summary>
		/// Specifies the resources used to actively manage an instance group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedGroupConfig")]
		public ManagedGroupConfig ManagedGroupConfig { get; set; }
		
		/// <summary>
		/// Optional. Specifies the minimum cpu platform for the Instance Group. See Dataproc -> Minimum CPU Platform (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minCpuPlatform")]
		public string MinCpuPlatform { get; set; }
		
		/// <summary>
		/// Optional. The minimum number of primary worker instances to create. If min_num_instances is set, cluster creation will succeed if the number of primary workers created is at least equal to the min_num_instances number.Example: Cluster creation request with num_instances = 5 and min_num_instances = 3: If 4 VMs are created and 1 instance fails, the failed VM is deleted. The cluster is resized to 4 instances and placed in a RUNNING state. If 2 instances are created and 3 instances fail, the cluster in placed in an ERROR state. The failed VMs are not deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minNumInstances")]
		public System.Nullable<System.Int32> MinNumInstances { get; set; }
		
		/// <summary>
		/// Optional. The number of VM instances in the instance group. For HA cluster master_config groups, must be set to 3. For standard cluster master_config groups, must be set to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numInstances")]
		public System.Nullable<System.Int32> NumInstances { get; set; }
		
		/// <summary>
		/// Optional. Specifies the preemptibility of the instance group.The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed.The default value for secondary instances is PREEMPTIBLE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preemptibility")]
		public System.Nullable<InstanceGroupConfigPreemptibility> Preemptibility { get; set; }
		
		/// <summary>
		/// Configuration to handle the startup of instances during cluster create and update process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startupConfig")]
		public StartupConfig StartupConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies the config of disk options for a group of VM instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiskConfig
	{
		
		/// <summary>
		/// Optional. Size in GB of the boot disk (default is 500GB).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDiskSizeGb")]
		public System.Nullable<System.Int32> BootDiskSizeGb { get; set; }
		
		/// <summary>
		/// Optional. Type of the boot disk (default is "pd-standard"). Valid values: "pd-balanced" (Persistent Disk Balanced Solid State Drive), "pd-ssd" (Persistent Disk Solid State Drive), or "pd-standard" (Persistent Disk Hard Disk Drive). See Disk types (https://cloud.google.com/compute/docs/disks#disk-types).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDiskType")]
		public string BootDiskType { get; set; }
		
		/// <summary>
		/// Optional. Interface type of local SSDs (default is "scsi"). Valid values: "scsi" (Small Computer System Interface), "nvme" (Non-Volatile Memory Express). See local SSD performance (https://cloud.google.com/compute/docs/disks/local-ssd#performance).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localSsdInterface")]
		public string LocalSsdInterface { get; set; }
		
		/// <summary>
		/// Optional. Number of attached SSDs, from 0 to 8 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and HDFS (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.Note: Local SSD options may vary by machine type and number of vCPUs selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numLocalSsds")]
		public System.Nullable<System.Int32> NumLocalSsds { get; set; }
	}
	
	/// <summary>
	/// Instance flexibility Policy allowing a mixture of VM shapes and provisioning models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceFlexibilityPolicy
	{
		
		/// <summary>
		/// Optional. List of instance selection options that the group will use when creating new VMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceSelectionList")]
		public InstanceSelection[] InstanceSelectionList { get; set; }
		
		/// <summary>
		/// Output only. A list of instance selection results in the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceSelectionResults")]
		public InstanceSelectionResult[] InstanceSelectionResults { get; set; }
	}
	
	/// <summary>
	/// Defines machines types and a rank to which the machines types belong.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceSelection
	{
		
		/// <summary>
		/// Optional. Full machine-type names, e.g. "n1-standard-16".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineTypes")]
		public string[] MachineTypes { get; set; }
		
		/// <summary>
		/// Optional. Preference of this instance selection. Lower number means higher preference. Dataproc will first try to create a VM based on the machine-type with priority rank and fallback to next rank based on availability. Machine types and instance selections with the same priority have the same preference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
	}
	
	/// <summary>
	/// Defines a mapping from machine types to the number of VMs that are created with each machine type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceSelectionResult
	{
		
		/// <summary>
		/// Output only. Full machine-type names, e.g. "n1-standard-16".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// Output only. Number of VM provisioned with the machine_type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmCount")]
		public System.Nullable<System.Int32> VmCount { get; set; }
	}
	
	/// <summary>
	/// A reference to a Compute Engine instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceReference
	{
		
		/// <summary>
		/// The unique identifier of the Compute Engine instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// The user-friendly name of the Compute Engine instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		/// <summary>
		/// The public ECIES key used for sharing data with this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicEciesKey")]
		public string PublicEciesKey { get; set; }
		
		/// <summary>
		/// The public RSA key used for sharing data with this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public string PublicKey { get; set; }
	}
	
	/// <summary>
	/// Specifies the resources used to actively manage an instance group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedGroupConfig
	{
		
		/// <summary>
		/// Output only. The name of the Instance Group Manager for this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceGroupManagerName")]
		public string InstanceGroupManagerName { get; set; }
		
		/// <summary>
		/// Output only. The partial URI to the instance group manager for this group. E.g. projects/my-project/regions/us-central1/instanceGroupManagers/my-igm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceGroupManagerUri")]
		public string InstanceGroupManagerUri { get; set; }
		
		/// <summary>
		/// Output only. The name of the Instance Template used for the Managed Instance Group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceTemplateName")]
		public string InstanceTemplateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InstanceGroupConfigPreemptibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREEMPTIBILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_PREEMPTIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREEMPTIBLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPOT = 3,
	}
	
	/// <summary>
	/// Configuration to handle the startup of instances during cluster create and update process.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartupConfig
	{
		
		/// <summary>
		/// Optional. The config setting to enable cluster creation/ updation to be successful only after required_registration_fraction of instances are up and running. This configuration is applicable to only secondary workers for now. The cluster will fail if required_registration_fraction of instances are not available. This will include instance creation, agent registration, and service registration (if enabled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredRegistrationFraction")]
		public System.Nullable<System.Double> RequiredRegistrationFraction { get; set; }
	}
	
	/// <summary>
	/// Auxiliary services configuration for a Cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuxiliaryServicesConfig
	{
		
		/// <summary>
		/// Specifies a Metastore configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metastoreConfig")]
		public MetastoreConfig MetastoreConfig { get; set; }
		
		/// <summary>
		/// Spark History Server configuration for the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkHistoryServerConfig")]
		public SparkHistoryServerConfig SparkHistoryServerConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies a Metastore configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetastoreConfig
	{
		
		/// <summary>
		/// Required. Resource name of an existing Dataproc Metastore service.Example: projects/[project_id]/locations/[dataproc_region]/services/[service-name]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataprocMetastoreService")]
		public string DataprocMetastoreService { get; set; }
	}
	
	/// <summary>
	/// Spark History Server configuration for the workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SparkHistoryServerConfig
	{
		
		/// <summary>
		/// Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the workload.Example: projects/[project_id]/regions/[region]/clusters/[cluster_name]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataprocCluster")]
		public string DataprocCluster { get; set; }
	}
	
	/// <summary>
	/// A representation of a batch workload in the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Batch
	{
		
		/// <summary>
		/// Output only. The time when the batch was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The email address of the user who created the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// Environment configuration for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentConfig")]
		public EnvironmentConfig EnvironmentConfig { get; set; }
		
		/// <summary>
		/// Optional. The labels to associate with this batch. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the operation associated with this batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// A configuration for running an Apache PySpark (https://spark.apache.org/docs/latest/api/python/getting_started/quickstart.html) batch workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pysparkBatch")]
		public PySparkBatch PysparkBatch { get; set; }
		
		/// <summary>
		/// Runtime configuration for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeConfig")]
		public RuntimeConfig RuntimeConfig { get; set; }
		
		/// <summary>
		/// Runtime information about workload execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeInfo")]
		public RuntimeInfo RuntimeInfo { get; set; }
		
		/// <summary>
		/// A configuration for running an Apache Spark (https://spark.apache.org/) batch workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkBatch")]
		public SparkBatch SparkBatch { get; set; }
		
		/// <summary>
		/// A configuration for running an Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) batch workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkRBatch")]
		public SparkRBatch SparkRBatch { get; set; }
		
		/// <summary>
		/// A configuration for running Apache Spark SQL (https://spark.apache.org/sql/) queries as a batch workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkSqlBatch")]
		public SparkSqlBatch SparkSqlBatch { get; set; }
		
		/// <summary>
		/// Output only. The state of the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<BatchState> State { get; set; }
		
		/// <summary>
		/// Output only. Historical state information for the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateHistory")]
		public StateHistory[] StateHistory { get; set; }
		
		/// <summary>
		/// Output only. Batch state details, such as a failure description if the state is FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateMessage")]
		public string StateMessage { get; set; }
		
		/// <summary>
		/// Output only. The time when the batch entered a current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTime")]
		public string StateTime { get; set; }
		
		/// <summary>
		/// Output only. A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	/// <summary>
	/// Environment configuration for a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentConfig
	{
		
		/// <summary>
		/// Execution configuration for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionConfig")]
		public ExecutionConfig ExecutionConfig { get; set; }
		
		/// <summary>
		/// Auxiliary services configuration for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peripheralsConfig")]
		public PeripheralsConfig PeripheralsConfig { get; set; }
	}
	
	/// <summary>
	/// Execution configuration for a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutionConfig
	{
		
		/// <summary>
		/// Optional. Applies to sessions only. The duration to keep the session alive while it's idling. Exceeding this threshold causes the session to terminate. This field cannot be set on a batch workload. Minimum value is 10 minutes; maximum value is 14 days (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)). Defaults to 1 hour if not set. If both ttl and idle_ttl are specified for an interactive session, the conditions are treated as OR conditions: the workload will be terminated when it has been idle for idle_ttl or when ttl has been exceeded, whichever occurs first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleTtl")]
		public string IdleTtl { get; set; }
		
		/// <summary>
		/// Optional. The Cloud KMS key to use for encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		public string KmsKey { get; set; }
		
		/// <summary>
		/// Optional. Tags used for network traffic control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkTags")]
		public string[] NetworkTags { get; set; }
		
		/// <summary>
		/// Optional. Network URI to connect workload to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkUri")]
		public string NetworkUri { get; set; }
		
		/// <summary>
		/// Optional. Service account that used to execute workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// Optional. A Cloud Storage bucket used to stage workload dependencies, config files, and store workload output and other ephemeral data, such as Spark history files. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location according to the region where your workload is running, and then create and manage project-level, per-location staging and temporary buckets. This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stagingBucket")]
		public string StagingBucket { get; set; }
		
		/// <summary>
		/// Optional. Subnetwork URI to connect workload to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetworkUri")]
		public string SubnetworkUri { get; set; }
		
		/// <summary>
		/// Optional. The duration after which the workload will be terminated, specified as the JSON representation for Duration (https://protobuf.dev/programming-guides/proto3/#json). When the workload exceeds this duration, it will be unconditionally terminated without waiting for ongoing work to finish. If ttl is not specified for a batch workload, the workload will be allowed to run until it exits naturally (or run forever without exiting). If ttl is not specified for an interactive session, it defaults to 24 hours. If ttl is not specified for a batch that uses 2.1+ runtime version, it defaults to 4 hours. Minimum value is 10 minutes; maximum value is 14 days. If both ttl and idle_ttl are specified (for an interactive session), the conditions are treated as OR conditions: the workload will be terminated when it has been idle for idle_ttl or when ttl has been exceeded, whichever occurs first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
	}
	
	/// <summary>
	/// Auxiliary services configuration for a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PeripheralsConfig
	{
		
		/// <summary>
		/// Optional. Resource name of an existing Dataproc Metastore service.Example: projects/[project_id]/locations/[region]/services/[service_id]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metastoreService")]
		public string MetastoreService { get; set; }
		
		/// <summary>
		/// Spark History Server configuration for the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkHistoryServerConfig")]
		public SparkHistoryServerConfig SparkHistoryServerConfig { get; set; }
	}
	
	/// <summary>
	/// A configuration for running an Apache PySpark (https://spark.apache.org/docs/latest/api/python/getting_started/quickstart.html) batch workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PySparkBatch
	{
		
		/// <summary>
		/// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveUris")]
		public string[] ArchiveUris { get; set; }
		
		/// <summary>
		/// Optional. The arguments to pass to the driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of files to be placed in the working directory of each executor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUris")]
		public string[] FileUris { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jarFileUris")]
		public string[] JarFileUris { get; set; }
		
		/// <summary>
		/// Required. The HCFS URI of the main Python file to use as the Spark driver. Must be a .py file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainPythonFileUri")]
		public string MainPythonFileUri { get; set; }
		
		/// <summary>
		/// Optional. HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonFileUris")]
		public string[] PythonFileUris { get; set; }
	}
	
	/// <summary>
	/// Runtime configuration for a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuntimeConfig
	{
		
		/// <summary>
		/// Optional. Optional custom container image for the job runtime environment. If not specified, a default container image will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImage")]
		public string ContainerImage { get; set; }
		
		/// <summary>
		/// Optional. A mapping of property names to values, which are used to configure workload execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Configuration for dependency repositories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositoryConfig")]
		public RepositoryConfig RepositoryConfig { get; set; }
		
		/// <summary>
		/// Optional. Version of the batch runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Configuration for dependency repositories
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryConfig
	{
		
		/// <summary>
		/// Configuration for PyPi repository
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pypiRepositoryConfig")]
		public PyPiRepositoryConfig PypiRepositoryConfig { get; set; }
	}
	
	/// <summary>
	/// Configuration for PyPi repository
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PyPiRepositoryConfig
	{
		
		/// <summary>
		/// Optional. PyPi repository address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pypiRepository")]
		public string PypiRepository { get; set; }
	}
	
	/// <summary>
	/// Runtime information about workload execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuntimeInfo
	{
		
		/// <summary>
		/// Usage metrics represent approximate total resources consumed by a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approximateUsage")]
		public UsageMetrics ApproximateUsage { get; set; }
		
		/// <summary>
		/// The usage snapshot represents the resources consumed by a workload at a specified time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentUsage")]
		public UsageSnapshot CurrentUsage { get; set; }
		
		/// <summary>
		/// Output only. A URI pointing to the location of the diagnostics tarball.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diagnosticOutputUri")]
		public string DiagnosticOutputUri { get; set; }
		
		/// <summary>
		/// Output only. Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public System.Collections.Generic.Dictionary<string, string> Endpoints { get; set; }
		
		/// <summary>
		/// Output only. A URI pointing to the location of the stdout and stderr of the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUri")]
		public string OutputUri { get; set; }
	}
	
	/// <summary>
	/// Usage metrics represent approximate total resources consumed by a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageMetrics
	{
		
		/// <summary>
		/// Optional. Accelerator type being used, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorType")]
		public string AcceleratorType { get; set; }
		
		/// <summary>
		/// Optional. Accelerator usage in (milliAccelerator x seconds) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="milliAcceleratorSeconds")]
		public string MilliAcceleratorSeconds { get; set; }
		
		/// <summary>
		/// Optional. DCU (Dataproc Compute Units) usage in (milliDCU x seconds) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="milliDcuSeconds")]
		public string MilliDcuSeconds { get; set; }
		
		/// <summary>
		/// Optional. Shuffle storage usage in (GB x seconds) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shuffleStorageGbSeconds")]
		public string ShuffleStorageGbSeconds { get; set; }
	}
	
	/// <summary>
	/// The usage snapshot represents the resources consumed by a workload at a specified time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageSnapshot
	{
		
		/// <summary>
		/// Optional. Accelerator type being used, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorType")]
		public string AcceleratorType { get; set; }
		
		/// <summary>
		/// Optional. Milli (one-thousandth) accelerator. (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="milliAccelerator")]
		public string MilliAccelerator { get; set; }
		
		/// <summary>
		/// Optional. Milli (one-thousandth) Dataproc Compute Units (DCUs) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="milliDcu")]
		public string MilliDcu { get; set; }
		
		/// <summary>
		/// Optional. Milli (one-thousandth) Dataproc Compute Units (DCUs) charged at premium tier (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="milliDcuPremium")]
		public string MilliDcuPremium { get; set; }
		
		/// <summary>
		/// Optional. Shuffle Storage in gigabytes (GB). (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shuffleStorageGb")]
		public string ShuffleStorageGb { get; set; }
		
		/// <summary>
		/// Optional. Shuffle Storage in gigabytes (GB) charged at premium tier. (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shuffleStorageGbPremium")]
		public string ShuffleStorageGbPremium { get; set; }
		
		/// <summary>
		/// Optional. The timestamp of the usage snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotTime")]
		public string SnapshotTime { get; set; }
	}
	
	/// <summary>
	/// A configuration for running an Apache Spark (https://spark.apache.org/) batch workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SparkBatch
	{
		
		/// <summary>
		/// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveUris")]
		public string[] ArchiveUris { get; set; }
		
		/// <summary>
		/// Optional. The arguments to pass to the driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of files to be placed in the working directory of each executor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUris")]
		public string[] FileUris { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jarFileUris")]
		public string[] JarFileUris { get; set; }
		
		/// <summary>
		/// Optional. The name of the driver main class. The jar file that contains the class must be in the classpath or specified in jar_file_uris.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainClass")]
		public string MainClass { get; set; }
		
		/// <summary>
		/// Optional. The HCFS URI of the jar file that contains the main class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainJarFileUri")]
		public string MainJarFileUri { get; set; }
	}
	
	/// <summary>
	/// A configuration for running an Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) batch workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SparkRBatch
	{
		
		/// <summary>
		/// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveUris")]
		public string[] ArchiveUris { get; set; }
		
		/// <summary>
		/// Optional. The arguments to pass to the Spark driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of files to be placed in the working directory of each executor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUris")]
		public string[] FileUris { get; set; }
		
		/// <summary>
		/// Required. The HCFS URI of the main R file to use as the driver. Must be a .R or .r file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainRFileUri")]
		public string MainRFileUri { get; set; }
	}
	
	/// <summary>
	/// A configuration for running Apache Spark SQL (https://spark.apache.org/sql/) queries as a batch workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SparkSqlBatch
	{
		
		/// <summary>
		/// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jarFileUris")]
		public string[] JarFileUris { get; set; }
		
		/// <summary>
		/// Required. The HCFS URI of the script that contains Spark SQL queries to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryFileUri")]
		public string QueryFileUri { get; set; }
		
		/// <summary>
		/// Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryVariables")]
		public System.Collections.Generic.Dictionary<string, string> QueryVariables { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
	}
	
	/// <summary>
	/// Historical state information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StateHistory
	{
		
		/// <summary>
		/// Output only. The state of the batch at this point in history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public BatchState State { get; set; }
		
		/// <summary>
		/// Output only. Details about the state at this point in history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateMessage")]
		public string StateMessage { get; set; }
		
		/// <summary>
		/// Output only. The time when the batch entered the historical state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateStartTime")]
		public string StateStartTime { get; set; }
	}
	
	/// <summary>
	/// Metadata describing the Batch operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchOperationMetadata
	{
		
		/// <summary>
		/// Name of the batch for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch")]
		public string Batch { get; set; }
		
		/// <summary>
		/// Batch UUID for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchUuid")]
		public string BatchUuid { get; set; }
		
		/// <summary>
		/// The time when the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Short description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The time when the operation finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doneTime")]
		public string DoneTime { get; set; }
		
		/// <summary>
		/// Labels associated with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The operation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<BatchOperationMetadataOperationType> OperationType { get; set; }
		
		/// <summary>
		/// Warnings encountered during operation execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchOperationMetadataOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATCH_OPERATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATCH = 1,
	}
	
	/// <summary>
	/// Associates members, or principals, with a role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a Google service account. For example, my-other-app@appspot.gserviceaccount.com. serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]: An identifier for a Kubernetes service account (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa]. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com. principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}: A single identity in a workforce identity pool. principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}: All workforce identities in a group. principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}: All workforce identities with a specific attribute value. principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*: All identities in a workforce identity pool. principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}: A single identity in a workload identity pool. principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}: A workload identity pool group. principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}: All identities in a workload identity pool with a certain attribute. principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*: All identities in a workload identity pool. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding. deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}: Deleted single identity in a workforce identity pool. For example, deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of members, or principals. For example, roles/viewer, roles/editor, or roles/owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A request to cancel a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelJobRequest
	{
	}
	
	/// <summary>
	/// Describes the identifying information, config, and status of a Dataproc cluster
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Cluster
	{
		
		/// <summary>
		/// Required. The cluster name, which must be unique within a project. The name must start with a lowercase letter, and can contain up to 51 lowercase letters, numbers, and hyphens. It cannot end with a hyphen. The name of a deleted cluster can be reused.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// Output only. A cluster UUID (Unique Universal Identifier). Dataproc generates this value when it creates the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterUuid")]
		public string ClusterUuid { get; set; }
		
		/// <summary>
		/// The cluster config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ClusterConfig Config { get; set; }
		
		/// <summary>
		/// Optional. The labels to associate with this cluster. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Contains cluster daemon metrics, such as HDFS and YARN stats.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public ClusterMetrics Metrics { get; set; }
		
		/// <summary>
		/// Required. The Google Cloud Platform project ID that the cluster belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The status of a cluster and its instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ClusterStatus Status { get; set; }
		
		/// <summary>
		/// Output only. The previous cluster status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusHistory")]
		public ClusterStatus[] StatusHistory { get; set; }
		
		/// <summary>
		/// The Dataproc cluster config for a cluster that does not directly control the underlying compute resources, such as a Dataproc-on-GKE cluster (https://cloud.google.com/dataproc/docs/guides/dpgke/dataproc-gke-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualClusterConfig")]
		public VirtualClusterConfig VirtualClusterConfig { get; set; }
	}
	
	/// <summary>
	/// The cluster config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterConfig
	{
		
		/// <summary>
		/// Autoscaling Policy config associated with the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscalingConfig")]
		public AutoscalingConfig AutoscalingConfig { get; set; }
		
		/// <summary>
		/// Optional. The node group settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auxiliaryNodeGroups")]
		public AuxiliaryNodeGroup[] AuxiliaryNodeGroups { get; set; }
		
		/// <summary>
		/// Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configBucket")]
		public string ConfigBucket { get; set; }
		
		/// <summary>
		/// Dataproc metric config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataprocMetricConfig")]
		public DataprocMetricConfig DataprocMetricConfig { get; set; }
		
		/// <summary>
		/// Encryption settings for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// Endpoint config for this cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointConfig")]
		public EndpointConfig EndpointConfig { get; set; }
		
		/// <summary>
		/// Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gceClusterConfig")]
		public GceClusterConfig GceClusterConfig { get; set; }
		
		/// <summary>
		/// The cluster's GKE config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeClusterConfig")]
		public GkeClusterConfig GkeClusterConfig { get; set; }
		
		/// <summary>
		/// Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ "${ROLE}" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initializationActions")]
		public NodeInitializationAction[] InitializationActions { get; set; }
		
		/// <summary>
		/// Specifies the cluster auto-delete schedule configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifecycleConfig")]
		public LifecycleConfig LifecycleConfig { get; set; }
		
		/// <summary>
		/// The config settings for Compute Engine resources in an instance group, such as a master or worker group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterConfig")]
		public InstanceGroupConfig MasterConfig { get; set; }
		
		/// <summary>
		/// Specifies a Metastore configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metastoreConfig")]
		public MetastoreConfig MetastoreConfig { get; set; }
		
		/// <summary>
		/// The config settings for Compute Engine resources in an instance group, such as a master or worker group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryWorkerConfig")]
		public InstanceGroupConfig SecondaryWorkerConfig { get; set; }
		
		/// <summary>
		/// Security related configuration, including encryption, Kerberos, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityConfig")]
		public SecurityConfig SecurityConfig { get; set; }
		
		/// <summary>
		/// Specifies the selection and config of software inside the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareConfig")]
		public SoftwareConfig SoftwareConfig { get; set; }
		
		/// <summary>
		/// Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempBucket")]
		public string TempBucket { get; set; }
		
		/// <summary>
		/// The config settings for Compute Engine resources in an instance group, such as a master or worker group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerConfig")]
		public InstanceGroupConfig WorkerConfig { get; set; }
	}
	
	/// <summary>
	/// Dataproc metric config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataprocMetricConfig
	{
		
		/// <summary>
		/// Required. Metrics sources to enable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
	}
	
	/// <summary>
	/// A Dataproc custom metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Metric
	{
		
		/// <summary>
		/// Optional. Specify one or more Custom metrics (https://cloud.google.com/dataproc/docs/guides/dataproc-metrics#custom_metrics) to collect for the metric course (for the SPARK metric source (any Spark metric (https://spark.apache.org/docs/latest/monitoring.html#metrics) can be specified).Provide metrics in the following format: METRIC_SOURCE: INSTANCE:GROUP:METRIC Use camelcase as appropriate.Examples: yarn:ResourceManager:QueueMetrics:AppsCompleted spark:driver:DAGScheduler:job.allJobs sparkHistoryServer:JVM:Memory:NonHeapMemoryUsage.committed hiveserver2:JVM:Memory:NonHeapMemoryUsage.used Notes: Only the specified overridden metrics are collected for the metric source. For example, if one or more spark:executive metrics are listed as metric overrides, other SPARK metrics are not collected. The collection of the metrics for other enabled custom metric sources is unaffected. For example, if both SPARK andd YARN metric sources are enabled, and overrides are provided for Spark metrics only, all YARN metrics are collected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricOverrides")]
		public string[] MetricOverrides { get; set; }
		
		/// <summary>
		/// Required. A standard set of metrics is collected unless metricOverrides are specified for the metric source (see Custom metrics (https://cloud.google.com/dataproc/docs/guides/dataproc-metrics#custom_metrics) for more information).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricSource")]
		public System.Nullable<MetricMetricSource> MetricSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MetricMetricSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONITORING_AGENT_DEFAULTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HDFS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPARK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YARN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPARK_HISTORY_SERVER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIVESERVER2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIVEMETASTORE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLINK = 8,
	}
	
	/// <summary>
	/// Encryption settings for the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptionConfig
	{
		
		/// <summary>
		/// Optional. The Cloud KMS key resource name to use for persistent disk encryption for all instances in the cluster. See Use CMEK with cluster data (https://cloud.google.com//dataproc/docs/concepts/configuring-clusters/customer-managed-encryption#use_cmek_with_cluster_data) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcePdKmsKeyName")]
		public string GcePdKmsKeyName { get; set; }
		
		/// <summary>
		/// Optional. The Cloud KMS key resource name to use for cluster persistent disk and job argument encryption. See Use CMEK with cluster data (https://cloud.google.com//dataproc/docs/concepts/configuring-clusters/customer-managed-encryption#use_cmek_with_cluster_data) for more information.When this key resource name is provided, the following job arguments of the following job types submitted to the cluster are encrypted using CMEK: FlinkJob args (https://cloud.google.com/dataproc/docs/reference/rest/v1/FlinkJob) HadoopJob args (https://cloud.google.com/dataproc/docs/reference/rest/v1/HadoopJob) SparkJob args (https://cloud.google.com/dataproc/docs/reference/rest/v1/SparkJob) SparkRJob args (https://cloud.google.com/dataproc/docs/reference/rest/v1/SparkRJob) PySparkJob args (https://cloud.google.com/dataproc/docs/reference/rest/v1/PySparkJob) SparkSqlJob (https://cloud.google.com/dataproc/docs/reference/rest/v1/SparkSqlJob) scriptVariables and queryList.queries HiveJob (https://cloud.google.com/dataproc/docs/reference/rest/v1/HiveJob) scriptVariables and queryList.queries PigJob (https://cloud.google.com/dataproc/docs/reference/rest/v1/PigJob) scriptVariables and queryList.queries PrestoJob (https://cloud.google.com/dataproc/docs/reference/rest/v1/PrestoJob) scriptVariables and queryList.queries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		public string KmsKey { get; set; }
	}
	
	/// <summary>
	/// Endpoint config for this cluster
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointConfig
	{
		
		/// <summary>
		/// Optional. If true, enable http access to specific ports on the cluster from external sources. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableHttpPortAccess")]
		public System.Nullable<System.Boolean> EnableHttpPortAccess { get; set; }
		
		/// <summary>
		/// Output only. The map of port descriptions to URLs. Will only be populated if enable_http_port_access is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpPorts")]
		public System.Collections.Generic.Dictionary<string, string> HttpPorts { get; set; }
	}
	
	/// <summary>
	/// Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GceClusterConfig
	{
		
		/// <summary>
		/// Confidential Instance Config for clusters using Confidential VMs (https://cloud.google.com/compute/confidential-vm/docs)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidentialInstanceConfig")]
		public ConfidentialInstanceConfig ConfidentialInstanceConfig { get; set; }
		
		/// <summary>
		/// Optional. If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalIpOnly")]
		public System.Nullable<System.Boolean> InternalIpOnly { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine metadata entries to add to all instances (see Project and instance metadata (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the "default" network of the project is used, if it exists. Cannot be a "Custom Subnet Network" (see Using Subnetworks (https://cloud.google.com/compute/docs/subnetworks) for more information).A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default projects/[project_id]/global/networks/default default
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkUri")]
		public string NetworkUri { get; set; }
		
		/// <summary>
		/// Node Group Affinity for clusters using sole-tenant node groups. The Dataproc NodeGroupAffinity resource is not related to the Dataproc NodeGroup resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeGroupAffinity")]
		public NodeGroupAffinity NodeGroupAffinity { get; set; }
		
		/// <summary>
		/// Optional. The type of IPv6 access for a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateIpv6GoogleAccess")]
		public System.Nullable<GceClusterConfigPrivateIpv6GoogleAccess> PrivateIpv6GoogleAccess { get; set; }
		
		/// <summary>
		/// Reservation Affinity for consuming Zonal reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservationAffinity")]
		public ReservationAffinity ReservationAffinity { get; set; }
		
		/// <summary>
		/// Optional. The Dataproc service account (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/service-accounts#service_accounts_in_dataproc) (also see VM Data Plane identity (https://cloud.google.com/dataproc/docs/concepts/iam/dataproc-principals#vm_service_account_data_plane_identity)) used by Dataproc cluster VM instances to access Google Cloud Platform services.If not specified, the Compute Engine default service account (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// Optional. The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: https://www.googleapis.com/auth/cloud.useraccounts.readonly https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/logging.writeIf no scopes are specified, the following defaults are also provided: https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/bigtable.admin.table https://www.googleapis.com/auth/bigtable.data https://www.googleapis.com/auth/devstorage.full_control
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountScopes")]
		public string[] ServiceAccountScopes { get; set; }
		
		/// <summary>
		/// Shielded Instance Config for clusters using Compute Engine Shielded VMs (https://cloud.google.com/security/shielded-cloud/shielded-vm).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shieldedInstanceConfig")]
		public ShieldedInstanceConfig ShieldedInstanceConfig { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/regions/[region]/subnetworks/sub0 projects/[project_id]/regions/[region]/subnetworks/sub0 sub0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetworkUri")]
		public string SubnetworkUri { get; set; }
		
		/// <summary>
		/// The Compute Engine tags to add to all instances (see Tagging instances (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine zone where the Dataproc cluster will be located. If omitted, the service will pick a zone in the cluster's Compute Engine region. On a get request, zone will always be present.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone] projects/[project_id]/zones/[zone] [zone]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneUri")]
		public string ZoneUri { get; set; }
	}
	
	/// <summary>
	/// Confidential Instance Config for clusters using Confidential VMs (https://cloud.google.com/compute/confidential-vm/docs)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfidentialInstanceConfig
	{
		
		/// <summary>
		/// Optional. Defines whether the instance should have confidential compute enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableConfidentialCompute")]
		public System.Nullable<System.Boolean> EnableConfidentialCompute { get; set; }
	}
	
	/// <summary>
	/// Node Group Affinity for clusters using sole-tenant node groups. The Dataproc NodeGroupAffinity resource is not related to the Dataproc NodeGroup resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeGroupAffinity
	{
		
		/// <summary>
		/// Required. The URI of a sole-tenant node group resource (https://cloud.google.com/compute/docs/reference/rest/v1/nodeGroups) that the cluster will be created on.A full URL, partial URI, or node group name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]/nodeGroups/node-group-1 projects/[project_id]/zones/[zone]/nodeGroups/node-group-1 node-group-1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeGroupUri")]
		public string NodeGroupUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GceClusterConfigPrivateIpv6GoogleAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INHERIT_FROM_SUBNETWORK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTBOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIDIRECTIONAL = 3,
	}
	
	/// <summary>
	/// Reservation Affinity for consuming Zonal reservation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservationAffinity
	{
		
		/// <summary>
		/// Optional. Type of reservation to consume
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumeReservationType")]
		public System.Nullable<ReservationAffinityConsumeReservationType> ConsumeReservationType { get; set; }
		
		/// <summary>
		/// Optional. Corresponds to the label key of reservation resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Optional. Corresponds to the label values of reservation resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReservationAffinityConsumeReservationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_RESERVATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY_RESERVATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIC_RESERVATION = 3,
	}
	
	/// <summary>
	/// Shielded Instance Config for clusters using Compute Engine Shielded VMs (https://cloud.google.com/security/shielded-cloud/shielded-vm).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShieldedInstanceConfig
	{
		
		/// <summary>
		/// Optional. Defines whether instances have integrity monitoring enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableIntegrityMonitoring")]
		public System.Nullable<System.Boolean> EnableIntegrityMonitoring { get; set; }
		
		/// <summary>
		/// Optional. Defines whether instances have Secure Boot enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSecureBoot")]
		public System.Nullable<System.Boolean> EnableSecureBoot { get; set; }
		
		/// <summary>
		/// Optional. Defines whether instances have the vTPM enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableVtpm")]
		public System.Nullable<System.Boolean> EnableVtpm { get; set; }
	}
	
	/// <summary>
	/// The cluster's GKE config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GkeClusterConfig
	{
		
		/// <summary>
		/// Optional. A target GKE cluster to deploy to. It must be in the same project and region as the Dataproc cluster (the GKE cluster can be zonal or regional). Format: 'projects/{project}/locations/{location}/clusters/{cluster_id}'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeClusterTarget")]
		public string GkeClusterTarget { get; set; }
		
		/// <summary>
		/// Deprecated. Used only for the deprecated beta. A full, namespace-isolated deployment target for an existing GKE cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespacedGkeDeploymentTarget")]
		public NamespacedGkeDeploymentTarget NamespacedGkeDeploymentTarget { get; set; }
		
		/// <summary>
		/// Optional. GKE node pools where workloads will be scheduled. At least one node pool must be assigned the DEFAULT GkeNodePoolTarget.Role. If a GkeNodePoolTarget is not specified, Dataproc constructs a DEFAULT GkeNodePoolTarget. Each role can be given to only one GkeNodePoolTarget. All node pools must have the same location settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolTarget")]
		public GkeNodePoolTarget[] NodePoolTarget { get; set; }
	}
	
	/// <summary>
	/// Deprecated. Used only for the deprecated beta. A full, namespace-isolated deployment target for an existing GKE cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NamespacedGkeDeploymentTarget
	{
		
		/// <summary>
		/// Optional. A namespace within the GKE cluster to deploy into.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterNamespace")]
		public string ClusterNamespace { get; set; }
		
		/// <summary>
		/// Optional. The target GKE cluster to deploy to. Format: 'projects/{project}/locations/{location}/clusters/{cluster_id}'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetGkeCluster")]
		public string TargetGkeCluster { get; set; }
	}
	
	/// <summary>
	/// GKE node pools that Dataproc workloads run on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GkeNodePoolTarget
	{
		
		/// <summary>
		/// Required. The target GKE node pool. Format: 'projects/{project}/locations/{location}/clusters/{cluster}/nodePools/{node_pool}'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePool")]
		public string NodePool { get; set; }
		
		/// <summary>
		/// The configuration of a GKE node pool used by a Dataproc-on-GKE cluster (https://cloud.google.com/dataproc/docs/concepts/jobs/dataproc-gke#create-a-dataproc-on-gke-cluster).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolConfig")]
		public GkeNodePoolConfig NodePoolConfig { get; set; }
		
		/// <summary>
		/// Required. The roles associated with the GKE node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
	}
	
	/// <summary>
	/// The configuration of a GKE node pool used by a Dataproc-on-GKE cluster (https://cloud.google.com/dataproc/docs/concepts/jobs/dataproc-gke#create-a-dataproc-on-gke-cluster).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GkeNodePoolConfig
	{
		
		/// <summary>
		/// GkeNodePoolAutoscaling contains information the cluster autoscaler needs to adjust the size of the node pool to the current cluster usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscaling")]
		public GkeNodePoolAutoscalingConfig Autoscaling { get; set; }
		
		/// <summary>
		/// Parameters that describe cluster nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public GkeNodeConfig Config { get; set; }
		
		/// <summary>
		/// Optional. The list of Compute Engine zones (https://cloud.google.com/compute/docs/zones#available) where node pool nodes associated with a Dataproc on GKE virtual cluster will be located.Note: All node pools associated with a virtual cluster must be located in the same region as the virtual cluster, and they must be located in the same zone within that region.If a location is not specified during node pool creation, Dataproc on GKE will choose the zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
	}
	
	/// <summary>
	/// GkeNodePoolAutoscaling contains information the cluster autoscaler needs to adjust the size of the node pool to the current cluster usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GkeNodePoolAutoscalingConfig
	{
		
		/// <summary>
		/// The maximum number of nodes in the node pool. Must be >= min_node_count, and must be > 0. Note: Quota must be sufficient to scale up the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxNodeCount")]
		public System.Nullable<System.Int32> MaxNodeCount { get; set; }
		
		/// <summary>
		/// The minimum number of nodes in the node pool. Must be >= 0 and <= max_node_count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minNodeCount")]
		public System.Nullable<System.Int32> MinNodeCount { get; set; }
	}
	
	/// <summary>
	/// Parameters that describe cluster nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GkeNodeConfig
	{
		
		/// <summary>
		/// Optional. A list of hardware accelerators (https://cloud.google.com/compute/docs/gpus) to attach to each node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accelerators")]
		public GkeNodePoolAcceleratorConfig[] Accelerators { get; set; }
		
		/// <summary>
		/// Optional. The Customer Managed Encryption Key (CMEK) (https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek) used to encrypt the boot disk attached to each node in the node pool. Specify the key using the following format: projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDiskKmsKey")]
		public string BootDiskKmsKey { get; set; }
		
		/// <summary>
		/// Optional. The number of local SSD disks to attach to the node, which is limited by the maximum number of disks allowable per zone (see Adding Local SSDs (https://cloud.google.com/compute/docs/disks/local-ssd)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localSsdCount")]
		public System.Nullable<System.Int32> LocalSsdCount { get; set; }
		
		/// <summary>
		/// Optional. The name of a Compute Engine machine type (https://cloud.google.com/compute/docs/machine-types).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// Optional. Minimum CPU platform (https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) to be used by this instance. The instance may be scheduled on the specified or a newer CPU platform. Specify the friendly names of CPU platforms, such as "Intel Haswell"` or Intel Sandy Bridge".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minCpuPlatform")]
		public string MinCpuPlatform { get; set; }
		
		/// <summary>
		/// Optional. Whether the nodes are created as legacy preemptible VM instances (https://cloud.google.com/compute/docs/instances/preemptible). Also see Spot VMs, preemptible VM instances without a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preemptible")]
		public System.Nullable<System.Boolean> Preemptible { get; set; }
		
		/// <summary>
		/// Optional. Whether the nodes are created as Spot VM instances (https://cloud.google.com/compute/docs/instances/spot). Spot VMs are the latest update to legacy preemptible VMs. Spot VMs do not have a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spot")]
		public System.Nullable<System.Boolean> Spot { get; set; }
	}
	
	/// <summary>
	/// A GkeNodeConfigAcceleratorConfig represents a Hardware Accelerator request for a node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GkeNodePoolAcceleratorConfig
	{
		
		/// <summary>
		/// The number of accelerator cards exposed to an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorCount")]
		public string AcceleratorCount { get; set; }
		
		/// <summary>
		/// The accelerator type resource namename (see GPUs on Compute Engine).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorType")]
		public string AcceleratorType { get; set; }
		
		/// <summary>
		/// Size of partitions to create on the GPU. Valid values are described in the NVIDIA mig user guide (https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpuPartitionSize")]
		public string GpuPartitionSize { get; set; }
	}
	
	/// <summary>
	/// Specifies an executable to run on a fully configured node and a timeout period for executable completion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeInitializationAction
	{
		
		/// <summary>
		/// Required. Cloud Storage URI of executable file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executableFile")]
		public string ExecutableFile { get; set; }
		
		/// <summary>
		/// Optional. Amount of time executable has to complete. Default is 10 minutes (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionTimeout")]
		public string ExecutionTimeout { get; set; }
	}
	
	/// <summary>
	/// Specifies the cluster auto-delete schedule configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifecycleConfig
	{
		
		/// <summary>
		/// Optional. The time when cluster will be auto-deleted (see JSON representation of Timestamp (https://developers.google.com/protocol-buffers/docs/proto3#json)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDeleteTime")]
		public string AutoDeleteTime { get; set; }
		
		/// <summary>
		/// Optional. The lifetime duration of cluster. The cluster will be auto-deleted at the end of this period. Minimum value is 10 minutes; maximum value is 14 days (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDeleteTtl")]
		public string AutoDeleteTtl { get; set; }
		
		/// <summary>
		/// Optional. The duration to keep the cluster alive while idling (when no jobs are running). Passing this threshold will cause the cluster to be deleted. Minimum value is 5 minutes; maximum value is 14 days (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleDeleteTtl")]
		public string IdleDeleteTtl { get; set; }
		
		/// <summary>
		/// Output only. The time when cluster became idle (most recent job finished) and became eligible for deletion due to idleness (see JSON representation of Timestamp (https://developers.google.com/protocol-buffers/docs/proto3#json)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleStartTime")]
		public string IdleStartTime { get; set; }
	}
	
	/// <summary>
	/// Security related configuration, including encryption, Kerberos, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecurityConfig
	{
		
		/// <summary>
		/// Identity related configuration, including service account based secure multi-tenancy user mappings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityConfig")]
		public IdentityConfig IdentityConfig { get; set; }
		
		/// <summary>
		/// Specifies Kerberos related configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kerberosConfig")]
		public KerberosConfig KerberosConfig { get; set; }
	}
	
	/// <summary>
	/// Identity related configuration, including service account based secure multi-tenancy user mappings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentityConfig
	{
		
		/// <summary>
		/// Required. Map of user to service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userServiceAccountMapping")]
		public System.Collections.Generic.Dictionary<string, string> UserServiceAccountMapping { get; set; }
	}
	
	/// <summary>
	/// Specifies Kerberos related configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KerberosConfig
	{
		
		/// <summary>
		/// Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossRealmTrustAdminServer")]
		public string CrossRealmTrustAdminServer { get; set; }
		
		/// <summary>
		/// Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossRealmTrustKdc")]
		public string CrossRealmTrustKdc { get; set; }
		
		/// <summary>
		/// Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossRealmTrustRealm")]
		public string CrossRealmTrustRealm { get; set; }
		
		/// <summary>
		/// Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossRealmTrustSharedPasswordUri")]
		public string CrossRealmTrustSharedPasswordUri { get; set; }
		
		/// <summary>
		/// Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableKerberos")]
		public System.Nullable<System.Boolean> EnableKerberos { get; set; }
		
		/// <summary>
		/// Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kdcDbKeyUri")]
		public string KdcDbKeyUri { get; set; }
		
		/// <summary>
		/// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyPasswordUri")]
		public string KeyPasswordUri { get; set; }
		
		/// <summary>
		/// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keystorePasswordUri")]
		public string KeystorePasswordUri { get; set; }
		
		/// <summary>
		/// Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keystoreUri")]
		public string KeystoreUri { get; set; }
		
		/// <summary>
		/// Optional. The URI of the KMS key used to encrypt sensitive files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyUri")]
		public string KmsKeyUri { get; set; }
		
		/// <summary>
		/// Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="realm")]
		public string Realm { get; set; }
		
		/// <summary>
		/// Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootPrincipalPasswordUri")]
		public string RootPrincipalPasswordUri { get; set; }
		
		/// <summary>
		/// Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tgtLifetimeHours")]
		public System.Nullable<System.Int32> TgtLifetimeHours { get; set; }
		
		/// <summary>
		/// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="truststorePasswordUri")]
		public string TruststorePasswordUri { get; set; }
		
		/// <summary>
		/// Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="truststoreUri")]
		public string TruststoreUri { get; set; }
	}
	
	/// <summary>
	/// Specifies the selection and config of software inside the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SoftwareConfig
	{
		
		/// <summary>
		/// Optional. The version of software inside the cluster. It must be one of the supported Dataproc Versions (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported_dataproc_versions), such as "1.2" (including a subminor version, such as "1.2.29"), or the "preview" version (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageVersion")]
		public string ImageVersion { get; set; }
		
		/// <summary>
		/// Optional. The set of components to activate on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optionalComponents")]
		public string[] OptionalComponents { get; set; }
		
		/// <summary>
		/// Optional. The properties to set on daemon config files.Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. The following are supported prefixes and their mappings: capacity-scheduler: capacity-scheduler.xml core: core-site.xml distcp: distcp-default.xml hdfs: hdfs-site.xml hive: hive-site.xml mapred: mapred-site.xml pig: pig.properties spark: spark-defaults.conf yarn: yarn-site.xmlFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	/// <summary>
	/// Contains cluster daemon metrics, such as HDFS and YARN stats.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterMetrics
	{
		
		/// <summary>
		/// The HDFS metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hdfsMetrics")]
		public System.Collections.Generic.Dictionary<string, string> HdfsMetrics { get; set; }
		
		/// <summary>
		/// YARN metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yarnMetrics")]
		public System.Collections.Generic.Dictionary<string, string> YarnMetrics { get; set; }
	}
	
	/// <summary>
	/// The status of a cluster and its instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterStatus
	{
		
		/// <summary>
		/// Optional. Output only. Details of cluster's state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Output only. The cluster's state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ClusterStatusState> State { get; set; }
		
		/// <summary>
		/// Output only. Time when this state was entered (see JSON representation of Timestamp (https://developers.google.com/protocol-buffers/docs/proto3#json)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateStartTime")]
		public string StateStartTime { get; set; }
		
		/// <summary>
		/// Output only. Additional state information that includes status reported by the agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substate")]
		public System.Nullable<ClusterStatusSubstate> Substate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClusterStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_DUE_TO_UPDATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPAIRING = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClusterStatusSubstate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STALE_STATUS = 2,
	}
	
	/// <summary>
	/// The Dataproc cluster config for a cluster that does not directly control the underlying compute resources, such as a Dataproc-on-GKE cluster (https://cloud.google.com/dataproc/docs/guides/dpgke/dataproc-gke-overview).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirtualClusterConfig
	{
		
		/// <summary>
		/// Auxiliary services configuration for a Cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auxiliaryServicesConfig")]
		public AuxiliaryServicesConfig AuxiliaryServicesConfig { get; set; }
		
		/// <summary>
		/// The configuration for running the Dataproc cluster on Kubernetes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubernetesClusterConfig")]
		public KubernetesClusterConfig KubernetesClusterConfig { get; set; }
		
		/// <summary>
		/// Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stagingBucket")]
		public string StagingBucket { get; set; }
	}
	
	/// <summary>
	/// The configuration for running the Dataproc cluster on Kubernetes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KubernetesClusterConfig
	{
		
		/// <summary>
		/// The cluster's GKE config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeClusterConfig")]
		public GkeClusterConfig GkeClusterConfig { get; set; }
		
		/// <summary>
		/// Optional. A namespace within the Kubernetes cluster to deploy into. If this namespace does not exist, it is created. If it exists, Dataproc verifies that another Dataproc VirtualCluster is not installed into it. If not specified, the name of the Dataproc Cluster is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubernetesNamespace")]
		public string KubernetesNamespace { get; set; }
		
		/// <summary>
		/// The software configuration for this Dataproc cluster running on Kubernetes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubernetesSoftwareConfig")]
		public KubernetesSoftwareConfig KubernetesSoftwareConfig { get; set; }
	}
	
	/// <summary>
	/// The software configuration for this Dataproc cluster running on Kubernetes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KubernetesSoftwareConfig
	{
		
		/// <summary>
		/// The components that should be installed in this Dataproc cluster. The key must be a string from the KubernetesComponent enumeration. The value is the version of the software to be installed. At least one entry must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public System.Collections.Generic.Dictionary<string, string> ComponentVersion { get; set; }
		
		/// <summary>
		/// The properties to set on daemon config files.Property keys are specified in prefix:property format, for example spark:spark.kubernetes.container.image. The following are supported prefixes and their mappings: spark: spark-defaults.confFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	/// <summary>
	/// The cluster operation triggered by a workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterOperation
	{
		
		/// <summary>
		/// Output only. Indicates the operation is done.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// Output only. Error, if operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// Output only. The id of the cluster operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// Metadata describing the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterOperationMetadata
	{
		
		/// <summary>
		/// Output only. Child operation ids
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childOperationIds")]
		public string[] ChildOperationIds { get; set; }
		
		/// <summary>
		/// Output only. Name of the cluster for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// Output only. Cluster UUID for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterUuid")]
		public string ClusterUuid { get; set; }
		
		/// <summary>
		/// Output only. Short description of operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. Labels associated with the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The operation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public string OperationType { get; set; }
		
		/// <summary>
		/// The status of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ClusterOperationStatus Status { get; set; }
		
		/// <summary>
		/// Output only. The previous operation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusHistory")]
		public ClusterOperationStatus[] StatusHistory { get; set; }
		
		/// <summary>
		/// Output only. Errors encountered during operation execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	/// <summary>
	/// The status of the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterOperationStatus
	{
		
		/// <summary>
		/// Output only. A message containing any operation metadata details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Output only. A message containing the detailed operation state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerState")]
		public string InnerState { get; set; }
		
		/// <summary>
		/// Output only. A message containing the operation state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ClusterOperationStatusState> State { get; set; }
		
		/// <summary>
		/// Output only. The time this state was entered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateStartTime")]
		public string StateStartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClusterOperationStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 3,
	}
	
	/// <summary>
	/// A selector that chooses target cluster for jobs based on metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSelector
	{
		
		/// <summary>
		/// Required. The cluster labels. Cluster must have all labels to match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterLabels")]
		public System.Collections.Generic.Dictionary<string, string> ClusterLabels { get; set; }
		
		/// <summary>
		/// Optional. The zone where workflow process executes. This parameter does not affect the selection of the cluster.If unspecified, the zone of the first cluster matching the selector is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// A request to collect cluster diagnostic information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiagnoseClusterRequest
	{
		
		/// <summary>
		/// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive).The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diagnosisInterval")]
		public Interval DiagnosisInterval { get; set; }
		
		/// <summary>
		/// Optional. DEPRECATED Specifies the job on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="job")]
		public string Job { get; set; }
		
		/// <summary>
		/// Optional. Specifies a list of jobs on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public string[] Jobs { get; set; }
		
		/// <summary>
		/// Optional. (Optional) The access type to the diagnostic tarball. If not specified, falls back to default access of the bucket
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tarballAccess")]
		public System.Nullable<DiagnoseClusterRequestTarballAccess> TarballAccess { get; set; }
		
		/// <summary>
		/// Optional. (Optional) The output Cloud Storage directory for the diagnostic tarball. If not specified, a task-specific directory in the cluster's staging bucket will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tarballGcsDir")]
		public string TarballGcsDir { get; set; }
		
		/// <summary>
		/// Optional. DEPRECATED Specifies the yarn application on which diagnosis is to be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yarnApplicationId")]
		public string YarnApplicationId { get; set; }
		
		/// <summary>
		/// Optional. Specifies a list of yarn applications on which diagnosis is to be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yarnApplicationIds")]
		public string[] YarnApplicationIds { get; set; }
	}
	
	/// <summary>
	/// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive).The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Interval
	{
		
		/// <summary>
		/// Optional. Exclusive end of the interval.If specified, a Timestamp matching this interval will have to be before the end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Optional. Inclusive start of the interval.If specified, a Timestamp matching this interval will have to be the same or after the start.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DiagnoseClusterRequestTarballAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARBALL_ACCESS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_CLOUD_SUPPORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_DATAPROC_DIAGNOSE = 2,
	}
	
	/// <summary>
	/// The location of diagnostic output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiagnoseClusterResults
	{
		
		/// <summary>
		/// Output only. The Cloud Storage URI of the diagnostic output. The output report is a plain text file with a summary of collected diagnostics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUri")]
		public string OutputUri { get; set; }
	}
	
	/// <summary>
	/// Driver scheduling configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DriverSchedulingConfig
	{
		
		/// <summary>
		/// Required. The amount of memory in MB the driver is requesting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryMb")]
		public System.Nullable<System.Int32> MemoryMb { get; set; }
		
		/// <summary>
		/// Required. The number of vCPUs the driver is requesting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcores")]
		public System.Nullable<System.Int32> Vcores { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// A Dataproc job for running Apache Flink applications on YARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlinkJob
	{
		
		/// <summary>
		/// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision might occur that causes an incorrect job submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Flink driver and tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jarFileUris")]
		public string[] JarFileUris { get; set; }
		
		/// <summary>
		/// The runtime logging config of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jarFileUris.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainClass")]
		public string MainClass { get; set; }
		
		/// <summary>
		/// The HCFS URI of the jar file that contains the main class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainJarFileUri")]
		public string MainJarFileUri { get; set; }
		
		/// <summary>
		/// Optional. A mapping of property names to values, used to configure Flink. Properties that conflict with values set by the Dataproc API might beoverwritten. Can include properties set in/etc/flink/conf/flink-defaults.conf and classes in user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Optional. HCFS URI of the savepoint, which contains the last saved progress for starting the current job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="savepointUri")]
		public string SavepointUri { get; set; }
	}
	
	/// <summary>
	/// The runtime logging config of the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoggingConfig
	{
		
		/// <summary>
		/// The per-package log levels for the driver. This can include "root" package name to configure rootLogger. Examples: - 'com.google = FATAL' - 'root = INFO' - 'org.apache = DEBUG'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driverLogLevels")]
		public System.Collections.Generic.Dictionary<string, LoggingConfigDriverLogLevels> DriverLogLevels { get; set; }
	}
	
	public enum LoggingConfigDriverLogLevels
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FATAL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 8,
	}
	
	/// <summary>
	/// Request message for GetIamPolicy method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIamPolicyRequest
	{
		
		/// <summary>
		/// Encapsulates settings provided to GetIamPolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public GetPolicyOptions Options { get; set; }
	}
	
	/// <summary>
	/// Encapsulates settings provided to GetIamPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPolicyOptions
	{
		
		/// <summary>
		/// Optional. The maximum policy version that will be used to format the policy.Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset.The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedPolicyVersion")]
		public System.Nullable<System.Int32> RequestedPolicyVersion { get; set; }
	}
	
	/// <summary>
	/// Encryption settings for encrypting workflow template job arguments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig
	{
		
		/// <summary>
		/// Optional. The Cloud KMS key name to use for encrypting workflow template job arguments.When this this key is provided, the following workflow template job arguments (https://cloud.google.com/dataproc/docs/concepts/workflows/use-workflows#adding_jobs_to_a_template), if present, are CMEK encrypted (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/customer-managed-encryption#use_cmek_with_workflow_template_data): FlinkJob args (https://cloud.google.com/dataproc/docs/reference/rest/v1/FlinkJob) HadoopJob args (https://cloud.google.com/dataproc/docs/reference/rest/v1/HadoopJob) SparkJob args (https://cloud.google.com/dataproc/docs/reference/rest/v1/SparkJob) SparkRJob args (https://cloud.google.com/dataproc/docs/reference/rest/v1/SparkRJob) PySparkJob args (https://cloud.google.com/dataproc/docs/reference/rest/v1/PySparkJob) SparkSqlJob (https://cloud.google.com/dataproc/docs/reference/rest/v1/SparkSqlJob) scriptVariables and queryList.queries HiveJob (https://cloud.google.com/dataproc/docs/reference/rest/v1/HiveJob) scriptVariables and queryList.queries PigJob (https://cloud.google.com/dataproc/docs/reference/rest/v1/PigJob) scriptVariables and queryList.queries PrestoJob (https://cloud.google.com/dataproc/docs/reference/rest/v1/PrestoJob) scriptVariables and queryList.queries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		public string KmsKey { get; set; }
	}
	
	/// <summary>
	/// A Dataproc job for running Apache Hadoop MapReduce (https://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html) jobs on Apache Hadoop YARN (https://hadoop.apache.org/docs/r2.7.1/hadoop-yarn/hadoop-yarn-site/YARN.html).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HadoopJob
	{
		
		/// <summary>
		/// Optional. HCFS URIs of archives to be extracted in the working directory of Hadoop drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz, or .zip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveUris")]
		public string[] ArchiveUris { get; set; }
		
		/// <summary>
		/// Optional. The arguments to pass to the driver. Do not include arguments, such as -libjars or -Dfoo=bar, that can be set as job properties, since a collision might occur that causes an incorrect job submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Optional. HCFS (Hadoop Compatible Filesystem) URIs of files to be copied to the working directory of Hadoop drivers and distributed tasks. Useful for naively parallel tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUris")]
		public string[] FileUris { get; set; }
		
		/// <summary>
		/// Optional. Jar file URIs to add to the CLASSPATHs of the Hadoop driver and tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jarFileUris")]
		public string[] JarFileUris { get; set; }
		
		/// <summary>
		/// The runtime logging config of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// The name of the driver's main class. The jar file containing the class must be in the default CLASSPATH or specified in jar_file_uris.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainClass")]
		public string MainClass { get; set; }
		
		/// <summary>
		/// The HCFS URI of the jar file containing the main class. Examples: 'gs://foo-bucket/analytics-binaries/extract-useful-metrics-mr.jar' 'hdfs:/tmp/test-samples/custom-wordcount.jar' 'file:///home/usr/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainJarFileUri")]
		public string MainJarFileUri { get; set; }
		
		/// <summary>
		/// Optional. A mapping of property names to values, used to configure Hadoop. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in /etc/hadoop/conf/*-site and classes in user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	/// <summary>
	/// A Dataproc job for running Apache Hive (https://hive.apache.org/) queries on YARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HiveJob
	{
		
		/// <summary>
		/// Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continueOnFailure")]
		public System.Nullable<System.Boolean> ContinueOnFailure { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of jar files to add to the CLASSPATH of the Hive server and Hadoop MapReduce (MR) tasks. Can contain Hive SerDes and UDFs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jarFileUris")]
		public string[] JarFileUris { get; set; }
		
		/// <summary>
		/// Optional. A mapping of property names and values, used to configure Hive. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/hive/conf/hive-site.xml, and classes in user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The HCFS URI of the script that contains Hive queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryFileUri")]
		public string QueryFileUri { get; set; }
		
		/// <summary>
		/// A list of queries to run on a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryList")]
		public QueryList QueryList { get; set; }
		
		/// <summary>
		/// Optional. Mapping of query variable names to values (equivalent to the Hive command: SET name="value";).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptVariables")]
		public System.Collections.Generic.Dictionary<string, string> ScriptVariables { get; set; }
	}
	
	/// <summary>
	/// A list of queries to run on a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryList
	{
		
		/// <summary>
		/// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": [ "query1", "query2", "query3;query4", ] } } 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public string[] Queries { get; set; }
	}
	
	/// <summary>
	/// A request to inject credentials into a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InjectCredentialsRequest
	{
		
		/// <summary>
		/// Required. The cluster UUID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterUuid")]
		public string ClusterUuid { get; set; }
		
		/// <summary>
		/// Required. The encrypted credentials being injected in to the cluster.The client is responsible for encrypting the credentials in a way that is supported by the cluster.A wrapped value is used here so that the actual contents of the encrypted credentials are not written to audit logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialsCiphertext")]
		public string CredentialsCiphertext { get; set; }
	}
	
	/// <summary>
	/// A request to instantiate a workflow template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstantiateWorkflowTemplateRequest
	{
		
		/// <summary>
		/// Optional. Map from parameter names to values that should be used for those parameters. Values may not exceed 1000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		/// <summary>
		/// Optional. A tag that prevents multiple concurrent workflow instances with the same tag from running. This mitigates risk of concurrent instances started due to retries.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The tag must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Optional. The version of workflow template to instantiate. If specified, the workflow will be instantiated only if the current version of the workflow template has the supplied version.This option cannot be used to instantiate a previous version of workflow template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A Dataproc job resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Job
	{
		
		/// <summary>
		/// Output only. Indicates whether the job is completed. If the value is false, the job is still in progress. If true, the job is completed, and status.state field will indicate if it was successful, failed, or cancelled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// Output only. If present, the location of miscellaneous control files which can be used as part of job setup and handling. If not present, control files might be placed in the same location as driver_output_uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driverControlFilesUri")]
		public string DriverControlFilesUri { get; set; }
		
		/// <summary>
		/// Output only. A URI pointing to the location of the stdout of the job's driver program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driverOutputResourceUri")]
		public string DriverOutputResourceUri { get; set; }
		
		/// <summary>
		/// Driver scheduling configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driverSchedulingConfig")]
		public DriverSchedulingConfig DriverSchedulingConfig { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache Flink applications on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flinkJob")]
		public FlinkJob FlinkJob { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache Hadoop MapReduce (https://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html) jobs on Apache Hadoop YARN (https://hadoop.apache.org/docs/r2.7.1/hadoop-yarn/hadoop-yarn-site/YARN.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hadoopJob")]
		public HadoopJob HadoopJob { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache Hive (https://hive.apache.org/) queries on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiveJob")]
		public HiveJob HiveJob { get; set; }
		
		/// <summary>
		/// Output only. A UUID that uniquely identifies a job within the project over time. This is in contrast to a user-settable reference.job_id that might be reused over time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobUuid")]
		public string JobUuid { get; set; }
		
		/// <summary>
		/// Optional. The labels to associate with this job. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache Pig (https://pig.apache.org/) queries on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pigJob")]
		public PigJob PigJob { get; set; }
		
		/// <summary>
		/// Dataproc job config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placement")]
		public JobPlacement Placement { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Presto (https://prestosql.io/) queries. IMPORTANT: The Dataproc Presto Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/presto) must be enabled when the cluster is created to submit a Presto job to the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prestoJob")]
		public PrestoJob PrestoJob { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache PySpark (https://spark.apache.org/docs/0.9.0/python-programming-guide.html) applications on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pysparkJob")]
		public PySparkJob PysparkJob { get; set; }
		
		/// <summary>
		/// Encapsulates the full scoping used to reference a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public JobReference Reference { get; set; }
		
		/// <summary>
		/// Job scheduling options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduling")]
		public JobScheduling Scheduling { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache Spark (https://spark.apache.org/) applications on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkJob")]
		public SparkJob SparkJob { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) applications on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkRJob")]
		public SparkRJob SparkRJob { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache Spark SQL (https://spark.apache.org/sql/) queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkSqlJob")]
		public SparkSqlJob SparkSqlJob { get; set; }
		
		/// <summary>
		/// Dataproc job status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		/// <summary>
		/// Output only. The previous job status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusHistory")]
		public JobStatus[] StatusHistory { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Trino (https://trino.io/) queries. IMPORTANT: The Dataproc Trino Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/trino) must be enabled when the cluster is created to submit a Trino job to the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trinoJob")]
		public TrinoJob TrinoJob { get; set; }
		
		/// <summary>
		/// Output only. The collection of YARN applications spun up by this job.Beta Feature: This report is available for testing purposes only. It might be changed before final release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yarnApplications")]
		public YarnApplication[] YarnApplications { get; set; }
	}
	
	/// <summary>
	/// A Dataproc job for running Apache Pig (https://pig.apache.org/) queries on YARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PigJob
	{
		
		/// <summary>
		/// Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continueOnFailure")]
		public System.Nullable<System.Boolean> ContinueOnFailure { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of jar files to add to the CLASSPATH of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jarFileUris")]
		public string[] JarFileUris { get; set; }
		
		/// <summary>
		/// The runtime logging config of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// Optional. A mapping of property names to values, used to configure Pig. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties, and classes in user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The HCFS URI of the script that contains the Pig queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryFileUri")]
		public string QueryFileUri { get; set; }
		
		/// <summary>
		/// A list of queries to run on a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryList")]
		public QueryList QueryList { get; set; }
		
		/// <summary>
		/// Optional. Mapping of query variable names to values (equivalent to the Pig command: name=[value]).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptVariables")]
		public System.Collections.Generic.Dictionary<string, string> ScriptVariables { get; set; }
	}
	
	/// <summary>
	/// Dataproc job config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobPlacement
	{
		
		/// <summary>
		/// Optional. Cluster labels to identify a cluster where the job will be submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterLabels")]
		public System.Collections.Generic.Dictionary<string, string> ClusterLabels { get; set; }
		
		/// <summary>
		/// Required. The name of the cluster where the job will be submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// Output only. A cluster UUID generated by the Dataproc service when the job is submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterUuid")]
		public string ClusterUuid { get; set; }
	}
	
	/// <summary>
	/// A Dataproc job for running Presto (https://prestosql.io/) queries. IMPORTANT: The Dataproc Presto Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/presto) must be enabled when the cluster is created to submit a Presto job to the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrestoJob
	{
		
		/// <summary>
		/// Optional. Presto client tags to attach to this query
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientTags")]
		public string[] ClientTags { get; set; }
		
		/// <summary>
		/// Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continueOnFailure")]
		public System.Nullable<System.Boolean> ContinueOnFailure { get; set; }
		
		/// <summary>
		/// The runtime logging config of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// Optional. The format in which query output will be displayed. See the Presto documentation for supported output formats
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputFormat")]
		public string OutputFormat { get; set; }
		
		/// <summary>
		/// Optional. A mapping of property names to values. Used to set Presto session properties (https://prestodb.io/docs/current/sql/set-session.html) Equivalent to using the --session flag in the Presto CLI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The HCFS URI of the script that contains SQL queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryFileUri")]
		public string QueryFileUri { get; set; }
		
		/// <summary>
		/// A list of queries to run on a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryList")]
		public QueryList QueryList { get; set; }
	}
	
	/// <summary>
	/// A Dataproc job for running Apache PySpark (https://spark.apache.org/docs/0.9.0/python-programming-guide.html) applications on YARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PySparkJob
	{
		
		/// <summary>
		/// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveUris")]
		public string[] ArchiveUris { get; set; }
		
		/// <summary>
		/// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUris")]
		public string[] FileUris { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Python driver and tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jarFileUris")]
		public string[] JarFileUris { get; set; }
		
		/// <summary>
		/// The runtime logging config of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// Required. The HCFS URI of the main Python file to use as the driver. Must be a .py file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainPythonFileUri")]
		public string MainPythonFileUri { get; set; }
		
		/// <summary>
		/// Optional. A mapping of property names to values, used to configure PySpark. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Optional. HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonFileUris")]
		public string[] PythonFileUris { get; set; }
	}
	
	/// <summary>
	/// Encapsulates the full scoping used to reference a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobReference
	{
		
		/// <summary>
		/// Optional. The job ID, which must be unique within the project.The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or hyphens (-). The maximum length is 100 characters.If not specified by the caller, the job ID will be provided by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Optional. The ID of the Google Cloud Platform project that the job belongs to. If specified, must match the request project ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// Job scheduling options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobScheduling
	{
		
		/// <summary>
		/// Optional. Maximum number of times per hour a driver can be restarted as a result of driver exiting with non-zero code before job is reported failed.A job might be reported as thrashing if the driver exits with a non-zero code four times within a 10-minute window.Maximum value is 10.Note: This restartable job option is not supported in Dataproc workflow templates (https://cloud.google.com/dataproc/docs/concepts/workflows/using-workflows#adding_jobs_to_a_template).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxFailuresPerHour")]
		public System.Nullable<System.Int32> MaxFailuresPerHour { get; set; }
		
		/// <summary>
		/// Optional. Maximum total number of times a driver can be restarted as a result of the driver exiting with a non-zero code. After the maximum number is reached, the job will be reported as failed.Maximum value is 240.Note: Currently, this restartable job option is not supported in Dataproc workflow templates (https://cloud.google.com/dataproc/docs/concepts/workflows/using-workflows#adding_jobs_to_a_template).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxFailuresTotal")]
		public System.Nullable<System.Int32> MaxFailuresTotal { get; set; }
	}
	
	/// <summary>
	/// A Dataproc job for running Apache Spark (https://spark.apache.org/) applications on YARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SparkJob
	{
		
		/// <summary>
		/// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveUris")]
		public string[] ArchiveUris { get; set; }
		
		/// <summary>
		/// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUris")]
		public string[] FileUris { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Spark driver and tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jarFileUris")]
		public string[] JarFileUris { get; set; }
		
		/// <summary>
		/// The runtime logging config of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in SparkJob.jar_file_uris.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainClass")]
		public string MainClass { get; set; }
		
		/// <summary>
		/// The HCFS URI of the jar file that contains the main class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainJarFileUri")]
		public string MainJarFileUri { get; set; }
		
		/// <summary>
		/// Optional. A mapping of property names to values, used to configure Spark. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	/// <summary>
	/// A Dataproc job for running Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) applications on YARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SparkRJob
	{
		
		/// <summary>
		/// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveUris")]
		public string[] ArchiveUris { get; set; }
		
		/// <summary>
		/// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUris")]
		public string[] FileUris { get; set; }
		
		/// <summary>
		/// The runtime logging config of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// Required. The HCFS URI of the main R file to use as the driver. Must be a .R file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainRFileUri")]
		public string MainRFileUri { get; set; }
		
		/// <summary>
		/// Optional. A mapping of property names to values, used to configure SparkR. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	/// <summary>
	/// A Dataproc job for running Apache Spark SQL (https://spark.apache.org/sql/) queries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SparkSqlJob
	{
		
		/// <summary>
		/// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jarFileUris")]
		public string[] JarFileUris { get; set; }
		
		/// <summary>
		/// The runtime logging config of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API might be overwritten.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The HCFS URI of the script that contains SQL queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryFileUri")]
		public string QueryFileUri { get; set; }
		
		/// <summary>
		/// A list of queries to run on a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryList")]
		public QueryList QueryList { get; set; }
		
		/// <summary>
		/// Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptVariables")]
		public System.Collections.Generic.Dictionary<string, string> ScriptVariables { get; set; }
	}
	
	/// <summary>
	/// Dataproc job status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobStatus
	{
		
		/// <summary>
		/// Optional. Output only. Job state details, such as an error description if the state is ERROR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Output only. A state message specifying the overall job state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<JobStatusState> State { get; set; }
		
		/// <summary>
		/// Output only. The time when this state was entered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateStartTime")]
		public string StateStartTime { get; set; }
		
		/// <summary>
		/// Output only. Additional state information, which includes status reported by the agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substate")]
		public System.Nullable<JobStatusSubstate> Substate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum JobStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SETUP_DONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_PENDING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_STARTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTEMPT_FAILURE = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum JobStatusSubstate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STALE_STATUS = 3,
	}
	
	/// <summary>
	/// A Dataproc job for running Trino (https://trino.io/) queries. IMPORTANT: The Dataproc Trino Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/trino) must be enabled when the cluster is created to submit a Trino job to the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrinoJob
	{
		
		/// <summary>
		/// Optional. Trino client tags to attach to this query
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientTags")]
		public string[] ClientTags { get; set; }
		
		/// <summary>
		/// Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continueOnFailure")]
		public System.Nullable<System.Boolean> ContinueOnFailure { get; set; }
		
		/// <summary>
		/// The runtime logging config of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// Optional. The format in which query output will be displayed. See the Trino documentation for supported output formats
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputFormat")]
		public string OutputFormat { get; set; }
		
		/// <summary>
		/// Optional. A mapping of property names to values. Used to set Trino session properties (https://trino.io/docs/current/sql/set-session.html) Equivalent to using the --session flag in the Trino CLI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The HCFS URI of the script that contains SQL queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryFileUri")]
		public string QueryFileUri { get; set; }
		
		/// <summary>
		/// A list of queries to run on a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryList")]
		public QueryList QueryList { get; set; }
	}
	
	/// <summary>
	/// A YARN application created by a job. Application information is a subset of org.apache.hadoop.yarn.proto.YarnProtos.ApplicationReportProto.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class YarnApplication
	{
		
		/// <summary>
		/// Required. The application name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The numerical progress of the application, from 1 to 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public System.Nullable<System.Single> Progress { get; set; }
		
		/// <summary>
		/// Required. The application state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<YarnApplicationState> State { get; set; }
		
		/// <summary>
		/// Optional. The HTTP URL of the ApplicationMaster, HistoryServer, or TimelineServer that provides application-specific information. The URL uses the internal hostname, and requires a proxy server for resolution and, possibly, access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingUrl")]
		public string TrackingUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum YarnApplicationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_SAVING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KILLED = 8,
	}
	
	/// <summary>
	/// Job Operation metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobMetadata
	{
		
		/// <summary>
		/// Output only. The job id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Output only. Operation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public string OperationType { get; set; }
		
		/// <summary>
		/// Output only. Job submission time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Dataproc job status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
	}
	
	/// <summary>
	/// Jupyter configuration for an interactive session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JupyterConfig
	{
		
		/// <summary>
		/// Optional. Display name, shown in the Jupyter kernelspec card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Optional. Kernel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kernel")]
		public System.Nullable<JupyterConfigKernel> Kernel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum JupyterConfigKernel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KERNEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYTHON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCALA = 2,
	}
	
	/// <summary>
	/// A response to a request to list autoscaling policies in a project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAutoscalingPoliciesResponse
	{
		
		/// <summary>
		/// Output only. This token is included in the response if there are more results to fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. Autoscaling policies list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public AutoscalingPolicy[] Policies { get; set; }
	}
	
	/// <summary>
	/// A list of batch workloads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBatchesResponse
	{
		
		/// <summary>
		/// Output only. The batches from the specified collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batches")]
		public Batch[] Batches { get; set; }
		
		/// <summary>
		/// A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. List of Batches that could not be included in the response. Attempting to get one of these resources may indicate why it was not included in the list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The list of all clusters in a project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListClustersResponse
	{
		
		/// <summary>
		/// Output only. The clusters in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusters")]
		public Cluster[] Clusters { get; set; }
		
		/// <summary>
		/// Output only. This token is included in the response if there are more results to fetch. To fetch additional results, provide this value as the page_token in a subsequent ListClustersRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A list of jobs in a project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobsResponse
	{
		
		/// <summary>
		/// Output only. Jobs list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public Job[] Jobs { get; set; }
		
		/// <summary>
		/// Optional. This token is included in the response if there are more results to fetch. To fetch additional results, provide this value as the page_token in a subsequent ListJobsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. List of jobs with kms_key-encrypted parameters that could not be decrypted. A response to a jobs.get request may indicate the reason for the decryption failure for a specific job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Operation
	{
		
		/// <summary>
		/// If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A list of session templates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSessionTemplatesResponse
	{
		
		/// <summary>
		/// A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. Session template list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionTemplates")]
		public SessionTemplate[] SessionTemplates { get; set; }
	}
	
	/// <summary>
	/// A representation of a session template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SessionTemplate
	{
		
		/// <summary>
		/// Output only. The time when the template was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The email address of the user who created the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// Optional. Brief description of the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Environment configuration for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentConfig")]
		public EnvironmentConfig EnvironmentConfig { get; set; }
		
		/// <summary>
		/// Jupyter configuration for an interactive session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jupyterSession")]
		public JupyterConfig JupyterSession { get; set; }
		
		/// <summary>
		/// Optional. Labels to associate with sessions created using this template. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty, but, if present, must contain 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. The resource name of the session template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Runtime configuration for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeConfig")]
		public RuntimeConfig RuntimeConfig { get; set; }
		
		/// <summary>
		/// Output only. The time the template was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	/// <summary>
	/// A list of interactive sessions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSessionsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as page_token, to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. The sessions from the specified collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessions")]
		public Session[] Sessions { get; set; }
	}
	
	/// <summary>
	/// A representation of a session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Session
	{
		
		/// <summary>
		/// Output only. The time when the session was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The email address of the user who created the session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// Environment configuration for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentConfig")]
		public EnvironmentConfig EnvironmentConfig { get; set; }
		
		/// <summary>
		/// Jupyter configuration for an interactive session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jupyterSession")]
		public JupyterConfig JupyterSession { get; set; }
		
		/// <summary>
		/// Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. The resource name of the session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Runtime configuration for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeConfig")]
		public RuntimeConfig RuntimeConfig { get; set; }
		
		/// <summary>
		/// Runtime information about workload execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeInfo")]
		public RuntimeInfo RuntimeInfo { get; set; }
		
		/// <summary>
		/// Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionTemplate")]
		public string SessionTemplate { get; set; }
		
		/// <summary>
		/// Output only. A state of the session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<SessionState> State { get; set; }
		
		/// <summary>
		/// Output only. Historical state information for the session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateHistory")]
		public SessionStateHistory[] StateHistory { get; set; }
		
		/// <summary>
		/// Output only. Session state details, such as the failure description if the state is FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateMessage")]
		public string StateMessage { get; set; }
		
		/// <summary>
		/// Output only. The time when the session entered the current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTime")]
		public string StateTime { get; set; }
		
		/// <summary>
		/// Optional. The email address of the user who owns the session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		/// <summary>
		/// Output only. A session UUID (Unique Universal Identifier). The service generates this value when it creates the session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SessionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
	}
	
	/// <summary>
	/// Historical state information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SessionStateHistory
	{
		
		/// <summary>
		/// Output only. The state of the session at this point in the session history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public SessionState State { get; set; }
		
		/// <summary>
		/// Output only. Details about the state at this point in the session history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateMessage")]
		public string StateMessage { get; set; }
		
		/// <summary>
		/// Output only. The time when the session entered the historical state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateStartTime")]
		public string StateStartTime { get; set; }
	}
	
	/// <summary>
	/// A response to a request to list workflow templates in a project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkflowTemplatesResponse
	{
		
		/// <summary>
		/// Output only. This token is included in the response if there are more results to fetch. To fetch additional results, provide this value as the page_token in a subsequent ListWorkflowTemplatesRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. WorkflowTemplates list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templates")]
		public WorkflowTemplate[] Templates { get; set; }
		
		/// <summary>
		/// Output only. List of workflow templates that could not be included in the response. Attempting to get one of these resources may indicate why it was not included in the list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// A Dataproc workflow template resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowTemplate
	{
		
		/// <summary>
		/// Output only. The time template was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. Timeout duration for the DAG of jobs, expressed in seconds (see JSON representation of duration (https://developers.google.com/protocol-buffers/docs/proto3#json)). The timeout duration must be from 10 minutes ("600s") to 24 hours ("86400s"). The timer begins when the first job is submitted. If the workflow is running at the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running on a managed cluster, the cluster is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dagTimeout")]
		public string DagTimeout { get; set; }
		
		/// <summary>
		/// Encryption settings for encrypting workflow template job arguments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig EncryptionConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required. The Directed Acyclic Graph of Jobs to submit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public OrderedJob[] Jobs { get; set; }
		
		/// <summary>
		/// Optional. The labels to associate with this template. These labels will be propagated to all jobs and clusters created by the workflow instance.Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt).Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt).No more than 32 labels can be associated with a template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided when the template is instantiated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public TemplateParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Specifies workflow execution target.Either managed_cluster or cluster_selector is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placement")]
		public WorkflowTemplatePlacement Placement { get; set; }
		
		/// <summary>
		/// Output only. The time template was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Optional. Used to perform a consistent read-modify-write.This field should be left blank for a CreateWorkflowTemplate request. It is required for an UpdateWorkflowTemplate request, and must match the current server version. A typical update template flow would fetch the current template with a GetWorkflowTemplate request, which will return the current template with the version field filled in with the current server version. The user updates other fields in the template, then returns it as part of the UpdateWorkflowTemplate request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A job executed by the workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderedJob
	{
		
		/// <summary>
		/// A Dataproc job for running Apache Flink applications on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flinkJob")]
		public FlinkJob FlinkJob { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache Hadoop MapReduce (https://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html) jobs on Apache Hadoop YARN (https://hadoop.apache.org/docs/r2.7.1/hadoop-yarn/hadoop-yarn-site/YARN.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hadoopJob")]
		public HadoopJob HadoopJob { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache Hive (https://hive.apache.org/) queries on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiveJob")]
		public HiveJob HiveJob { get; set; }
		
		/// <summary>
		/// Optional. The labels to associate with this job.Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: \p{Ll}\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following regular expression: \p{Ll}\p{Lo}\p{N}_-{0,63}No more than 32 labels can be associated with a given job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache Pig (https://pig.apache.org/) queries on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pigJob")]
		public PigJob PigJob { get; set; }
		
		/// <summary>
		/// Optional. The optional list of prerequisite job step_ids. If not specified, the job will start at the beginning of workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prerequisiteStepIds")]
		public string[] PrerequisiteStepIds { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Presto (https://prestosql.io/) queries. IMPORTANT: The Dataproc Presto Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/presto) must be enabled when the cluster is created to submit a Presto job to the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prestoJob")]
		public PrestoJob PrestoJob { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache PySpark (https://spark.apache.org/docs/0.9.0/python-programming-guide.html) applications on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pysparkJob")]
		public PySparkJob PysparkJob { get; set; }
		
		/// <summary>
		/// Job scheduling options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduling")]
		public JobScheduling Scheduling { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache Spark (https://spark.apache.org/) applications on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkJob")]
		public SparkJob SparkJob { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) applications on YARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkRJob")]
		public SparkRJob SparkRJob { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Apache Spark SQL (https://spark.apache.org/sql/) queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkSqlJob")]
		public SparkSqlJob SparkSqlJob { get; set; }
		
		/// <summary>
		/// Required. The step id. The id must be unique among all jobs within the template.The step id is used as prefix for job id, as job goog-dataproc-workflow-step-id label, and in prerequisiteStepIds field from other steps.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepId")]
		public string StepId { get; set; }
		
		/// <summary>
		/// A Dataproc job for running Trino (https://trino.io/) queries. IMPORTANT: The Dataproc Trino Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/trino) must be enabled when the cluster is created to submit a Trino job to the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trinoJob")]
		public TrinoJob TrinoJob { get; set; }
	}
	
	/// <summary>
	/// A configurable parameter that replaces one or more fields in the template. Parameterizable fields: - Labels - File uris - Job properties - Job arguments - Script variables - Main class (in HadoopJob and SparkJob) - Zone (in ClusterSelector)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateParameter
	{
		
		/// <summary>
		/// Optional. Brief description of the parameter. Must not exceed 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter's list of field paths.A field path is similar in syntax to a google.protobuf.FieldMask. For example, a field path that references the zone field of a workflow template's cluster selector would be specified as placement.clusterSelector.zone.Also, field paths can reference fields using the following syntax: Values in maps can be referenced by key: labels'key' placement.clusterSelector.clusterLabels'key' placement.managedCluster.labels'key' placement.clusterSelector.clusterLabels'key' jobs'step-id'.labels'key' Jobs in the jobs list can be referenced by step-id: jobs'step-id'.hadoopJob.mainJarFileUri jobs'step-id'.hiveJob.queryFileUri jobs'step-id'.pySparkJob.mainPythonFileUri jobs'step-id'.hadoopJob.jarFileUris0 jobs'step-id'.hadoopJob.archiveUris0 jobs'step-id'.hadoopJob.fileUris0 jobs'step-id'.pySparkJob.pythonFileUris0 Items in repeated fields can be referenced by a zero-based index: jobs'step-id'.sparkJob.args0 Other examples: jobs'step-id'.hadoopJob.properties'key' jobs'step-id'.hadoopJob.args0 jobs'step-id'.hiveJob.scriptVariables'key' jobs'step-id'.hadoopJob.mainJarFileUri placement.clusterSelector.zoneIt may not be possible to parameterize maps and repeated fields in their entirety since only individual map values and individual items in repeated fields can be referenced. For example, the following field paths are invalid: placement.clusterSelector.clusterLabels jobs'step-id'.sparkJob.args
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string[] Fields { get; set; }
		
		/// <summary>
		/// Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Configuration for parameter validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validation")]
		public ParameterValidation Validation { get; set; }
	}
	
	/// <summary>
	/// Configuration for parameter validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParameterValidation
	{
		
		/// <summary>
		/// Validation based on regular expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regex")]
		public RegexValidation Regex { get; set; }
		
		/// <summary>
		/// Validation based on a list of allowed values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public ValueValidation Values { get; set; }
	}
	
	/// <summary>
	/// Validation based on regular expressions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegexValidation
	{
		
		/// <summary>
		/// Required. RE2 regular expressions used to validate the parameter's value. The value must match the regex in its entirety (substring matches are not sufficient).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regexes")]
		public string[] Regexes { get; set; }
	}
	
	/// <summary>
	/// Validation based on a list of allowed values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValueValidation
	{
		
		/// <summary>
		/// Required. List of allowed values for the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Specifies workflow execution target.Either managed_cluster or cluster_selector is required.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowTemplatePlacement
	{
		
		/// <summary>
		/// A selector that chooses target cluster for jobs based on metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterSelector")]
		public ClusterSelector ClusterSelector { get; set; }
		
		/// <summary>
		/// Cluster that is managed by the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedCluster")]
		public ManagedCluster ManagedCluster { get; set; }
	}
	
	/// <summary>
	/// Cluster that is managed by the workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedCluster
	{
		
		/// <summary>
		/// Required. The cluster name prefix. A unique cluster name will be formed by appending a random suffix.The name must contain only lower-case letters (a-z), numbers (0-9), and hyphens (-). Must begin with a letter. Cannot begin or end with hyphen. Must consist of between 2 and 35 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// The cluster config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ClusterConfig Config { get; set; }
		
		/// <summary>
		/// Optional. The labels to associate with this cluster.Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}\p{N}_-{0,63}No more than 32 labels can be associated with a given cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
	}
	
	/// <summary>
	/// Metadata describing the node group operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeGroupOperationMetadata
	{
		
		/// <summary>
		/// Output only. Cluster UUID associated with the node group operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterUuid")]
		public string ClusterUuid { get; set; }
		
		/// <summary>
		/// Output only. Short description of operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. Labels associated with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. Node group ID for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeGroupId")]
		public string NodeGroupId { get; set; }
		
		/// <summary>
		/// The operation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<NodeGroupOperationMetadataOperationType> OperationType { get; set; }
		
		/// <summary>
		/// The status of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ClusterOperationStatus Status { get; set; }
		
		/// <summary>
		/// Output only. The previous operation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusHistory")]
		public ClusterOperationStatus[] StatusHistory { get; set; }
		
		/// <summary>
		/// Output only. Errors encountered during operation execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NodeGroupOperationMetadataOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODE_GROUP_OPERATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESIZE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPAIR = 5,
	}
	
	/// <summary>
	/// indicating a list of workers of same type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodePool
	{
		
		/// <summary>
		/// Required. A unique id of the node pool. Primary and Secondary workers can be specified using special reserved ids PRIMARY_WORKER_POOL and SECONDARY_WORKER_POOL respectively. Aux node pools can be referenced using corresponding pool id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of instances to be repaired. These instances must belong to specified node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceNames")]
		public string[] InstanceNames { get; set; }
		
		/// <summary>
		/// Required. Repair action to take on specified resources of the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repairAction")]
		public System.Nullable<NodePoolRepairAction> RepairAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NodePoolRepairAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPAIR_ACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.A Policy is a collection of bindings. A binding binds one or more members, or principals, to a single role. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A role is a named list of permissions; each role can be an IAM predefined role or a user-created custom role.For some types of Google Cloud resources, a binding can also specify a condition, which is a logical expression that allows access to a resource only if the expression evaluates to true. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).JSON example: { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } YAML example: bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the IAM documentation (https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Policy
	{
		
		/// <summary>
		/// Associates a list of members, or principals, with a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one principal.The bindings in a Policy can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the bindings grant 50 different roles to user:alice@example.com, and not to any other principal, then you can add another 1,450 principals to the bindings in the Policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A request to repair a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepairClusterRequest
	{
		
		/// <summary>
		/// Optional. Specifying the cluster_uuid means the RPC will fail (with error NOT_FOUND) if a cluster with the specified UUID does not exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterUuid")]
		public string ClusterUuid { get; set; }
		
		/// <summary>
		/// Optional. Timeout for graceful YARN decommissioning. Graceful decommissioning facilitates the removal of cluster nodes without interrupting jobs in progress. The timeout specifies the amount of time to wait for jobs finish before forcefully removing nodes. The default timeout is 0 for forceful decommissioning, and the maximum timeout period is 1 day. (see JSON Mapping—Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).graceful_decommission_timeout is supported in Dataproc image versions 1.2+.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gracefulDecommissionTimeout")]
		public string GracefulDecommissionTimeout { get; set; }
		
		/// <summary>
		/// Optional. Node pools and corresponding repair action to be taken. All node pools should be unique in this request. i.e. Multiple entries for the same node pool id are not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePools")]
		public NodePool[] NodePools { get; set; }
		
		/// <summary>
		/// Optional. operation id of the parent operation sending the repair request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentOperationId")]
		public string ParentOperationId { get; set; }
		
		/// <summary>
		/// Optional. A unique ID used to identify the request. If the server receives two RepairClusterRequests with the same ID, the second request is ignored, and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// A request to resize a node group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResizeNodeGroupRequest
	{
		
		/// <summary>
		/// Optional. Timeout for graceful YARN decommissioning. Graceful decommissioning (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/scaling-clusters#graceful_decommissioning) allows the removal of nodes from the Compute Engine node group without interrupting jobs in progress. This timeout specifies how long to wait for jobs in progress to finish before forcefully removing nodes (and potentially interrupting jobs). Default timeout is 0 (for forceful decommission), and the maximum allowed timeout is 1 day. (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).Only supported on Dataproc image versions 1.2 and higher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gracefulDecommissionTimeout")]
		public string GracefulDecommissionTimeout { get; set; }
		
		/// <summary>
		/// Optional. operation id of the parent operation sending the resize request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentOperationId")]
		public string ParentOperationId { get; set; }
		
		/// <summary>
		/// Optional. A unique ID used to identify the request. If the server receives two ResizeNodeGroupRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.ResizeNodeGroupRequests) with the same ID, the second request is ignored and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required. The number of running instances for the node group to maintain. The group adds or removes instances to maintain the number of instances specified by this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	/// <summary>
	/// Metadata describing the Session operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SessionOperationMetadata
	{
		
		/// <summary>
		/// The time when the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Short description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The time when the operation was finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doneTime")]
		public string DoneTime { get; set; }
		
		/// <summary>
		/// Labels associated with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The operation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<SessionOperationMetadataOperationType> OperationType { get; set; }
		
		/// <summary>
		/// Name of the session for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="session")]
		public string Session { get; set; }
		
		/// <summary>
		/// Session UUID for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionUuid")]
		public string SessionUuid { get; set; }
		
		/// <summary>
		/// Warnings encountered during operation execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SessionOperationMetadataOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SESSION_OPERATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 3,
	}
	
	/// <summary>
	/// Request message for SetIamPolicy method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.A Policy is a collection of bindings. A binding binds one or more members, or principals, to a single role. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A role is a named list of permissions; each role can be an IAM predefined role or a user-created custom role.For some types of Google Cloud resources, a binding can also specify a condition, which is a logical expression that allows access to a resource only if the expression evaluates to true. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).JSON example: { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } YAML example: bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the IAM documentation (https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
	}
	
	/// <summary>
	/// A request to start a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartClusterRequest
	{
		
		/// <summary>
		/// Optional. Specifying the cluster_uuid means the RPC will fail (with error NOT_FOUND) if a cluster with the specified UUID does not exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterUuid")]
		public string ClusterUuid { get; set; }
		
		/// <summary>
		/// Optional. A unique ID used to identify the request. If the server receives two StartClusterRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.StartClusterRequest)s with the same id, then the second request will be ignored and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// A request to stop a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopClusterRequest
	{
		
		/// <summary>
		/// Optional. Specifying the cluster_uuid means the RPC will fail (with error NOT_FOUND) if a cluster with the specified UUID does not exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterUuid")]
		public string ClusterUuid { get; set; }
		
		/// <summary>
		/// Optional. A unique ID used to identify the request. If the server receives two StopClusterRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.StopClusterRequest)s with the same id, then the second request will be ignored and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// A request to submit a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubmitJobRequest
	{
		
		/// <summary>
		/// A Dataproc job resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
		
		/// <summary>
		/// Optional. A unique id used to identify the request. If the server receives two SubmitJobRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.SubmitJobRequest)s with the same id, then the second request will be ignored and the first Job created and stored in the backend is returned.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// A request to terminate an interactive session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminateSessionRequest
	{
		
		/// <summary>
		/// Optional. A unique ID used to identify the request. If the service receives two TerminateSessionRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.TerminateSessionRequest)s with the same ID, the second request is ignored.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The value must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Request message for TestIamPermissions method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the resource. Permissions with wildcards (such as * or storage.*) are not allowed. For more information see IAM Overview (https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for TestIamPermissions method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of TestPermissionsRequest.permissions that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// The workflow graph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowGraph
	{
		
		/// <summary>
		/// Output only. The workflow nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public WorkflowNode[] Nodes { get; set; }
	}
	
	/// <summary>
	/// The workflow node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowNode
	{
		
		/// <summary>
		/// Output only. The error detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// Output only. The job id; populated after the node enters RUNNING state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Output only. Node's prerequisite nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prerequisiteStepIds")]
		public string[] PrerequisiteStepIds { get; set; }
		
		/// <summary>
		/// Output only. The node state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<WorkflowNodeState> State { get; set; }
		
		/// <summary>
		/// Output only. The name of the node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepId")]
		public string StepId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WorkflowNodeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCKED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
	}
	
	/// <summary>
	/// A Dataproc workflow template resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowMetadata
	{
		
		/// <summary>
		/// Output only. The name of the target cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// Output only. The UUID of target cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterUuid")]
		public string ClusterUuid { get; set; }
		
		/// <summary>
		/// The cluster operation triggered by a workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createCluster")]
		public ClusterOperation CreateCluster { get; set; }
		
		/// <summary>
		/// Output only. DAG end time, only set for workflows with dag_timeout when DAG ends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dagEndTime")]
		public string DagEndTime { get; set; }
		
		/// <summary>
		/// Output only. DAG start time, only set for workflows with dag_timeout when DAG begins.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dagStartTime")]
		public string DagStartTime { get; set; }
		
		/// <summary>
		/// Output only. The timeout duration for the DAG of jobs, expressed in seconds (see JSON representation of duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dagTimeout")]
		public string DagTimeout { get; set; }
		
		/// <summary>
		/// The cluster operation triggered by a workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteCluster")]
		public ClusterOperation DeleteCluster { get; set; }
		
		/// <summary>
		/// Output only. Workflow end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The workflow graph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graph")]
		public WorkflowGraph Graph { get; set; }
		
		/// <summary>
		/// Map from parameter names to values that were used for those parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		/// <summary>
		/// Output only. Workflow start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Output only. The workflow state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ClusterOperationStatusState State { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the workflow template as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		/// <summary>
		/// Output only. The version of template at the time of workflow instantiation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all regions/{region}/clusters in a project alphabetically.
		/// Dataproc_projects_regions_clusters_list v1/projects/{projectId}/regions/{region}/clusters
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the cluster belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="filter">Optional. A filter constraining the clusters to list. Filters are case-sensitive and have the following syntax:field = value AND field = value ...where field is one of status.state, clusterName, or labels.[KEY], and [KEY] is a label key. value can be * to match all values. status.state can be one of the following: ACTIVE, INACTIVE, CREATING, RUNNING, ERROR, DELETING, or UPDATING. ACTIVE contains the CREATING, UPDATING, and RUNNING states. INACTIVE contains the DELETING and ERROR states. clusterName is the name of the cluster provided at creation time. Only the logical AND operator is supported; space-separated items are treated as having an implicit AND operator.Example filter:status.state = ACTIVE AND clusterName = mycluster AND labels.env = staging AND labels.starred = *</param>
		/// <param name="pageSize">Optional. The standard List page size.</param>
		/// <param name="pageToken">Optional. The standard List page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListClustersResponse> Dataproc_projects_regions_clusters_listAsync(string projectId, string region, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/clusters&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListClustersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
		/// Dataproc_projects_regions_clusters_create v1/projects/{projectId}/regions/{region}/clusters
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the cluster belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="actionOnFailedPrimaryWorkers">Optional. Failure action when primary worker creation fails.</param>
		/// <param name="requestId">Optional. A unique ID used to identify the request. If the server receives two CreateClusterRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateClusterRequest)s with the same id, then the second request will be ignored and the first google.longrunning.Operation created and stored in the backend is returned.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_clusters_createAsync(string projectId, string region, Dataproc_projects_regions_clusters_createActionOnFailedPrimaryWorkers actionOnFailedPrimaryWorkers, string requestId, Cluster requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/clusters&actionOnFailedPrimaryWorkers=" + actionOnFailedPrimaryWorkers+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
		/// Dataproc_projects_regions_clusters_delete v1/projects/{projectId}/regions/{region}/clusters/{clusterName}
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the cluster belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="clusterName">Required. The cluster name.</param>
		/// <param name="clusterUuid">Optional. Specifying the cluster_uuid means the RPC should fail (with error NOT_FOUND) if cluster with specified UUID does not exist.</param>
		/// <param name="gracefulTerminationTimeout">Optional. The graceful termination timeout for the deletion of the cluster. Indicate the time the request will wait to complete the running jobs on the cluster before its forceful deletion. Default value is 0 indicating that the user has not enabled the graceful termination. Value can be between 60 second and 6 Hours, in case the graceful termination is enabled. (There is no separate flag to check the enabling or disabling of graceful termination, it can be checked by the values in the field).</param>
		/// <param name="requestId">Optional. A unique ID used to identify the request. If the server receives two DeleteClusterRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.DeleteClusterRequest)s with the same id, then the second request will be ignored and the first google.longrunning.Operation created and stored in the backend is returned.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_clusters_deleteAsync(string projectId, string region, string clusterName, string clusterUuid, string gracefulTerminationTimeout, string requestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&clusterUuid=" + (clusterUuid==null? "" : System.Uri.EscapeDataString(clusterUuid))+"&gracefulTerminationTimeout=" + (gracefulTerminationTimeout==null? "" : System.Uri.EscapeDataString(gracefulTerminationTimeout))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the resource representation for a cluster in a project.
		/// Dataproc_projects_regions_clusters_get v1/projects/{projectId}/regions/{region}/clusters/{clusterName}
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the cluster belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="clusterName">Required. The cluster name.</param>
		/// <returns>Successful response</returns>
		public async Task<Cluster> Dataproc_projects_regions_clusters_getAsync(string projectId, string region, string clusterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cluster>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata). The cluster must be in a RUNNING state or an error is returned.
		/// Dataproc_projects_regions_clusters_patch v1/projects/{projectId}/regions/{region}/clusters/{clusterName}
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project the cluster belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="clusterName">Required. The cluster name.</param>
		/// <param name="gracefulDecommissionTimeout">Optional. Timeout for graceful YARN decommissioning. Graceful decommissioning allows removing nodes from the cluster without interrupting jobs in progress. Timeout specifies how long to wait for jobs in progress to finish before forcefully removing nodes (and potentially interrupting jobs). Default timeout is 0 (for forceful decommission), and the maximum allowed timeout is 1 day. (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).Only supported on Dataproc image versions 1.2 and higher.</param>
		/// <param name="requestId">Optional. A unique ID used to identify the request. If the server receives two UpdateClusterRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.UpdateClusterRequest)s with the same id, then the second request will be ignored and the first google.longrunning.Operation created and stored in the backend is returned.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <param name="updateMask">Required. Specifies the path, relative to Cluster, of the field to update. For example, to change the number of workers in a cluster to 5, the update_mask parameter would be specified as config.worker_config.num_instances, and the PATCH request body would specify the new value, as follows: { "config":{ "workerConfig":{ "numInstances":"5" } } } Similarly, to change the number of preemptible workers in a cluster to 5, the update_mask parameter would be config.secondary_worker_config.num_instances, and the PATCH request body would be set as follows: { "config":{ "secondaryWorkerConfig":{ "numInstances":"5" } } } *Note:* Currently, only the following fields can be updated: *Mask* *Purpose* *labels* Update labels *config.worker_config.num_instances* Resize primary worker group *config.secondary_worker_config.num_instances* Resize secondary worker group config.autoscaling_config.policy_uri Use, stop using, or change autoscaling policies </param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_clusters_patchAsync(string projectId, string region, string clusterName, string gracefulDecommissionTimeout, string requestId, string updateMask, Cluster requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&gracefulDecommissionTimeout=" + (gracefulDecommissionTimeout==null? "" : System.Uri.EscapeDataString(gracefulDecommissionTimeout))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets cluster diagnostic information. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata). After the operation completes, Operation.response contains DiagnoseClusterResults (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#diagnoseclusterresults).
		/// Dataproc_projects_regions_clusters_diagnose v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:diagnose
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the cluster belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="clusterName">Required. The cluster name.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_clusters_diagnoseAsync(string projectId, string region, string clusterName, DiagnoseClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+":diagnose";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Repairs a cluster.
		/// Dataproc_projects_regions_clusters_repair v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:repair
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project the cluster belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="clusterName">Required. The cluster name.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_clusters_repairAsync(string projectId, string region, string clusterName, RepairClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+":repair";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a cluster in a project.
		/// Dataproc_projects_regions_clusters_start v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:start
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project the cluster belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="clusterName">Required. The cluster name.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_clusters_startAsync(string projectId, string region, string clusterName, StartClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+":start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a cluster in a project.
		/// Dataproc_projects_regions_clusters_stop v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:stop
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project the cluster belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="clusterName">Required. The cluster name.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_clusters_stopAsync(string projectId, string region, string clusterName, StopClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+":stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists regions/{region}/jobs in a project.
		/// Dataproc_projects_regions_jobs_list v1/projects/{projectId}/regions/{region}/jobs
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the job belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="clusterName">Optional. If set, the returned jobs list includes only jobs that were submitted to the named cluster.</param>
		/// <param name="filter">Optional. A filter constraining the jobs to list. Filters are case-sensitive and have the following syntax:field = value AND field = value ...where field is status.state or labels.[KEY], and [KEY] is a label key. value can be * to match all values. status.state can be either ACTIVE or NON_ACTIVE. Only the logical AND operator is supported; space-separated items are treated as having an implicit AND operator.Example filter:status.state = ACTIVE AND labels.env = staging AND labels.starred = *</param>
		/// <param name="jobStateMatcher">Optional. Specifies enumerated categories of jobs to list. (default = match ALL jobs).If filter is provided, jobStateMatcher will be ignored.</param>
		/// <param name="pageSize">Optional. The number of results to return in each response.</param>
		/// <param name="pageToken">Optional. The page token, returned by a previous call, to request the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListJobsResponse> Dataproc_projects_regions_jobs_listAsync(string projectId, string region, string clusterName, string filter, Dataproc_projects_regions_jobs_listJobStateMatcher jobStateMatcher, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/jobs&clusterName=" + (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&jobStateMatcher=" + jobStateMatcher+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the job from the project. If the job is active, the delete fails, and the response returns FAILED_PRECONDITION.
		/// Dataproc_projects_regions_jobs_delete v1/projects/{projectId}/regions/{region}/jobs/{jobId}
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the job belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="jobId">Required. The job ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Dataproc_projects_regions_jobs_deleteAsync(string projectId, string region, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the resource representation for a job in a project.
		/// Dataproc_projects_regions_jobs_get v1/projects/{projectId}/regions/{region}/jobs/{jobId}
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the job belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="jobId">Required. The job ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataproc_projects_regions_jobs_getAsync(string projectId, string region, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a job in a project.
		/// Dataproc_projects_regions_jobs_patch v1/projects/{projectId}/regions/{region}/jobs/{jobId}
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the job belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="jobId">Required. The job ID.</param>
		/// <param name="updateMask">Required. Specifies the path, relative to Job, of the field to update. For example, to update the labels of a Job the update_mask parameter would be specified as labels, and the PATCH request body would specify the new value. *Note:* Currently, labels is the only field that can be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataproc_projects_regions_jobs_patchAsync(string projectId, string region, string jobId, string updateMask, Job requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a job cancellation request. To access the job resource after cancellation, call regions/{region}/jobs.list (https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/list) or regions/{region}/jobs.get (https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/get).
		/// Dataproc_projects_regions_jobs_cancel v1/projects/{projectId}/regions/{region}/jobs/{jobId}:cancel
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the job belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <param name="jobId">Required. The job ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataproc_projects_regions_jobs_cancelAsync(string projectId, string region, string jobId, CancelJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Submits a job to a cluster.
		/// Dataproc_projects_regions_jobs_submit v1/projects/{projectId}/regions/{region}/jobs:submit
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the job belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataproc_projects_regions_jobs_submitAsync(string projectId, string region, SubmitJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/jobs:submit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Submits job to a cluster.
		/// Dataproc_projects_regions_jobs_submitAsOperation v1/projects/{projectId}/regions/{region}/jobs:submitAsOperation
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud Platform project that the job belongs to.</param>
		/// <param name="region">Required. The Dataproc region in which to handle the request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_jobs_submitAsOperationAsync(string projectId, string region, SubmitJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/regions/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/jobs:submitAsOperation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a workflow template. It does not cancel in-progress workflows.
		/// Dataproc_projects_regions_workflowTemplates_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates.delete, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates.instantiate, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}</param>
		/// <param name="version">Optional. The version of workflow template to delete. If specified, will only delete the template if the current server version matches specified version.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Dataproc_projects_regions_workflowTemplates_deleteAsync(string name, int version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&version="+version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the latest workflow template.Can retrieve previously instantiated template by specifying optional version parameter.
		/// Dataproc_projects_regions_workflowTemplates_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates.get, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates.get, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}</param>
		/// <param name="version">Optional. The version of workflow template to retrieve. Only previously instantiated versions can be retrieved.If unspecified, retrieves the current version.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<WorkflowTemplate> Dataproc_projects_regions_workflowTemplates_getAsync(string name, int version, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&version="+version+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the session template synchronously.
		/// Dataproc_projects_locations_sessionTemplates_patch v1/{name}
		/// </summary>
		/// <param name="name">Required. The resource name of the session template.</param>
		/// <returns>Successful response</returns>
		public async Task<SessionTemplate> Dataproc_projects_locations_sessionTemplates_patchAsync(string name, SessionTemplate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SessionTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates (replaces) workflow template. The updated template must contain version that matches the current server version.
		/// Dataproc_projects_regions_workflowTemplates_update v1/{name}
		/// </summary>
		/// <param name="name">Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}</param>
		/// <returns>Successful response</returns>
		public async Task<WorkflowTemplate> Dataproc_projects_regions_workflowTemplates_updateAsync(string name, WorkflowTemplate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
		/// Dataproc_projects_regions_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Dataproc_projects_regions_operations_cancelAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Instantiates a template and begins execution.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.
		/// Dataproc_projects_regions_workflowTemplates_instantiate v1/{name}:instantiate
		/// </summary>
		/// <param name="name">Required. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates.instantiate, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates.instantiate, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_workflowTemplates_instantiateAsync(string name, InstantiateWorkflowTemplateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":instantiate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resizes a node group in a cluster. The returned Operation.metadata is NodeGroupOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#nodegroupoperationmetadata).
		/// Dataproc_projects_regions_clusters_nodeGroups_resize v1/{name}:resize
		/// </summary>
		/// <param name="name">Required. The name of the node group to resize. Format: projects/{project}/regions/{region}/clusters/{cluster}/nodeGroups/{nodeGroup}</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_clusters_nodeGroups_resizeAsync(string name, ResizeNodeGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":resize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Terminates the interactive session.
		/// Dataproc_projects_locations_sessions_terminate v1/{name}:terminate
		/// </summary>
		/// <param name="name">Required. The name of the session resource to terminate.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_locations_sessions_terminateAsync(string name, TerminateSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":terminate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists autoscaling policies in the project.
		/// Dataproc_projects_regions_autoscalingPolicies_list v1/{parent}/autoscalingPolicies
		/// </summary>
		/// <param name="parent">Required. The "resource name" of the region or location, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.autoscalingPolicies.list, the resource name of the region has the following format: projects/{project_id}/regions/{region} For projects.locations.autoscalingPolicies.list, the resource name of the location has the following format: projects/{project_id}/locations/{location}</param>
		/// <param name="pageSize">Optional. The maximum number of results to return in each response. Must be less than or equal to 1000. Defaults to 100.</param>
		/// <param name="pageToken">Optional. The page token, returned by a previous call, to request the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAutoscalingPoliciesResponse> Dataproc_projects_regions_autoscalingPolicies_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/autoscalingPolicies&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAutoscalingPoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates new autoscaling policy.
		/// Dataproc_projects_regions_autoscalingPolicies_create v1/{parent}/autoscalingPolicies
		/// </summary>
		/// <param name="parent">Required. The "resource name" of the region or location, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.autoscalingPolicies.create, the resource name of the region has the following format: projects/{project_id}/regions/{region} For projects.locations.autoscalingPolicies.create, the resource name of the location has the following format: projects/{project_id}/locations/{location}</param>
		/// <returns>Successful response</returns>
		public async Task<AutoscalingPolicy> Dataproc_projects_regions_autoscalingPolicies_createAsync(string parent, AutoscalingPolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/autoscalingPolicies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AutoscalingPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists batch workloads.
		/// Dataproc_projects_locations_batches_list v1/{parent}/batches
		/// </summary>
		/// <param name="parent">Required. The parent, which owns this collection of batches.</param>
		/// <param name="filter">Optional. A filter for the batches to return in the response.A filter is a logical expression constraining the values of various fields in each batch resource. Filters are case sensitive, and may contain multiple clauses combined with logical operators (AND/OR). Supported fields are batch_id, batch_uuid, state, and create_time.e.g. state = RUNNING and create_time < "2023-01-01T00:00:00Z" filters for batches in state RUNNING that were created before 2023-01-01See https://google.aip.dev/assets/misc/ebnf-filtering.txt for a detailed description of the filter syntax and a list of supported comparisons.</param>
		/// <param name="orderBy">Optional. Field(s) on which to sort the list of batches.Currently the only supported sort orders are unspecified (empty) and create_time desc to sort by most recently created batches first.See https://google.aip.dev/132#ordering for more details.</param>
		/// <param name="pageSize">Optional. The maximum number of batches to return in each response. The service may return fewer than this value. The default page size is 20; the maximum page size is 1000.</param>
		/// <param name="pageToken">Optional. A page token received from a previous ListBatches call. Provide this token to retrieve the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBatchesResponse> Dataproc_projects_locations_batches_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/batches&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBatchesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a batch workload that executes asynchronously.
		/// Dataproc_projects_locations_batches_create v1/{parent}/batches
		/// </summary>
		/// <param name="parent">Required. The parent resource where this batch will be created.</param>
		/// <param name="batchId">Optional. The ID to use for the batch, which will become the final component of the batch's resource name.This value must be 4-63 characters. Valid characters are /[a-z][0-9]-/.</param>
		/// <param name="requestId">Optional. A unique ID used to identify the request. If the service receives two CreateBatchRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateBatchRequest)s with the same request_id, the second request is ignored and the Operation that corresponds to the first Batch created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The value must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_locations_batches_createAsync(string parent, string batchId, string requestId, Batch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/batches&batchId=" + (batchId==null? "" : System.Uri.EscapeDataString(batchId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a node group in a cluster. The returned Operation.metadata is NodeGroupOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#nodegroupoperationmetadata).
		/// Dataproc_projects_regions_clusters_nodeGroups_create v1/{parent}/nodeGroups
		/// </summary>
		/// <param name="parent">Required. The parent resource where this node group will be created. Format: projects/{project}/regions/{region}/clusters/{cluster}</param>
		/// <param name="nodeGroupId">Optional. An optional node group ID. Generated if not specified.The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of from 3 to 33 characters.</param>
		/// <param name="parentOperationId">Optional. operation id of the parent operation sending the create request</param>
		/// <param name="requestId">Optional. A unique ID used to identify the request. If the server receives two CreateNodeGroupRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateNodeGroupRequests) with the same ID, the second request is ignored and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_clusters_nodeGroups_createAsync(string parent, string nodeGroupId, string parentOperationId, string requestId, NodeGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/nodeGroups&nodeGroupId=" + (nodeGroupId==null? "" : System.Uri.EscapeDataString(nodeGroupId))+"&parentOperationId=" + (parentOperationId==null? "" : System.Uri.EscapeDataString(parentOperationId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists session templates.
		/// Dataproc_projects_locations_sessionTemplates_list v1/{parent}/sessionTemplates
		/// </summary>
		/// <param name="parent">Required. The parent that owns this collection of session templates.</param>
		/// <param name="filter">Optional. A filter for the session templates to return in the response. Filters are case sensitive and have the following syntax:field = value AND field = value ...</param>
		/// <param name="pageSize">Optional. The maximum number of sessions to return in each response. The service may return fewer than this value.</param>
		/// <param name="pageToken">Optional. A page token received from a previous ListSessions call. Provide this token to retrieve the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSessionTemplatesResponse> Dataproc_projects_locations_sessionTemplates_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/sessionTemplates&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSessionTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a session template synchronously.
		/// Dataproc_projects_locations_sessionTemplates_create v1/{parent}/sessionTemplates
		/// </summary>
		/// <param name="parent">Required. The parent resource where this session template will be created.</param>
		/// <returns>Successful response</returns>
		public async Task<SessionTemplate> Dataproc_projects_locations_sessionTemplates_createAsync(string parent, SessionTemplate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/sessionTemplates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SessionTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists interactive sessions.
		/// Dataproc_projects_locations_sessions_list v1/{parent}/sessions
		/// </summary>
		/// <param name="parent">Required. The parent, which owns this collection of sessions.</param>
		/// <param name="filter">Optional. A filter for the sessions to return in the response.A filter is a logical expression constraining the values of various fields in each session resource. Filters are case sensitive, and may contain multiple clauses combined with logical operators (AND, OR). Supported fields are session_id, session_uuid, state, and create_time.Example: state = ACTIVE and create_time < "2023-01-01T00:00:00Z" is a filter for sessions in an ACTIVE state that were created before 2023-01-01.See https://google.aip.dev/assets/misc/ebnf-filtering.txt for a detailed description of the filter syntax and a list of supported comparators.</param>
		/// <param name="pageSize">Optional. The maximum number of sessions to return in each response. The service may return fewer than this value.</param>
		/// <param name="pageToken">Optional. A page token received from a previous ListSessions call. Provide this token to retrieve the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSessionsResponse> Dataproc_projects_locations_sessions_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/sessions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSessionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an interactive session asynchronously.
		/// Dataproc_projects_locations_sessions_create v1/{parent}/sessions
		/// </summary>
		/// <param name="parent">Required. The parent resource where this session will be created.</param>
		/// <param name="requestId">Optional. A unique ID used to identify the request. If the service receives two CreateSessionRequests (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateSessionRequest)s with the same ID, the second request is ignored, and the first Session is created and stored in the backend.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The value must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <param name="sessionId">Required. The ID to use for the session, which becomes the final component of the session's resource name.This value must be 4-63 characters. Valid characters are /a-z-/.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_locations_sessions_createAsync(string parent, string requestId, string sessionId, Session requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/sessions&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&sessionId=" + (sessionId==null? "" : System.Uri.EscapeDataString(sessionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists workflows that match the specified filter in the request.
		/// Dataproc_projects_regions_workflowTemplates_list v1/{parent}/workflowTemplates
		/// </summary>
		/// <param name="parent">Required. The resource name of the region or location, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates,list, the resource name of the region has the following format: projects/{project_id}/regions/{region} For projects.locations.workflowTemplates.list, the resource name of the location has the following format: projects/{project_id}/locations/{location}</param>
		/// <param name="pageSize">Optional. The maximum number of results to return in each response.</param>
		/// <param name="pageToken">Optional. The page token, returned by a previous call, to request the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListWorkflowTemplatesResponse> Dataproc_projects_regions_workflowTemplates_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/workflowTemplates&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkflowTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates new workflow template.
		/// Dataproc_projects_regions_workflowTemplates_create v1/{parent}/workflowTemplates
		/// </summary>
		/// <param name="parent">Required. The resource name of the region or location, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates.create, the resource name of the region has the following format: projects/{project_id}/regions/{region} For projects.locations.workflowTemplates.create, the resource name of the location has the following format: projects/{project_id}/locations/{location}</param>
		/// <returns>Successful response</returns>
		public async Task<WorkflowTemplate> Dataproc_projects_regions_workflowTemplates_createAsync(string parent, WorkflowTemplate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/workflowTemplates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Instantiates a template and begins execution.This method is equivalent to executing the sequence CreateWorkflowTemplate, InstantiateWorkflowTemplate, DeleteWorkflowTemplate.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.
		/// Dataproc_projects_regions_workflowTemplates_instantiateInline v1/{parent}/workflowTemplates:instantiateInline
		/// </summary>
		/// <param name="parent">Required. The resource name of the region or location, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates,instantiateinline, the resource name of the region has the following format: projects/{project_id}/regions/{region} For projects.locations.workflowTemplates.instantiateinline, the resource name of the location has the following format: projects/{project_id}/locations/{location}</param>
		/// <param name="requestId">Optional. A tag that prevents multiple concurrent workflow instances with the same tag from running. This mitigates risk of concurrent instances started due to retries.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The tag must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_workflowTemplates_instantiateInlineAsync(string parent, string requestId, WorkflowTemplate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/workflowTemplates:instantiateInline&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Inject encrypted credentials into all of the VMs in a cluster.The target cluster must be a personal auth cluster assigned to the user who is issuing the RPC.
		/// Dataproc_projects_regions_clusters_injectCredentials v1/{project}/{region}/{cluster}:injectCredentials
		/// </summary>
		/// <param name="project">Required. The ID of the Google Cloud Platform project the cluster belongs to, of the form projects/.</param>
		/// <param name="region">Required. The region containing the cluster, of the form regions/.</param>
		/// <param name="cluster">Required. The cluster, in the form clusters/.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dataproc_projects_regions_clusters_injectCredentialsAsync(string project, string region, string cluster, InjectCredentialsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/"+ (cluster==null? "" : System.Uri.EscapeDataString(cluster))+":injectCredentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Dataproc_projects_regions_workflowTemplates_getIamPolicy v1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See Resource names (https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Dataproc_projects_regions_workflowTemplates_getIamPolicyAsync(string resource, GetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
		/// Dataproc_projects_regions_workflowTemplates_setIamPolicy v1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See Resource names (https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Dataproc_projects_regions_workflowTemplates_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Dataproc_projects_regions_workflowTemplates_testIamPermissions v1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See Resource names (https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Dataproc_projects_regions_workflowTemplates_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestIamPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Dataproc_projects_regions_clusters_createActionOnFailedPrimaryWorkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE_ACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_ACTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 2,
	}
	
	public enum Dataproc_projects_regions_jobs_listJobStateMatcher
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_ACTIVE = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
