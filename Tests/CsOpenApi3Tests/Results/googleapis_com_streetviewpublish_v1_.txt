//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Request to delete multiple Photos.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeletePhotosRequest
	{
		
		/// <summary>
		/// Required. IDs of the Photos. HTTP GET requests require the following syntax for the URL query parameter: `photoIds=&photoIds=&...`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoIds")]
		public string[] PhotoIds { get; set; }
	}
	
	/// <summary>
	/// Response to batch delete of one or more Photos.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeletePhotosResponse
	{
		
		/// <summary>
		/// The status for the operation to delete a single Photo in the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status[] Status { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response to batch get of Photos.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetPhotosResponse
	{
		
		/// <summary>
		/// List of results for each individual Photo requested, in the same order as the requests in BatchGetPhotos.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PhotoResponse[] Results { get; set; }
	}
	
	/// <summary>
	/// Response payload for a single Photo in batch operations including BatchGetPhotos and BatchUpdatePhotos.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhotoResponse
	{
		
		/// <summary>
		/// Photo is used to store 360 photos along with photo metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photo")]
		public Photo Photo { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// Photo is used to store 360 photos along with photo metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Photo
	{
		
		/// <summary>
		/// Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captureTime")]
		public string CaptureTime { get; set; }
		
		/// <summary>
		/// Optional. Connections to other photos. A connection represents the link from this photo to another photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public Connection[] Connections { get; set; }
		
		/// <summary>
		/// Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
		
		/// <summary>
		/// Output only. Status in Google Maps, whether this photo was published or rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapsPublishStatus")]
		public System.Nullable<PhotoMapsPublishStatus> MapsPublishStatus { get; set; }
		
		/// <summary>
		/// Identifier for a Photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoId")]
		public PhotoId PhotoId { get; set; }
		
		/// <summary>
		/// Optional. Places where this photo belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="places")]
		public Place[] Places { get; set; }
		
		/// <summary>
		/// Raw pose measurement for an entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pose")]
		public Pose Pose { get; set; }
		
		/// <summary>
		/// Output only. The share link for the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareLink")]
		public string ShareLink { get; set; }
		
		/// <summary>
		/// Output only. The thumbnail URL for showing a preview of the given photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
		
		/// <summary>
		/// Output only. Status of rights transfer on this photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferStatus")]
		public System.Nullable<PhotoTransferStatus> TransferStatus { get; set; }
		
		/// <summary>
		/// Upload reference for media files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadReference")]
		public UploadRef UploadReference { get; set; }
		
		/// <summary>
		/// Output only. Time when the image was uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadTime")]
		public string UploadTime { get; set; }
		
		/// <summary>
		/// Output only. View count of the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewCount")]
		public string ViewCount { get; set; }
	}
	
	/// <summary>
	/// A connection is the link from a source photo to a destination photo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Connection
	{
		
		/// <summary>
		/// Identifier for a Photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public PhotoId Target { get; set; }
	}
	
	/// <summary>
	/// Identifier for a Photo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhotoId
	{
		
		/// <summary>
		/// A unique identifier for a photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PhotoMapsPublishStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_MAPS_PUBLISH_STATUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED_UNKNOWN = 2,
	}
	
	/// <summary>
	/// Place metadata for an entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Place
	{
		
		/// <summary>
		/// Output only. The language_code that the name is localized with. This should be the language_code specified in the request, but may be a fallback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Output only. The name of the place, localized to the language_code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Place identifier, as described in https://developers.google.com/places/place-id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
	}
	
	/// <summary>
	/// Raw pose measurement for an entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pose
	{
		
		/// <summary>
		/// The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accuracyMeters")]
		public System.Nullable<System.Single> AccuracyMeters { get; set; }
		
		/// <summary>
		/// Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altitude")]
		public System.Nullable<System.Double> Altitude { get; set; }
		
		/// <summary>
		/// Time of the GPS record since UTC epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpsRecordTimestampUnixEpoch")]
		public string GpsRecordTimestampUnixEpoch { get; set; }
		
		/// <summary>
		/// The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be >=0 and <360. NaN indicates an unmeasured quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heading")]
		public System.Nullable<System.Double> Heading { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latLngPair")]
		public LatLng LatLngPair { get; set; }
		
		/// <summary>
		/// Level information containing level number and its corresponding name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public Level Level { get; set; }
		
		/// <summary>
		/// Pitch, measured at the center of the photo in degrees. Value must be >=-90 and <= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pitch")]
		public System.Nullable<System.Double> Pitch { get; set; }
		
		/// <summary>
		/// Roll, measured in degrees. Value must be >= 0 and <360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roll")]
		public System.Nullable<System.Double> Roll { get; set; }
	}
	
	/// <summary>
	/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LatLng
	{
		
		/// <summary>
		/// The latitude in degrees. It must be in the range [-90.0, +90.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude in degrees. It must be in the range [-180.0, +180.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// Level information containing level number and its corresponding name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Level
	{
		
		/// <summary>
		/// Required. A name assigned to this Level, restricted to 3 characters. Consider how the elevator buttons would be labeled for this level if there was an elevator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. Floor number, used for ordering. 0 indicates the ground level, 1 indicates the first level above ground level, -1 indicates the first level under ground level. Non-integer values are OK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Double> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PhotoTransferStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER_STATUS_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEVER_TRANSFERRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECEIVED_VIA_TRANSFER = 7,
	}
	
	/// <summary>
	/// Upload reference for media files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadRef
	{
		
		/// <summary>
		/// An upload reference should be unique for each user. It follows the form: "https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadUrl")]
		public string UploadUrl { get; set; }
	}
	
	/// <summary>
	/// Request to update the metadata of photos. Updating the pixels of photos is not supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdatePhotosRequest
	{
		
		/// <summary>
		/// Required. List of UpdatePhotoRequests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatePhotoRequests")]
		public UpdatePhotoRequest[] UpdatePhotoRequests { get; set; }
	}
	
	/// <summary>
	/// Request to update the metadata of a Photo. Updating the pixels of a photo is not supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePhotoRequest
	{
		
		/// <summary>
		/// Photo is used to store 360 photos along with photo metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photo")]
		public Photo Photo { get; set; }
		
		/// <summary>
		/// Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.lat_lng_pair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` > Note: When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Response to batch update of metadata of one or more Photos.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdatePhotosResponse
	{
		
		/// <summary>
		/// List of results for each individual Photo updated, in the same order as the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PhotoResponse[] Results { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Details related to ProcessingFailureReason#GPS_DATA_GAP. If there are multiple GPS data gaps, only the one with the largest duration is reported here.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GpsDataGapFailureDetails
	{
		
		/// <summary>
		/// The duration of the gap in GPS data that was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gapDuration")]
		public string GapDuration { get; set; }
		
		/// <summary>
		/// Relative time (from the start of the video stream) when the gap started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gapStartTime")]
		public string GapStartTime { get; set; }
	}
	
	/// <summary>
	/// IMU data from the device sensors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Imu
	{
		
		/// <summary>
		/// The accelerometer measurements in meters/sec^2 with increasing timestamps from devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accelMpsps")]
		public Measurement3d[] AccelMpsps { get; set; }
		
		/// <summary>
		/// The gyroscope measurements in radians/sec with increasing timestamps from devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gyroRps")]
		public Measurement3d[] GyroRps { get; set; }
		
		/// <summary>
		/// The magnetometer measurements of the magnetic field in microtesla (uT) with increasing timestamps from devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="magUt")]
		public Measurement3d[] MagUt { get; set; }
	}
	
	/// <summary>
	/// A Generic 3d measurement sample.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Measurement3d
	{
		
		/// <summary>
		/// The timestamp of the IMU measurement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captureTime")]
		public string CaptureTime { get; set; }
		
		/// <summary>
		/// The sensor measurement in the x axis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x")]
		public System.Nullable<System.Single> X { get; set; }
		
		/// <summary>
		/// The sensor measurement in the y axis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="y")]
		public System.Nullable<System.Single> Y { get; set; }
		
		/// <summary>
		/// The sensor measurement in the z axis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="z")]
		public System.Nullable<System.Single> Z { get; set; }
	}
	
	/// <summary>
	/// Details related to ProcessingFailureReason#IMU_DATA_GAP. If there are multiple IMU data gaps, only the one with the largest duration is reported here.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImuDataGapFailureDetails
	{
		
		/// <summary>
		/// The duration of the gap in IMU data that was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gapDuration")]
		public string GapDuration { get; set; }
		
		/// <summary>
		/// Relative time (from the start of the video stream) when the gap started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gapStartTime")]
		public string GapStartTime { get; set; }
	}
	
	/// <summary>
	/// Details related to ProcessingFailureReason#INSUFFICIENT_GPS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsufficientGpsFailureDetails
	{
		
		/// <summary>
		/// The number of GPS points that were found in the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpsPointsFound")]
		public System.Nullable<System.Int32> GpsPointsFound { get; set; }
	}
	
	/// <summary>
	/// A rectangle in geographical coordinates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LatLngBounds
	{
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="northeast")]
		public LatLng Northeast { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="southwest")]
		public LatLng Southwest { get; set; }
	}
	
	/// <summary>
	/// Response to list all photo sequences that belong to a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPhotoSequencesResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of photo sequences via Operation interface. The maximum number of items returned is based on the pageSize field in the request. Each item in the list can have three possible states, * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` contains a PhotoSequence message, In each sequence, only Id is populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoSequences")]
		public Operation[] PhotoSequences { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// Response to list all photos that belong to a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPhotosResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of photos. The pageSize field in the request determines the number of items returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public Photo[] Photos { get; set; }
	}
	
	/// <summary>
	/// Details related to PhotoSequenceProcessingFailureReason#NO_OVERLAP_GPS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NoOverlapGpsFailureDetails
	{
		
		/// <summary>
		/// Time of last recorded GPS point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpsEndTime")]
		public string GpsEndTime { get; set; }
		
		/// <summary>
		/// Time of first recorded GPS point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpsStartTime")]
		public string GpsStartTime { get; set; }
		
		/// <summary>
		/// End time of video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoEndTime")]
		public string VideoEndTime { get; set; }
		
		/// <summary>
		/// Start time of video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoStartTime")]
		public string VideoStartTime { get; set; }
	}
	
	/// <summary>
	/// Details related to ProcessingFailureReason#NOT_OUTDOORS. If there are multiple indoor frames found, the first frame is recorded here.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotOutdoorsFailureDetails
	{
		
		/// <summary>
		/// Relative time (from the start of the video stream) when an indoor frame was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// A sequence of 360 photos along with metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhotoSequence
	{
		
		/// <summary>
		/// Optional. Absolute time when the photo sequence starts to be captured. If the photo sequence is a video, this is the start time of the video. If this field is populated in input, it overrides the capture time in the video or XDM file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captureTimeOverride")]
		public string CaptureTimeOverride { get; set; }
		
		/// <summary>
		/// Output only. The computed distance of the photo sequence in meters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distanceMeters")]
		public System.Nullable<System.Double> DistanceMeters { get; set; }
		
		/// <summary>
		/// Additional details to accompany the ProcessingFailureReason enum. This message is always expected to be used in conjunction with ProcessingFailureReason, and the oneof value set in this message should match the FailureReason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureDetails")]
		public ProcessingFailureDetails FailureDetails { get; set; }
		
		/// <summary>
		/// Output only. If this sequence has processing_state = FAILED, this will contain the reason why it failed. If the processing_state is any other value, this field will be unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public System.Nullable<PhotoSequenceFailureReason> FailureReason { get; set; }
		
		/// <summary>
		/// Output only. The filename of the upload. Does not include the directory path. Only available if the sequence was uploaded on a platform that provides the filename.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// Input only. If both raw_gps_timeline and the Camera Motion Metadata Track (CAMM) contain GPS measurements, indicate which takes precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpsSource")]
		public System.Nullable<PhotoSequenceGpsSource> GpsSource { get; set; }
		
		/// <summary>
		/// Output only. Unique identifier for the photo sequence. This also acts as a long running operation ID if uploading is performed asynchronously.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// IMU data from the device sensors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imu")]
		public Imu Imu { get; set; }
		
		/// <summary>
		/// Output only. Photos with increasing timestamps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public Photo[] Photos { get; set; }
		
		/// <summary>
		/// Output only. The processing state of this sequence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingState")]
		public System.Nullable<PhotoSequenceProcessingState> ProcessingState { get; set; }
		
		/// <summary>
		/// Input only. Raw GPS measurements with increasing timestamps from the device that aren't time synced with each photo. These raw measurements will be used to infer the pose of each frame. Required in input when InputType is VIDEO and raw GPS measurements are not in Camera Motion Metadata Track (CAMM). User can indicate which takes precedence using gps_source if raw GPS measurements are provided in both raw_gps_timeline and Camera Motion Metadata Track (CAMM).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawGpsTimeline")]
		public Pose[] RawGpsTimeline { get; set; }
		
		/// <summary>
		/// A rectangle in geographical coordinates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequenceBounds")]
		public LatLngBounds SequenceBounds { get; set; }
		
		/// <summary>
		/// Upload reference for media files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadReference")]
		public UploadRef UploadReference { get; set; }
		
		/// <summary>
		/// Output only. The time this photo sequence was created in uSV Store service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadTime")]
		public string UploadTime { get; set; }
		
		/// <summary>
		/// Output only. The total number of views that all the published images in this PhotoSequence have received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewCount")]
		public string ViewCount { get; set; }
	}
	
	/// <summary>
	/// Additional details to accompany the ProcessingFailureReason enum. This message is always expected to be used in conjunction with ProcessingFailureReason, and the oneof value set in this message should match the FailureReason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProcessingFailureDetails
	{
		
		/// <summary>
		/// Details related to ProcessingFailureReason#GPS_DATA_GAP. If there are multiple GPS data gaps, only the one with the largest duration is reported here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpsDataGapDetails")]
		public GpsDataGapFailureDetails GpsDataGapDetails { get; set; }
		
		/// <summary>
		/// Details related to ProcessingFailureReason#IMU_DATA_GAP. If there are multiple IMU data gaps, only the one with the largest duration is reported here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imuDataGapDetails")]
		public ImuDataGapFailureDetails ImuDataGapDetails { get; set; }
		
		/// <summary>
		/// Details related to ProcessingFailureReason#INSUFFICIENT_GPS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insufficientGpsDetails")]
		public InsufficientGpsFailureDetails InsufficientGpsDetails { get; set; }
		
		/// <summary>
		/// Details related to PhotoSequenceProcessingFailureReason#NO_OVERLAP_GPS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noOverlapGpsDetails")]
		public NoOverlapGpsFailureDetails NoOverlapGpsDetails { get; set; }
		
		/// <summary>
		/// Details related to ProcessingFailureReason#NOT_OUTDOORS. If there are multiple indoor frames found, the first frame is recorded here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notOutdoorsDetails")]
		public NotOutdoorsFailureDetails NotOutdoorsDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PhotoSequenceFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING_FAILURE_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW_RESOLUTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_GPS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_OVERLAP_GPS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_GPS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_REFINE_POSITIONS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAKEDOWN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORRUPT_VIDEO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_VIDEO_FORMAT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_VIDEO_DIMENSIONS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CAPTURE_TIME = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GPS_DATA_GAP = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JUMPY_GPS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_IMU = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_IMU = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_OVERLAP_TIME_SERIES = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMU_DATA_GAP = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_CAMERA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_OUTDOORS = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_VIDEO_FRAMES = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_MOVEMENT = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAST_DOWN = 23,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PhotoSequenceGpsSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHOTO_SEQUENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMERA_MOTION_METADATA_TRACK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PhotoSequenceProcessingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// After the client finishes uploading the photo with the returned UploadRef, CreatePhoto publishes the uploaded Photo to Street View on Google Maps. Currently, the only way to set heading, pitch, and roll in CreatePhoto is through the [Photo Sphere XMP metadata](https://developers.google.com/streetview/spherical-metadata) in the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`, `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose. This method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if the request is malformed or if the uploaded photo is not a 360 photo. * google.rpc.Code.NOT_FOUND if the upload reference does not exist. * google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the storage limit.
		/// Streetviewpublish_photo_create v1/photo
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Photo> Streetviewpublish_photo_createAsync(Photo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Photo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the metadata of a Photo, such as pose, place association, connections, etc. Changing the pixels of a photo is not supported. Only the fields specified in the updateMask field are used. If `updateMask` is not present, the update applies to all fields. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo. * google.rpc.Code.INVALID_ARGUMENT if the request is malformed. * google.rpc.Code.NOT_FOUND if the requested photo does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo is still being indexed.
		/// Streetviewpublish_photo_update v1/photo/{id}
		/// </summary>
		/// <param name="id">A unique identifier for a photo.</param>
		/// <param name="updateMask">Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.lat_lng_pair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` > Note: When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed.</param>
		/// <returns>Successful response</returns>
		public async Task<Photo> Streetviewpublish_photo_updateAsync(string id, string updateMask, Photo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photo/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Photo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Photo and its metadata. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo. * google.rpc.Code.NOT_FOUND if the photo ID does not exist.
		/// Streetviewpublish_photo_delete v1/photo/{photoId}
		/// </summary>
		/// <param name="photoId">Required. ID of the Photo.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Streetviewpublish_photo_deleteAsync(string photoId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photo/"+ (photoId==null? "" : System.Uri.EscapeDataString(photoId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the metadata of the specified Photo. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested Photo. * google.rpc.Code.NOT_FOUND if the requested Photo does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo is still being indexed.
		/// Streetviewpublish_photo_get v1/photo/{photoId}
		/// </summary>
		/// <param name="photoId">Required. ID of the Photo.</param>
		/// <param name="languageCode">The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If language_code is unspecified, the user's language preference for Google services is used.</param>
		/// <param name="view">Required. Specifies if a download URL for the photo bytes should be returned in the Photo response.</param>
		/// <returns>Successful response</returns>
		public async Task<Photo> Streetviewpublish_photo_getAsync(string photoId, string languageCode, Streetviewpublish_photo_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photo/"+ (photoId==null? "" : System.Uri.EscapeDataString(photoId))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Photo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an upload session to start uploading photo bytes. The method uses the upload URL of the returned UploadRef to upload the bytes for the Photo. In addition to the photo requirements shown in https://support.google.com/maps/answer/7012050?ref_topic=6275604, the photo must meet the following requirements: * Photo Sphere XMP metadata must be included in the photo metadata. See https://developers.google.com/streetview/spherical-metadata for the required fields. * The pixel size of the photo must meet the size requirements listed in https://support.google.com/maps/answer/7012050?ref_topic=6275604, and the photo must be a full 360 horizontally. After the upload completes, the method uses UploadRef with CreatePhoto to create the Photo object entry.
		/// Streetviewpublish_photo_startUpload v1/photo:startUpload
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<UploadRef> Streetviewpublish_photo_startUploadAsync(Empty requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photo:startUpload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UploadRef>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// After the client finishes uploading the PhotoSequence with the returned UploadRef, CreatePhotoSequence extracts a sequence of 360 photos from a video or Extensible Device Metadata (XDM, http://www.xdm.org/) to be published to Street View on Google Maps. `CreatePhotoSequence` returns an Operation, with the PhotoSequence Id set in the `Operation.name` field. This method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if the request is malformed. * google.rpc.Code.NOT_FOUND if the upload reference does not exist.
		/// Streetviewpublish_photoSequence_create v1/photoSequence
		/// </summary>
		/// <param name="inputType">Required. The input form of PhotoSequence.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Streetviewpublish_photoSequence_createAsync(Streetviewpublish_photoSequence_createInputType inputType, PhotoSequence requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photoSequence?inputType=" + inputType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a PhotoSequence and its metadata. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo sequence. * google.rpc.Code.NOT_FOUND if the photo sequence ID does not exist. * google.rpc.Code.FAILED_PRECONDITION if the photo sequence ID is not yet finished processing.
		/// Streetviewpublish_photoSequence_delete v1/photoSequence/{sequenceId}
		/// </summary>
		/// <param name="sequenceId">Required. ID of the PhotoSequence.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Streetviewpublish_photoSequence_deleteAsync(string sequenceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photoSequence/"+ (sequenceId==null? "" : System.Uri.EscapeDataString(sequenceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the metadata of the specified PhotoSequence via the Operation interface. This method returns the following three types of responses: * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` is poulated, which contains a PhotoSequence message. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested PhotoSequence. * google.rpc.Code.NOT_FOUND if the requested PhotoSequence does not exist.
		/// Streetviewpublish_photoSequence_get v1/photoSequence/{sequenceId}
		/// </summary>
		/// <param name="sequenceId">Required. ID of the photo sequence.</param>
		/// <param name="filter">Optional. The filter expression. For example: `published_status=PUBLISHED`. The filters supported are: `published_status`. See https://google.aip.dev/160 for more information.</param>
		/// <param name="view">Specifies if a download URL for the photo sequence should be returned in `download_url` of individual photos in the PhotoSequence response. > Note: Currently not implemented.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Streetviewpublish_photoSequence_getAsync(string sequenceId, string filter, Streetviewpublish_photo_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photoSequence/"+ (sequenceId==null? "" : System.Uri.EscapeDataString(sequenceId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an upload session to start uploading photo sequence data. The upload URL of the returned UploadRef is used to upload the data for the `photoSequence`. After the upload is complete, the UploadRef is used with CreatePhotoSequence to create the PhotoSequence object entry.
		/// Streetviewpublish_photoSequence_startUpload v1/photoSequence:startUpload
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<UploadRef> Streetviewpublish_photoSequence_startUploadAsync(Empty requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photoSequence:startUpload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UploadRef>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all the PhotoSequences that belong to the user, in descending CreatePhotoSequence timestamp order.
		/// Streetviewpublish_photoSequences_list v1/photoSequences
		/// </summary>
		/// <param name="filter">Optional. The filter expression. For example: `imagery_type=SPHERICAL`. The filters supported are: `imagery_type`, `processing_state`, `min_latitude`, `max_latitude`, `min_longitude`, `max_longitude`, `filename_query`, `min_capture_time_seconds`, `max_capture_time_seconds. See https://google.aip.dev/160 for more information. Filename queries should sent as a Phrase in order to support multiple words and special characters by adding escaped quotes. Ex: filename_query="example of a phrase.mp4"</param>
		/// <param name="pageSize">Optional. The maximum number of photo sequences to return. `pageSize` must be non-negative. If `pageSize` is zero or is not provided, the default page size of 100 is used. The number of photo sequences returned in the response may be less than `pageSize` if the number of matches is less than `pageSize`. This is currently unimplemented but is in process.</param>
		/// <param name="pageToken">Optional. The nextPageToken value returned from a previous ListPhotoSequences request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPhotoSequencesResponse> Streetviewpublish_photoSequences_listAsync(string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photoSequences?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPhotoSequencesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the Photos that belong to the user. > Note: Recently created photos that are still being indexed are not returned in the response.
		/// Streetviewpublish_photos_list v1/photos
		/// </summary>
		/// <param name="filter">Optional. The filter expression. For example: `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`. The filters supported are: `placeId`, `min_latitude`, `max_latitude`, `min_longitude`, `max_longitude`. See https://google.aip.dev/160 for more information.</param>
		/// <param name="languageCode">Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If language_code is unspecified, the user's language preference for Google services is used.</param>
		/// <param name="pageSize">Optional. The maximum number of photos to return. `pageSize` must be non-negative. If `pageSize` is zero or is not provided, the default page size of 100 is used. The number of photos returned in the response may be less than `pageSize` if the number of photos that belong to the user is less than `pageSize`.</param>
		/// <param name="pageToken">Optional. The nextPageToken value returned from a previous ListPhotos request, if any.</param>
		/// <param name="view">Required. Specifies if a download URL for the photos bytes should be returned in the Photos response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPhotosResponse> Streetviewpublish_photos_listAsync(string filter, string languageCode, int pageSize, string pageToken, Streetviewpublish_photo_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photos?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPhotosResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a list of Photos and their metadata. Note that if BatchDeletePhotos fails, either critical fields are missing or there is an authentication error. Even if BatchDeletePhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchDeletePhotosResponse.results. See DeletePhoto for specific failures that can occur per photo.
		/// Streetviewpublish_photos_batchDelete v1/photos:batchDelete
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<BatchDeletePhotosResponse> Streetviewpublish_photos_batchDeleteAsync(BatchDeletePhotosRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photos:batchDelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDeletePhotosResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the metadata of the specified Photo batch. Note that if BatchGetPhotos fails, either critical fields are missing or there is an authentication error. Even if BatchGetPhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchGetPhotosResponse.results. See GetPhoto for specific failures that can occur per photo.
		/// Streetviewpublish_photos_batchGet v1/photos:batchGet
		/// </summary>
		/// <param name="languageCode">Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If language_code is unspecified, the user's language preference for Google services is used.</param>
		/// <param name="photoIds">Required. IDs of the Photos. For HTTP GET requests, the URL query parameter should be `photoIds=&photoIds=&...`.</param>
		/// <param name="view">Required. Specifies if a download URL for the photo bytes should be returned in the Photo response.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchGetPhotosResponse> Streetviewpublish_photos_batchGetAsync(string languageCode, string[] photoIds, Streetviewpublish_photo_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photos:batchGet?languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&"+string.Join("&", photoIds.Select(z => $"photoIds={System.Uri.EscapeDataString(z.ToString())}"))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetPhotosResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the metadata of Photos, such as pose, place association, connections, etc. Changing the pixels of photos is not supported. Note that if BatchUpdatePhotos fails, either critical fields are missing or there is an authentication error. Even if BatchUpdatePhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchUpdatePhotosResponse.results. See UpdatePhoto for specific failures that can occur per photo. Only the fields specified in updateMask field are used. If `updateMask` is not present, the update applies to all fields. The number of UpdatePhotoRequest messages in a BatchUpdatePhotosRequest must not exceed 20. > Note: To update Pose.altitude, Pose.latLngPair has to be filled as well. Otherwise, the request will fail.
		/// Streetviewpublish_photos_batchUpdate v1/photos:batchUpdate
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdatePhotosResponse> Streetviewpublish_photos_batchUpdateAsync(BatchUpdatePhotosRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/photos:batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpdatePhotosResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Streetviewpublish_photo_getView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE_DOWNLOAD_URL = 1,
	}
	
	public enum Streetviewpublish_photoSequence_createInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPUT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XDM = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
