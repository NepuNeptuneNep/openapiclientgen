//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AllRequestTypesExample
	{
		
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public AuthenticationMessage Authentication { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heartbeat")]
		public HeartbeatMessage Heartbeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketSubscription")]
		public MarketSubscriptionMessage MarketSubscription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="opTypes")]
		public System.Nullable<AllRequestTypesExampleOpTypes> OpTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderSubscriptionMessage")]
		public OrderSubscriptionMessage OrderSubscriptionMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AllRequestTypesExampleOpTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		heartbeat = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authentication = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		marketSubscription = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		orderSubscription = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AllResponseTypesExample
	{
		
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public ConnectionMessage Connection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketChangeMessage")]
		public MarketChangeMessage MarketChangeMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="opTypes")]
		public System.Nullable<AllResponseTypesExampleOpTypes> OpTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderChangeMessage")]
		public OrderChangeMessage OrderChangeMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StatusMessage Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AllResponseTypesExampleOpTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		connection = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		status = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mcm = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ocm = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationMessage : RequestMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="appKey")]
		public string AppKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="session")]
		public string Session { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectionMessage : ResponseMessage
	{
		
		/// <summary>
		/// The connection id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionId")]
		public string ConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HeartbeatMessage : RequestMessage
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyLineDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="kl")]
		public KeyLineSelection[] Kl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyLineSelection
	{
		
		[System.Runtime.Serialization.DataMember(Name="hc")]
		public System.Nullable<System.Double> Hc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketChange
	{
		
		/// <summary>
		/// Conflated - have more than a single change been combined (or null if not conflated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="con")]
		public System.Nullable<System.Boolean> Con { get; set; }
		
		/// <summary>
		/// Market Id - the id of the market
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="img")]
		public System.Nullable<System.Boolean> Img { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketDefinition")]
		public MarketDefinition MarketDefinition { get; set; }
		
		/// <summary>
		/// Runner Changes - a list of changes to runners (or null if un-changed)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rc")]
		public RunnerChange[] Rc { get; set; }
		
		/// <summary>
		/// The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tv")]
		public System.Nullable<System.Double> Tv { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RunnerChange
	{
		
		/// <summary>
		/// Available To Back - PriceVol tuple delta of price changes (0 vol is remove)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="atb")]
		public string[] Atb { get; set; }
		
		/// <summary>
		/// Available To Lay - PriceVol tuple delta of price changes (0 vol is remove)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="atl")]
		public string[] Atl { get; set; }
		
		/// <summary>
		/// Best Available To Back - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batb")]
		public string[] Batb { get; set; }
		
		/// <summary>
		/// Best Available To Lay - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batl")]
		public string[] Batl { get; set; }
		
		/// <summary>
		/// Best Display Available To Back (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bdatb")]
		public string[] Bdatb { get; set; }
		
		/// <summary>
		/// Best Display Available To Lay (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bdatl")]
		public string[] Bdatl { get; set; }
		
		/// <summary>
		/// Handicap - the handicap of the runner (selection) (null if not applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hc")]
		public System.Nullable<System.Double> Hc { get; set; }
		
		/// <summary>
		/// Selection Id - the id of the runner (selection)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Last Traded Price - The last traded price (or null if un-changed)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ltp")]
		public System.Nullable<System.Double> Ltp { get; set; }
		
		/// <summary>
		/// Starting Price Back - PriceVol tuple delta of price changes (0 vol is remove)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spb")]
		public string[] Spb { get; set; }
		
		/// <summary>
		/// Starting Price Far - The far starting price (or null if un-changed)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spf")]
		public System.Nullable<System.Double> Spf { get; set; }
		
		/// <summary>
		/// Starting Price Lay - PriceVol tuple delta of price changes (0 vol is remove)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spl")]
		public string[] Spl { get; set; }
		
		/// <summary>
		/// Starting Price Near - The far starting price (or null if un-changed)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spn")]
		public System.Nullable<System.Double> Spn { get; set; }
		
		/// <summary>
		/// Traded - PriceVol tuple delta of price changes (0 vol is remove)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trd")]
		public string[] Trd { get; set; }
		
		/// <summary>
		/// The total amount matched. This value is truncated at 2dp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tv")]
		public System.Nullable<System.Double> Tv { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketChangeMessage : ResponseMessage
	{
		
		/// <summary>
		/// Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clk")]
		public string Clk { get; set; }
		
		/// <summary>
		/// Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflateMs")]
		public System.Nullable<System.Int64> ConflateMs { get; set; }
		
		/// <summary>
		/// Change Type - set to indicate the type of change - if null this is a delta)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ct")]
		public System.Nullable<MarketChangeMessageCt> Ct { get; set; }
		
		/// <summary>
		/// Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heartbeatMs")]
		public System.Nullable<System.Int64> HeartbeatMs { get; set; }
		
		/// <summary>
		/// Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialClk")]
		public string InitialClk { get; set; }
		
		/// <summary>
		/// MarketChanges - the modifications to markets (will be null on a heartbeat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mc")]
		public MarketChange[] Mc { get; set; }
		
		/// <summary>
		/// Publish Time (in millis since epoch) that the changes were generated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pt")]
		public System.Nullable<System.Int64> Pt { get; set; }
		
		/// <summary>
		/// Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentType")]
		public System.Nullable<MarketChangeMessageSegmentType> SegmentType { get; set; }
		
		/// <summary>
		/// Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MarketChangeMessageCt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUB_IMAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESUB_DELTA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARTBEAT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MarketChangeMessageSegmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEG_START = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEG_END = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketDataFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string[] Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ladderLevels")]
		public System.Nullable<System.Int32> LadderLevels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="betDelay")]
		public System.Nullable<System.Int32> BetDelay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bettingType")]
		public System.Nullable<MarketDefinitionBettingType> BettingType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bspMarket")]
		public System.Nullable<System.Boolean> BspMarket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bspReconciled")]
		public System.Nullable<System.Boolean> BspReconciled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complete")]
		public System.Nullable<System.Boolean> Complete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="crossMatching")]
		public System.Nullable<System.Boolean> CrossMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discountAllowed")]
		public System.Nullable<System.Boolean> DiscountAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eachWayDivisor")]
		public System.Nullable<System.Double> EachWayDivisor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// The Event Type the market is contained within.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTypeId")]
		public string EventTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inPlay")]
		public System.Nullable<System.Boolean> InPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyLineDefinition")]
		public KeyLineDefinition KeyLineDefinition { get; set; }
		
		/// <summary>
		/// For Handicap and Line markets, the lines available on this market will be between the range of lineMinUnit and lineMaxUnit, in increments of the lineInterval value. e.g. If unit is runs, lineMinUnit=10, lineMaxUnit=20 and lineInterval=0.5, then valid lines include 10, 10.5, 11, 11.5 up to 20 runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineInterval")]
		public System.Nullable<System.Double> LineInterval { get; set; }
		
		/// <summary>
		/// For Handicap and Line markets, the maximum value for the outcome, in market units for this market (eg 100 runs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineMaxUnit")]
		public System.Nullable<System.Double> LineMaxUnit { get; set; }
		
		/// <summary>
		/// For Handicap and Line markets, the minimum value for the outcome, in market units for this market (eg 0 runs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineMinUnit")]
		public System.Nullable<System.Double> LineMinUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketBaseRate")]
		public System.Nullable<System.Double> MarketBaseRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketTime")]
		public System.Nullable<System.DateTimeOffset> MarketTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketType")]
		public string MarketType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfActiveRunners")]
		public System.Nullable<System.Int32> NumberOfActiveRunners { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfWinners")]
		public System.Nullable<System.Int32> NumberOfWinners { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openDate")]
		public System.Nullable<System.DateTimeOffset> OpenDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="persistenceEnabled")]
		public System.Nullable<System.Boolean> PersistenceEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceLadderDefinition")]
		public PriceLadderDefinition PriceLadderDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="raceType")]
		public string RaceType { get; set; }
		
		/// <summary>
		/// The market regulators.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regulators")]
		public string[] Regulators { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runners")]
		public RunnerDefinition[] Runners { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runnersVoidable")]
		public System.Nullable<System.Boolean> RunnersVoidable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settledTime")]
		public System.Nullable<System.DateTimeOffset> SettledTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<MarketDefinitionStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suspendTime")]
		public System.Nullable<System.DateTimeOffset> SuspendTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="turnInPlayEnabled")]
		public System.Nullable<System.Boolean> TurnInPlayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="venue")]
		public string Venue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MarketDefinitionBettingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ODDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASIAN_HANDICAP_DOUBLE_LINE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASIAN_HANDICAP_SINGLE_LINE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RunnerDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustmentFactor")]
		public System.Nullable<System.Double> AdjustmentFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bsp")]
		public System.Nullable<System.Double> Bsp { get; set; }
		
		/// <summary>
		/// Handicap - the handicap of the runner (selection) (null if not applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hc")]
		public System.Nullable<System.Double> Hc { get; set; }
		
		/// <summary>
		/// Selection Id - the id of the runner (selection)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removalDate")]
		public System.Nullable<System.DateTimeOffset> RemovalDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortPriority")]
		public System.Nullable<System.Int32> SortPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<RunnerDefinitionStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RunnerDefinitionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINNER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOSER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVED_VACANT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIDDEN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MarketDefinitionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="bettingTypes")]
		public MarketDefinitionBettingType[] BettingTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bspMarket")]
		public System.Nullable<System.Boolean> BspMarket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryCodes")]
		public string[] CountryCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventIds")]
		public string[] EventIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventTypeIds")]
		public string[] EventTypeIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketIds")]
		public string[] MarketIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketTypes")]
		public string[] MarketTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="raceTypes")]
		public string[] RaceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="turnInPlayEnabled")]
		public System.Nullable<System.Boolean> TurnInPlayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="venues")]
		public string[] Venues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketSubscriptionMessage : RequestMessage
	{
		
		/// <summary>
		/// Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clk")]
		public string Clk { get; set; }
		
		/// <summary>
		/// Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflateMs")]
		public System.Nullable<System.Int64> ConflateMs { get; set; }
		
		/// <summary>
		/// Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heartbeatMs")]
		public System.Nullable<System.Int64> HeartbeatMs { get; set; }
		
		/// <summary>
		/// Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialClk")]
		public string InitialClk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketDataFilter")]
		public MarketDataFilter MarketDataFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketFilter")]
		public MarketFilter MarketFilter { get; set; }
		
		/// <summary>
		/// Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentationEnabled")]
		public System.Nullable<System.Boolean> SegmentationEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Order
	{
		
		/// <summary>
		/// Average Price Matched - the average price the order was matched at (null if the order is not matched). This value is not meaningful for activity on Line markets and is not guaranteed to be returned or maintained for these markets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avp")]
		public System.Nullable<System.Double> Avp { get; set; }
		
		/// <summary>
		/// BSP Liability - the BSP liability of the order (null if the order is not a BSP order)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bsp")]
		public System.Nullable<System.Double> Bsp { get; set; }
		
		/// <summary>
		/// Cancelled Date - the date the order was cancelled (null if the order is not cancelled)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cd")]
		public System.Nullable<System.Int64> Cd { get; set; }
		
		/// <summary>
		/// Bet Id - the id of the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Lapsed Date - the date the order was lapsed (null if the order is not lapsed)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ld")]
		public System.Nullable<System.Int64> Ld { get; set; }
		
		/// <summary>
		/// Lapse Status Reason Code - the reason that some or all of this order has been lapsed (null if no portion of the order is lapsed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lsrc")]
		public string Lsrc { get; set; }
		
		/// <summary>
		/// Matched Date - the date the order was matched (null if the order is not matched)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md")]
		public System.Nullable<System.Int64> Md { get; set; }
		
		/// <summary>
		/// Order Type - the type of the order (L = LIMIT, MOC = MARKET_ON_CLOSE, LOC = LIMIT_ON_CLOSE)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ot")]
		public System.Nullable<OrderOt> Ot { get; set; }
		
		/// <summary>
		/// Price - the original placed price of the order. Line markets operate at even-money odds of 2.0. However, price for these markets refers to the line positions available as defined by the markets min-max range and interval steps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="p")]
		public System.Nullable<System.Double> P { get; set; }
		
		/// <summary>
		/// Placed Date - the date the order was placed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pd")]
		public System.Nullable<System.Int64> Pd { get; set; }
		
		/// <summary>
		/// Persistence Type - whether the order will persist at in play or not (L = LAPSE, P = PERSIST, MOC = Market On Close)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pt")]
		public System.Nullable<OrderPt> Pt { get; set; }
		
		/// <summary>
		/// Regulator Auth Code - the auth code returned by the regulator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rac")]
		public string Rac { get; set; }
		
		/// <summary>
		/// Regulator Code - the regulator of the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rc")]
		public string Rc { get; set; }
		
		/// <summary>
		/// Order Reference - the customer's order reference for this order (empty string if one was not set)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rfo")]
		public string Rfo { get; set; }
		
		/// <summary>
		/// Strategy Reference - the customer's strategy reference for this order (empty string if one was not set)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rfs")]
		public string Rfs { get; set; }
		
		/// <summary>
		/// Size - the original placed size of the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s")]
		public System.Nullable<System.Double> S { get; set; }
		
		/// <summary>
		/// Size Cancelled - the amount of the order that has been cancelled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sc")]
		public System.Nullable<System.Double> Sc { get; set; }
		
		/// <summary>
		/// Side - the side of the order. For Line markets a 'B' bet refers to a SELL line and an 'L' bet refers to a BUY line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="side")]
		public System.Nullable<OrderSide> Side { get; set; }
		
		/// <summary>
		/// Size Lapsed - the amount of the order that has been lapsed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sl")]
		public System.Nullable<System.Double> Sl { get; set; }
		
		/// <summary>
		/// Size Matched - the amount of the order that has been matched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sm")]
		public System.Nullable<System.Double> Sm { get; set; }
		
		/// <summary>
		/// Size Remaining - the amount of the order that is remaining unmatched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sr")]
		public System.Nullable<System.Double> Sr { get; set; }
		
		/// <summary>
		/// Status - the status of the order (E = EXECUTABLE, EC = EXECUTION_COMPLETE)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OrderStatus> Status { get; set; }
		
		/// <summary>
		/// Size Voided - the amount of the order that has been voided
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sv")]
		public System.Nullable<System.Double> Sv { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderOt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		L = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderPt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		L = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderSide
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		L = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderChangeMessage : ResponseMessage
	{
		
		/// <summary>
		/// Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clk")]
		public string Clk { get; set; }
		
		/// <summary>
		/// Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflateMs")]
		public System.Nullable<System.Int64> ConflateMs { get; set; }
		
		/// <summary>
		/// Change Type - set to indicate the type of change - if null this is a delta)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ct")]
		public MarketChangeMessageCt Ct { get; set; }
		
		/// <summary>
		/// Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heartbeatMs")]
		public System.Nullable<System.Int64> HeartbeatMs { get; set; }
		
		/// <summary>
		/// Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialClk")]
		public string InitialClk { get; set; }
		
		/// <summary>
		/// OrderMarketChanges - the modifications to account's orders (will be null on a heartbeat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oc")]
		public OrderMarketChange[] Oc { get; set; }
		
		/// <summary>
		/// Publish Time (in millis since epoch) that the changes were generated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pt")]
		public System.Nullable<System.Int64> Pt { get; set; }
		
		/// <summary>
		/// Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentType")]
		public MarketChangeMessageSegmentType SegmentType { get; set; }
		
		/// <summary>
		/// Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderMarketChange
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closed")]
		public System.Nullable<System.Boolean> Closed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullImage")]
		public System.Nullable<System.Boolean> FullImage { get; set; }
		
		/// <summary>
		/// Market Id - the id of the market the order is on
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Order Changes - a list of changes to orders on a selection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orc")]
		public OrderRunnerChange[] Orc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderRunnerChange
	{
		
		[System.Runtime.Serialization.DataMember(Name="fullImage")]
		public System.Nullable<System.Boolean> FullImage { get; set; }
		
		/// <summary>
		/// Handicap - the handicap of the runner (selection) (null if not applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hc")]
		public System.Nullable<System.Double> Hc { get; set; }
		
		/// <summary>
		/// Selection Id - the id of the runner (selection)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mb")]
		public string[] Mb { get; set; }
		
		/// <summary>
		/// Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ml")]
		public string[] Ml { get; set; }
		
		/// <summary>
		/// Strategy Matches - Matched Backs and Matched Lays grouped by strategy reference
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smc")]
		public System.Collections.Generic.Dictionary<string, StrategyMatchChange> Smc { get; set; }
		
		/// <summary>
		/// Unmatched Orders - orders on this runner (selection) that are not fully matched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uo")]
		public Order[] Uo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderFilter
	{
		
		/// <summary>
		/// Internal use only & should not be set on your filter (your subscription is already locked to your account). If set subscription will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		public int[] AccountIds { get; set; }
		
		/// <summary>
		/// Restricts to specified customerStrategyRefs; this will filter orders and StrategyMatchChanges accordingly (Note: overall postition is not filtered)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerStrategyRefs")]
		public string[] CustomerStrategyRefs { get; set; }
		
		/// <summary>
		/// Returns overall / net position (See: OrderRunnerChange.mb / OrderRunnerChange.ml). Default=true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeOverallPosition")]
		public System.Nullable<System.Boolean> IncludeOverallPosition { get; set; }
		
		/// <summary>
		/// Returns strategy positions (See: OrderRunnerChange.smc=Map<customerStrategyRef, StrategyMatchChange>) - these are sent in delta format as per overall position. Default=false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionMatchedByStrategyRef")]
		public System.Nullable<System.Boolean> PartitionMatchedByStrategyRef { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderSubscriptionMessage : RequestMessage
	{
		
		/// <summary>
		/// Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clk")]
		public string Clk { get; set; }
		
		/// <summary>
		/// Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflateMs")]
		public System.Nullable<System.Int64> ConflateMs { get; set; }
		
		/// <summary>
		/// Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heartbeatMs")]
		public System.Nullable<System.Int64> HeartbeatMs { get; set; }
		
		/// <summary>
		/// Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialClk")]
		public string InitialClk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderFilter")]
		public OrderFilter OrderFilter { get; set; }
		
		/// <summary>
		/// Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentationEnabled")]
		public System.Nullable<System.Boolean> SegmentationEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriceLadderDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PriceLadderDefinitionType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PriceLadderDefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLASSIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_RANGE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RequestMessage
	{
		
		/// <summary>
		/// Client generated unique id to link request with response (like json rpc)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The operation type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="op")]
		public string Op { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResponseMessage
	{
		
		/// <summary>
		/// Client generated unique id to link request with response (like json rpc)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The operation type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="op")]
		public string Op { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusMessage : ResponseMessage
	{
		
		/// <summary>
		/// Is the connection now closed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionClosed")]
		public System.Nullable<System.Boolean> ConnectionClosed { get; set; }
		
		/// <summary>
		/// The connection id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionId")]
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// The number of connections available for this account at this moment in time. Present on responses to Authentication messages only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionsAvailable")]
		public System.Nullable<System.Int32> ConnectionsAvailable { get; set; }
		
		/// <summary>
		/// The type of error in case of a failure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<StatusMessageErrorCode> ErrorCode { get; set; }
		
		/// <summary>
		/// Additional message in case of a failure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The status of the last request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<StatusMessageStatusCode> StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StatusMessageErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_APP_KEY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_APP_KEY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SESSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_SESSION_INFORMATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AUTHORIZED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_INPUT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CLOCK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNEXPECTED_ERROR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_LIMIT_EXCEEDED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_REQUEST = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTION_FAILED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_CONNECTION_LIMIT_EXCEEDED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOO_MANY_REQUESTS = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StatusMessageStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StrategyMatchChange
	{
		
		/// <summary>
		/// Matched Backs - matched amounts by distinct matched price on the Back side for this strategy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mb")]
		public string[] Mb { get; set; }
		
		/// <summary>
		/// Matched Lays - matched amounts by distinct matched price on the Lay side for this strategy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ml")]
		public string[] Ml { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This is a socket protocol delimited by CRLF (not http)
		/// RequestPost request
		/// </summary>
		/// <param name="requestBody">Requests are sent to socket</param>
		public async Task RequestPostAsync(AllRequestTypesExample requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "request";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
