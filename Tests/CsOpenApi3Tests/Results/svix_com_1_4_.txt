//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppPortalAccessIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="featureFlags")]
		public string[] FeatureFlags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppPortalAccessOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RateLimit { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the application
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string Uid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RateLimit { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the application
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationTokenExpireIn
	{
		
		/// <summary>
		/// How many seconds until the old key is expired.
		/// Minimum: 0
		/// Maximum: 259200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		[System.ComponentModel.DataAnnotations.Range(0, 259200)]
		public System.Nullable<System.Int32> Expiry { get; set; }
	}
	
	/// <summary>
	/// Sent when a background task finishes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackgroundTaskFinishedEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BackgroundTaskFinishedEventData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BackgroundTaskFinishedEventType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackgroundTaskFinishedEventData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// An enumeration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BackgroundTaskFinishedEventDataStatus Status { get; set; }
		
		/// <summary>
		/// An enumeration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="task")]
		public BackgroundTaskFinishedEventDataTask Task { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundTaskFinishedEventDataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		finished = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundTaskFinishedEventDataTask
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application.stats")]
		application_stats = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundTaskFinishedEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="background_task.finished")]
		background_task_finished = 0,
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundTaskOpWebhookStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		finished = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 1,
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundTaskOpWebhookType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application.stats")]
		application_stats = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackgroundTaskOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An enumeration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BackgroundTaskOutStatus Status { get; set; }
		
		/// <summary>
		/// An enumeration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="task")]
		public BackgroundTaskOutTask Task { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundTaskOutStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		finished = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundTaskOutTask
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="endpoint.replay")]
		endpoint_replay = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="endpoint.recover")]
		endpoint_recover = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application.stats")]
		application_stats = 2,
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		finished = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="endpoint.replay")]
		endpoint_replay = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="endpoint.recover")]
		endpoint_recover = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application.stats")]
		application_stats = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DashboardAccessOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Sent when an endpoint is created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointCreatedEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EndpointCreatedEventData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EndpointCreatedEventType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointCreatedEventData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the application
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appUid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string AppUid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the endpoint
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointUid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string EndpointUid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EndpointCreatedEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="endpoint.created")]
		endpoint_created = 0,
	}
	
	/// <summary>
	/// Sent when an endpoint is deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointDeletedEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EndpointDeletedEventData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EndpointDeletedEventType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointDeletedEventData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the application
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appUid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string AppUid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the endpoint
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointUid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string EndpointUid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EndpointDeletedEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="endpoint.deleted")]
		endpoint_deleted = 0,
	}
	
	/// <summary>
	/// Sent when an endpoint has been automatically disabled after continuous failures.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointDisabledEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EndpointDisabledEventData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EndpointDisabledEventType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointDisabledEventData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the application
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appUid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string AppUid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the endpoint
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointUid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string EndpointUid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failSince")]
		public System.DateTimeOffset FailSince { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EndpointDisabledEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="endpoint.disabled")]
		endpoint_disabled = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointHeadersIn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
	}
	
	/// <summary>
	/// The value of the headers is returned in the `headers` field.
	///
	///Sensitive headers that have been redacted are returned in the sensitive field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointHeadersOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sensitive")]
		public string[] Sensitive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointHeadersPatchIn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointIn
	{
		
		/// <summary>
		/// List of message channels this endpoint listens to (omit for all)
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] Channels { get; set; }
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; } = "";
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterTypes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FilterTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateLimit")]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> RateLimit { get; set; }
		
		/// <summary>
		/// The endpoint's verification secret. If `null` is passed, a secret is automatically generated. Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24.
		/// Pattern: ^(whsec_)?[a-zA-Z0-9+/=]{32,100}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(whsec_)?[a-zA-Z0-9+/=]{32,100}$")]
		public string Secret { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the endpoint
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Url { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointMessageOut
	{
		
		/// <summary>
		/// List of free-form identifiers that endpoints can filter by
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] Channels { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the message
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string EventId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string EventType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextAttempt")]
		public System.Nullable<System.DateTimeOffset> NextAttempt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// The sending status of the message:
		///- Success = 0
		///- Pending = 1
		///- Fail = 2
		///- Sending = 3
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MessageStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	/// <summary>
	/// The sending status of the message:
	///- Success = 0
	///- Pending = 1
	///- Fail = 2
	///- Sending = 3
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointOut
	{
		
		/// <summary>
		/// List of message channels this endpoint listens to (omit for all)
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] Channels { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; } = "";
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterTypes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FilterTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateLimit")]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> RateLimit { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the endpoint
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Url { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointSecretOut
	{
		
		/// <summary>
		/// The endpoint's verification secret. If `null` is passed, a secret is automatically generated. Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24.
		/// Required
		/// Pattern: ^(whsec_)?[a-zA-Z0-9+/=]{32,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(whsec_)?[a-zA-Z0-9+/=]{32,100}$")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointSecretRotateIn
	{
		
		/// <summary>
		/// The endpoint's verification secret. If `null` is passed, a secret is automatically generated. Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24.
		/// Pattern: ^(whsec_)?[a-zA-Z0-9+/=]{32,100}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(whsec_)?[a-zA-Z0-9+/=]{32,100}$")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointStats
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fail")]
		public int Fail { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public int Pending { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sending")]
		public int Sending { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public int Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointTransformationIn
	{
		
		/// <summary>
		/// Min length: 10
		/// Max length: 51200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(51200)]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointTransformationOut
	{
		
		/// <summary>
		/// Min length: 10
		/// Max length: 51200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(51200)]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointUpdate
	{
		
		/// <summary>
		/// List of message channels this endpoint listens to (omit for all)
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] Channels { get; set; }
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; } = "";
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterTypes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FilterTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateLimit")]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> RateLimit { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the endpoint
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Url { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Version { get; set; }
	}
	
	/// <summary>
	/// Sent when an endpoint is updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointUpdatedEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EndpointUpdatedEventData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EndpointUpdatedEventType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointUpdatedEventData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the application
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appUid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string AppUid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the endpoint
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointUid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string EndpointUid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EndpointUpdatedEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="endpoint.updated")]
		endpoint_updated = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventExampleIn
	{
		
		/// <summary>
		/// Required
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string EventType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventTypeIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureFlag")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string FeatureFlag { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The schema for the event type for a specific version as a JSON schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemas")]
		public System.Collections.Generic.Dictionary<string, object> Schemas { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventTypeOut
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureFlag")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string FeatureFlag { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The schema for the event type for a specific version as a JSON schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemas")]
		public System.Collections.Generic.Dictionary<string, object> Schemas { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventTypeUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureFlag")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string FeatureFlag { get; set; }
		
		/// <summary>
		/// The schema for the event type for a specific version as a JSON schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemas")]
		public System.Collections.Generic.Dictionary<string, object> Schemas { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HTTPValidationError
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public ValidationError[] Detail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loc")]
		public string[] Loc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpErrorOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegrationIn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegrationKeyOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegrationOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegrationUpdate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponse_ApplicationOut_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ApplicationOut[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="done")]
		public bool Done { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iterator")]
		public string Iterator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevIterator")]
		public string PrevIterator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponse_BackgroundTaskOut_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BackgroundTaskOut[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="done")]
		public bool Done { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iterator")]
		public string Iterator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevIterator")]
		public string PrevIterator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponse_EndpointMessageOut_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EndpointMessageOut[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="done")]
		public bool Done { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iterator")]
		public string Iterator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevIterator")]
		public string PrevIterator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponse_EndpointOut_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EndpointOut[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="done")]
		public bool Done { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iterator")]
		public string Iterator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevIterator")]
		public string PrevIterator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponse_EventTypeOut_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EventTypeOut[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="done")]
		public bool Done { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iterator")]
		public string Iterator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevIterator")]
		public string PrevIterator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponse_IntegrationOut_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public IntegrationOut[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="done")]
		public bool Done { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iterator")]
		public string Iterator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponse_MessageAttemptEndpointOut_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public MessageAttemptEndpointOut[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="done")]
		public bool Done { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iterator")]
		public string Iterator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevIterator")]
		public string PrevIterator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageAttemptEndpointOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msgId")]
		public string MsgId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="responseStatusCode")]
		public int ResponseStatusCode { get; set; }
		
		/// <summary>
		/// The sending status of the message:
		///- Success = 0
		///- Pending = 1
		///- Fail = 2
		///- Sending = 3
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MessageStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// The reason an attempt was made:
		///- Scheduled = 0
		///- Manual = 1
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="triggerType")]
		public MessageAttemptTriggerType TriggerType { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The reason an attempt was made:
	///- Scheduled = 0
	///- Manual = 1
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageAttemptTriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponse_MessageAttemptOut_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public MessageAttemptOut[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="done")]
		public bool Done { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iterator")]
		public string Iterator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevIterator")]
		public string PrevIterator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageAttemptOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msgId")]
		public string MsgId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="responseStatusCode")]
		public int ResponseStatusCode { get; set; }
		
		/// <summary>
		/// The sending status of the message:
		///- Success = 0
		///- Pending = 1
		///- Fail = 2
		///- Sending = 3
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MessageStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// The reason an attempt was made:
		///- Scheduled = 0
		///- Manual = 1
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="triggerType")]
		public MessageAttemptTriggerType TriggerType { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponse_MessageEndpointOut_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public MessageEndpointOut[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="done")]
		public bool Done { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iterator")]
		public string Iterator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageEndpointOut
	{
		
		/// <summary>
		/// List of message channels this endpoint listens to (omit for all)
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] Channels { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; } = "";
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterTypes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FilterTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextAttempt")]
		public System.Nullable<System.DateTimeOffset> NextAttempt { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateLimit")]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> RateLimit { get; set; }
		
		/// <summary>
		/// The sending status of the message:
		///- Success = 0
		///- Pending = 1
		///- Fail = 2
		///- Sending = 3
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MessageStatus Status { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the endpoint
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Url { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponse_MessageOut_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public MessageOut[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="done")]
		public bool Done { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iterator")]
		public string Iterator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevIterator")]
		public string PrevIterator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageOut
	{
		
		/// <summary>
		/// List of free-form identifiers that endpoints can filter by
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] Channels { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the message
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string EventId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string EventType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	/// <summary>
	/// Sent when a message delivery has failed (all of the retry attempts have been exhausted).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageAttemptExhaustedEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public MessageAttemptExhaustedEventData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<MessageAttemptExhaustedEventType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageAttemptExhaustedEventData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the application
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appUid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string AppUid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastAttempt")]
		public MessageAttemptFailedData LastAttempt { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the message
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msgEventId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string MsgEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msgId")]
		public string MsgId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageAttemptFailedData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="responseStatusCode")]
		public int ResponseStatusCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageAttemptExhaustedEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="message.attempt.exhausted")]
		message_attempt_exhausted = 0,
	}
	
	/// <summary>
	/// Sent after a message has been failing for a few times.
	///It's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageAttemptFailingEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public MessageAttemptFailingEventData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<MessageAttemptFailingEventType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageAttemptFailingEventData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the application
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appUid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string AppUid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastAttempt")]
		public MessageAttemptFailedData LastAttempt { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the message
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msgEventId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string MsgEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msgId")]
		public string MsgId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageAttemptFailingEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="message.attempt.failing")]
		message_attempt_failing = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="application")]
		public ApplicationIn Application { get; set; }
		
		/// <summary>
		/// List of free-form identifiers that endpoints can filter by
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] Channels { get; set; }
		
		/// <summary>
		/// Optional unique identifier for the message
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string EventId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-_.]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-_.]+$")]
		public string EventType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// The retention period for the payload (in days).
		/// Minimum: 5
		/// Maximum: 90
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payloadRetentionPeriod")]
		[System.ComponentModel.DataAnnotations.Range(5, 90)]
		public System.Nullable<System.Int32> PayloadRetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// Defines the ordering in a listing of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Ordering
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoverIn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="since")]
		public System.DateTimeOffset Since { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="until")]
		public System.Nullable<System.DateTimeOffset> Until { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoverOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An enumeration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BackgroundTaskOutStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="task")]
		public System.Nullable<RecoverOutTask> Task { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecoverOutTask
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="endpoint.recover")]
		endpoint_recover = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplayIn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="since")]
		public System.DateTimeOffset Since { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="until")]
		public System.Nullable<System.DateTimeOffset> Until { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplayOut
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An enumeration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BackgroundTaskOutStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="task")]
		public System.Nullable<ReplayOutTask> Task { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplayOutTask
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="endpoint.replay")]
		endpoint_replay = 0,
	}
	
	/// <summary>
	/// The different classes of HTTP status codes:
	///- CodeNone = 0
	///- Code1xx = 100
	///- Code2xx = 200
	///- Code3xx = 300
	///- Code4xx = 400
	///- Code5xx = 500
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StatusCodeClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_100 = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_200 = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_300 = 300,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_400 = 400,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_500 = 500,
	}
	
	/// <summary>
	/// All of the webhook types that we support
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebhookTypes
	{
		
		/// <summary>
		/// Sent when an endpoint has been automatically disabled after continuous failures.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="a")]
		public EndpointDisabledEvent A { get; set; }
		
		/// <summary>
		/// Sent after a message has been failing for a few times.
		///It's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="a1")]
		public MessageAttemptFailingEvent A1 { get; set; }
		
		/// <summary>
		/// Sent when a background task finishes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="a2")]
		public BackgroundTaskFinishedEvent A2 { get; set; }
		
		/// <summary>
		/// Sent when an endpoint is created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="b")]
		public EndpointCreatedEvent B { get; set; }
		
		/// <summary>
		/// Sent when an endpoint is updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="c")]
		public EndpointUpdatedEvent C { get; set; }
		
		/// <summary>
		/// Sent when an endpoint is deleted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="d")]
		public EndpointDeletedEvent D { get; set; }
		
		/// <summary>
		/// Sent when a message delivery has failed (all of the retry attempts have been exhausted).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="e")]
		public MessageAttemptExhaustedEvent E { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List Applications
		/// List of all the organization's applications.
		/// List_applications_api_v1_app__get api/v1/app/
		/// </summary>
		/// <param name="limit">Maximum: 250</param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_ApplicationOut_> List_applications_api_v1_app__getAsync(string iterator, int limit, Ordering order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/?iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_ApplicationOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Application
		/// Create a new application.
		/// Create_application_api_v1_app__post api/v1/app/
		/// </summary>
		/// <param name="get_if_exists">Get an existing application, or create a new one if doesn't exist. It's two separate functions in the libs.</param>
		/// <returns>OK</returns>
		public async Task<ApplicationOut> Create_application_api_v1_app__postAsync(bool get_if_exists, ApplicationIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/?get_if_exists="+get_if_exists;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Application
		/// Delete an application.
		/// Delete_application_api_v1_app__app_id___delete api/v1/app/{app_id}/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Delete_application_api_v1_app__app_id___deleteAsync(string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Application
		/// Get an application.
		/// Get_application_api_v1_app__app_id___get api/v1/app/{app_id}/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<ApplicationOut> Get_application_api_v1_app__app_id___getAsync(string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Application
		/// Update an application.
		/// Update_application_api_v1_app__app_id___put api/v1/app/{app_id}/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<ApplicationOut> Update_application_api_v1_app__app_id___putAsync(string app_id, ApplicationIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Attempts By Endpoint
		/// List attempts by endpoint id
		/// List_attempts_by_endpoint_api_v1_app__app_id__attempt_endpoint__endpoint_id___get api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="limit">Maximum: 250</param>
		/// <param name="channel">Max length: 128</param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_MessageAttemptOut_> List_attempts_by_endpoint_api_v1_app__app_id__attempt_endpoint__endpoint_id___getAsync(string app_id, string endpoint_id, string iterator, int limit, MessageStatus status, StatusCodeClass status_code_class, string[] event_types, string channel, System.DateTimeOffset before, System.DateTimeOffset after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/attempt/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/&iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit+"&status="+status+"&status_code_class="+status_code_class+"&"+string.Join("&", event_types.Select(z => $"event_types={System.Uri.EscapeDataString(z.ToString())}"))+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&before=" + before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&after=" + after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_MessageAttemptOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Attempts By Msg
		/// List attempts by message id
		/// List_attempts_by_msg_api_v1_app__app_id__attempt_msg__msg_id___get api/v1/app/{app_id}/attempt/msg/{msg_id}/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="msg_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="limit">Maximum: 250</param>
		/// <param name="channel">Max length: 128</param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_MessageAttemptOut_> List_attempts_by_msg_api_v1_app__app_id__attempt_msg__msg_id___getAsync(string app_id, string msg_id, string endpoint_id, string iterator, int limit, MessageStatus status, StatusCodeClass status_code_class, string[] event_types, string channel, System.DateTimeOffset before, System.DateTimeOffset after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/attempt/msg/"+ (msg_id==null? "" : System.Uri.EscapeDataString(msg_id))+"/&endpoint_id=" + (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"&iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit+"&status="+status+"&status_code_class="+status_code_class+"&"+string.Join("&", event_types.Select(z => $"event_types={System.Uri.EscapeDataString(z.ToString())}"))+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&before=" + before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&after=" + after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_MessageAttemptOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Endpoints
		/// List the application's endpoints.
		/// List_endpoints_api_v1_app__app_id__endpoint__get api/v1/app/{app_id}/endpoint/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="limit">Maximum: 250</param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_EndpointOut_> List_endpoints_api_v1_app__app_id__endpoint__getAsync(string app_id, string iterator, int limit, Ordering order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/&iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_EndpointOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Endpoint
		/// Create a new endpoint for the application.
		/// 
		/// When `secret` is `null` the secret is automatically generated (recommended)
		/// Create_endpoint_api_v1_app__app_id__endpoint__post api/v1/app/{app_id}/endpoint/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Create_endpoint_api_v1_app__app_id__endpoint__postAsync(string app_id, EndpointIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Endpoint
		/// Delete an endpoint.
		/// Delete_endpoint_api_v1_app__app_id__endpoint__endpoint_id___delete api/v1/app/{app_id}/endpoint/{endpoint_id}/
		/// </summary>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Delete_endpoint_api_v1_app__app_id__endpoint__endpoint_id___deleteAsync(string endpoint_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Endpoint
		/// Get an application.
		/// Get_endpoint_api_v1_app__app_id__endpoint__endpoint_id___get api/v1/app/{app_id}/endpoint/{endpoint_id}/
		/// </summary>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<EndpointOut> Get_endpoint_api_v1_app__app_id__endpoint__endpoint_id___getAsync(string endpoint_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EndpointOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Endpoint
		/// Update an endpoint.
		/// Update_endpoint_api_v1_app__app_id__endpoint__endpoint_id___put api/v1/app/{app_id}/endpoint/{endpoint_id}/
		/// </summary>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<EndpointOut> Update_endpoint_api_v1_app__app_id__endpoint__endpoint_id___putAsync(string endpoint_id, string app_id, EndpointUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EndpointOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Endpoint Headers
		/// Get the additional headers to be sent with the webhook
		/// Get_endpoint_headers_api_v1_app__app_id__endpoint__endpoint_id__headers__get api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/
		/// </summary>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<EndpointHeadersOut> Get_endpoint_headers_api_v1_app__app_id__endpoint__endpoint_id__headers__getAsync(string endpoint_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/headers/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EndpointHeadersOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch Endpoint Headers
		/// Partially set the additional headers to be sent with the webhook
		/// Patch_endpoint_headers_api_v1_app__app_id__endpoint__endpoint_id__headers__patch api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Patch_endpoint_headers_api_v1_app__app_id__endpoint__endpoint_id__headers__patchAsync(string app_id, string endpoint_id, EndpointHeadersPatchIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/headers/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Endpoint Headers
		/// Set the additional headers to be sent with the webhook
		/// Update_endpoint_headers_api_v1_app__app_id__endpoint__endpoint_id__headers__put api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Update_endpoint_headers_api_v1_app__app_id__endpoint__endpoint_id__headers__putAsync(string app_id, string endpoint_id, EndpointHeadersIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/headers/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Attempted Messages
		/// List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.
		/// 
		/// The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
		/// List_attempted_messages_api_v1_app__app_id__endpoint__endpoint_id__msg__get api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/
		/// </summary>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="limit">Maximum: 250</param>
		/// <param name="channel">Max length: 128</param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_EndpointMessageOut_> List_attempted_messages_api_v1_app__app_id__endpoint__endpoint_id__msg__getAsync(string endpoint_id, string app_id, string iterator, int limit, string channel, MessageStatus status, System.DateTimeOffset before, System.DateTimeOffset after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/msg/&iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&status="+status+"&before=" + before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&after=" + after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_EndpointMessageOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recover Failed Webhooks
		/// Resend all failed messages since a given time.
		/// Recover_failed_webhooks_api_v1_app__app_id__endpoint__endpoint_id__recover__post api/v1/app/{app_id}/endpoint/{endpoint_id}/recover/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Recover_failed_webhooks_api_v1_app__app_id__endpoint__endpoint_id__recover__postAsync(string app_id, string endpoint_id, RecoverIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/recover/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replay Missing Webhooks
		/// Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.
		/// Replay_missing_webhooks_api_v1_app__app_id__endpoint__endpoint_id__replay_missing__post api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Replay_missing_webhooks_api_v1_app__app_id__endpoint__endpoint_id__replay_missing__postAsync(string app_id, string endpoint_id, ReplayIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/replay-missing/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Endpoint Secret
		/// Get the endpoint's signing secret.
		/// 
		/// This is used to verify the authenticity of the webhook.
		/// For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
		/// Get_endpoint_secret_api_v1_app__app_id__endpoint__endpoint_id__secret__get api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/
		/// </summary>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<EndpointSecretOut> Get_endpoint_secret_api_v1_app__app_id__endpoint__endpoint_id__secret__getAsync(string endpoint_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/secret/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EndpointSecretOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rotate Endpoint Secret
		/// Rotates the endpoint's signing secret.  The previous secret will be valid for the next 24 hours.
		/// Rotate_endpoint_secret_api_v1_app__app_id__endpoint__endpoint_id__secret_rotate__post api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate/
		/// </summary>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Rotate_endpoint_secret_api_v1_app__app_id__endpoint__endpoint_id__secret_rotate__postAsync(string endpoint_id, string app_id, EndpointSecretRotateIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/secret/rotate/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send Event Type Example Message
		/// Send an example message for event
		/// Send_event_type_example_message_api_v1_app__app_id__endpoint__endpoint_id__send_example__post api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Send_event_type_example_message_api_v1_app__app_id__endpoint__endpoint_id__send_example__postAsync(string app_id, string endpoint_id, EventExampleIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/send-example/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Endpoint Stats
		/// Get basic statistics for the endpoint.
		/// Get_endpoint_stats_api_v1_app__app_id__endpoint__endpoint_id__stats__get api/v1/app/{app_id}/endpoint/{endpoint_id}/stats/
		/// </summary>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<EndpointStats> Get_endpoint_stats_api_v1_app__app_id__endpoint__endpoint_id__stats__getAsync(string endpoint_id, string app_id, System.DateTimeOffset since, System.DateTimeOffset until, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/stats/&since=" + since.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&until=" + until.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EndpointStats>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Endpoint Transformation
		/// Get the transformation code associated with this endpoint
		/// Get_endpoint_transformation_api_v1_app__app_id__endpoint__endpoint_id__transformation__get api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/
		/// </summary>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<EndpointTransformationOut> Get_endpoint_transformation_api_v1_app__app_id__endpoint__endpoint_id__transformation__getAsync(string endpoint_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/transformation/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EndpointTransformationOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set Endpoint Transformation
		/// Set or unset the transformation code associated with this endpoint
		/// Set_endpoint_transformation_api_v1_app__app_id__endpoint__endpoint_id__transformation__patch api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Set_endpoint_transformation_api_v1_app__app_id__endpoint__endpoint_id__transformation__patchAsync(string app_id, string endpoint_id, EndpointTransformationIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/transformation/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Integrations
		/// List the application's integrations.
		/// List_integrations_api_v1_app__app_id__integration__get api/v1/app/{app_id}/integration/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_IntegrationOut_> List_integrations_api_v1_app__app_id__integration__getAsync(string app_id, string iterator, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/integration/&iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_IntegrationOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Integration
		/// Create an integration.
		/// Create_integration_api_v1_app__app_id__integration__post api/v1/app/{app_id}/integration/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Create_integration_api_v1_app__app_id__integration__postAsync(string app_id, IntegrationIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/integration/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Integration
		/// Delete an integration and revoke it's key.
		/// Delete_integration_api_v1_app__app_id__integration__integ_id___delete api/v1/app/{app_id}/integration/{integ_id}/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Delete_integration_api_v1_app__app_id__integration__integ_id___deleteAsync(string integ_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/integration/"+ (integ_id==null? "" : System.Uri.EscapeDataString(integ_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Integration
		/// Get an integration.
		/// Get_integration_api_v1_app__app_id__integration__integ_id___get api/v1/app/{app_id}/integration/{integ_id}/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<IntegrationOut> Get_integration_api_v1_app__app_id__integration__integ_id___getAsync(string integ_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/integration/"+ (integ_id==null? "" : System.Uri.EscapeDataString(integ_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IntegrationOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Integration
		/// Update an integration.
		/// Update_integration_api_v1_app__app_id__integration__integ_id___put api/v1/app/{app_id}/integration/{integ_id}/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<IntegrationOut> Update_integration_api_v1_app__app_id__integration__integ_id___putAsync(string integ_id, string app_id, IntegrationUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/integration/"+ (integ_id==null? "" : System.Uri.EscapeDataString(integ_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IntegrationOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Integration Key
		/// Get an integration's key.
		/// Get_integration_key_api_v1_app__app_id__integration__integ_id__key__get api/v1/app/{app_id}/integration/{integ_id}/key/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<IntegrationKeyOut> Get_integration_key_api_v1_app__app_id__integration__integ_id__key__getAsync(string integ_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/integration/"+ (integ_id==null? "" : System.Uri.EscapeDataString(integ_id))+"/key/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IntegrationKeyOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rotate Integration Key
		/// Rotate the integration's key. The previous key will be immediately revoked.
		/// Rotate_integration_key_api_v1_app__app_id__integration__integ_id__key_rotate__post api/v1/app/{app_id}/integration/{integ_id}/key/rotate/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<IntegrationKeyOut> Rotate_integration_key_api_v1_app__app_id__integration__integ_id__key_rotate__postAsync(string integ_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/integration/"+ (integ_id==null? "" : System.Uri.EscapeDataString(integ_id))+"/key/rotate/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IntegrationKeyOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Messages
		/// List all of the application's messages.
		/// 
		/// The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
		/// The `after` parameter lets you filter all items created after a certain date and is ignored if an iterator is passed.
		/// `before` and `after` cannot be used simultaneously.
		/// List_messages_api_v1_app__app_id__msg__get api/v1/app/{app_id}/msg/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="limit">Maximum: 250</param>
		/// <param name="channel">Max length: 128</param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_MessageOut_> List_messages_api_v1_app__app_id__msg__getAsync(string app_id, string iterator, int limit, string[] event_types, string channel, System.DateTimeOffset before, System.DateTimeOffset after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/msg/&iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit+"&"+string.Join("&", event_types.Select(z => $"event_types={System.Uri.EscapeDataString(z.ToString())}"))+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&before=" + before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&after=" + after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_MessageOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Message
		/// Creates a new message and dispatches it to all of the application's endpoints.
		/// 
		/// The `eventId` is an optional custom unique ID. It's verified to be unique only up to a day, after that no verification will be made.
		/// If a message with the same `eventId` already exists for any application in your environment, a 409 conflict error will be returned.
		/// 
		/// The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types.
		/// Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don't imply a specific message content or schema.
		/// 
		/// The `payload` property is the webhook's body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it's generally a good idea to keep webhook payloads small, probably no larger than 40kb.
		/// 
		/// The optional `application` property will be used to create an application if the application referenced in the path does not exist. If it does then this property is ignored.
		/// Create_message_api_v1_app__app_id__msg__post api/v1/app/{app_id}/msg/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Create_message_api_v1_app__app_id__msg__postAsync(string app_id, bool with_content, MessageIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/msg/&with_content="+with_content;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Message
		/// Get a message by its ID or eventID.
		/// Get_message_api_v1_app__app_id__msg__msg_id___get api/v1/app/{app_id}/msg/{msg_id}/
		/// </summary>
		/// <param name="msg_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<MessageOut> Get_message_api_v1_app__app_id__msg__msg_id___getAsync(string msg_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/msg/"+ (msg_id==null? "" : System.Uri.EscapeDataString(msg_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MessageOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Attempts
		/// Deprecated: Please use "List Attempts by Endpoint" and "List Attempts by Msg" instead.
		/// 
		/// `msg_id`: Use a message id or a message `eventId`
		/// List_attempts_api_v1_app__app_id__msg__msg_id__attempt__get api/v1/app/{app_id}/msg/{msg_id}/attempt/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="msg_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="limit">Maximum: 250</param>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="channel">Max length: 128</param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_MessageAttemptOut_> List_attempts_api_v1_app__app_id__msg__msg_id__attempt__getAsync(string app_id, string msg_id, string iterator, int limit, string endpoint_id, string[] event_types, string channel, MessageStatus status, System.DateTimeOffset before, System.DateTimeOffset after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/msg/"+ (msg_id==null? "" : System.Uri.EscapeDataString(msg_id))+"/attempt/&iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit+"&endpoint_id=" + (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"&"+string.Join("&", event_types.Select(z => $"event_types={System.Uri.EscapeDataString(z.ToString())}"))+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&status="+status+"&before=" + before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&after=" + after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_MessageAttemptOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Attempt
		/// `msg_id`: Use a message id or a message `eventId`
		/// Get_attempt_api_v1_app__app_id__msg__msg_id__attempt__attempt_id___get api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/
		/// </summary>
		/// <param name="msg_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<MessageAttemptOut> Get_attempt_api_v1_app__app_id__msg__msg_id__attempt__attempt_id___getAsync(string attempt_id, string msg_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/msg/"+ (msg_id==null? "" : System.Uri.EscapeDataString(msg_id))+"/attempt/"+ (attempt_id==null? "" : System.Uri.EscapeDataString(attempt_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MessageAttemptOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete attempt response body
		/// Deletes the given attempt's response body. Useful when an endpoint accidentally returned sensitive content.
		/// Expunge_attempt_content_api_v1_app__app_id__msg__msg_id__attempt__attempt_id__content__delete api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content/
		/// </summary>
		/// <param name="msg_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Expunge_attempt_content_api_v1_app__app_id__msg__msg_id__attempt__attempt_id__content__deleteAsync(string attempt_id, string msg_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/msg/"+ (msg_id==null? "" : System.Uri.EscapeDataString(msg_id))+"/attempt/"+ (attempt_id==null? "" : System.Uri.EscapeDataString(attempt_id))+"/content/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete message payload
		/// Delete the given message's payload. Useful in cases when a message was accidentally sent with sensitive content.
		/// 
		/// The message can't be replayed or resent once its payload has been deleted or expired.
		/// Expunge_message_payload_api_v1_app__app_id__msg__msg_id__content__delete api/v1/app/{app_id}/msg/{msg_id}/content/
		/// </summary>
		/// <param name="msg_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Expunge_message_payload_api_v1_app__app_id__msg__msg_id__content__deleteAsync(string msg_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/msg/"+ (msg_id==null? "" : System.Uri.EscapeDataString(msg_id))+"/content/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Attempted Destinations
		/// `msg_id`: Use a message id or a message `eventId`
		/// List_attempted_destinations_api_v1_app__app_id__msg__msg_id__endpoint__get api/v1/app/{app_id}/msg/{msg_id}/endpoint/
		/// </summary>
		/// <param name="msg_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="limit">Maximum: 250</param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_MessageEndpointOut_> List_attempted_destinations_api_v1_app__app_id__msg__msg_id__endpoint__getAsync(string msg_id, string app_id, string iterator, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/msg/"+ (msg_id==null? "" : System.Uri.EscapeDataString(msg_id))+"/endpoint/&iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_MessageEndpointOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Attempts For Endpoint
		/// DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.
		/// 
		/// List the message attempts for a particular endpoint.
		/// 
		/// Returning the endpoint.
		/// 
		/// The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
		/// List_attempts_for_endpoint_api_v1_app__app_id__msg__msg_id__endpoint__endpoint_id__attempt__get api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt/
		/// </summary>
		/// <param name="msg_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="limit">Maximum: 250</param>
		/// <param name="channel">Max length: 128</param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_MessageAttemptEndpointOut_> List_attempts_for_endpoint_api_v1_app__app_id__msg__msg_id__endpoint__endpoint_id__attempt__getAsync(string msg_id, string app_id, string endpoint_id, string iterator, int limit, string[] event_types, string channel, MessageStatus status, System.DateTimeOffset before, System.DateTimeOffset after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/msg/"+ (msg_id==null? "" : System.Uri.EscapeDataString(msg_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/attempt/&iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit+"&"+string.Join("&", event_types.Select(z => $"event_types={System.Uri.EscapeDataString(z.ToString())}"))+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&status="+status+"&before=" + before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&after=" + after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_MessageAttemptEndpointOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resend Webhook
		/// Resend a message to the specified endpoint.
		/// Resend_webhook_api_v1_app__app_id__msg__msg_id__endpoint__endpoint_id__resend__post api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend/
		/// </summary>
		/// <param name="endpoint_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="msg_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Resend_webhook_api_v1_app__app_id__msg__msg_id__endpoint__endpoint_id__resend__postAsync(string endpoint_id, string msg_id, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/msg/"+ (msg_id==null? "" : System.Uri.EscapeDataString(msg_id))+"/endpoint/"+ (endpoint_id==null? "" : System.Uri.EscapeDataString(endpoint_id))+"/resend/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Consumer App Portal Access
		/// Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
		/// Get_app_portal_access_api_v1_auth_app_portal_access__app_id___post api/v1/auth/app-portal-access/{app_id}/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<AppPortalAccessOut> Get_app_portal_access_api_v1_auth_app_portal_access__app_id___postAsync(string app_id, AppPortalAccessIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/auth/app-portal-access/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AppPortalAccessOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Expire All
		/// Expire all of the tokens associated with a specific Application
		/// Expire_all_api_v1_auth_app__app_id__expire_all__post api/v1/auth/app/{app_id}/expire-all/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		public async Task Expire_all_api_v1_auth_app__app_id__expire_all__postAsync(string app_id, ApplicationTokenExpireIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/auth/app/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/expire-all/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Dashboard Access
		/// DEPRECATED: Please use `app-portal-access` instead.
		/// 
		/// Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
		/// Get_dashboard_access_api_v1_auth_dashboard_access__app_id___post api/v1/auth/dashboard-access/{app_id}/
		/// </summary>
		/// <param name="app_id">Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Successful Response</returns>
		public async Task<DashboardAccessOut> Get_dashboard_access_api_v1_auth_dashboard_access__app_id___postAsync(string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/auth/dashboard-access/"+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DashboardAccessOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Logout
		/// Logout an app token.
		/// 
		/// Trying to log out other tokens will fail.
		/// Logout_api_v1_auth_logout__post api/v1/auth/logout/
		/// </summary>
		public async Task Logout_api_v1_auth_logout__postAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/auth/logout/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Background Tasks
		/// List background tasks executed in the past 90 days.
		/// List_background_tasks_api_v1_background_task__get api/v1/background-task/
		/// </summary>
		/// <param name="limit">Maximum: 250</param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_BackgroundTaskOut_> List_background_tasks_api_v1_background_task__getAsync(string iterator, int limit, Ordering order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/background-task/?iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_BackgroundTaskOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Background Task
		/// Get a background task by ID.
		/// Get_background_task_api_v1_background_task__task_id___get api/v1/background-task/{task_id}/
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<BackgroundTaskOut> Get_background_task_api_v1_background_task__task_id___getAsync(string task_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/background-task/"+ (task_id==null? "" : System.Uri.EscapeDataString(task_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackgroundTaskOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Event Types
		/// Return the list of event types.
		/// List_event_types_api_v1_event_type__get api/v1/event-type/
		/// </summary>
		/// <param name="iterator">Max length: 256</param>
		/// <param name="limit">Maximum: 250</param>
		/// <returns>Successful Response</returns>
		public async Task<ListResponse_EventTypeOut_> List_event_types_api_v1_event_type__getAsync(string iterator, int limit, bool with_content, bool include_archived, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/event-type/?iterator=" + (iterator==null? "" : System.Uri.EscapeDataString(iterator))+"&limit="+limit+"&with_content="+with_content+"&include_archived="+include_archived;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResponse_EventTypeOut_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Event Type
		/// Create new or unarchive existing event type.
		/// 
		/// Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it.
		/// Endpoints filtering on the event type before archival will continue to filter on it.
		/// This operation does not preserve the description and schemas.
		/// Create_event_type_api_v1_event_type__post api/v1/event-type/
		/// </summary>
		public async Task Create_event_type_api_v1_event_type__postAsync(EventTypeIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/event-type/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Archive Event Type
		/// Archive an event type.
		/// 
		/// Endpoints already configured to filter on an event type will continue to do so after archival.
		/// However, new messages can not be sent with it and endpoints can not filter on it.
		/// An event type can be unarchived with the
		/// [create operation](#operation/create_event_type_api_v1_event_type__post).
		/// 
		/// If `expunge=true` is set then the event type is deleted instead of archived.
		/// This can only be used in development environments.
		/// Delete_event_type_api_v1_event_type__event_type_name___delete api/v1/event-type/{event_type_name}/
		/// </summary>
		/// <param name="event_type_name">Max length: 256</param>
		public async Task Delete_event_type_api_v1_event_type__event_type_name___deleteAsync(string event_type_name, bool expunge, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/event-type/"+ (event_type_name==null? "" : System.Uri.EscapeDataString(event_type_name))+"/&expunge="+expunge;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Event Type
		/// Get an event type.
		/// Get_event_type_api_v1_event_type__event_type_name___get api/v1/event-type/{event_type_name}/
		/// </summary>
		/// <param name="event_type_name">Max length: 256</param>
		/// <returns>Successful Response</returns>
		public async Task<EventTypeOut> Get_event_type_api_v1_event_type__event_type_name___getAsync(string event_type_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/event-type/"+ (event_type_name==null? "" : System.Uri.EscapeDataString(event_type_name))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventTypeOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Event Type
		/// Update an event type.
		/// Update_event_type_api_v1_event_type__event_type_name___put api/v1/event-type/{event_type_name}/
		/// </summary>
		/// <param name="event_type_name">Max length: 256</param>
		/// <returns>Successful Response</returns>
		public async Task<EventTypeOut> Update_event_type_api_v1_event_type__event_type_name___putAsync(string event_type_name, EventTypeUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/event-type/"+ (event_type_name==null? "" : System.Uri.EscapeDataString(event_type_name))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventTypeOut>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Health
		/// Verify the API server is up and running.
		/// Health_api_v1_health__get api/v1/health/
		/// </summary>
		public async Task Health_api_v1_health__getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/health/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
