//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The current billing period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIBillingPeriodUsageOut
	{
		
		/// <summary>
		/// User API Key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// Current period billing status ex OPEN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingStatus")]
		public string BillingStatus { get; set; }
		
		/// <summary>
		/// Current period hard limit (reaching the limit sends an email notification and blocks the API Key).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardLimit")]
		public System.Nullable<System.Int64> HardLimit { get; set; }
		
		/// <summary>
		/// Datetime when the the plan's current period endend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodEnded")]
		public System.Nullable<System.Int64> PeriodEnded { get; set; }
		
		/// <summary>
		/// Datetime when the the plan's current period started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodStarted")]
		public System.Nullable<System.Int64> PeriodStarted { get; set; }
		
		/// <summary>
		/// Current period soft limit (reaching the limit sends an email notification).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softLimit")]
		public System.Nullable<System.Int64> SoftLimit { get; set; }
		
		/// <summary>
		/// Datetime when the the plan's current period endend (in Stripe). Internal and Stripe periodicity should ~coincide.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stripeCurrentPeriodEnd")]
		public System.Nullable<System.Int64> StripeCurrentPeriodEnd { get; set; }
		
		/// <summary>
		/// Datetime when the the plan's current period started (in Stripe). Internal and Stripe periodicity should ~coincide.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stripeCurrentPeriodStart")]
		public System.Nullable<System.Int64> StripeCurrentPeriodStart { get; set; }
		
		/// <summary>
		/// Datetime when the user subscribed to the plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionStarted")]
		public System.Nullable<System.Int64> SubscriptionStarted { get; set; }
		
		/// <summary>
		/// Current period usage in units (NB some API endpoints use more than one unit).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public System.Nullable<System.Int64> Usage { get; set; }
	}
	
	/// <summary>
	/// The list of classifiers and versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIClassifierOut
	{
		
		/// <summary>
		/// The classifier name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classifierName")]
		public string ClassifierName { get; set; }
		
		/// <summary>
		/// True if the classifier is learning
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="learning")]
		public System.Nullable<System.Boolean> Learning { get; set; }
		
		/// <summary>
		/// True if the classifier has finished the initial learning and calibrated probabilities (meanwhile, during initial learning, probabilities will be equal to -1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityCalibrated")]
		public System.Nullable<System.Boolean> ProbabilityCalibrated { get; set; }
		
		/// <summary>
		/// True if the classifier is serving requests (has reached minimal learning, is not shutting down)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serving")]
		public System.Nullable<System.Boolean> Serving { get; set; }
		
		/// <summary>
		/// True if the classifier is shutting down
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shuttingDown")]
		public System.Nullable<System.Boolean> ShuttingDown { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIClassifierTaxonomyOut
	{
		
		/// <summary>
		/// Name of the classifier as per apiStatus (corresponds also to the name of the service in apiServices)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classifierName")]
		public string ClassifierName { get; set; }
		
		/// <summary>
		/// The scripts / alphabets this classifiers classifies to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classifyingScripts")]
		public string[] ClassifyingScripts { get; set; }
		
		/// <summary>
		/// The taxonomy classes this classifier classifies to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxonomyClasses")]
		public string[] TaxonomyClasses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIClassifiersStatusOut
	{
		
		/// <summary>
		/// The list of classifiers and versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classifiers")]
		public APIClassifierOut[] Classifiers { get; set; }
		
		/// <summary>
		/// The software version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareVersion")]
		public SoftwareVersionOut SoftwareVersion { get; set; }
	}
	
	/// <summary>
	/// The software version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SoftwareVersionOut
	{
		
		/// <summary>
		/// The software version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareNameAndVersion")]
		public string SoftwareNameAndVersion { get; set; }
		
		/// <summary>
		/// The software version major minor build
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareVersion")]
		public int[] SoftwareVersion { get; set; }
	}
	
	/// <summary>
	/// Detailed usage as reported by the deduplicating API counter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APICounterV2Out
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public APIKeyOut ApiKey { get; set; }
		
		/// <summary>
		/// The apiService corresponds to the classifier name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiService")]
		public string ApiService { get; set; }
		
		/// <summary>
		/// The create datetime of the counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.Int64> CreatedDateTime { get; set; }
		
		/// <summary>
		/// The processing hostAddress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostAddress")]
		public string HostAddress { get; set; }
		
		/// <summary>
		/// The flush datetime of the counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastFlushedDateTime")]
		public System.Nullable<System.Int64> LastFlushedDateTime { get; set; }
		
		/// <summary>
		/// The last usage datetime of the counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUsedDateTime")]
		public System.Nullable<System.Int64> LastUsedDateTime { get; set; }
		
		/// <summary>
		/// Usage of special features, such as Chinese, Japanese.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceFeaturesUsage")]
		public System.Collections.Generic.Dictionary<string, long> ServiceFeaturesUsage { get; set; }
		
		/// <summary>
		/// The usage of the counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalUsage")]
		public System.Nullable<System.Int64> TotalUsage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIKeyOut
	{
		
		/// <summary>
		/// The API Key has admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admin")]
		public System.Nullable<System.Boolean> Admin { get; set; }
		
		/// <summary>
		/// The API Key is anonymized (using SHA-252 digest for logging). Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="anonymized")]
		public System.Nullable<System.Boolean> Anonymized { get; set; }
		
		/// <summary>
		/// The user API Key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// The API Key has role corporate (ex SWIFT payments instead of Stripe payments).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporate")]
		public System.Nullable<System.Boolean> Corporate { get; set; }
		
		/// <summary>
		/// The API Key is temporarily or permanently disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="learnable")]
		public System.Nullable<System.Boolean> Learnable { get; set; }
		
		/// <summary>
		/// The API Key has partner role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partner")]
		public System.Nullable<System.Boolean> Partner { get; set; }
		
		/// <summary>
		/// The API Key is associated to a valid Stripe account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="striped")]
		public System.Nullable<System.Boolean> Striped { get; set; }
		
		/// <summary>
		/// The user identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		/// <summary>
		/// The API Key is vetted (assumed truthful) for machine learning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vetted")]
		public System.Nullable<System.Boolean> Vetted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIPeriodUsageOut
	{
		
		/// <summary>
		/// The current billing period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriod")]
		public APIBillingPeriodUsageOut BillingPeriod { get; set; }
		
		/// <summary>
		/// Currency of the overage amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overageCurrency")]
		public string OverageCurrency { get; set; }
		
		/// <summary>
		/// Overage amount including any tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overageExclTax")]
		public System.Nullable<System.Double> OverageExclTax { get; set; }
		
		/// <summary>
		/// Overage amount including tax (if applicable).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overageInclTax")]
		public System.Nullable<System.Double> OverageInclTax { get; set; }
		
		/// <summary>
		/// Quantity above monthly quota of the current subscritpion, in units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overageQuantity")]
		public System.Nullable<System.Int64> OverageQuantity { get; set; }
		
		/// <summary>
		/// The API Plan governing the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public APIPlanSubscriptionOut Subscription { get; set; }
	}
	
	/// <summary>
	/// The API Plan governing the subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIPlanSubscriptionOut
	{
		
		/// <summary>
		/// User API Key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// Current plan Currency for prices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// For USD, GBP, EUR - the factor is 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyFactor")]
		public System.Nullable<System.Double> CurrencyFactor { get; set; }
		
		/// <summary>
		/// Current plan key (as in Stripe product).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planBaseFeesKey")]
		public string PlanBaseFeesKey { get; set; }
		
		/// <summary>
		/// Datetime when the user ended the plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planEnded")]
		public System.Nullable<System.Int64> PlanEnded { get; set; }
		
		/// <summary>
		/// Current plan name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planName")]
		public string PlanName { get; set; }
		
		/// <summary>
		/// Current plan quota in quantity of units (NB: some API use several units per name).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planQuota")]
		public System.Nullable<System.Int64> PlanQuota { get; set; }
		
		/// <summary>
		/// Datetime when the user subscribed to the current plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planStarted")]
		public System.Nullable<System.Int64> PlanStarted { get; set; }
		
		/// <summary>
		/// Plan status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planStatus")]
		public string PlanStatus { get; set; }
		
		/// <summary>
		/// Current plan price for overages expressed in Currency (extra price per unit above the free quota).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// Current plan price for overages expressed in Currency (extra price per unit above the free quota).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceOverage")]
		public System.Nullable<System.Double> PriceOverage { get; set; }
		
		/// <summary>
		/// Current plan price for overages expressed in USD (extra price per unit above the free quota).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceOverageUSD")]
		public System.Nullable<System.Double> PriceOverageUSD { get; set; }
		
		/// <summary>
		/// Current plan monthly price expressed in USD (includes a free quota).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceUSD")]
		public System.Nullable<System.Double> PriceUSD { get; set; }
		
		/// <summary>
		/// Datetime when the user subscribed to the prior plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priorPlanStarted")]
		public System.Nullable<System.Int64> PriorPlanStarted { get; set; }
		
		/// <summary>
		/// Stripe customer identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stripeCustomerId")]
		public string StripeCustomerId { get; set; }
		
		/// <summary>
		/// Stripe status ex active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stripeStatus")]
		public string StripeStatus { get; set; }
		
		/// <summary>
		/// Stripe subscription identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stripeSubscription")]
		public string StripeSubscription { get; set; }
		
		/// <summary>
		/// Applicable tax rate for the plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxRate")]
		public System.Nullable<System.Double> TaxRate { get; set; }
		
		/// <summary>
		/// Internal user identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// List of API Services
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIServiceOut
	{
		
		/// <summary>
		/// Indicates how many units per call this service costs (ex. the number of units per name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costInUnits")]
		public System.Nullable<System.Int32> CostInUnits { get; set; }
		
		/// <summary>
		/// Groups together classifiers providing a similar service (ex. gender groups personalname_gender and personalfullname_gender)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceGroup")]
		public string ServiceGroup { get; set; }
		
		/// <summary>
		/// A service name corresponds to classifier name in apiStatus (ex. personalname_gender or personalfullname_gender)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIServicesOut
	{
		
		/// <summary>
		/// List of API Services
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiServices")]
		public APIServiceOut[] ApiServices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIUsageAggregatedOut
	{
		
		/// <summary>
		/// apiServices as column headers 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colHeaders")]
		public string[] ColHeaders { get; set; }
		
		/// <summary>
		/// Data points : usage per DAY, WEEK or MONTH and per apiService
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
		
		/// <summary>
		/// If the history was truncaded due to data limit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyTruncated")]
		public System.Nullable<System.Boolean> HistoryTruncated { get; set; }
		
		/// <summary>
		/// End datetime of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodEnd")]
		public System.Nullable<System.Int64> PeriodEnd { get; set; }
		
		/// <summary>
		/// Start datetime of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodStart")]
		public System.Nullable<System.Int64> PeriodStart { get; set; }
		
		/// <summary>
		/// dates as row headers 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowHeaders")]
		public string[] RowHeaders { get; set; }
		
		/// <summary>
		/// Time unit is DAY, WEEK or MONTH depending on prior usage
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeUnit")]
		public string TimeUnit { get; set; }
		
		/// <summary>
		/// Total usage in the current period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalUsage")]
		public System.Nullable<System.Int64> TotalUsage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIUsageHistoryOut
	{
		
		/// <summary>
		/// Detailed usage as reported by the deduplicating API counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailedUsage")]
		public APICounterV2Out[] DetailedUsage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCorridorIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="corridorFromTo")]
		public CorridorIn[] CorridorFromTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
	}
	
	/// <summary>
	/// Represent any transnational interaction between names (ex. remittance, communication, cross-border investment, airline travel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CorridorIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstLastNameGeoFrom")]
		public FirstLastNameGeoIn FirstLastNameGeoFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstLastNameGeoTo")]
		public FirstLastNameGeoIn FirstLastNameGeoTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNameGeoIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="countryIso2")]
		public string CountryIso2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FactIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCorridorOut
	{
		
		/// <summary>
		/// Classified corridors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corridorFromTo")]
		public CorridorOut[] CorridorFromTo { get; set; }
	}
	
	/// <summary>
	/// Represent multiple classifications for corridor sender and receiver (gender, country, origin, diaspora)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CorridorOut
	{
		
		/// <summary>
		/// Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FirstLastNameDiasporaedOut FirstLastNameDiasporaedOut { get; set; }
		
		/// <summary>
		/// Represents the output of inferring the LIKELY gender from a personal name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FirstLastNameGenderedOut FirstLastNameGenderedOut { get; set; }
		
		/// <summary>
		/// Represents the output of inferring the LIKELY country of Origin from a personal name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FirstLastNameOriginedOut FirstLastNameOriginedOut { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNameDiasporaedOut
	{
		
		/// <summary>
		/// From input data, the countryIso2 of geographic context (US,CA etc.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryIso2")]
		public string CountryIso2 { get; set; }
		
		/// <summary>
		/// List most likely ethnicities (top 10)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ethnicitiesTop")]
		public string[] EthnicitiesTop { get; set; }
		
		/// <summary>
		/// The most likely ethnicity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ethnicity")]
		public string Ethnicity { get; set; }
		
		/// <summary>
		/// The second best alternative ethnicity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ethnicityAlt")]
		public string EthnicityAlt { get; set; }
		
		/// <summary>
		/// The first name (also known as given name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last name (also known as family name, or surname)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Indicates if the output ethnicity is based on machine learning only, or further lifted as a known fact by a country-specific rule. Let us know if you believe ethnicity is incorrect on a specific case where lifted is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifted")]
		public System.Nullable<System.Boolean> Lifted { get; set; }
		
		/// <summary>
		/// The calibrated probability for ethnicity OR ethnicityAlt to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityAltCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityAltCalibrated { get; set; }
		
		/// <summary>
		/// The calibrated probability for ethnicity to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityCalibrated { get; set; }
		
		/// <summary>
		/// Compatibility to NamSor_v1 Diaspora score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY gender from a personal name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNameGenderedOut
	{
		
		/// <summary>
		/// The first name (also known as given name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genderScale")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> GenderScale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last name (also known as family name, or surname)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Most likely gender
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="likelyGender")]
		public System.Nullable<FirstLastNameGenderedOutLikelyGender> LikelyGender { get; set; }
		
		/// <summary>
		/// The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityCalibrated { get; set; }
		
		/// <summary>
		/// Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FirstLastNameGenderedOutLikelyGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="male")]
		male = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="female")]
		female = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 2,
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY country of Origin from a personal name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNameOriginedOut
	{
		
		/// <summary>
		/// List countries of Origin (top 10)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countriesOriginTop")]
		public string[] CountriesOriginTop { get; set; }
		
		/// <summary>
		/// Most likely country of Origin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryOrigin")]
		public string CountryOrigin { get; set; }
		
		/// <summary>
		/// Second best alternative : country of Origin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryOriginAlt")]
		public string CountryOriginAlt { get; set; }
		
		/// <summary>
		/// The first name (also known as given name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last name (also known as family name, or surname)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// The calibrated probability for countryOrigin OR countryOriginAlt to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityAltCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityAltCalibrated { get; set; }
		
		/// <summary>
		/// The calibrated probability for countryOrigin to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityCalibrated { get; set; }
		
		/// <summary>
		/// Most likely region of Origin (based on countryOrigin ISO2 code)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionOrigin")]
		public string RegionOrigin { get; set; }
		
		/// <summary>
		/// Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// Most likely sub region of Origin (based on countryOrigin ISO2 code)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subRegionOrigin")]
		public string SubRegionOrigin { get; set; }
		
		/// <summary>
		/// Most likely top region of Origin (based on countryOrigin ISO2 code)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topRegionOrigin")]
		public string TopRegionOrigin { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNameDiasporaedOut
	{
		
		/// <summary>
		/// Classified diaspora names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public FirstLastNameDiasporaedOut[] PersonalNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNameGenderIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public FirstLastNameGenderIn[] PersonalNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNameGenderIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The known gender of the name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY gender from a list of personal names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNameGenderedOut
	{
		
		/// <summary>
		/// Classified genderized names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public FirstLastNameGenderedOut[] PersonalNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNameGeoIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public FirstLastNameGeoIn[] PersonalNames { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY country subclassification (regional names).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNameGeoSubclassificationOut
	{
		
		/// <summary>
		/// Classified names at sub country level (region or state)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public FirstLastNameGeoSubclassificationOut[] PersonalNames { get; set; }
	}
	
	/// <summary>
	/// Represents the geographic name origin at a country subclassification level (usually regional or state level).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNameGeoSubclassificationOut
	{
		
		/// <summary>
		/// The input country ISO2 code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryIso2")]
		public string CountryIso2 { get; set; }
		
		/// <summary>
		/// The first name (also known as given name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last name (also known as family name, or surname)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityAltCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityAltCalibrated { get; set; }
		
		/// <summary>
		/// The calibrated probability for subclassification to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityCalibrated { get; set; }
		
		/// <summary>
		/// Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// Most likely subclassification ISO_3166-2 code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subClassification")]
		public string SubClassification { get; set; }
		
		/// <summary>
		/// Second best alternative : subclassification ISO_3166-2 code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subClassificationAlt")]
		public string SubClassificationAlt { get; set; }
		
		/// <summary>
		/// List subclassification ISO_3166-2 codes (top 10)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subclassificationTop")]
		public string[] SubclassificationTop { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNameGeoZippedIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public FirstLastNameGeoZippedIn[] PersonalNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNameGeoZippedIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="countryIso2")]
		public string CountryIso2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zipCode")]
		public string ZipCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNameIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public FirstLastNameIn[] PersonalNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNameIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY origin from a list of personal names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNameOriginedOut
	{
		
		/// <summary>
		/// Classified origined names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public FirstLastNameOriginedOut[] PersonalNames { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY country and phone code of personal names+phones.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNamePhoneCodedOut
	{
		
		/// <summary>
		/// Classified phone-coded names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNamesWithPhoneNumbers")]
		public FirstLastNamePhoneCodedOut[] PersonalNamesWithPhoneNumbers { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY country and phone code from a personal name and phone number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNamePhoneCodedOut
	{
		
		[System.Runtime.Serialization.DataMember(Name="countryIso2")]
		public string CountryIso2 { get; set; }
		
		/// <summary>
		/// The first name (also known as given name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The normalized phone number, verified using libphonenumber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internationalPhoneNumberVerified")]
		public string InternationalPhoneNumberVerified { get; set; }
		
		/// <summary>
		/// The last name (also known as family name, or surname)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// The likely country of origin of the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originCountryIso2")]
		public string OriginCountryIso2 { get; set; }
		
		/// <summary>
		/// The best alternative country of origin of the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originCountryIso2Alt")]
		public string OriginCountryIso2Alt { get; set; }
		
		/// <summary>
		/// The phone country code of the phone number, verified using libphonenumber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneCountryCode")]
		public System.Nullable<System.Int32> PhoneCountryCode { get; set; }
		
		/// <summary>
		/// The best alternative phone country code of the phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneCountryCodeAlt")]
		public System.Nullable<System.Int32> PhoneCountryCodeAlt { get; set; }
		
		/// <summary>
		/// The likely country of the phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneCountryIso2")]
		public string PhoneCountryIso2 { get; set; }
		
		/// <summary>
		/// The best alternative country of the phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneCountryIso2Alt")]
		public string PhoneCountryIso2Alt { get; set; }
		
		/// <summary>
		/// The phone ISO2 country code, verified using libphonenumber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneCountryIso2Verified")]
		public string PhoneCountryIso2Verified { get; set; }
		
		/// <summary>
		/// The input phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// Indicates if the phone number could be positively verified using libphonenumber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public System.Nullable<System.Boolean> Verified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNamePhoneNumberGeoIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalNamesWithPhoneNumbers")]
		public FirstLastNamePhoneNumberGeoIn[] PersonalNamesWithPhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNamePhoneNumberGeoIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="countryIso2")]
		public string CountryIso2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryIso2Alt")]
		public string CountryIso2Alt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNamePhoneNumberIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalNamesWithPhoneNumbers")]
		public FirstLastNamePhoneNumberIn[] PersonalNamesWithPhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNamePhoneNumberIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY US 'race/ethnicity' from a personal name, given US country of residence and (optionally) a ZIP5 code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFirstLastNameUSRaceEthnicityOut
	{
		
		/// <summary>
		/// Classified US 'race'/ethnicized names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public FirstLastNameUSRaceEthnicityOut[] PersonalNames { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY US 'race/ethnicity' from a personal name, given US country of residence and (optionally) a ZIP5 code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNameUSRaceEthnicityOut
	{
		
		/// <summary>
		/// The first name (also known as given name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last name (also known as family name, or surname)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityAltCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityAltCalibrated { get; set; }
		
		/// <summary>
		/// The calibrated probability for raceEthnicity to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityCalibrated { get; set; }
		
		/// <summary>
		/// List 'race'/ethnicities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raceEthnicitiesTop")]
		public string[] RaceEthnicitiesTop { get; set; }
		
		/// <summary>
		/// Most likely US 'race'/ethnicity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raceEthnicity")]
		public System.Nullable<FirstLastNameUSRaceEthnicityOutRaceEthnicity> RaceEthnicity { get; set; }
		
		/// <summary>
		/// Second most likely US 'race'/ethnicity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raceEthnicityAlt")]
		public FirstLastNameUSRaceEthnicityOutRaceEthnicity RaceEthnicityAlt { get; set; }
		
		/// <summary>
		/// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FirstLastNameUSRaceEthnicityOutRaceEthnicity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="W_NL")]
		W_NL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HL")]
		HL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="A")]
		A = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="B_NL")]
		B_NL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AI_AN")]
		AI_AN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PI")]
		PI = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchMatchPersonalFirstLastNameIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public MatchPersonalFirstLastNameIn[] PersonalNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MatchPersonalFirstLastNameIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name1")]
		public FirstLastNameIn Name1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name2")]
		public PersonalNameIn Name2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalNameIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchNameGeoIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properNouns")]
		public NameGeoIn[] ProperNouns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NameGeoIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="countryIso2")]
		public string CountryIso2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchNameIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properNouns")]
		public NameIn[] ProperNouns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NameIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchNameMatchCandidatesOut
	{
		
		/// <summary>
		/// Classified matched names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namesAndMatchCandidates")]
		public NameMatchCandidatesOut[] NamesAndMatchCandidates { get; set; }
	}
	
	/// <summary>
	/// Classified matched names
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NameMatchCandidatesOut
	{
		
		/// <summary>
		/// The first name (also known as given name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last name (also known as family name, or surname)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// The ordered list of name matching candidates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchCandidates")]
		public NameMatchCandidateOut[] MatchCandidates { get; set; }
		
		/// <summary>
		/// The option for ordering
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderOption")]
		public string OrderOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	/// <summary>
	/// The ordered list of name matching candidates
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NameMatchCandidateOut
	{
		
		/// <summary>
		/// The name matching candidate name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidateName")]
		public string CandidateName { get; set; }
		
		/// <summary>
		/// The family name prediction score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predScoreFamilyName")]
		public System.Nullable<System.Double> PredScoreFamilyName { get; set; }
		
		/// <summary>
		/// The given name prediction score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predScoreGivenName")]
		public System.Nullable<System.Double> PredScoreGivenName { get; set; }
		
		/// <summary>
		/// The name matching estimated probability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public System.Nullable<System.Double> Probability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchNameMatchedOut
	{
		
		/// <summary>
		/// Classified matched names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchedNames")]
		public NameMatchedOut[] MatchedNames { get; set; }
	}
	
	/// <summary>
	/// Classified matched names
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NameMatchedOut
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name matching status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchStatus")]
		public System.Nullable<NameMatchedOutMatchStatus> MatchStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NameMatchedOutMatchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Match")]
		Match = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mismatch")]
		Mismatch = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPersonalNameCastegroupOut
	{
		
		/// <summary>
		/// Caste group-coded names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public PersonalNameCastegroupOut[] PersonalNames { get; set; }
	}
	
	/// <summary>
	/// Caste group-coded names
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalNameCastegroupOut
	{
		
		/// <summary>
		/// Most likely caste group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="castegroup")]
		public string Castegroup { get; set; }
		
		/// <summary>
		/// Second best alternative : caste group 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="castegroupAlt")]
		public string CastegroupAlt { get; set; }
		
		/// <summary>
		/// List caste group (top 10)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="castegroupTop")]
		public string[] CastegroupTop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The input name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityAltCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityAltCalibrated { get; set; }
		
		/// <summary>
		/// The calibrated probability for country to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityCalibrated { get; set; }
		
		/// <summary>
		/// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPersonalNameGenderedOut
	{
		
		/// <summary>
		/// Classified genderized names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public PersonalNameGenderedOut[] PersonalNames { get; set; }
	}
	
	/// <summary>
	/// Classified genderized names
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalNameGenderedOut
	{
		
		/// <summary>
		/// Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genderScale")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> GenderScale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Most likely gender
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="likelyGender")]
		public FirstLastNameGenderedOutLikelyGender LikelyGender { get; set; }
		
		/// <summary>
		/// The input name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityCalibrated { get; set; }
		
		/// <summary>
		/// Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPersonalNameGeoIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public PersonalNameGeoIn[] PersonalNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalNameGeoIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="countryIso2")]
		public string CountryIso2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPersonalNameGeoOut
	{
		
		/// <summary>
		/// Classified geo names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public PersonalNameGeoOut[] PersonalNames { get; set; }
	}
	
	/// <summary>
	/// Classified geo names
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalNameGeoOut
	{
		
		/// <summary>
		/// List countries (top 10)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countriesTop")]
		public string[] CountriesTop { get; set; }
		
		/// <summary>
		/// Most likely country 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Second best alternative : country 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryAlt")]
		public string CountryAlt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The input name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityAltCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityAltCalibrated { get; set; }
		
		/// <summary>
		/// The calibrated probability for country to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityCalibrated { get; set; }
		
		/// <summary>
		/// Most likely region (based on country ISO2 code)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// Most likely sub region (based on country ISO2 code)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subRegion")]
		public string SubRegion { get; set; }
		
		/// <summary>
		/// Most likely top region (based on country ISO2 code)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topRegion")]
		public string TopRegion { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the LIKELY country subclassification (regional names).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPersonalNameGeoSubclassificationOut
	{
		
		/// <summary>
		/// Classified names at sub country level (region or state)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public PersonalNameGeoSubclassificationOut[] PersonalNames { get; set; }
	}
	
	/// <summary>
	/// Classified names at sub country level (region or state)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalNameGeoSubclassificationOut
	{
		
		/// <summary>
		/// The input country ISO2 code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryIso2")]
		public string CountryIso2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The input name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityAltCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityAltCalibrated { get; set; }
		
		/// <summary>
		/// The calibrated probability for subclassification to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityCalibrated { get; set; }
		
		/// <summary>
		/// Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// Most likely subclassification ISO_3166-2 code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subClassification")]
		public string SubClassification { get; set; }
		
		/// <summary>
		/// Second best alternative : subclassification ISO_3166-2 code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subClassificationAlt")]
		public string SubClassificationAlt { get; set; }
		
		/// <summary>
		/// List subclassification ISO_3166-2 codes (top 10)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subclassificationTop")]
		public string[] SubclassificationTop { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPersonalNameGeoSubdivisionIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public PersonalNameGeoSubdivisionIn[] PersonalNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalNameGeoSubdivisionIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="countryIso2")]
		public string CountryIso2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subdivisionIso")]
		public string SubdivisionIso { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPersonalNameIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public PersonalNameIn[] PersonalNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPersonalNameParsedOut
	{
		
		/// <summary>
		/// Classified parsed names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public PersonalNameParsedOut[] PersonalNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalNameParsedOut
	{
		
		/// <summary>
		/// First / last name structure corresponding to the most likely parsing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstLastName")]
		public FirstLastNameOut FirstLastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The input name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameParserType")]
		public System.Nullable<PersonalNameParsedOutNameParserType> NameParserType { get; set; }
		
		/// <summary>
		/// Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameParserTypeAlt")]
		public PersonalNameParsedOutNameParserType NameParserTypeAlt { get; set; }
		
		/// <summary>
		/// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	/// <summary>
	/// First / last name structure corresponding to the most likely parsing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstLastNameOut
	{
		
		/// <summary>
		/// The first name (also known as given name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last name (also known as family name, or surname)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PersonalNameParsedOutNameParserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FN1LN1")]
		FN1LN1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LN1FN1")]
		LN1FN1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FN1LN2")]
		FN1LN2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LN2FN1")]
		LN2FN1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FN1LNx")]
		FN1LNx = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LNxFN1")]
		LNxFN1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FN2LN1")]
		FN2LN1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LN1FN2")]
		LN1FN2 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FN2LN2")]
		FN2LN2 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LN2FN2")]
		LN2FN2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FN2LNx")]
		FN2LNx = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LNxFN2")]
		LNxFN2 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FNxLN1")]
		FNxLN1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LN1FNx")]
		LN1FNx = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FNxLN2")]
		FNxLN2 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LN2FNx")]
		LN2FNx = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FNxLNx")]
		FNxLNx = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LNxFNx")]
		LNxFNx = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPersonalNameReligionedOut
	{
		
		/// <summary>
		/// religious-coded names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public PersonalNameReligionedOut[] PersonalNames { get; set; }
	}
	
	/// <summary>
	/// religious-coded names
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalNameReligionedOut
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The input name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityAltCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityAltCalibrated { get; set; }
		
		/// <summary>
		/// The calibrated probability for country to have been guessed correctly. -1 = still calibrating. 
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probabilityCalibrated")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Double> ProbabilityCalibrated { get; set; }
		
		/// <summary>
		/// Most likely religion
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="religion")]
		public string Religion { get; set; }
		
		/// <summary>
		/// Second best alternative : religion 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="religionAlt")]
		public string ReligionAlt { get; set; }
		
		/// <summary>
		/// List countries (top 10)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="religionsTop")]
		public string[] ReligionsTop { get; set; }
		
		/// <summary>
		/// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPersonalNameSubdivisionIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public FactIn[] Facts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalNames")]
		public PersonalNameSubdivisionIn[] PersonalNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalNameSubdivisionIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subdivisionIso")]
		public string SubdivisionIso { get; set; }
	}
	
	/// <summary>
	/// Represents the output of inferring the common type (anthroponym, toponym, brand, etc.) from a list of proper names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchProperNounCategorizedOut
	{
		
		/// <summary>
		/// Classified typed proper names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properNouns")]
		public ProperNounCategorizedOut[] ProperNouns { get; set; }
	}
	
	/// <summary>
	/// Classified typed proper names
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProperNounCategorizedOut
	{
		
		/// <summary>
		/// The most likely common name type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonType")]
		public string CommonType { get; set; }
		
		/// <summary>
		/// Best alternative for : The most likely common name type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonTypeAlt")]
		public string CommonTypeAlt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The input name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeedbackLoopOut
	{
		
		/// <summary>
		/// Number of units recredited as per feedback loop successful classification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedbackCredits")]
		public System.Nullable<System.Int64> FeedbackCredits { get; set; }
	}
	
	/// <summary>
	/// List of countries and regions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionISO
	{
		
		[System.Runtime.Serialization.DataMember(Name="countryFIPS")]
		public string CountryFIPS { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryISO2")]
		public string CountryISO2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryISO3")]
		public string CountryISO3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryName")]
		public string CountryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryNumCode")]
		public string CountryNumCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subregion")]
		public string Subregion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topregion")]
		public string Topregion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionOut
	{
		
		/// <summary>
		/// List of countries and regions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countriesAndRegions")]
		public RegionISO[] CountriesAndRegions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Activate/deactivate anonymization for a source.
		/// Anonymize api2/json/anonymize/{source}/{anonymized}/{token}
		/// </summary>
		/// <returns>Anonymization of a source.</returns>
		public async Task<APIKeyOut> AnonymizeAsync(string source, bool anonymized, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/anonymize/"+ (source==null? "" : System.Uri.EscapeDataString(source))+"/"+anonymized+"/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIKeyOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Read API Key info.
		/// ApiKeyInfo api2/json/apiKeyInfo
		/// </summary>
		/// <returns>Read API Key (uncached, i.e. DB read)</returns>
		public async Task<APIKeyOut> ApiKeyInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/apiKeyInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIKeyOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of classification services and usage cost in Units per classification (default is 1=ONE Unit). Some API endpoints (ex. Corridor) combine multiple classifiers.
		/// AvailableServices api2/json/apiServices
		/// </summary>
		/// <returns>Available services</returns>
		public async Task<APIServicesOut> AvailableServicesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/apiServices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIServicesOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Prints the current status of the classifiers. A classifier name in apiStatus corresponds to a service name in apiServices.
		/// ApiStatus api2/json/apiStatus
		/// </summary>
		/// <returns>Available classifiers and status</returns>
		public async Task<APIClassifiersStatusOut> ApiStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/apiStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIClassifiersStatusOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Print current API usage.
		/// ApiUsage api2/json/apiUsage
		/// </summary>
		/// <returns>Print current API usage.</returns>
		public async Task<APIPeriodUsageOut> ApiUsageAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/apiUsage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPeriodUsageOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Print historical API usage.
		/// ApiUsageHistory api2/json/apiUsageHistory
		/// </summary>
		/// <returns>Print historical API usage (NB. new output format form v2.0.15)</returns>
		public async Task<APIUsageHistoryOut> ApiUsageHistoryAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/apiUsageHistory";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIUsageHistoryOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Print historical API usage (in an aggregated view, by service, by day/hour/min).
		/// ApiUsageHistoryAggregate api2/json/apiUsageHistoryAggregate
		/// </summary>
		/// <returns>Print historical API usage.</returns>
		public async Task<APIUsageAggregatedOut> ApiUsageHistoryAggregateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/apiUsageHistoryAggregate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIUsageAggregatedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
		/// CastegroupIndianFull api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}
		/// </summary>
		/// <returns>A castegroup-coded name.</returns>
		public async Task<PersonalNameCastegroupOut> CastegroupIndianFullAsync(string subDivisionIso31662, string personalNameFull, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/castegroupIndianFull/"+ (subDivisionIso31662==null? "" : System.Uri.EscapeDataString(subDivisionIso31662))+"/"+ (personalNameFull==null? "" : System.Uri.EscapeDataString(personalNameFull));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameCastegroupOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.
		/// CastegroupIndianFullBatch api2/json/castegroupIndianFullBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of castegroup-coded names.</returns>
		public async Task<BatchPersonalNameCastegroupOut> CastegroupIndianFullBatchAsync(BatchPersonalNameSubdivisionIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/castegroupIndianFullBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameCastegroupOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
		/// ChineseNameCandidates api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}
		/// </summary>
		/// <returns>A romanized name.</returns>
		public async Task<NameMatchCandidatesOut> ChineseNameCandidatesAsync(string chineseSurnameLatin, string chineseGivenNameLatin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/chineseNameCandidates/"+ (chineseSurnameLatin==null? "" : System.Uri.EscapeDataString(chineseSurnameLatin))+"/"+ (chineseGivenNameLatin==null? "" : System.Uri.EscapeDataString(chineseGivenNameLatin));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NameMatchCandidatesOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming
		/// ChineseNameCandidatesBatch api2/json/chineseNameCandidatesBatch
		/// </summary>
		/// <param name="requestBody">A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchNameMatchCandidatesOut> ChineseNameCandidatesBatchAsync(BatchFirstLastNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/chineseNameCandidatesBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchNameMatchCandidatesOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming.
		/// ChineseNameCandidatesGenderBatch api2/json/chineseNameCandidatesGenderBatch
		/// </summary>
		/// <param name="requestBody">A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchNameMatchCandidatesOut> ChineseNameCandidatesGenderBatchAsync(BatchFirstLastNameGenderIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/chineseNameCandidatesGenderBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchNameMatchCandidatesOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female')
		/// ChineseNameGenderCandidates api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}
		/// </summary>
		/// <returns>A romanized name.</returns>
		public async Task<NameMatchCandidatesOut> ChineseNameGenderCandidatesAsync(string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/chineseNameGenderCandidates/"+ (chineseSurnameLatin==null? "" : System.Uri.EscapeDataString(chineseSurnameLatin))+"/"+ (chineseGivenNameLatin==null? "" : System.Uri.EscapeDataString(chineseGivenNameLatin))+"/"+ (knownGender==null? "" : System.Uri.EscapeDataString(knownGender));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NameMatchCandidatesOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
		/// ChineseNameMatch api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}
		/// </summary>
		/// <returns>A romanized name.</returns>
		public async Task<NameMatchedOut> ChineseNameMatchAsync(string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/chineseNameMatch/"+ (chineseSurnameLatin==null? "" : System.Uri.EscapeDataString(chineseSurnameLatin))+"/"+ (chineseGivenNameLatin==null? "" : System.Uri.EscapeDataString(chineseGivenNameLatin))+"/"+ (chineseName==null? "" : System.Uri.EscapeDataString(chineseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NameMatchedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming
		/// ChineseNameMatchBatch api2/json/chineseNameMatchBatch
		/// </summary>
		/// <param name="requestBody">A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchNameMatchedOut> ChineseNameMatchBatchAsync(BatchMatchPersonalFirstLastNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/chineseNameMatchBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchNameMatchedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com)
		/// Corridor api2/json/corridor/{countryIso2From}/{firstNameFrom}/{lastNameFrom}/{countryIso2To}/{firstNameTo}/{lastNameTo}
		/// </summary>
		/// <returns>Two classified names.</returns>
		public async Task<CorridorOut> CorridorAsync(string countryIso2From, string firstNameFrom, string lastNameFrom, string countryIso2To, string firstNameTo, string lastNameTo, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/corridor/"+ (countryIso2From==null? "" : System.Uri.EscapeDataString(countryIso2From))+"/"+ (firstNameFrom==null? "" : System.Uri.EscapeDataString(firstNameFrom))+"/"+ (lastNameFrom==null? "" : System.Uri.EscapeDataString(lastNameFrom))+"/"+ (countryIso2To==null? "" : System.Uri.EscapeDataString(countryIso2To))+"/"+ (firstNameTo==null? "" : System.Uri.EscapeDataString(firstNameTo))+"/"+ (lastNameTo==null? "" : System.Uri.EscapeDataString(lastNameTo));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CorridorOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com)
		/// CorridorBatch api2/json/corridorBatch
		/// </summary>
		/// <param name="requestBody">A list of name pairs, with country code (nameFrom -> nameTo).</param>
		/// <returns>A list of classified name pairs.</returns>
		public async Task<BatchCorridorOut> CorridorBatchAsync(BatchCorridorIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/corridorBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchCorridorOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
		/// Country api2/json/country/{personalNameFull}
		/// </summary>
		/// <returns>A origined name.</returns>
		public async Task<PersonalNameGeoOut> CountryAsync(string personalNameFull, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/country/"+ (personalNameFull==null? "" : System.Uri.EscapeDataString(personalNameFull));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameGeoOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
		/// CountryBatch api2/json/countryBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchPersonalNameGeoOut> CountryBatchAsync(BatchPersonalNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/countryBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameGeoOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
		/// Diaspora api2/json/diaspora/{countryIso2}/{firstName}/{lastName}
		/// </summary>
		/// <returns>A diaspora / ethnicity for given name and geography.</returns>
		public async Task<FirstLastNameDiasporaedOut> DiasporaAsync(string countryIso2, string firstName, string lastName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/diaspora/"+ (countryIso2==null? "" : System.Uri.EscapeDataString(countryIso2))+"/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"/"+ (lastName==null? "" : System.Uri.EscapeDataString(lastName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameDiasporaedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
		/// DiasporaBatch api2/json/diasporaBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of diaspora / ethnicity given a name and residency.</returns>
		public async Task<BatchFirstLastNameDiasporaedOut> DiasporaBatchAsync(BatchFirstLastNameGeoIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/diasporaBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNameDiasporaedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of a just a fiven name, assuming default 'US' local context. Please use preferably full names and local geographic context for better accuracy.
		/// Gender_1 api2/json/gender/{firstName}
		/// </summary>
		/// <returns>A genderized name.</returns>
		public async Task<FirstLastNameGenderedOut> Gender_1Async(string firstName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/gender/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of a name.
		/// Gender api2/json/gender/{firstName}/{lastName}
		/// </summary>
		/// <returns>A genderized name.</returns>
		public async Task<FirstLastNameGenderedOut> GenderAsync(string firstName, string lastName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/gender/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"/"+ (lastName==null? "" : System.Uri.EscapeDataString(lastName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of up to 100 names, detecting automatically the cultural context.
		/// GenderBatch api2/json/genderBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchFirstLastNameGenderedOut> GenderBatchAsync(BatchFirstLastNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of a Chinese full name ex. 王晓明
		/// GenderChineseName api2/json/genderChineseName/{chineseName}
		/// </summary>
		/// <returns>A genderized name.</returns>
		public async Task<PersonalNameGenderedOut> GenderChineseNameAsync(string chineseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderChineseName/"+ (chineseName==null? "" : System.Uri.EscapeDataString(chineseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of up to 100 full names ex. 王晓明
		/// GenderChineseNameBatch api2/json/genderChineseNameBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names, with a country ISO2 code</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchPersonalNameGenderedOut> GenderChineseNameBatchAsync(BatchPersonalNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderChineseNameBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of a Chinese name in LATIN (Pinyin).
		/// GenderChineseNamePinyin api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}
		/// </summary>
		/// <returns>A genderized name.</returns>
		public async Task<FirstLastNameGenderedOut> GenderChineseNamePinyinAsync(string chineseSurnameLatin, string chineseGivenNameLatin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderChineseNamePinyin/"+ (chineseSurnameLatin==null? "" : System.Uri.EscapeDataString(chineseSurnameLatin))+"/"+ (chineseGivenNameLatin==null? "" : System.Uri.EscapeDataString(chineseGivenNameLatin));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
		/// GenderChineseNamePinyinBatch api2/json/genderChineseNamePinyinBatch
		/// </summary>
		/// <param name="requestBody">A list of names, with country code.</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchFirstLastNameGenderedOut> GenderChineseNamePinyinBatchAsync(BatchFirstLastNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderChineseNamePinyinBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of a full name, ex. John H. Smith
		/// GenderFull api2/json/genderFull/{fullName}
		/// </summary>
		/// <returns>A genderized name.</returns>
		public async Task<PersonalNameGenderedOut> GenderFullAsync(string fullName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderFull/"+ (fullName==null? "" : System.Uri.EscapeDataString(fullName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
		/// GenderFullBatch api2/json/genderFullBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchPersonalNameGenderedOut> GenderFullBatchAsync(BatchPersonalNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderFullBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of a full name, given a local context (ISO2 country code).
		/// GenderFullGeo api2/json/genderFullGeo/{fullName}/{countryIso2}
		/// </summary>
		/// <returns>A genderized name.</returns>
		public async Task<PersonalNameGenderedOut> GenderFullGeoAsync(string fullName, string countryIso2, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderFullGeo/"+ (fullName==null? "" : System.Uri.EscapeDataString(fullName))+"/"+ (countryIso2==null? "" : System.Uri.EscapeDataString(countryIso2));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
		/// GenderFullGeoBatch api2/json/genderFullGeoBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names, with a country ISO2 code</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchPersonalNameGenderedOut> GenderFullGeoBatchAsync(BatchPersonalNameGeoIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderFullGeoBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of a name, given a local context (ISO2 country code).
		/// GenderGeo api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}
		/// </summary>
		/// <returns>A genderized name.</returns>
		public async Task<FirstLastNameGenderedOut> GenderGeoAsync(string firstName, string lastName, string countryIso2, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderGeo/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"/"+ (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"/"+ (countryIso2==null? "" : System.Uri.EscapeDataString(countryIso2));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
		/// GenderGeoBatch api2/json/genderGeoBatch
		/// </summary>
		/// <param name="requestBody">A list of names, with country code.</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchFirstLastNameGenderedOut> GenderGeoBatchAsync(BatchFirstLastNameGeoIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderGeoBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of a Japanese name in LATIN (Pinyin).
		/// GenderJapaneseNamePinyin api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}
		/// </summary>
		/// <returns>A genderized name.</returns>
		public async Task<FirstLastNameGenderedOut> GenderJapaneseNamePinyinAsync(string japaneseSurname, string japaneseGivenName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderJapaneseName/"+ (japaneseSurname==null? "" : System.Uri.EscapeDataString(japaneseSurname))+"/"+ (japaneseGivenName==null? "" : System.Uri.EscapeDataString(japaneseGivenName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
		/// GenderJapaneseNamePinyinBatch api2/json/genderJapaneseNameBatch
		/// </summary>
		/// <param name="requestBody">A list of names, with country code.</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchFirstLastNameGenderedOut> GenderJapaneseNamePinyinBatchAsync(BatchFirstLastNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderJapaneseNameBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of a Japanese full name ex. 王晓明
		/// GenderJapaneseNameFull api2/json/genderJapaneseNameFull/{japaneseName}
		/// </summary>
		/// <returns>A genderized name.</returns>
		public async Task<PersonalNameGenderedOut> GenderJapaneseNameFullAsync(string japaneseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderJapaneseNameFull/"+ (japaneseName==null? "" : System.Uri.EscapeDataString(japaneseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely gender of up to 100 full names
		/// GenderJapaneseNameFullBatch api2/json/genderJapaneseNameFullBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchPersonalNameGenderedOut> GenderJapaneseNameFullBatchAsync(BatchPersonalNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/genderJapaneseNameFullBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameGenderedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae
		/// JapaneseNameGenderKanjiCandidatesBatch api2/json/japaneseNameGenderKanjiCandidatesBatch
		/// </summary>
		/// <param name="requestBody">A list of personal japanese names in LATIN, firstName = japaneseGivenName; lastName=japaneseSurname and known gender</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchNameMatchCandidatesOut> JapaneseNameGenderKanjiCandidatesBatchAsync(BatchFirstLastNameGenderIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/japaneseNameGenderKanjiCandidatesBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchNameMatchCandidatesOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
		/// JapaneseNameKanjiCandidates_1 api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}
		/// </summary>
		/// <returns>A romanized name.</returns>
		public async Task<NameMatchCandidatesOut> JapaneseNameKanjiCandidates_1Async(string japaneseSurnameLatin, string japaneseGivenNameLatin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/japaneseNameKanjiCandidates/"+ (japaneseSurnameLatin==null? "" : System.Uri.EscapeDataString(japaneseSurnameLatin))+"/"+ (japaneseGivenNameLatin==null? "" : System.Uri.EscapeDataString(japaneseGivenNameLatin));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NameMatchCandidatesOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.
		/// JapaneseNameKanjiCandidates api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{knownGender}
		/// </summary>
		/// <returns>A romanized name.</returns>
		public async Task<NameMatchCandidatesOut> JapaneseNameKanjiCandidatesAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string knownGender, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/japaneseNameKanjiCandidates/"+ (japaneseSurnameLatin==null? "" : System.Uri.EscapeDataString(japaneseSurnameLatin))+"/"+ (japaneseGivenNameLatin==null? "" : System.Uri.EscapeDataString(japaneseGivenNameLatin))+"/"+ (knownGender==null? "" : System.Uri.EscapeDataString(knownGender));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NameMatchCandidatesOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname), ex. Yamamoto Sanae
		/// JapaneseNameKanjiCandidatesBatch api2/json/japaneseNameKanjiCandidatesBatch
		/// </summary>
		/// <param name="requestBody">A list of personal japanese names in LATIN, firstName = japaneseGivenName; lastName=japaneseSurname</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchNameMatchCandidatesOut> JapaneseNameKanjiCandidatesBatchAsync(BatchFirstLastNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/japaneseNameKanjiCandidatesBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchNameMatchCandidatesOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Romanize japanese name, based on the name in Kanji.
		/// JapaneseNameLatinCandidates api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}
		/// </summary>
		/// <returns>A romanized name.</returns>
		public async Task<NameMatchCandidatesOut> JapaneseNameLatinCandidatesAsync(string japaneseSurnameKanji, string japaneseGivenNameKanji, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/japaneseNameLatinCandidates/"+ (japaneseSurnameKanji==null? "" : System.Uri.EscapeDataString(japaneseSurnameKanji))+"/"+ (japaneseGivenNameKanji==null? "" : System.Uri.EscapeDataString(japaneseGivenNameKanji));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NameMatchCandidatesOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Romanize japanese names, based on the name in KANJI
		/// JapaneseNameLatinCandidatesBatch api2/json/japaneseNameLatinCandidatesBatch
		/// </summary>
		/// <param name="requestBody">A list of personal japanese names in KANJI, firstName = japaneseGivenName; lastName=japaneseSurname</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchNameMatchCandidatesOut> JapaneseNameLatinCandidatesBatchAsync(BatchFirstLastNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/japaneseNameLatinCandidatesBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchNameMatchCandidatesOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
		/// JapaneseNameMatch api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}
		/// </summary>
		/// <returns>A romanized name.</returns>
		public async Task<NameMatchedOut> JapaneseNameMatchAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/japaneseNameMatch/"+ (japaneseSurnameLatin==null? "" : System.Uri.EscapeDataString(japaneseSurnameLatin))+"/"+ (japaneseGivenNameLatin==null? "" : System.Uri.EscapeDataString(japaneseGivenNameLatin))+"/"+ (japaneseName==null? "" : System.Uri.EscapeDataString(japaneseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NameMatchedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
		/// JapaneseNameMatchBatch api2/json/japaneseNameMatchBatch
		/// </summary>
		/// <param name="requestBody">A list of personal Japanese names in LATIN, firstName = japaneseGivenName; lastName=japaneseSurname</param>
		/// <returns>A list of matched names.</returns>
		public async Task<BatchNameMatchedOut> JapaneseNameMatchBatchAsync(BatchMatchPersonalFirstLastNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/japaneseNameMatchBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchNameMatchedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
		/// JapaneseNameMatchFeedbackLoop api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}
		/// </summary>
		/// <returns>A romanized name.</returns>
		public async Task<FeedbackLoopOut> JapaneseNameMatchFeedbackLoopAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/japaneseNameMatchFeedbackLoop/"+ (japaneseSurnameLatin==null? "" : System.Uri.EscapeDataString(japaneseSurnameLatin))+"/"+ (japaneseGivenNameLatin==null? "" : System.Uri.EscapeDataString(japaneseGivenNameLatin))+"/"+ (japaneseName==null? "" : System.Uri.EscapeDataString(japaneseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FeedbackLoopOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activate/deactivate learning from a source.
		/// Learnable api2/json/learnable/{source}/{learnable}/{token}
		/// </summary>
		/// <param name="source">The API Key to set as learnable/non learnable.</param>
		/// <returns>Set learning from source.</returns>
		public async Task<APIKeyOut> LearnableAsync(string source, bool learnable, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/learnable/"+ (source==null? "" : System.Uri.EscapeDataString(source))+"/"+learnable+"/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIKeyOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely type of a proper noun (personal name, brand name, place name etc.)
		/// NameType api2/json/nameType/{properNoun}
		/// </summary>
		/// <returns>A typed name.</returns>
		public async Task<ProperNounCategorizedOut> NameTypeAsync(string properNoun, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/nameType/"+ (properNoun==null? "" : System.Uri.EscapeDataString(properNoun));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProperNounCategorizedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
		/// NameTypeBatch api2/json/nameTypeBatch
		/// </summary>
		/// <param name="requestBody">A list of proper names</param>
		/// <returns>A list of commonTypeized names.</returns>
		public async Task<BatchProperNounCategorizedOut> NameTypeBatchAsync(BatchNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/nameTypeBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchProperNounCategorizedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely type of a proper noun (personal name, brand name, place name etc.)
		/// NameTypeGeo api2/json/nameTypeGeo/{properNoun}/{countryIso2}
		/// </summary>
		/// <returns>A typed name.</returns>
		public async Task<ProperNounCategorizedOut> NameTypeGeoAsync(string properNoun, string countryIso2, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/nameTypeGeo/"+ (properNoun==null? "" : System.Uri.EscapeDataString(properNoun))+"/"+ (countryIso2==null? "" : System.Uri.EscapeDataString(countryIso2));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProperNounCategorizedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
		/// NameTypeGeoBatch api2/json/nameTypeGeoBatch
		/// </summary>
		/// <param name="requestBody">A list of proper names</param>
		/// <returns>A list of commonTypeized names.</returns>
		public async Task<BatchProperNounCategorizedOut> NameTypeGeoBatchAsync(BatchNameGeoIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/nameTypeGeoBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchProperNounCategorizedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.
		/// Origin api2/json/origin/{firstName}/{lastName}
		/// </summary>
		/// <returns>A origined name.</returns>
		public async Task<FirstLastNameOriginedOut> OriginAsync(string firstName, string lastName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/origin/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"/"+ (lastName==null? "" : System.Uri.EscapeDataString(lastName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameOriginedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
		/// OriginBatch api2/json/originBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchFirstLastNameOriginedOut> OriginBatchAsync(BatchFirstLastNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/originBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNameOriginedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name)
		/// ParseChineseName api2/json/parseChineseName/{chineseName}
		/// </summary>
		/// <returns>A origined name.</returns>
		public async Task<PersonalNameParsedOut> ParseChineseNameAsync(string chineseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/parseChineseName/"+ (chineseName==null? "" : System.Uri.EscapeDataString(chineseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameParsedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name).
		/// ParseChineseNameBatch api2/json/parseChineseNameBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of parsed names.</returns>
		public async Task<BatchPersonalNameParsedOut> ParseChineseNameBatchAsync(BatchPersonalNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/parseChineseNameBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameParsedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
		/// ParseJapaneseName api2/json/parseJapaneseName/{japaneseName}
		/// </summary>
		/// <returns>A origined name.</returns>
		public async Task<PersonalNameParsedOut> ParseJapaneseNameAsync(string japaneseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/parseJapaneseName/"+ (japaneseName==null? "" : System.Uri.EscapeDataString(japaneseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameParsedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
		/// ParseJapaneseNameBatch api2/json/parseJapaneseNameBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of parsed names.</returns>
		public async Task<BatchPersonalNameParsedOut> ParseJapaneseNameBatchAsync(BatchPersonalNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/parseJapaneseNameBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameParsedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
		/// ParseName api2/json/parseName/{nameFull}
		/// </summary>
		/// <returns>A origined name.</returns>
		public async Task<PersonalNameParsedOut> ParseNameAsync(string nameFull, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/parseName/"+ (nameFull==null? "" : System.Uri.EscapeDataString(nameFull));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameParsedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
		/// ParseNameGeo api2/json/parseName/{nameFull}/{countryIso2}
		/// </summary>
		/// <returns>A origined name.</returns>
		public async Task<PersonalNameParsedOut> ParseNameGeoAsync(string nameFull, string countryIso2, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/parseName/"+ (nameFull==null? "" : System.Uri.EscapeDataString(nameFull))+"/"+ (countryIso2==null? "" : System.Uri.EscapeDataString(countryIso2));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameParsedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
		/// ParseNameBatch api2/json/parseNameBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of parsed names.</returns>
		public async Task<BatchPersonalNameParsedOut> ParseNameBatchAsync(BatchPersonalNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/parseNameBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameParsedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.
		/// ParseNameGeoBatch api2/json/parseNameGeoBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of parsed names.</returns>
		public async Task<BatchPersonalNameParsedOut> ParseNameGeoBatchAsync(BatchPersonalNameGeoIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/parseNameGeoBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameParsedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
		/// PhoneCode api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}
		/// </summary>
		/// <returns>A name with country and phone code.</returns>
		public async Task<FirstLastNamePhoneCodedOut> PhoneCodeAsync(string firstName, string lastName, string phoneNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/phoneCode/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"/"+ (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"/"+ (phoneNumber==null? "" : System.Uri.EscapeDataString(phoneNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNamePhoneCodedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
		/// PhoneCodeBatch api2/json/phoneCodeBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchFirstLastNamePhoneCodedOut> PhoneCodeBatchAsync(BatchFirstLastNamePhoneNumberIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/phoneCodeBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNamePhoneCodedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
		/// PhoneCodeGeo api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}
		/// </summary>
		/// <returns>A name with country and phone code.</returns>
		public async Task<FirstLastNamePhoneCodedOut> PhoneCodeGeoAsync(string firstName, string lastName, string phoneNumber, string countryIso2, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/phoneCodeGeo/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"/"+ (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"/"+ (phoneNumber==null? "" : System.Uri.EscapeDataString(phoneNumber))+"/"+ (countryIso2==null? "" : System.Uri.EscapeDataString(countryIso2));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNamePhoneCodedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
		/// PhoneCodeGeoBatch api2/json/phoneCodeGeoBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of genderized names.</returns>
		public async Task<BatchFirstLastNamePhoneCodedOut> PhoneCodeGeoBatchAsync(BatchFirstLastNamePhoneNumberGeoIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/phoneCodeGeoBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNamePhoneCodedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
		/// PhoneCodeGeoFeedbackLoop api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}
		/// </summary>
		/// <returns>A name with country and phone code.</returns>
		public async Task<FirstLastNamePhoneCodedOut> PhoneCodeGeoFeedbackLoopAsync(string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/phoneCodeGeoFeedbackLoop/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"/"+ (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"/"+ (phoneNumber==null? "" : System.Uri.EscapeDataString(phoneNumber))+"/"+ (phoneNumberE164==null? "" : System.Uri.EscapeDataString(phoneNumberE164))+"/"+ (countryIso2==null? "" : System.Uri.EscapeDataString(countryIso2));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNamePhoneCodedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name)
		/// PinyinChineseName api2/json/pinyinChineseName/{chineseName}
		/// </summary>
		/// <returns>A pinyin name.</returns>
		public async Task<PersonalNameParsedOut> PinyinChineseNameAsync(string chineseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/pinyinChineseName/"+ (chineseName==null? "" : System.Uri.EscapeDataString(chineseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameParsedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name).
		/// PinyinChineseNameBatch api2/json/pinyinChineseNameBatch
		/// </summary>
		/// <param name="requestBody">A list of Chinese names</param>
		/// <returns>A list of Pinyin names.</returns>
		public async Task<BatchPersonalNameParsedOut> PinyinChineseNameBatchAsync(BatchPersonalNameIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/pinyinChineseNameBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameParsedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Print basic source statistics.
		/// Regions api2/json/regions
		/// </summary>
		/// <returns>List of countries and regions.</returns>
		public async Task<RegionOut> RegionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/regions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegionOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version).
		/// ReligionFull api2/json/religionFull/{countryIso2}/{subDivisionIso31662}/{personalNameFull}
		/// </summary>
		/// <returns>A religion-coded name.</returns>
		public async Task<PersonalNameReligionedOut> ReligionFullAsync(string countryIso2, string subDivisionIso31662, string personalNameFull, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/religionFull/"+ (countryIso2==null? "" : System.Uri.EscapeDataString(countryIso2))+"/"+ (subDivisionIso31662==null? "" : System.Uri.EscapeDataString(subDivisionIso31662))+"/"+ (personalNameFull==null? "" : System.Uri.EscapeDataString(personalNameFull));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameReligionedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently.
		/// ReligionFullBatch api2/json/religionFullBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of religion-coded names.</returns>
		public async Task<BatchPersonalNameReligionedOut> ReligionFullBatchAsync(BatchPersonalNameGeoSubdivisionIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/religionFullBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameReligionedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
		/// Religion api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}
		/// </summary>
		/// <returns>A religion-coded name.</returns>
		public async Task<PersonalNameReligionedOut> ReligionAsync(string subDivisionIso31662, string personalNameFull, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/religionIndianFull/"+ (subDivisionIso31662==null? "" : System.Uri.EscapeDataString(subDivisionIso31662))+"/"+ (personalNameFull==null? "" : System.Uri.EscapeDataString(personalNameFull));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameReligionedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
		/// ReligionIndianFullBatch api2/json/religionIndianFullBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of religion-coded names.</returns>
		public async Task<BatchPersonalNameReligionedOut> ReligionIndianFullBatchAsync(BatchPersonalNameSubdivisionIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/religionIndianFullBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameReligionedOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the current software version
		/// SoftwareVersion api2/json/softwareVersion
		/// </summary>
		/// <returns>The current software version</returns>
		public async Task<SoftwareVersionOut> SoftwareVersionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/softwareVersion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SoftwareVersionOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
		/// Subclassification api2/json/subclassification/{countryIso2}/{firstName}/{lastName}
		/// </summary>
		/// <returns>A classified name at a sub-country level.</returns>
		public async Task<FirstLastNameGeoSubclassificationOut> SubclassificationAsync(string countryIso2, string firstName, string lastName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/subclassification/"+ (countryIso2==null? "" : System.Uri.EscapeDataString(countryIso2))+"/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"/"+ (lastName==null? "" : System.Uri.EscapeDataString(lastName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameGeoSubclassificationOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
		/// SubclassificationBatch api2/json/subclassificationBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of classified names at a sub-country level.</returns>
		public async Task<BatchFirstLastNameGeoSubclassificationOut> SubclassificationBatchAsync(BatchFirstLastNameGeoIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/subclassificationBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNameGeoSubclassificationOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
		/// SubclassificationFull api2/json/subclassificationFull/{countryIso2}/{fullName}
		/// </summary>
		/// <returns>A classified name at a sub-country level.</returns>
		public async Task<FirstLastNameGeoSubclassificationOut> SubclassificationFullAsync(string countryIso2, string fullName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/subclassificationFull/"+ (countryIso2==null? "" : System.Uri.EscapeDataString(countryIso2))+"/"+ (fullName==null? "" : System.Uri.EscapeDataString(fullName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameGeoSubclassificationOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
		/// SubclassificationFullBatch api2/json/subclassificationFullBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of classified names at a sub-country level.</returns>
		public async Task<BatchPersonalNameGeoSubclassificationOut> SubclassificationFullBatchAsync(BatchPersonalNameGeoIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/subclassificationFullBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameGeoSubclassificationOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
		/// SubclassificationIndian api2/json/subclassificationIndian/{firstName}/{lastName}
		/// </summary>
		/// <returns>A classified name at a sub-country level.</returns>
		public async Task<FirstLastNameGeoSubclassificationOut> SubclassificationIndianAsync(string firstName, string lastName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/subclassificationIndian/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"/"+ (lastName==null? "" : System.Uri.EscapeDataString(lastName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameGeoSubclassificationOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
		/// SubclassificationIndianBatch api2/json/subclassificationIndianBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of classified names at a subcountry level.</returns>
		public async Task<BatchFirstLastNameGeoSubclassificationOut> SubclassificationIndianBatchAsync(BatchFirstLastNameGeoIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/subclassificationIndianBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNameGeoSubclassificationOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
		/// SubclassificationIndianFull api2/json/subclassificationIndianFull/{fullName}
		/// </summary>
		/// <returns>A classified name at a sub-country level.</returns>
		public async Task<PersonalNameGeoSubclassificationOut> SubclassificationIndianFullAsync(string fullName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/subclassificationIndianFull/"+ (fullName==null? "" : System.Uri.EscapeDataString(fullName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonalNameGeoSubclassificationOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
		/// SubclassificationIndianFullBatch api2/json/subclassificationIndianFullBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of classified names at a subcountry level.</returns>
		public async Task<BatchPersonalNameGeoSubclassificationOut> SubclassificationIndianFullBatchAsync(BatchPersonalNameGeoIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/subclassificationIndianFullBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPersonalNameGeoSubclassificationOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Print the taxonomy classes valid for the given classifier.
		/// TaxonomyClasses api2/json/taxonomyClasses/{classifierName}
		/// </summary>
		/// <returns>Available plans</returns>
		public async Task<APIClassifierTaxonomyOut> TaxonomyClassesAsync(string classifierName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/taxonomyClasses/"+ (classifierName==null? "" : System.Uri.EscapeDataString(classifierName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIClassifierTaxonomyOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
		/// UsRaceEthnicity api2/json/usRaceEthnicity/{firstName}/{lastName}
		/// </summary>
		/// <returns>a US resident's likely race/ethnicity : W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino), AI_AN (American Indian or Alaskan Native*) and PI (Pacific Islander*). *optionally</returns>
		public async Task<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityAsync(string firstName, string lastName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/usRaceEthnicity/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"/"+ (lastName==null? "" : System.Uri.EscapeDataString(lastName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameUSRaceEthnicityOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
		/// UsRaceEthnicityBatch api2/json/usRaceEthnicityBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of US resident's likely race/ethnicity. W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino), AI_AN (American Indian or Alaskan Native*) and PI (Pacific Islander*). *optionally</returns>
		public async Task<BatchFirstLastNameUSRaceEthnicityOut> UsRaceEthnicityBatchAsync(BatchFirstLastNameGeoIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/usRaceEthnicityBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNameUSRaceEthnicityOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
		/// UsRaceEthnicityZIP5 api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}
		/// </summary>
		/// <returns>a US resident's likely race/ethnicity : W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino), AI_AN (American Indian or Alaskan Native*) and PI (Pacific Islander*). *optionally</returns>
		public async Task<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityZIP5Async(string firstName, string lastName, string zip5Code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/usRaceEthnicityZIP5/"+ (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"/"+ (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"/"+ (zip5Code==null? "" : System.Uri.EscapeDataString(zip5Code));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FirstLastNameUSRaceEthnicityOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
		/// UsZipRaceEthnicityBatch api2/json/usZipRaceEthnicityBatch
		/// </summary>
		/// <param name="requestBody">A list of personal names</param>
		/// <returns>A list of US resident's likely race/ethnicity. W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino), AI_AN (American Indian or Alaskan Native*) and PI (Pacific Islander*). *optionally</returns>
		public async Task<BatchFirstLastNameUSRaceEthnicityOut> UsZipRaceEthnicityBatchAsync(BatchFirstLastNameGeoZippedIn requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api2/json/usZipRaceEthnicityBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchFirstLastNameUSRaceEthnicityOut>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
