//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizationErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	/// <summary>
	/// The response from the <code>CheckIfPhoneNumberIsOptedOut</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckIfPhoneNumberIsOptedOutResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="isOptedOut")]
		public System.Nullable<System.Boolean> IsOptedOut { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottledException
	{
	}
	
	/// <summary>
	/// Response for ConfirmSubscriptions action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfirmSubscriptionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterPolicyLimitExceededException
	{
	}
	
	/// <summary>
	/// Response from CreatePlatformApplication action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePlatformApplicationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformApplicationArn { get; set; }
	}
	
	/// <summary>
	/// Response from CreateEndpoint action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSMSSandboxPhoneNumberResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptedOutException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserErrorException
	{
	}
	
	/// <summary>
	/// Response from CreateTopic action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTopicResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
	}
	
	/// <summary>
	/// The list of tags to be added to the specified topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopicLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSecurityException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StaleTagException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagPolicyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConcurrentAccessException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSMSSandboxPhoneNumberResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataProtectionPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataProtectionPolicy { get; set; }
	}
	
	/// <summary>
	/// Response from GetEndpointAttributes of the EndpointArn.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEndpointAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MapStringToString Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MapStringToString
	{
	}
	
	/// <summary>
	/// Response for GetPlatformApplicationAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPlatformApplicationAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MapStringToString Attributes { get; set; }
	}
	
	/// <summary>
	/// The response from the <code>GetSMSAttributes</code> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSMSAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public MapStringToString Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSMSSandboxAccountStatusResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsInSandbox { get; set; }
	}
	
	/// <summary>
	/// Response for GetSubscriptionAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSubscriptionAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SubscriptionAttributesMap Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionAttributesMap
	{
	}
	
	/// <summary>
	/// Response for GetTopicAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTopicAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TopicAttributesMap Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopicAttributesMap
	{
	}
	
	/// <summary>
	/// Response for ListEndpointsByPlatformApplication action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEndpointsByPlatformApplicationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint[] Endpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The endpoint for mobile app and device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Endpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapStringToString Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOriginationNumbersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberInformation[] PhoneNumbers { get; set; }
	}
	
	/// <summary>
	/// A list of phone numbers and their metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNumberInformation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Iso2CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteType RouteType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NumberCapability[] NumberCapabilities { get; set; }
	}
	
	/// <summary>
	/// Enum listing out all supported route types. The following enum values are supported. 1. Transactional : Non-marketing traffic 2. Promotional : Marketing 3. Premium : Premium routes for OTP delivery to the carriers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RouteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Transactional")]
		Transactional = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Promotional")]
		Promotional = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Premium")]
		Premium = 2,
	}
	
	/// <summary>
	/// Enum listing out all supported number capabilities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NumberCapability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMS")]
		SMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MMS")]
		MMS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE")]
		VOICE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	/// <summary>
	/// The response from the <code>ListPhoneNumbersOptedOut</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPhoneNumbersOptedOutResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumbers")]
		public string[] PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Response for ListPlatformApplications action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPlatformApplicationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PlatformApplication[] PlatformApplications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Platform application object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlatformApplication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformApplicationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapStringToString Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSMSSandboxPhoneNumbersResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SMSSandboxPhoneNumber[] PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>A verified or pending destination phone number in the SMS sandbox.</p> <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in the <i>Amazon SNS Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SMSSandboxPhoneNumber
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SMSSandboxPhoneNumberVerificationStatus Status { get; set; }
	}
	
	/// <summary>
	/// Enum listing out all supported destination phone number verification statuses. The following enum values are supported. 1. PENDING : The destination phone number is pending verification. 2. VERIFIED : The destination phone number is verified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SMSSandboxPhoneNumberVerificationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending")]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Verified")]
		Verified = 1,
	}
	
	/// <summary>
	/// Response for ListSubscriptions action
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSubscriptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Subscription[] Subscriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A wrapper type for the attributes of an Amazon SNS subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
	}
	
	/// <summary>
	/// Response for ListSubscriptionsByTopic action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSubscriptionsByTopicResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Subscription[] Subscriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Response for ListTopics action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTopicsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Topic[] Topics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A wrapper type for the topic's Amazon Resource Name (ARN). To retrieve a topic's attributes, use <code>GetTopicAttributes</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Topic
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
	}
	
	/// <summary>
	/// The response for the OptInPhoneNumber action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptInPhoneNumberResponse
	{
	}
	
	/// <summary>
	/// Response for Publish action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SequenceNumber { get; set; }
	}
	
	/// <summary>
	/// <p>The user-specified message attribute value. For string data types, the value attribute has the same restrictions on the content as the message body. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/api/API_Publish.html">Publish</a>.</p> <p>Name, type, and value must not be empty or null. In addition, the message body should not be empty or null. All parts of the message attribute, including name, type, and value, are included in the message size restriction, which is currently 256 KB (262,144 bytes). For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMessageAttributes.html">Amazon SNS message attributes</a> and <a href="https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html">Publishing to a mobile phone</a> in the <i>Amazon SNS Developer Guide.</i> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageAttributeValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BinaryValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterValueException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointDisabledException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlatformApplicationDisabledException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KMSDisabledException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KMSInvalidStateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KMSNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KMSOptInRequired
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KMSThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KMSAccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishBatchResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PublishBatchResultEntry[] Successful { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchResultErrorEntry[] Failed { get; set; }
	}
	
	/// <summary>
	/// Encloses data related to a successful message in a batch request for topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishBatchResultEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SequenceNumber { get; set; }
	}
	
	/// <summary>
	/// Gives a detailed description of failed messages in the batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchResultErrorEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool SenderFault { get; set; }
	}
	
	/// <summary>
	/// Contains the details of a single Amazon SNS message along with an <code>Id</code> that identifies a message within the batch. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishBatchRequestEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageStructure { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageAttributeMap MessageAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageDeduplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageAttributeMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchEntryIdsNotDistinctException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRequestTooLongException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmptyBatchRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidBatchEntryIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyEntriesInBatchRequestException
	{
	}
	
	/// <summary>
	/// The response for the SetSMSAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetSMSAttributesResponse
	{
	}
	
	/// <summary>
	/// Response for Subscribe action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscribeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	/// <summary>
	/// The destination phone number's verification status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerifySMSSandboxPhoneNumberResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerificationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddPermissionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AWSAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ActionName { get; set; }
	}
	
	/// <summary>
	/// The input for the <code>CheckIfPhoneNumberIsOptedOut</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckIfPhoneNumberIsOptedOutInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// Input for ConfirmSubscription action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfirmSubscriptionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticateOnUnsubscribe { get; set; }
	}
	
	/// <summary>
	/// Input for CreatePlatformApplication action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePlatformApplicationInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MapStringToString Attributes { get; set; }
	}
	
	/// <summary>
	/// Input for CreatePlatformEndpoint action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePlatformEndpointInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlatformApplicationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomUserData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapStringToString Attributes { get; set; }
	}
	
	/// <summary>
	/// Supported language code for sending OTP message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LanguageCodeString
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-419")]
		esMinus419 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kr-KR")]
		krMinusKR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-CN")]
		zhMinusCN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-TW")]
		zhMinusTW = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSMSSandboxPhoneNumberInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCodeString LanguageCode { get; set; }
	}
	
	/// <summary>
	/// Input for CreateTopic action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTopicInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopicAttributesMap Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataProtectionPolicy { get; set; }
	}
	
	/// <summary>
	/// Input for DeleteEndpoint action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEndpointInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
	}
	
	/// <summary>
	/// Input for DeletePlatformApplication action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePlatformApplicationInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlatformApplicationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSMSSandboxPhoneNumberInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTopicInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataProtectionPolicyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
	}
	
	/// <summary>
	/// Input for GetEndpointAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEndpointAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
	}
	
	/// <summary>
	/// Input for GetPlatformApplicationAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPlatformApplicationAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlatformApplicationArn { get; set; }
	}
	
	/// <summary>
	/// The input for the <code>GetSMSAttributes</code> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSMSAttributesInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSMSSandboxAccountStatusInput
	{
	}
	
	/// <summary>
	/// Input for GetSubscriptionAttributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSubscriptionAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionArn { get; set; }
	}
	
	/// <summary>
	/// Input for GetTopicAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTopicAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
	}
	
	/// <summary>
	/// Input for ListEndpointsByPlatformApplication action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEndpointsByPlatformApplicationInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlatformApplicationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOriginationNumbersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// The input for the <code>ListPhoneNumbersOptedOut</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPhoneNumbersOptedOutInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Input for ListPlatformApplications action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPlatformApplicationsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSMSSandboxPhoneNumbersInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Input for ListSubscriptionsByTopic action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSubscriptionsByTopicInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Input for ListSubscriptions action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSubscriptionsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTopicsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Input for the OptInPhoneNumber action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptInPhoneNumberInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishBatchInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PublishBatchRequestEntry[] PublishBatchRequestEntries { get; set; }
	}
	
	/// <summary>
	/// Input for Publish action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageStructure { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageAttributeMap MessageAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageDeduplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutDataProtectionPolicyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataProtectionPolicy { get; set; }
	}
	
	/// <summary>
	/// Input for RemovePermission action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemovePermissionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
	}
	
	/// <summary>
	/// Input for SetEndpointAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetEndpointAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MapStringToString Attributes { get; set; }
	}
	
	/// <summary>
	/// Input for SetPlatformApplicationAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetPlatformApplicationAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlatformApplicationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MapStringToString Attributes { get; set; }
	}
	
	/// <summary>
	/// The input for the SetSMSAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetSMSAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public MapStringToString Attributes { get; set; }
	}
	
	/// <summary>
	/// Input for SetSubscriptionAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetSubscriptionAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeValue { get; set; }
	}
	
	/// <summary>
	/// Input for SetTopicAttributes action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetTopicAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeValue { get; set; }
	}
	
	/// <summary>
	/// Input for Subscribe action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscribeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubscriptionAttributesMap Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnSubscriptionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Input for Unsubscribe action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnsubscribeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerifySMSSandboxPhoneNumberInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OneTimePassword { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Adds a statement to a topic's access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.</p> <note> <p>To remove the ability to change topic permissions, you must deny permissions to the <code>AddPermission</code>, <code>RemovePermission</code>, and <code>SetTopicAttributes</code> actions in your IAM policy.</p> </note>
		/// GET_AddPermission #Action=AddPermission
		/// </summary>
		/// <param name="TopicArn">The ARN of the topic whose access control policy you wish to modify.</param>
		/// <param name="Label">A unique identifier for the new policy statement.</param>
		/// <param name="AWSAccountId">The Amazon Web Services account IDs of the users (principals) who will be given access to the specified actions. The users must have Amazon Web Services account, but do not need to be signed up for this service.</param>
		/// <param name="ActionName"><p>The action you want to allow for the specified principal(s).</p> <p>Valid values: Any Amazon SNS action name, for example <code>Publish</code>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_AddPermissionAsync(string TopicArn, string Label, string[] AWSAccountId, string[] ActionName, GET_AddPermissionAction Action, GET_AddPermissionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AddPermission?TopicArn=" + (TopicArn==null? "" : System.Uri.EscapeDataString(TopicArn))+"&Label=" + (Label==null? "" : System.Uri.EscapeDataString(Label))+"&"+string.Join("&", AWSAccountId.Select(z => $"AWSAccountId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ActionName.Select(z => $"ActionName={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out.</p> <p>To resume sending messages, you can opt in the number by using the <code>OptInPhoneNumber</code> action.</p>
		/// GET_CheckIfPhoneNumberIsOptedOut #Action=CheckIfPhoneNumberIsOptedOut
		/// </summary>
		/// <param name="phoneNumber">The phone number for which you want to check the opt out status.</param>
		/// <returns>Success</returns>
		public async Task GET_CheckIfPhoneNumberIsOptedOutAsync(string phoneNumber, GET_CheckIfPhoneNumberIsOptedOutAction Action, GET_CheckIfPhoneNumberIsOptedOutVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CheckIfPhoneNumberIsOptedOut?phoneNumber=" + (phoneNumber==null? "" : System.Uri.EscapeDataString(phoneNumber))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verifies an endpoint owner's intent to receive messages by validating the token sent to the endpoint by an earlier <code>Subscribe</code> action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the <code>AuthenticateOnUnsubscribe</code> flag is set to "true".
		/// GET_ConfirmSubscription #Action=ConfirmSubscription
		/// </summary>
		/// <param name="TopicArn">The ARN of the topic for which you wish to confirm a subscription.</param>
		/// <param name="Token">Short-lived token sent to an endpoint during the <code>Subscribe</code> action.</param>
		/// <param name="AuthenticateOnUnsubscribe">Disallows unauthenticated unsubscribes of the subscription. If the value of this parameter is <code>true</code> and the request has an Amazon Web Services signature, then only the topic owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action requires Amazon Web Services authentication. </param>
		/// <returns>Success</returns>
		public async Task GET_ConfirmSubscriptionAsync(string TopicArn, string Token, string AuthenticateOnUnsubscribe, GET_ConfirmSubscriptionAction Action, GET_ConfirmSubscriptionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ConfirmSubscription?TopicArn=" + (TopicArn==null? "" : System.Uri.EscapeDataString(TopicArn))+"&Token=" + (Token==null? "" : System.Uri.EscapeDataString(Token))+"&AuthenticateOnUnsubscribe=" + (AuthenticateOnUnsubscribe==null? "" : System.Uri.EscapeDataString(AuthenticateOnUnsubscribe))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify <code>PlatformPrincipal</code> and <code>PlatformCredential</code> attributes when using the <code>CreatePlatformApplication</code> action.</p> <p> <code>PlatformPrincipal</code> and <code>PlatformCredential</code> are received from the notification service.</p> <ul> <li> <p>For <code>ADM</code>, <code>PlatformPrincipal</code> is <code>client id</code> and <code>PlatformCredential</code> is <code>client secret</code>.</p> </li> <li> <p>For <code>Baidu</code>, <code>PlatformPrincipal</code> is <code>API key</code> and <code>PlatformCredential</code> is <code>secret key</code>.</p> </li> <li> <p>For <code>APNS</code> and <code>APNS_SANDBOX</code> using certificate credentials, <code>PlatformPrincipal</code> is <code>SSL certificate</code> and <code>PlatformCredential</code> is <code>private key</code>.</p> </li> <li> <p>For <code>APNS</code> and <code>APNS_SANDBOX</code> using token credentials, <code>PlatformPrincipal</code> is <code>signing key ID</code> and <code>PlatformCredential</code> is <code>signing key</code>.</p> </li> <li> <p>For <code>GCM</code> (Firebase Cloud Messaging), there is no <code>PlatformPrincipal</code> and the <code>PlatformCredential</code> is <code>API key</code>.</p> </li> <li> <p>For <code>MPNS</code>, <code>PlatformPrincipal</code> is <code>TLS certificate</code> and <code>PlatformCredential</code> is <code>private key</code>.</p> </li> <li> <p>For <code>WNS</code>, <code>PlatformPrincipal</code> is <code>Package Security Identifier</code> and <code>PlatformCredential</code> is <code>secret key</code>.</p> </li> </ul> <p>You can use the returned <code>PlatformApplicationArn</code> as an attribute for the <code>CreatePlatformEndpoint</code> action.</p>
		/// GET_CreatePlatformApplication #Action=CreatePlatformApplication
		/// </summary>
		/// <param name="Name">Application names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, hyphens, and periods, and must be between 1 and 256 characters long.</param>
		/// <param name="Platform">The following platforms are supported: ADM (Amazon Device Messaging), APNS (Apple Push Notification Service), APNS_SANDBOX, and GCM (Firebase Cloud Messaging).</param>
		/// <param name="Attributes">For a list of attributes, see <a href="https://docs.aws.amazon.com/sns/latest/api/API_SetPlatformApplicationAttributes.html">SetPlatformApplicationAttributes</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreatePlatformApplicationAsync(string Name, string Platform, System.Collections.Generic.Dictionary<string, string> Attributes, GET_CreatePlatformApplicationAction Action, GET_CreatePlatformApplicationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreatePlatformApplication?Name=" + (Name==null? "" : System.Uri.EscapeDataString(Name))+"&Platform=" + (Platform==null? "" : System.Uri.EscapeDataString(Platform))+"&Attributes=" + Attributes+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. <code>CreatePlatformEndpoint</code> requires the <code>PlatformApplicationArn</code> that is returned from <code>CreatePlatformApplication</code>. You can use the returned <code>EndpointArn</code> to send a message to a mobile app or by the <code>Subscribe</code> action for subscription to a topic. The <code>CreatePlatformEndpoint</code> action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint's ARN is returned without creating a new endpoint. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p> <p>When using <code>CreatePlatformEndpoint</code> with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html">Creating an Amazon SNS Endpoint for Baidu</a>. </p>
		/// GET_CreatePlatformEndpoint #Action=CreatePlatformEndpoint
		/// </summary>
		/// <param name="PlatformApplicationArn">PlatformApplicationArn returned from CreatePlatformApplication is used to create a an endpoint.</param>
		/// <param name="Token">Unique identifier created by the notification service for an app on a device. The specific name for Token will vary, depending on which notification service is being used. For example, when using APNS as the notification service, you need the device token. Alternatively, when using GCM (Firebase Cloud Messaging) or ADM, the device token equivalent is called the registration ID.</param>
		/// <param name="CustomUserData">Arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.</param>
		/// <param name="Attributes">For a list of attributes, see <a href="https://docs.aws.amazon.com/sns/latest/api/API_SetEndpointAttributes.html">SetEndpointAttributes</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreatePlatformEndpointAsync(string PlatformApplicationArn, string Token, string CustomUserData, System.Collections.Generic.Dictionary<string, string> Attributes, GET_CreatePlatformEndpointAction Action, GET_CreatePlatformEndpointVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreatePlatformEndpoint?PlatformApplicationArn=" + (PlatformApplicationArn==null? "" : System.Uri.EscapeDataString(PlatformApplicationArn))+"&Token=" + (Token==null? "" : System.Uri.EscapeDataString(Token))+"&CustomUserData=" + (CustomUserData==null? "" : System.Uri.EscapeDataString(CustomUserData))+"&Attributes=" + Attributes+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number.</p> <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in the <i>Amazon SNS Developer Guide</i>.</p>
		/// GET_CreateSMSSandboxPhoneNumber #Action=CreateSMSSandboxPhoneNumber
		/// </summary>
		/// <param name="PhoneNumber">The destination phone number to verify. On verification, Amazon SNS adds this phone number to the list of verified phone numbers that you can send SMS messages to.</param>
		/// <param name="LanguageCode">The language to use for sending the OTP. The default value is <code>en-US</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateSMSSandboxPhoneNumberAsync(string PhoneNumber, GET_CreateSMSSandboxPhoneNumberLanguageCode LanguageCode, GET_CreateSMSSandboxPhoneNumberAction Action, GET_CreateSMSSandboxPhoneNumberVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSMSSandboxPhoneNumber?PhoneNumber=" + (PhoneNumber==null? "" : System.Uri.EscapeDataString(PhoneNumber))+"&LanguageCode=" + LanguageCode+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html">Creating an Amazon SNS topic</a> in the <i>Amazon SNS Developer Guide</i>. This action is idempotent, so if the requester already owns a topic with the specified name, that topic's ARN is returned without creating a new topic.
		/// GET_CreateTopic #Action=CreateTopic
		/// </summary>
		/// <param name="Name"><p>The name of the topic you want to create.</p> <p>Constraints: Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long.</p> <p>For a FIFO (first-in-first-out) topic, the name must end with the <code>.fifo</code> suffix. </p></param>
		/// <param name="Attributes"><p>A map of attributes with their corresponding values.</p> <p>The following lists the names, descriptions, and values of the special request parameters that the <code>CreateTopic</code> action uses:</p> <ul> <li> <p> <code>DeliveryPolicy</code> – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.</p> </li> <li> <p> <code>DisplayName</code> – The display name to use for a topic with SMS subscriptions.</p> </li> <li> <p> <code>FifoTopic</code> – Set to true to create a FIFO topic.</p> </li> <li> <p> <code>Policy</code> – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.</p> </li> <li> <p> <code>SignatureVersion</code> – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, <code>SignatureVersion</code> is set to <code>1</code>.</p> </li> <li> <p> <code>TracingConfig</code> – Tracing mode of an Amazon SNS topic. By default <code>TracingConfig</code> is set to <code>PassThrough</code>, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to <code>Active</code>, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.</p> </li> </ul> <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html">server-side encryption</a>:</p> <ul> <li> <p> <code>KmsMasterKeyId</code> – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms">Key Terms</a>. For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>Key Management Service API Reference</i>. </p> </li> </ul> <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html">FIFO topics</a>:</p> <ul> <li> <p> <code>FifoTopic</code> – When this is set to <code>true</code>, a FIFO topic is created.</p> </li> <li> <p> <code>ContentBasedDeduplication</code> – Enables content-based deduplication for FIFO topics.</p> <ul> <li> <p>By default, <code>ContentBasedDeduplication</code> is set to <code>false</code>. If you create a FIFO topic and this attribute is <code>false</code>, you must specify a value for the <code>MessageDeduplicationId</code> parameter for the <a href="https://docs.aws.amazon.com/sns/latest/api/API_Publish.html">Publish</a> action. </p> </li> <li> <p>When you set <code>ContentBasedDeduplication</code> to <code>true</code>, Amazon SNS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using the body of the message (but not the attributes of the message).</p> <p>(Optional) To override the generated value, you can specify a value for the <code>MessageDeduplicationId</code> parameter for the <code>Publish</code> action.</p> </li> </ul> </li> </ul></param>
		/// <param name="Tags"><p>The list of tags to add to a new topic.</p> <note> <p>To be able to tag a topic on creation, you must have the <code>sns:CreateTopic</code> and <code>sns:TagResource</code> permissions.</p> </note></param>
		/// <param name="DataProtectionPolicy"><p>The body of the policy document you want to use for this topic.</p> <p>You can only add one policy per topic.</p> <p>The policy must be in JSON string format.</p> <p>Length Constraints: Maximum length of 30,720.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateTopicAsync(string Name, System.Collections.Generic.Dictionary<string, string> Attributes, Tag[] Tags, string DataProtectionPolicy, GET_CreateTopicAction Action, GET_CreateTopicVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTopic?Name=" + (Name==null? "" : System.Uri.EscapeDataString(Name))+"&Attributes=" + Attributes+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&DataProtectionPolicy=" + (DataProtectionPolicy==null? "" : System.Uri.EscapeDataString(DataProtectionPolicy))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p> <p>When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.</p>
		/// GET_DeleteEndpoint #Action=DeleteEndpoint
		/// </summary>
		/// <param name="EndpointArn">EndpointArn of endpoint to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteEndpointAsync(string EndpointArn, GET_DeleteEndpointAction Action, GET_DeleteEndpointVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteEndpoint?EndpointArn=" + (EndpointArn==null? "" : System.Uri.EscapeDataString(EndpointArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>.
		/// GET_DeletePlatformApplication #Action=DeletePlatformApplication
		/// </summary>
		/// <param name="PlatformApplicationArn">PlatformApplicationArn of platform application object to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeletePlatformApplicationAsync(string PlatformApplicationArn, GET_DeletePlatformApplicationAction Action, GET_DeletePlatformApplicationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeletePlatformApplication?PlatformApplicationArn=" + (PlatformApplicationArn==null? "" : System.Uri.EscapeDataString(PlatformApplicationArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an Amazon Web Services account's verified or pending phone number from the SMS sandbox.</p> <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in the <i>Amazon SNS Developer Guide</i>.</p>
		/// GET_DeleteSMSSandboxPhoneNumber #Action=DeleteSMSSandboxPhoneNumber
		/// </summary>
		/// <param name="PhoneNumber">The destination phone number to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSMSSandboxPhoneNumberAsync(string PhoneNumber, GET_DeleteSMSSandboxPhoneNumberAction Action, GET_DeleteSMSSandboxPhoneNumberVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSMSSandboxPhoneNumber?PhoneNumber=" + (PhoneNumber==null? "" : System.Uri.EscapeDataString(PhoneNumber))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
		/// GET_DeleteTopic #Action=DeleteTopic
		/// </summary>
		/// <param name="TopicArn">The ARN of the topic you want to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTopicAsync(string TopicArn, GET_DeleteTopicAction Action, GET_DeleteTopicVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTopic?TopicArn=" + (TopicArn==null? "" : System.Uri.EscapeDataString(TopicArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified inline <code>DataProtectionPolicy</code> document that is stored in the specified Amazon SNS topic.
		/// GET_GetDataProtectionPolicy #Action=GetDataProtectionPolicy
		/// </summary>
		/// <param name="ResourceArn"><p>The ARN of the topic whose <code>DataProtectionPolicy</code> you want to get.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the Amazon Web Services General Reference.</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetDataProtectionPolicyAsync(string ResourceArn, GET_GetDataProtectionPolicyAction Action, GET_GetDataProtectionPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetDataProtectionPolicy?ResourceArn=" + (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>.
		/// GET_GetEndpointAttributes #Action=GetEndpointAttributes
		/// </summary>
		/// <param name="EndpointArn">EndpointArn for GetEndpointAttributes input.</param>
		/// <returns>Success</returns>
		public async Task GET_GetEndpointAttributesAsync(string EndpointArn, GET_GetEndpointAttributesAction Action, GET_GetEndpointAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetEndpointAttributes?EndpointArn=" + (EndpointArn==null? "" : System.Uri.EscapeDataString(EndpointArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>.
		/// GET_GetPlatformApplicationAttributes #Action=GetPlatformApplicationAttributes
		/// </summary>
		/// <param name="PlatformApplicationArn">PlatformApplicationArn for GetPlatformApplicationAttributesInput.</param>
		/// <returns>Success</returns>
		public async Task GET_GetPlatformApplicationAttributesAsync(string PlatformApplicationArn, GET_GetPlatformApplicationAttributesAction Action, GET_GetPlatformApplicationAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetPlatformApplicationAttributes?PlatformApplicationArn=" + (PlatformApplicationArn==null? "" : System.Uri.EscapeDataString(PlatformApplicationArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the settings for sending SMS messages from your Amazon Web Services account.</p> <p>These settings are set with the <code>SetSMSAttributes</code> action.</p>
		/// GET_GetSMSAttributes #Action=GetSMSAttributes
		/// </summary>
		/// <param name="attributes"><p>A list of the individual attribute names, such as <code>MonthlySpendLimit</code>, for which you want values.</p> <p>For all attribute names, see <a href="https://docs.aws.amazon.com/sns/latest/api/API_SetSMSAttributes.html">SetSMSAttributes</a>.</p> <p>If you don't use this parameter, Amazon SNS returns all SMS attributes.</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetSMSAttributesAsync(string[] attributes, GET_GetSMSAttributesAction Action, GET_GetSMSAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetSMSAttributes?"+string.Join("&", attributes.Select(z => $"attributes={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region.</p> <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in the <i>Amazon SNS Developer Guide</i>.</p>
		/// GET_GetSMSSandboxAccountStatus #Action=GetSMSSandboxAccountStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_GetSMSSandboxAccountStatusAsync(GET_GetSMSSandboxAccountStatusAction Action, GET_GetSMSSandboxAccountStatusVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetSMSSandboxAccountStatus?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all of the properties of a subscription.
		/// GET_GetSubscriptionAttributes #Action=GetSubscriptionAttributes
		/// </summary>
		/// <param name="SubscriptionArn">The ARN of the subscription whose properties you want to get.</param>
		/// <returns>Success</returns>
		public async Task GET_GetSubscriptionAttributesAsync(string SubscriptionArn, GET_GetSubscriptionAttributesAction Action, GET_GetSubscriptionAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetSubscriptionAttributes?SubscriptionArn=" + (SubscriptionArn==null? "" : System.Uri.EscapeDataString(SubscriptionArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
		/// GET_GetTopicAttributes #Action=GetTopicAttributes
		/// </summary>
		/// <param name="TopicArn">The ARN of the topic whose properties you want to get.</param>
		/// <returns>Success</returns>
		public async Task GET_GetTopicAttributesAsync(string TopicArn, GET_GetTopicAttributesAction Action, GET_GetTopicAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetTopicAttributes?TopicArn=" + (TopicArn==null? "" : System.Uri.EscapeDataString(TopicArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for <code>ListEndpointsByPlatformApplication</code> are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call <code>ListEndpointsByPlatformApplication</code> again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p> <p>This action is throttled at 30 transactions per second (TPS).</p>
		/// GET_ListEndpointsByPlatformApplication #Action=ListEndpointsByPlatformApplication
		/// </summary>
		/// <param name="PlatformApplicationArn">PlatformApplicationArn for ListEndpointsByPlatformApplicationInput action.</param>
		/// <param name="NextToken">NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results.</param>
		/// <returns>Success</returns>
		public async Task GET_ListEndpointsByPlatformApplicationAsync(string PlatformApplicationArn, string NextToken, GET_ListEndpointsByPlatformApplicationAction Action, GET_ListEndpointsByPlatformApplicationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListEndpointsByPlatformApplication?PlatformApplicationArn=" + (PlatformApplicationArn==null? "" : System.Uri.EscapeDataString(PlatformApplicationArn))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the calling Amazon Web Services account's dedicated origination numbers and their metadata. For more information about origination numbers, see <a href="https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html">Origination numbers</a> in the <i>Amazon SNS Developer Guide</i>.
		/// GET_ListOriginationNumbers #Action=ListOriginationNumbers
		/// </summary>
		/// <param name="NextToken">Token that the previous <code>ListOriginationNumbers</code> request returns.</param>
		/// <param name="MaxResults">The maximum number of origination numbers to return.</param>
		/// <returns>Success</returns>
		public async Task GET_ListOriginationNumbersAsync(string NextToken, int MaxResults, GET_ListOriginationNumbersAction Action, GET_ListOriginationNumbersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListOriginationNumbers?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them.</p> <p>The results for <code>ListPhoneNumbersOptedOut</code> are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a <code>NextToken</code> string will be returned. To receive the next page, you call <code>ListPhoneNumbersOptedOut</code> again using the <code>NextToken</code> string received from the previous call. When there are no more records to return, <code>NextToken</code> will be null.</p>
		/// GET_ListPhoneNumbersOptedOut #Action=ListPhoneNumbersOptedOut
		/// </summary>
		/// <param name="nextToken">A <code>NextToken</code> string is used when you call the <code>ListPhoneNumbersOptedOut</code> action to retrieve additional records that are available after the first page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_ListPhoneNumbersOptedOutAsync(string nextToken, GET_ListPhoneNumbersOptedOutAction Action, GET_ListPhoneNumbersOptedOutVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListPhoneNumbersOptedOut?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for <code>ListPlatformApplications</code> are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call <code>ListPlatformApplications</code> using the NextToken string received from the previous call. When there are no more records to return, <code>NextToken</code> will be null. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p> <p>This action is throttled at 15 transactions per second (TPS).</p>
		/// GET_ListPlatformApplications #Action=ListPlatformApplications
		/// </summary>
		/// <param name="NextToken">NextToken string is used when calling ListPlatformApplications action to retrieve additional records that are available after the first page results.</param>
		/// <returns>Success</returns>
		public async Task GET_ListPlatformApplicationsAsync(string NextToken, GET_ListPlatformApplicationsAction Action, GET_ListPlatformApplicationsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListPlatformApplications?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the calling Amazon Web Services account's current verified and pending destination phone numbers in the SMS sandbox.</p> <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in the <i>Amazon SNS Developer Guide</i>.</p>
		/// GET_ListSMSSandboxPhoneNumbers #Action=ListSMSSandboxPhoneNumbers
		/// </summary>
		/// <param name="NextToken">Token that the previous <code>ListSMSSandboxPhoneNumbersInput</code> request returns.</param>
		/// <param name="MaxResults">The maximum number of phone numbers to return.</param>
		/// <returns>Success</returns>
		public async Task GET_ListSMSSandboxPhoneNumbersAsync(string NextToken, int MaxResults, GET_ListSMSSandboxPhoneNumbersAction Action, GET_ListSMSSandboxPhoneNumbersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListSMSSandboxPhoneNumbers?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of the requester's subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a <code>NextToken</code> is also returned. Use the <code>NextToken</code> parameter in a new <code>ListSubscriptions</code> call to get further results.</p> <p>This action is throttled at 30 transactions per second (TPS).</p>
		/// GET_ListSubscriptions #Action=ListSubscriptions
		/// </summary>
		/// <param name="NextToken">Token returned by the previous <code>ListSubscriptions</code> request.</param>
		/// <returns>Success</returns>
		public async Task GET_ListSubscriptionsAsync(string NextToken, GET_ListSubscriptionsAction Action, GET_ListSubscriptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListSubscriptions?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a <code>NextToken</code> is also returned. Use the <code>NextToken</code> parameter in a new <code>ListSubscriptionsByTopic</code> call to get further results.</p> <p>This action is throttled at 30 transactions per second (TPS).</p>
		/// GET_ListSubscriptionsByTopic #Action=ListSubscriptionsByTopic
		/// </summary>
		/// <param name="TopicArn">The ARN of the topic for which you wish to find subscriptions.</param>
		/// <param name="NextToken">Token returned by the previous <code>ListSubscriptionsByTopic</code> request.</param>
		/// <returns>Success</returns>
		public async Task GET_ListSubscriptionsByTopicAsync(string TopicArn, string NextToken, GET_ListSubscriptionsByTopicAction Action, GET_ListSubscriptionsByTopicVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListSubscriptionsByTopic?TopicArn=" + (TopicArn==null? "" : System.Uri.EscapeDataString(TopicArn))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all tags added to the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the <i>Amazon Simple Notification Service Developer Guide</i>.
		/// GET_ListTagsForResource #Action=ListTagsForResource
		/// </summary>
		/// <param name="ResourceArn">The ARN of the topic for which to list tags.</param>
		/// <returns>Success</returns>
		public async Task GET_ListTagsForResourceAsync(string ResourceArn, GET_ListTagsForResourceAction Action, GET_ListTagsForResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListTagsForResource?ResourceArn=" + (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of the requester's topics. Each call returns a limited list of topics, up to 100. If there are more topics, a <code>NextToken</code> is also returned. Use the <code>NextToken</code> parameter in a new <code>ListTopics</code> call to get further results.</p> <p>This action is throttled at 30 transactions per second (TPS).</p>
		/// GET_ListTopics #Action=ListTopics
		/// </summary>
		/// <param name="NextToken">Token returned by the previous <code>ListTopics</code> request.</param>
		/// <returns>Success</returns>
		public async Task GET_ListTopicsAsync(string NextToken, GET_ListTopicsAction Action, GET_ListTopicsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListTopics?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number.</p> <p>You can opt in a phone number only once every 30 days.</p>
		/// GET_OptInPhoneNumber #Action=OptInPhoneNumber
		/// </summary>
		/// <param name="phoneNumber">The phone number to opt in. Use E.164 format.</param>
		/// <returns>Success</returns>
		public async Task GET_OptInPhoneNumberAsync(string phoneNumber, GET_OptInPhoneNumberAction Action, GET_OptInPhoneNumberVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=OptInPhoneNumber?phoneNumber=" + (phoneNumber==null? "" : System.Uri.EscapeDataString(phoneNumber))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the <code>TargetArn</code>).</p> <p>If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint.</p> <p>When a <code>messageId</code> is returned, the message is saved and Amazon SNS immediately delivers it to subscribers.</p> <p>To use the <code>Publish</code> action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the <code>CreatePlatformEndpoint</code> action. </p> <p>For more information about formatting messages, see <a href="https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html">Send Custom Platform-Specific Payloads in Messages to Mobile Devices</a>. </p> <important> <p>You can publish messages only to topics and endpoints in the same Amazon Web Services Region.</p> </important>
		/// GET_Publish #Action=Publish
		/// </summary>
		/// <param name="TopicArn"><p>The topic you want to publish to.</p> <p>If you don't specify a value for the <code>TopicArn</code> parameter, you must specify a value for the <code>PhoneNumber</code> or <code>TargetArn</code> parameters.</p></param>
		/// <param name="TargetArn">If you don't specify a value for the <code>TargetArn</code> parameter, you must specify a value for the <code>PhoneNumber</code> or <code>TopicArn</code> parameters.</param>
		/// <param name="PhoneNumber"><p>The phone number to which you want to deliver an SMS message. Use E.164 format.</p> <p>If you don't specify a value for the <code>PhoneNumber</code> parameter, you must specify a value for the <code>TargetArn</code> or <code>TopicArn</code> parameters.</p></param>
		/// <param name="Message"><p>The message you want to send.</p> <p>If you are publishing to a topic and you want to send the same message to all transport protocols, include the text of the message as a String value. If you want to send different messages for each transport protocol, set the value of the <code>MessageStructure</code> parameter to <code>json</code> and use a JSON object for the <code>Message</code> parameter. </p> <p/> <p>Constraints:</p> <ul> <li> <p>With the exception of SMS, messages must be UTF-8 encoded strings and at most 256 KB in size (262,144 bytes, not 262,144 characters).</p> </li> <li> <p>For SMS, each message can contain up to 140 characters. This character limit depends on the encoding schema. For example, an SMS message can contain 160 GSM characters, 140 ASCII characters, or 70 UCS-2 characters.</p> <p>If you publish a message that exceeds this size limit, Amazon SNS sends the message as multiple messages, each fitting within the size limit. Messages aren't truncated mid-word but are cut off at whole-word boundaries.</p> <p>The total size limit for a single SMS <code>Publish</code> action is 1,600 characters.</p> </li> </ul> <p>JSON-specific constraints:</p> <ul> <li> <p>Keys in the JSON object that correspond to supported transport protocols must have simple JSON string values.</p> </li> <li> <p>The values will be parsed (unescaped) before they are used in outgoing messages.</p> </li> <li> <p>Outbound notifications are JSON encoded (meaning that the characters will be reescaped for sending).</p> </li> <li> <p>Values have a minimum length of 0 (the empty string, "", is allowed).</p> </li> <li> <p>Values have a maximum length bounded by the overall message size (so, including multiple protocols may limit message sizes).</p> </li> <li> <p>Non-string values will cause the key to be ignored.</p> </li> <li> <p>Keys that do not correspond to supported transport protocols are ignored.</p> </li> <li> <p>Duplicate keys are not allowed.</p> </li> <li> <p>Failure to parse or validate any key or value in the message will cause the <code>Publish</code> call to return an error (no partial delivery).</p> </li> </ul></param>
		/// <param name="Subject"><p>Optional parameter to be used as the "Subject" line when the message is delivered to email endpoints. This field will also be included, if present, in the standard JSON messages delivered to other endpoints.</p> <p>Constraints: Subjects must be ASCII text that begins with a letter, number, or punctuation mark; must not include line breaks or control characters; and must be less than 100 characters long.</p></param>
		/// <param name="MessageStructure"><p>Set <code>MessageStructure</code> to <code>json</code> if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set <code>MessageStructure</code> to <code>json</code>, the value of the <code>Message</code> parameter must: </p> <ul> <li> <p>be a syntactically valid JSON object; and</p> </li> <li> <p>contain at least a top-level JSON key of "default" with a value that is a string.</p> </li> </ul> <p>You can define other top-level keys that define the message you want to send to a specific transport protocol (e.g., "http").</p> <p>Valid value: <code>json</code> </p></param>
		/// <param name="MessageAttributes">Message attributes for Publish action.</param>
		/// <param name="MessageDeduplicationId"><p>This parameter applies only to FIFO (first-in-first-out) topics. The <code>MessageDeduplicationId</code> can contain up to 128 alphanumeric characters <code>(a-z, A-Z, 0-9)</code> and punctuation <code>(!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~)</code>.</p> <p>Every message must have a unique <code>MessageDeduplicationId</code>, which is a token used for deduplication of sent messages. If a message with a particular <code>MessageDeduplicationId</code> is sent successfully, any message sent with the same <code>MessageDeduplicationId</code> during the 5-minute deduplication interval is treated as a duplicate. </p> <p>If the topic has <code>ContentBasedDeduplication</code> set, the system generates a <code>MessageDeduplicationId</code> based on the contents of the message. Your <code>MessageDeduplicationId</code> overrides the generated one.</p></param>
		/// <param name="MessageGroupId"><p>This parameter applies only to FIFO (first-in-first-out) topics. The <code>MessageGroupId</code> can contain up to 128 alphanumeric characters <code>(a-z, A-Z, 0-9)</code> and punctuation <code>(!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~)</code>.</p> <p>The <code>MessageGroupId</code> is a tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). Every message must include a <code>MessageGroupId</code>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_PublishAsync(string TopicArn, string TargetArn, string PhoneNumber, string Message, string Subject, string MessageStructure, System.Collections.Generic.Dictionary<string, MessageAttributeValue> MessageAttributes, string MessageDeduplicationId, string MessageGroupId, GET_PublishAction Action, GET_PublishVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=Publish?TopicArn=" + (TopicArn==null? "" : System.Uri.EscapeDataString(TopicArn))+"&TargetArn=" + (TargetArn==null? "" : System.Uri.EscapeDataString(TargetArn))+"&PhoneNumber=" + (PhoneNumber==null? "" : System.Uri.EscapeDataString(PhoneNumber))+"&Message=" + (Message==null? "" : System.Uri.EscapeDataString(Message))+"&Subject=" + (Subject==null? "" : System.Uri.EscapeDataString(Subject))+"&MessageStructure=" + (MessageStructure==null? "" : System.Uri.EscapeDataString(MessageStructure))+"&MessageAttributes=" + MessageAttributes+"&MessageDeduplicationId=" + (MessageDeduplicationId==null? "" : System.Uri.EscapeDataString(MessageDeduplicationId))+"&MessageGroupId=" + (MessageGroupId==null? "" : System.Uri.EscapeDataString(MessageGroupId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Publishes up to ten messages to the specified topic. This is a batch version of <code>Publish</code>. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.</p> <p>The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of <code>200</code>.</p> <p>The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). </p> <p>Some actions take lists of parameters. These lists are specified using the <code>param.n</code> notation. Values of <code>n</code> are integers starting from 1. For example, a parameter list with two elements looks like this: </p> <p>&amp;AttributeName.1=first</p> <p>&amp;AttributeName.2=second</p> <p>If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint.</p> <p>When a <code>messageId</code> is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.</p>
		/// GET_PublishBatch #Action=PublishBatch
		/// </summary>
		/// <param name="TopicArn">The Amazon resource name (ARN) of the topic you want to batch publish to.</param>
		/// <param name="PublishBatchRequestEntries">A list of <code>PublishBatch</code> request entries to be sent to the SNS topic.</param>
		/// <returns>Success</returns>
		public async Task GET_PublishBatchAsync(string TopicArn, PublishBatchRequestEntry[] PublishBatchRequestEntries, GET_PublishBatchAction Action, GET_PublishBatchVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PublishBatch?TopicArn=" + (TopicArn==null? "" : System.Uri.EscapeDataString(TopicArn))+"&"+string.Join("&", PublishBatchRequestEntries.Select(z => $"PublishBatchRequestEntries={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds or updates an inline policy document that is stored in the specified Amazon SNS topic.
		/// GET_PutDataProtectionPolicy #Action=PutDataProtectionPolicy
		/// </summary>
		/// <param name="ResourceArn"><p>The ARN of the topic whose <code>DataProtectionPolicy</code> you want to add or update.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the Amazon Web Services General Reference.</p></param>
		/// <param name="DataProtectionPolicy"><p>The JSON serialization of the topic's <code>DataProtectionPolicy</code>.</p> <p>The <code>DataProtectionPolicy</code> must be in JSON string format.</p> <p>Length Constraints: Maximum length of 30,720.</p></param>
		/// <returns>Success</returns>
		public async Task GET_PutDataProtectionPolicyAsync(string ResourceArn, string DataProtectionPolicy, GET_PutDataProtectionPolicyAction Action, GET_PutDataProtectionPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutDataProtectionPolicy?ResourceArn=" + (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn))+"&DataProtectionPolicy=" + (DataProtectionPolicy==null? "" : System.Uri.EscapeDataString(DataProtectionPolicy))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes a statement from a topic's access control policy.</p> <note> <p>To remove the ability to change topic permissions, you must deny permissions to the <code>AddPermission</code>, <code>RemovePermission</code>, and <code>SetTopicAttributes</code> actions in your IAM policy.</p> </note>
		/// GET_RemovePermission #Action=RemovePermission
		/// </summary>
		/// <param name="TopicArn">The ARN of the topic whose access control policy you wish to modify.</param>
		/// <param name="Label">The unique label of the statement you want to remove.</param>
		/// <returns>Success</returns>
		public async Task GET_RemovePermissionAsync(string TopicArn, string Label, GET_RemovePermissionAction Action, GET_RemovePermissionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RemovePermission?TopicArn=" + (TopicArn==null? "" : System.Uri.EscapeDataString(TopicArn))+"&Label=" + (Label==null? "" : System.Uri.EscapeDataString(Label))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>.
		/// GET_SetEndpointAttributes #Action=SetEndpointAttributes
		/// </summary>
		/// <param name="EndpointArn">EndpointArn used for SetEndpointAttributes action.</param>
		/// <param name="Attributes"><p>A map of the endpoint attributes. Attributes in this map include the following:</p> <ul> <li> <p> <code>CustomUserData</code> – arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.</p> </li> <li> <p> <code>Enabled</code> – flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.</p> </li> <li> <p> <code>Token</code> – device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_SetEndpointAttributesAsync(string EndpointArn, System.Collections.Generic.Dictionary<string, string> Attributes, GET_SetEndpointAttributesAction Action, GET_SetEndpointAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetEndpointAttributes?EndpointArn=" + (EndpointArn==null? "" : System.Uri.EscapeDataString(EndpointArn))+"&Attributes=" + Attributes+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. For information on configuring attributes for message delivery status, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html">Using Amazon SNS Application Attributes for Message Delivery Status</a>.
		/// GET_SetPlatformApplicationAttributes #Action=SetPlatformApplicationAttributes
		/// </summary>
		/// <param name="PlatformApplicationArn">PlatformApplicationArn for SetPlatformApplicationAttributes action.</param>
		/// <param name="Attributes"><p>A map of the platform application attributes. Attributes in this map include the following:</p> <ul> <li> <p> <code>PlatformCredential</code> – The credential received from the notification service.</p> <ul> <li> <p>For ADM, <code>PlatformCredential</code>is client secret.</p> </li> <li> <p>For Apple Services using certificate credentials, <code>PlatformCredential</code> is private key.</p> </li> <li> <p>For Apple Services using token credentials, <code>PlatformCredential</code> is signing key.</p> </li> <li> <p>For GCM (Firebase Cloud Messaging), <code>PlatformCredential</code> is API key. </p> </li> </ul> </li> </ul> <ul> <li> <p> <code>PlatformPrincipal</code> – The principal received from the notification service.</p> <ul> <li> <p>For ADM, <code>PlatformPrincipal</code>is client id.</p> </li> <li> <p>For Apple Services using certificate credentials, <code>PlatformPrincipal</code> is SSL certificate.</p> </li> <li> <p>For Apple Services using token credentials, <code>PlatformPrincipal</code> is signing key ID.</p> </li> <li> <p>For GCM (Firebase Cloud Messaging), there is no <code>PlatformPrincipal</code>. </p> </li> </ul> </li> </ul> <ul> <li> <p> <code>EventEndpointCreated</code> – Topic ARN to which <code>EndpointCreated</code> event notifications are sent.</p> </li> <li> <p> <code>EventEndpointDeleted</code> – Topic ARN to which <code>EndpointDeleted</code> event notifications are sent.</p> </li> <li> <p> <code>EventEndpointUpdated</code> – Topic ARN to which <code>EndpointUpdate</code> event notifications are sent.</p> </li> <li> <p> <code>EventDeliveryFailure</code> – Topic ARN to which <code>DeliveryFailure</code> event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.</p> </li> <li> <p> <code>SuccessFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li> <li> <p> <code>FailureFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li> <li> <p> <code>SuccessFeedbackSampleRate</code> – Sample rate percentage (0-100) of successfully delivered messages.</p> </li> </ul> <p>The following attributes only apply to <code>APNs</code> token-based authentication:</p> <ul> <li> <p> <code>ApplePlatformTeamID</code> – The identifier that's assigned to your Apple developer account team.</p> </li> <li> <p> <code>ApplePlatformBundleID</code> – The bundle identifier that's assigned to your iOS app.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_SetPlatformApplicationAttributesAsync(string PlatformApplicationArn, System.Collections.Generic.Dictionary<string, string> Attributes, GET_SetPlatformApplicationAttributesAction Action, GET_SetPlatformApplicationAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetPlatformApplicationAttributes?PlatformApplicationArn=" + (PlatformApplicationArn==null? "" : System.Uri.EscapeDataString(PlatformApplicationArn))+"&Attributes=" + Attributes+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports.</p> <p>You can override some of these settings for a single message when you use the <code>Publish</code> action with the <code>MessageAttributes.entry.N</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html">Publishing to a mobile phone</a> in the <i>Amazon SNS Developer Guide</i>.</p> <note> <p>To use this operation, you must grant the Amazon SNS service principal (<code>sns.amazonaws.com</code>) permission to perform the <code>s3:ListBucket</code> action. </p> </note>
		/// GET_SetSMSAttributes #Action=SetSMSAttributes
		/// </summary>
		/// <param name="attributes"><p>The default settings for sending SMS messages from your Amazon Web Services account. You can set values for the following attribute names:</p> <p> <code>MonthlySpendLimit</code> – The maximum amount in USD that you are willing to spend each month to send SMS messages. When Amazon SNS determines that sending an SMS message would incur a cost that exceeds this limit, it stops sending SMS messages within minutes.</p> <important> <p>Amazon SNS stops sending SMS messages within minutes of the limit being crossed. During that interval, if you continue to send SMS messages, you will incur costs that exceed your limit.</p> </important> <p>By default, the spend limit is set to the maximum allowed by Amazon SNS. If you want to raise the limit, submit an <a href="https://console.aws.amazon.com/support/home#/case/create?issueType=service-limit-increase&amp;limitType=service-code-sns">SNS Limit Increase case</a>. For <b>New limit value</b>, enter your desired monthly spend limit. In the <b>Use Case Description</b> field, explain that you are requesting an SMS monthly spend limit increase.</p> <p> <code>DeliveryStatusIAMRole</code> – The ARN of the IAM role that allows Amazon SNS to write logs about SMS deliveries in CloudWatch Logs. For each SMS message that you send, Amazon SNS writes a log that includes the message price, the success or failure status, the reason for failure (if the message failed), the message dwell time, and other information.</p> <p> <code>DeliveryStatusSuccessSamplingRate</code> – The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value can be an integer from 0 - 100. For example, to write logs only for failed deliveries, set this value to <code>0</code>. To write logs for 10% of your successful deliveries, set it to <code>10</code>.</p> <p> <code>DefaultSenderID</code> – A string, such as your business brand, that is displayed as the sender on the receiving device. Support for sender IDs varies by country. The sender ID can be 1 - 11 alphanumeric characters, and it must contain at least one letter.</p> <p> <code>DefaultSMSType</code> – The type of SMS message that you will send by default. You can assign the following values:</p> <ul> <li> <p> <code>Promotional</code> – (Default) Noncritical messages, such as marketing messages. Amazon SNS optimizes the message delivery to incur the lowest cost.</p> </li> <li> <p> <code>Transactional</code> – Critical messages that support customer transactions, such as one-time passcodes for multi-factor authentication. Amazon SNS optimizes the message delivery to achieve the highest reliability.</p> </li> </ul> <p> <code>UsageReportS3Bucket</code> – The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS. Each day, Amazon SNS will deliver a usage report as a CSV file to the bucket. The report includes the following information for each SMS message that was successfully delivered by your Amazon Web Services account:</p> <ul> <li> <p>Time that the message was published (in UTC)</p> </li> <li> <p>Message ID</p> </li> <li> <p>Destination phone number</p> </li> <li> <p>Message type</p> </li> <li> <p>Delivery status</p> </li> <li> <p>Message price (in USD)</p> </li> <li> <p>Part number (a message is split into multiple parts if it is too long for a single message)</p> </li> <li> <p>Total number of parts</p> </li> </ul> <p>To receive the report, the bucket must have a policy that allows the Amazon SNS service principal to perform the <code>s3:PutObject</code> and <code>s3:GetBucketLocation</code> actions.</p> <p>For an example bucket policy and usage report, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sms_stats.html">Monitoring SMS Activity</a> in the <i>Amazon SNS Developer Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_SetSMSAttributesAsync(System.Collections.Generic.Dictionary<string, string> attributes, GET_SetSMSAttributesAction Action, GET_SetSMSAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetSMSAttributes?attributes=" + attributes+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows a subscription owner to set an attribute of the subscription to a new value.
		/// GET_SetSubscriptionAttributes #Action=SetSubscriptionAttributes
		/// </summary>
		/// <param name="SubscriptionArn">The ARN of the subscription to modify.</param>
		/// <param name="AttributeName"><p>A map of attributes with their corresponding values.</p> <p>The following lists the names, descriptions, and values of the special request parameters that this action uses:</p> <ul> <li> <p> <code>DeliveryPolicy</code> – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.</p> </li> <li> <p> <code>FilterPolicy</code> – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.</p> </li> <li> <p> <code>FilterPolicyScope</code> – This attribute lets you choose the filtering scope by using one of the following string value types:</p> <ul> <li> <p> <code>MessageAttributes</code> (default) – The filter is applied on the message attributes.</p> </li> <li> <p> <code>MessageBody</code> – The filter is applied on the message body.</p> </li> </ul> </li> <li> <p> <code>RawMessageDelivery</code> – When set to <code>true</code>, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.</p> </li> <li> <p> <code>RedrivePolicy</code> – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.</p> </li> </ul> <p>The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:</p> <ul> <li> <p> <code>SubscriptionRoleArn</code> – The ARN of the IAM role that has the following:</p> <ul> <li> <p>Permission to write to the Kinesis Data Firehose delivery stream</p> </li> <li> <p>Amazon SNS listed as a trusted entity</p> </li> </ul> <p>Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html">Fanout to Kinesis Data Firehose delivery streams</a> in the <i>Amazon SNS Developer Guide</i>.</p> </li> </ul></param>
		/// <param name="AttributeValue">The new value for the attribute in JSON format.</param>
		/// <returns>Success</returns>
		public async Task GET_SetSubscriptionAttributesAsync(string SubscriptionArn, string AttributeName, string AttributeValue, GET_SetSubscriptionAttributesAction Action, GET_SetSubscriptionAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetSubscriptionAttributes?SubscriptionArn=" + (SubscriptionArn==null? "" : System.Uri.EscapeDataString(SubscriptionArn))+"&AttributeName=" + (AttributeName==null? "" : System.Uri.EscapeDataString(AttributeName))+"&AttributeValue=" + (AttributeValue==null? "" : System.Uri.EscapeDataString(AttributeValue))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Allows a topic owner to set an attribute of the topic to a new value.</p> <note> <p>To remove the ability to change topic permissions, you must deny permissions to the <code>AddPermission</code>, <code>RemovePermission</code>, and <code>SetTopicAttributes</code> actions in your IAM policy.</p> </note>
		/// GET_SetTopicAttributes #Action=SetTopicAttributes
		/// </summary>
		/// <param name="TopicArn">The ARN of the topic to modify.</param>
		/// <param name="AttributeName"><p>A map of attributes with their corresponding values.</p> <p>The following lists the names, descriptions, and values of the special request parameters that the <code>SetTopicAttributes</code> action uses:</p> <ul> <li> <p> <code>ApplicationSuccessFeedbackRoleArn</code> – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to a platform application endpoint.</p> </li> <li> <p> <code>DeliveryPolicy</code> – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.</p> </li> <li> <p> <code>DisplayName</code> – The display name to use for a topic with SMS subscriptions.</p> </li> <li> <p> <code>Policy</code> – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.</p> </li> <li> <p> <code>TracingConfig</code> – Tracing mode of an Amazon SNS topic. By default <code>TracingConfig</code> is set to <code>PassThrough</code>, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to <code>Active</code>, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.</p> </li> <li> <p>HTTP</p> <ul> <li> <p> <code>HTTPSuccessFeedbackRoleArn</code> – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint. </p> </li> <li> <p> <code>HTTPSuccessFeedbackSampleRate</code> – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an HTTP endpoint.</p> </li> <li> <p> <code>HTTPFailureFeedbackRoleArn</code> – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint.</p> </li> </ul> </li> <li> <p>Amazon Kinesis Data Firehose</p> <ul> <li> <p> <code>FirehoseSuccessFeedbackRoleArn</code> – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.</p> </li> <li> <p> <code>FirehoseSuccessFeedbackSampleRate</code> – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.</p> </li> <li> <p> <code>FirehoseFailureFeedbackRoleArn</code> – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint. </p> </li> </ul> </li> <li> <p>Lambda</p> <ul> <li> <p> <code>LambdaSuccessFeedbackRoleArn</code> – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint.</p> </li> <li> <p> <code>LambdaSuccessFeedbackSampleRate</code> – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Lambda endpoint.</p> </li> <li> <p> <code>LambdaFailureFeedbackRoleArn</code> – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint. </p> </li> </ul> </li> <li> <p>Platform application endpoint</p> <ul> <li> <p> <code>ApplicationSuccessFeedbackRoleArn</code> – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.</p> </li> <li> <p> <code>ApplicationSuccessFeedbackSampleRate</code> – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.</p> </li> <li> <p> <code>ApplicationFailureFeedbackRoleArn</code> – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.</p> </li> </ul> <note> <p>In addition to being able to configure topic attributes for message delivery status of notification messages sent to Amazon SNS application endpoints, you can also configure application attributes for the delivery status of push notification messages sent to push notification services.</p> <p>For example, For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html">Using Amazon SNS Application Attributes for Message Delivery Status</a>. </p> </note> </li> <li> <p>Amazon SQS</p> <ul> <li> <p> <code>SQSSuccessFeedbackRoleArn</code> – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. </p> </li> <li> <p> <code>SQSSuccessFeedbackSampleRate</code> – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. </p> </li> <li> <p> <code>SQSFailureFeedbackRoleArn</code> – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. </p> </li> </ul> </li> </ul> <note> <p>The &lt;ENDPOINT&gt;SuccessFeedbackRoleArn and &lt;ENDPOINT&gt;FailureFeedbackRoleArn attributes are used to give Amazon SNS write access to use CloudWatch Logs on your behalf. The &lt;ENDPOINT&gt;SuccessFeedbackSampleRate attribute is for specifying the sample rate percentage (0-100) of successfully delivered messages. After you configure the &lt;ENDPOINT&gt;FailureFeedbackRoleArn attribute, then all failed message deliveries generate CloudWatch Logs. </p> </note> <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html">server-side-encryption</a>:</p> <ul> <li> <p> <code>KmsMasterKeyId</code> – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms">Key Terms</a>. For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>Key Management Service API Reference</i>. </p> </li> <li> <p> <code>SignatureVersion</code> – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, <code>SignatureVersion</code> is set to <code>1</code>.</p> </li> </ul> <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html">FIFO topics</a>:</p> <ul> <li> <p> <code>ContentBasedDeduplication</code> – Enables content-based deduplication for FIFO topics.</p> <ul> <li> <p>By default, <code>ContentBasedDeduplication</code> is set to <code>false</code>. If you create a FIFO topic and this attribute is <code>false</code>, you must specify a value for the <code>MessageDeduplicationId</code> parameter for the <a href="https://docs.aws.amazon.com/sns/latest/api/API_Publish.html">Publish</a> action. </p> </li> <li> <p>When you set <code>ContentBasedDeduplication</code> to <code>true</code>, Amazon SNS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using the body of the message (but not the attributes of the message).</p> <p>(Optional) To override the generated value, you can specify a value for the <code>MessageDeduplicationId</code> parameter for the <code>Publish</code> action.</p> </li> </ul> </li> </ul></param>
		/// <param name="AttributeValue">The new value for the attribute.</param>
		/// <returns>Success</returns>
		public async Task GET_SetTopicAttributesAsync(string TopicArn, string AttributeName, string AttributeValue, GET_SetTopicAttributesAction Action, GET_SetTopicAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetTopicAttributes?TopicArn=" + (TopicArn==null? "" : System.Uri.EscapeDataString(TopicArn))+"&AttributeName=" + (AttributeName==null? "" : System.Uri.EscapeDataString(AttributeName))+"&AttributeValue=" + (AttributeValue==null? "" : System.Uri.EscapeDataString(AttributeValue))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the <code>ConfirmSubscription</code> action to confirm the subscription.</p> <p>You call the <code>ConfirmSubscription</code> action with the token from the subscription response. Confirmation tokens are valid for three days.</p> <p>This action is throttled at 100 transactions per second (TPS).</p>
		/// GET_Subscribe #Action=Subscribe
		/// </summary>
		/// <param name="TopicArn">The ARN of the topic you want to subscribe to.</param>
		/// <param name="Protocol"><p>The protocol that you want to use. Supported protocols include:</p> <ul> <li> <p> <code>http</code> – delivery of JSON-encoded message via HTTP POST</p> </li> <li> <p> <code>https</code> – delivery of JSON-encoded message via HTTPS POST</p> </li> <li> <p> <code>email</code> – delivery of message via SMTP</p> </li> <li> <p> <code>email-json</code> – delivery of JSON-encoded message via SMTP</p> </li> <li> <p> <code>sms</code> – delivery of message via SMS</p> </li> <li> <p> <code>sqs</code> – delivery of JSON-encoded message to an Amazon SQS queue</p> </li> <li> <p> <code>application</code> – delivery of JSON-encoded message to an EndpointArn for a mobile app and device</p> </li> <li> <p> <code>lambda</code> – delivery of JSON-encoded message to an Lambda function</p> </li> <li> <p> <code>firehose</code> – delivery of JSON-encoded message to an Amazon Kinesis Data Firehose delivery stream.</p> </li> </ul></param>
		/// <param name="Endpoint"><p>The endpoint that you want to receive notifications. Endpoints vary by protocol:</p> <ul> <li> <p>For the <code>http</code> protocol, the (public) endpoint is a URL beginning with <code>http://</code>.</p> </li> <li> <p>For the <code>https</code> protocol, the (public) endpoint is a URL beginning with <code>https://</code>.</p> </li> <li> <p>For the <code>email</code> protocol, the endpoint is an email address.</p> </li> <li> <p>For the <code>email-json</code> protocol, the endpoint is an email address.</p> </li> <li> <p>For the <code>sms</code> protocol, the endpoint is a phone number of an SMS-enabled device.</p> </li> <li> <p>For the <code>sqs</code> protocol, the endpoint is the ARN of an Amazon SQS queue.</p> </li> <li> <p>For the <code>application</code> protocol, the endpoint is the EndpointArn of a mobile app and device.</p> </li> <li> <p>For the <code>lambda</code> protocol, the endpoint is the ARN of an Lambda function.</p> </li> <li> <p>For the <code>firehose</code> protocol, the endpoint is the ARN of an Amazon Kinesis Data Firehose delivery stream.</p> </li> </ul></param>
		/// <param name="Attributes"><p>A map of attributes with their corresponding values.</p> <p>The following lists the names, descriptions, and values of the special request parameters that the <code>Subscribe</code> action uses:</p> <ul> <li> <p> <code>DeliveryPolicy</code> – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.</p> </li> <li> <p> <code>FilterPolicy</code> – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.</p> </li> <li> <p> <code>FilterPolicyScope</code> – This attribute lets you choose the filtering scope by using one of the following string value types:</p> <ul> <li> <p> <code>MessageAttributes</code> (default) – The filter is applied on the message attributes.</p> </li> <li> <p> <code>MessageBody</code> – The filter is applied on the message body.</p> </li> </ul> </li> <li> <p> <code>RawMessageDelivery</code> – When set to <code>true</code>, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.</p> </li> <li> <p> <code>RedrivePolicy</code> – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.</p> </li> </ul> <p>The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:</p> <ul> <li> <p> <code>SubscriptionRoleArn</code> – The ARN of the IAM role that has the following:</p> <ul> <li> <p>Permission to write to the Kinesis Data Firehose delivery stream</p> </li> <li> <p>Amazon SNS listed as a trusted entity</p> </li> </ul> <p>Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html">Fanout to Kinesis Data Firehose delivery streams</a> in the <i>Amazon SNS Developer Guide</i>.</p> </li> </ul></param>
		/// <param name="ReturnSubscriptionArn"><p>Sets whether the response from the <code>Subscribe</code> request includes the subscription ARN, even if the subscription is not yet confirmed.</p> <p>If you set this parameter to <code>true</code>, the response includes the ARN in all cases, even if the subscription is not yet confirmed. In addition to the ARN for confirmed subscriptions, the response also includes the <code>pending subscription</code> ARN value for subscriptions that aren't yet confirmed. A subscription becomes confirmed when the subscriber calls the <code>ConfirmSubscription</code> action with a confirmation token.</p> <p/> <p>The default value is <code>false</code>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_SubscribeAsync(string TopicArn, string Protocol, string Endpoint, System.Collections.Generic.Dictionary<string, string> Attributes, bool ReturnSubscriptionArn, GET_SubscribeAction Action, GET_SubscribeVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=Subscribe?TopicArn=" + (TopicArn==null? "" : System.Uri.EscapeDataString(TopicArn))+"&Protocol=" + (Protocol==null? "" : System.Uri.EscapeDataString(Protocol))+"&Endpoint=" + (Endpoint==null? "" : System.Uri.EscapeDataString(Endpoint))+"&Attributes=" + Attributes+"&ReturnSubscriptionArn="+ReturnSubscriptionArn+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Add tags to the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the <i>Amazon SNS Developer Guide</i>.</p> <p>When you use topic tags, keep the following guidelines in mind:</p> <ul> <li> <p>Adding more than 50 tags to a topic isn't recommended.</p> </li> <li> <p>Tags don't have any semantic meaning. Amazon SNS interprets tags as character strings.</p> </li> <li> <p>Tags are case-sensitive.</p> </li> <li> <p>A new tag with a key identical to that of an existing tag overwrites the existing tag.</p> </li> <li> <p>Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a <a href="https://console.aws.amazon.com/support/home#/case/create?issueType=technical">technical support request</a>.</p> </li> </ul>
		/// GET_TagResource #Action=TagResource
		/// </summary>
		/// <param name="ResourceArn">The ARN of the topic to which to add tags.</param>
		/// <param name="Tags">The tags to be added to the specified topic. A tag consists of a required key and an optional value.</param>
		/// <returns>Success</returns>
		public async Task GET_TagResourceAsync(string ResourceArn, Tag[] Tags, GET_TagResourceAction Action, GET_TagResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TagResource?ResourceArn=" + (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic's owner can unsubscribe, and an Amazon Web Services signature is required. If the <code>Unsubscribe</code> call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the <code>Unsubscribe</code> request was unintended.</p> <note> <p>Amazon SQS queue subscriptions require authentication for deletion. Only the owner of the subscription, or the owner of the topic can unsubscribe using the required Amazon Web Services signature.</p> </note> <p>This action is throttled at 100 transactions per second (TPS).</p>
		/// GET_Unsubscribe #Action=Unsubscribe
		/// </summary>
		/// <param name="SubscriptionArn">The ARN of the subscription to be deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_UnsubscribeAsync(string SubscriptionArn, GET_UnsubscribeAction Action, GET_UnsubscribeVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=Unsubscribe?SubscriptionArn=" + (SubscriptionArn==null? "" : System.Uri.EscapeDataString(SubscriptionArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove tags from the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the <i>Amazon SNS Developer Guide</i>.
		/// GET_UntagResource #Action=UntagResource
		/// </summary>
		/// <param name="ResourceArn">The ARN of the topic from which to remove tags.</param>
		/// <param name="TagKeys">The list of tag keys to remove from the specified topic.</param>
		/// <returns>Success</returns>
		public async Task GET_UntagResourceAsync(string ResourceArn, string[] TagKeys, GET_UntagResourceAction Action, GET_UntagResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UntagResource?ResourceArn=" + (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.</p> <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in the <i>Amazon SNS Developer Guide</i>.</p>
		/// GET_VerifySMSSandboxPhoneNumber #Action=VerifySMSSandboxPhoneNumber
		/// </summary>
		/// <param name="PhoneNumber">The destination phone number to verify.</param>
		/// <param name="OneTimePassword">The OTP sent to the destination number from the <code>CreateSMSSandBoxPhoneNumber</code> call.</param>
		/// <returns>Success</returns>
		public async Task GET_VerifySMSSandboxPhoneNumberAsync(string PhoneNumber, string OneTimePassword, GET_VerifySMSSandboxPhoneNumberAction Action, GET_VerifySMSSandboxPhoneNumberVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=VerifySMSSandboxPhoneNumber?PhoneNumber=" + (PhoneNumber==null? "" : System.Uri.EscapeDataString(PhoneNumber))+"&OneTimePassword=" + (OneTimePassword==null? "" : System.Uri.EscapeDataString(OneTimePassword))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GET_AddPermissionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AddPermission")]
		AddPermission = 0,
	}
	
	public enum GET_AddPermissionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_AddPermissionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_CheckIfPhoneNumberIsOptedOutAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CheckIfPhoneNumberIsOptedOut")]
		CheckIfPhoneNumberIsOptedOut = 0,
	}
	
	public enum GET_CheckIfPhoneNumberIsOptedOutVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_CheckIfPhoneNumberIsOptedOutVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_ConfirmSubscriptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConfirmSubscription")]
		ConfirmSubscription = 0,
	}
	
	public enum GET_ConfirmSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_ConfirmSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_CreatePlatformApplicationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreatePlatformApplication")]
		CreatePlatformApplication = 0,
	}
	
	public enum GET_CreatePlatformApplicationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_CreatePlatformApplicationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_CreatePlatformEndpointAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreatePlatformEndpoint")]
		CreatePlatformEndpoint = 0,
	}
	
	public enum GET_CreatePlatformEndpointVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_CreatePlatformEndpointVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_CreateSMSSandboxPhoneNumberLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-419")]
		esMinus419 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kr-KR")]
		krMinusKR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-CN")]
		zhMinusCN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-TW")]
		zhMinusTW = 12,
	}
	
	public enum GET_CreateSMSSandboxPhoneNumberAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateSMSSandboxPhoneNumber")]
		CreateSMSSandboxPhoneNumber = 0,
	}
	
	public enum GET_CreateSMSSandboxPhoneNumberVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_CreateSMSSandboxPhoneNumberVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_CreateTopicAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateTopic")]
		CreateTopic = 0,
	}
	
	public enum GET_CreateTopicVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_CreateTopicVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_DeleteEndpointAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteEndpoint")]
		DeleteEndpoint = 0,
	}
	
	public enum GET_DeleteEndpointVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_DeleteEndpointVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_DeletePlatformApplicationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeletePlatformApplication")]
		DeletePlatformApplication = 0,
	}
	
	public enum GET_DeletePlatformApplicationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_DeletePlatformApplicationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_DeleteSMSSandboxPhoneNumberAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteSMSSandboxPhoneNumber")]
		DeleteSMSSandboxPhoneNumber = 0,
	}
	
	public enum GET_DeleteSMSSandboxPhoneNumberVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_DeleteSMSSandboxPhoneNumberVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_DeleteTopicAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteTopic")]
		DeleteTopic = 0,
	}
	
	public enum GET_DeleteTopicVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_DeleteTopicVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_GetDataProtectionPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetDataProtectionPolicy")]
		GetDataProtectionPolicy = 0,
	}
	
	public enum GET_GetDataProtectionPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_GetDataProtectionPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_GetEndpointAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetEndpointAttributes")]
		GetEndpointAttributes = 0,
	}
	
	public enum GET_GetEndpointAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_GetEndpointAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_GetPlatformApplicationAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetPlatformApplicationAttributes")]
		GetPlatformApplicationAttributes = 0,
	}
	
	public enum GET_GetPlatformApplicationAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_GetPlatformApplicationAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_GetSMSAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetSMSAttributes")]
		GetSMSAttributes = 0,
	}
	
	public enum GET_GetSMSAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_GetSMSAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_GetSMSSandboxAccountStatusAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetSMSSandboxAccountStatus")]
		GetSMSSandboxAccountStatus = 0,
	}
	
	public enum GET_GetSMSSandboxAccountStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_GetSMSSandboxAccountStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_GetSubscriptionAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetSubscriptionAttributes")]
		GetSubscriptionAttributes = 0,
	}
	
	public enum GET_GetSubscriptionAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_GetSubscriptionAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_GetTopicAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetTopicAttributes")]
		GetTopicAttributes = 0,
	}
	
	public enum GET_GetTopicAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_GetTopicAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_ListEndpointsByPlatformApplicationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListEndpointsByPlatformApplication")]
		ListEndpointsByPlatformApplication = 0,
	}
	
	public enum GET_ListEndpointsByPlatformApplicationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_ListEndpointsByPlatformApplicationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_ListOriginationNumbersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListOriginationNumbers")]
		ListOriginationNumbers = 0,
	}
	
	public enum GET_ListOriginationNumbersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_ListOriginationNumbersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_ListPhoneNumbersOptedOutAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListPhoneNumbersOptedOut")]
		ListPhoneNumbersOptedOut = 0,
	}
	
	public enum GET_ListPhoneNumbersOptedOutVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_ListPhoneNumbersOptedOutVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_ListPlatformApplicationsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListPlatformApplications")]
		ListPlatformApplications = 0,
	}
	
	public enum GET_ListPlatformApplicationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_ListPlatformApplicationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_ListSMSSandboxPhoneNumbersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListSMSSandboxPhoneNumbers")]
		ListSMSSandboxPhoneNumbers = 0,
	}
	
	public enum GET_ListSMSSandboxPhoneNumbersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_ListSMSSandboxPhoneNumbersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_ListSubscriptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListSubscriptions")]
		ListSubscriptions = 0,
	}
	
	public enum GET_ListSubscriptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_ListSubscriptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_ListSubscriptionsByTopicAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListSubscriptionsByTopic")]
		ListSubscriptionsByTopic = 0,
	}
	
	public enum GET_ListSubscriptionsByTopicVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_ListSubscriptionsByTopicVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_ListTagsForResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListTagsForResource")]
		ListTagsForResource = 0,
	}
	
	public enum GET_ListTagsForResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_ListTagsForResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_ListTopicsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListTopics")]
		ListTopics = 0,
	}
	
	public enum GET_ListTopicsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_ListTopicsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_OptInPhoneNumberAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OptInPhoneNumber")]
		OptInPhoneNumber = 0,
	}
	
	public enum GET_OptInPhoneNumberVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_OptInPhoneNumberVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_PublishAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Publish")]
		Publish = 0,
	}
	
	public enum GET_PublishVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_PublishVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_PublishBatchAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PublishBatch")]
		PublishBatch = 0,
	}
	
	public enum GET_PublishBatchVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_PublishBatchVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_PutDataProtectionPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PutDataProtectionPolicy")]
		PutDataProtectionPolicy = 0,
	}
	
	public enum GET_PutDataProtectionPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_PutDataProtectionPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_RemovePermissionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RemovePermission")]
		RemovePermission = 0,
	}
	
	public enum GET_RemovePermissionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_RemovePermissionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_SetEndpointAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SetEndpointAttributes")]
		SetEndpointAttributes = 0,
	}
	
	public enum GET_SetEndpointAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_SetEndpointAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_SetPlatformApplicationAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SetPlatformApplicationAttributes")]
		SetPlatformApplicationAttributes = 0,
	}
	
	public enum GET_SetPlatformApplicationAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_SetPlatformApplicationAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_SetSMSAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SetSMSAttributes")]
		SetSMSAttributes = 0,
	}
	
	public enum GET_SetSMSAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_SetSMSAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_SetSubscriptionAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SetSubscriptionAttributes")]
		SetSubscriptionAttributes = 0,
	}
	
	public enum GET_SetSubscriptionAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_SetSubscriptionAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_SetTopicAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SetTopicAttributes")]
		SetTopicAttributes = 0,
	}
	
	public enum GET_SetTopicAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_SetTopicAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_SubscribeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Subscribe")]
		Subscribe = 0,
	}
	
	public enum GET_SubscribeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_SubscribeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_TagResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TagResource")]
		TagResource = 0,
	}
	
	public enum GET_TagResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_TagResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_UnsubscribeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unsubscribe")]
		Unsubscribe = 0,
	}
	
	public enum GET_UnsubscribeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_UnsubscribeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_UntagResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UntagResource")]
		UntagResource = 0,
	}
	
	public enum GET_UntagResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_UntagResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum GET_VerifySMSSandboxPhoneNumberAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VerifySMSSandboxPhoneNumber")]
		VerifySMSSandboxPhoneNumber = 0,
	}
	
	public enum GET_VerifySMSSandboxPhoneNumberVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
	
	public enum POST_VerifySMSSandboxPhoneNumberVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-03-31")]
		_2010Minus03Minus31 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
