//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Authentiq ID in JWT format, self-signed.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthentiqID
	{
		
		/// <summary>
		/// device token for push messages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devtoken")]
		public string Devtoken { get; set; }
		
		/// <summary>
		/// UUID and public signing key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
	}
	
	/// <summary>
	/// Claim in JWT format, self- or issuer-signed. 
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Claims
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// claim scope
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// UUID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public int Error1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// unique uri for this error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// PushToken in JWT format, self-signed. 
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PushToken
	{
		
		/// <summary>
		/// audience (URI)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aud")]
		public string Aud { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exp")]
		public System.Nullable<System.Int32> Exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iat")]
		public System.Nullable<System.Int32> Iat { get; set; }
		
		/// <summary>
		/// issuer (URI)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iss")]
		public string Iss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nbf")]
		public System.Nullable<System.Int32> Nbf { get; set; }
		
		/// <summary>
		/// UUID and public signing key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Revoke an Authentiq ID using email & phone.
		/// 
		/// If called with `email` and `phone` only, a verification code
		/// will be sent by email. Do a second call adding `code` to
		/// complete the revocation.
		/// 
		/// Key_revoke_nosecret key
		/// </summary>
		/// <param name="email">primary email associated to Key (ID)</param>
		/// <param name="phone">primary phone number, international representation</param>
		/// <param name="code">verification code sent by email</param>
		/// <returns>Successfully deleted</returns>
		public async Task<Key_revoke_nosecretReturn> Key_revoke_nosecretAsync(string email, string phone, string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "key?email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&phone=" + (phone==null? "" : System.Uri.EscapeDataString(phone))+"&code=" + (code==null? "" : System.Uri.EscapeDataString(code));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Key_revoke_nosecretReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register a new ID `JWT(sub, devtoken)`
		/// 
		/// v5: `JWT(sub, pk, devtoken, ...)`
		/// 
		/// See: https://github.com/skion/authentiq/wiki/JWT-Examples
		/// 
		/// Key_register key
		/// </summary>
		/// <param name="requestBody">Authentiq ID to register</param>
		public async Task Key_registerAsync(AuthentiqID requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "key";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke an Identity (Key) with a revocation secret
		/// Key_revoke key/{PK}
		/// </summary>
		/// <param name="PK">Public Signing Key - Authentiq ID (43 chars)</param>
		/// <param name="secret">revokation secret</param>
		/// <returns>Successful response</returns>
		public async Task<Key_revokeReturn> Key_revokeAsync(string PK, string secret, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "key/"+ (PK==null? "" : System.Uri.EscapeDataString(PK))+"&secret=" + (secret==null? "" : System.Uri.EscapeDataString(secret));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Key_revokeReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get public details of an Authentiq ID.
		/// 
		/// Key_retrieve key/{PK}
		/// </summary>
		/// <param name="PK">Public Signing Key - Authentiq ID (43 chars)</param>
		/// <returns>Successfully retrieved</returns>
		public async Task<Key_retrieveReturn> Key_retrieveAsync(string PK, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "key/"+ (PK==null? "" : System.Uri.EscapeDataString(PK));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Key_retrieveReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// update properties of an Authentiq ID.
		/// (not operational in v4; use PUT for now)
		/// 
		/// v5: POST issuer-signed email & phone scopes in
		/// a self-signed JWT
		/// 
		/// See: https://github.com/skion/authentiq/wiki/JWT-Examples
		/// 
		/// Key_update key/{PK}
		/// </summary>
		/// <param name="PK">Public Signing Key - Authentiq ID (43 chars)</param>
		/// <param name="requestBody">Authentiq ID to register</param>
		/// <returns>Successfully updated</returns>
		public async Task<Key_updateReturn> Key_updateAsync(string PK, AuthentiqID requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "key/"+ (PK==null? "" : System.Uri.EscapeDataString(PK));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Key_updateReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Authentiq ID by replacing the object.
		/// 
		/// v4: `JWT(sub,email,phone)` to bind email/phone hash;
		/// 
		/// v5: POST issuer-signed email & phone scopes
		/// and PUT to update registration `JWT(sub, pk, devtoken, ...)`
		/// 
		/// See: https://github.com/skion/authentiq/wiki/JWT-Examples
		/// 
		/// Key_bind key/{PK}
		/// </summary>
		/// <param name="PK">Public Signing Key - Authentiq ID (43 chars)</param>
		/// <param name="requestBody">Authentiq ID to register</param>
		/// <returns>Successfully updated</returns>
		public async Task<Key_bindReturn> Key_bindAsync(string PK, AuthentiqID requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "key/"+ (PK==null? "" : System.Uri.EscapeDataString(PK));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Key_bindReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete a verification job
		/// Sign_delete scope/{job}
		/// </summary>
		/// <param name="job">Job ID (20 chars)</param>
		/// <returns>Successfully deleted</returns>
		public async Task<Sign_deleteReturn> Sign_deleteAsync(string job, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scope/"+ (job==null? "" : System.Uri.EscapeDataString(job));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Sign_deleteReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get the status / current content of a verification job
		/// Sign_retrieve scope/{job}
		/// </summary>
		/// <param name="job">Job ID (20 chars)</param>
		/// <returns>Successful response (JWT)</returns>
		public async Task<Sign_retrieveReturn> Sign_retrieveAsync(string job, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scope/"+ (job==null? "" : System.Uri.EscapeDataString(job));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Sign_retrieveReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// this is a scope confirmation
		/// Sign_confirm scope/{job}
		/// </summary>
		/// <param name="job">Job ID (20 chars)</param>
		public async Task Sign_confirmAsync(string job, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scope/"+ (job==null? "" : System.Uri.EscapeDataString(job));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// authority updates a JWT with its signature
		/// See: https://github.com/skion/authentiq/wiki/JWT-Examples
		/// 
		/// Sign_update scope/{job}
		/// </summary>
		/// <param name="job">Job ID (20 chars)</param>
		/// <returns>Successfully updated</returns>
		public async Task Sign_updateAsync(string job, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scope/"+ (job==null? "" : System.Uri.EscapeDataString(job));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Key_revoke_nosecretReturn
	{
		
		/// <summary>
		/// pending or done
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class Key_revokeReturn
	{
		
		/// <summary>
		/// done
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class Key_retrieveReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="since")]
		public System.Nullable<System.DateTimeOffset> Since { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// base64safe encoded public signing key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
	}
	
	public class Key_updateReturn
	{
		
		/// <summary>
		/// confirmed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class Key_bindReturn
	{
		
		/// <summary>
		/// confirmed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class Sign_deleteReturn
	{
		
		/// <summary>
		/// done
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class Sign_retrieveReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="exp")]
		public System.Nullable<System.Int32> Exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// base64safe encoded public signing key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
