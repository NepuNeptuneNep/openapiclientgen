//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// additional service type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AdditionalServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHECKED_BAGS")]
		CHECKED_BAGS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEALS")]
		MEALS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEATS")]
		SEATS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_SERVICES")]
		OTHER_SERVICES = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AircraftEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// information related to the aircraft
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AircraftEquipment
	{
		
		/// <summary>
		/// IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php)
		///
		/// Pattern: [a-zA-Z0-9]{3}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9]{3}")]
		public string Code { get; set; }
	}
	
	/// <summary>
	/// baggageAllowance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BaggageAllowance
	{
		
		/// <summary>
		/// Total number of units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Weight of the baggage allowance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
		
		/// <summary>
		/// Code to qualify unit as pounds or kilos
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightUnit")]
		public string WeightUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CarrierEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Co2Emission
	{
		
		/// <summary>
		/// quality of service offered in the cabin where the seat is located in this flight. Economy, premium economy, business or first class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cabin")]
		public System.Nullable<Co2EmissionCabin> Cabin { get; set; }
		
		/// <summary>
		/// Weight of Co2 emitted for the concerned segment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
		
		/// <summary>
		/// Code to qualify unit as pounds or kilos
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightUnit")]
		public string WeightUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Co2EmissionCabin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ECONOMY")]
		ECONOMY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREMIUM_ECONOMY")]
		PREMIUM_ECONOMY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUSINESS")]
		BUSINESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIRST")]
		FIRST = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Collection_Meta
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oneWayCombinations")]
		public Collection_MetaOneWayCombinations[] Collection_MetaOneWayCombinations { get; set; }
	}
	
	public class Collection_MetaOneWayCombinations
	{
		
		[System.Runtime.Serialization.DataMember(Name="flightOfferIds")]
		public string[] FlightOfferIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originDestinationId")]
		public string OriginDestinationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Collection_Meta_Link
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public object Links { get; set; }
	}
	
	/// <summary>
	/// part of the trip covered by the travel class restriction (ALL_SEGMENTS if ommited)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Coverage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOST_SEGMENTS")]
		MOST_SEGMENTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AT_LEAST_ONE_SEGMENT")]
		AT_LEAST_ONE_SEGMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL_SEGMENTS")]
		ALL_SEGMENTS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurrencyEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateTimeRange
	{
		
		/// <summary>
		/// Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-12-25
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.DateOnly Date { get; set; }
		
		/// <summary>
		/// Either 1, 2 or 3 extra days around the local date (IxD for +/- x days - Ex: I3D), Either 1 to 3 days after the local date (PxD for +x days - Ex: P3D), or 1 to 3 days before the local date (MxD for -x days - Ex: M3D)
		///
		///Can not be combined with "originRadius" or "destinationRadius".
		///
		/// Pattern: ^[MPI][1-3]D
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateWindow")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[MPI][1-3]D")]
		public string DateWindow { get; set; }
		
		/// <summary>
		/// Local time. hh:mm:ss format, e.g 10:30:00
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
		
		/// <summary>
		/// 1 to 12 hours around (both +and -) the local time. Possibly limited by the number of extra days when specified, i.e.  in some situations, it may not be used to exceed the maximum date range. [1-12]H format, e.g. 6H
		///
		///Can not be combined with "originRadius" or "destinationRadius".
		///
		/// Pattern: ^([1-9]|10|11|12)H
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeWindow")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([1-9]|10|11|12)H")]
		public string TimeWindow { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dictionaries
	{
		
		[System.Runtime.Serialization.DataMember(Name="aircraft")]
		public AircraftEntry Aircraft { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="carriers")]
		public CarrierEntry Carriers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencies")]
		public CurrencyEntry Currencies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LocationEntry Locations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error_400
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Issue[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Issue
	{
		
		/// <summary>
		/// an application-specific error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int64> Code { get; set; }
		
		/// <summary>
		/// explanation of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// an object containing references to the source of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public IssueSource Source { get; set; }
		
		/// <summary>
		/// the HTTP status code applicable to this error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// a short summary of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class IssueSource
	{
		
		/// <summary>
		/// a string indicating an example of the right value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="example")]
		public string Example { get; set; }
		
		/// <summary>
		/// a string indicating which URI query parameter caused the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// a JSON Pointer [RFC6901] to the associated entity in the request document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointer")]
		public string Pointer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error_500
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Issue[] Errors { get; set; }
	}
	
	/// <summary>
	/// fare filter options
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExtendedPricingOptions
	{
		
		/// <summary>
		/// If true, returns the flight-offers with included checked bags only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedCheckedBagsOnly")]
		public System.Nullable<System.Boolean> IncludedCheckedBagsOnly { get; set; }
	}
	
	/// <summary>
	/// price information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Extended_Price
	{
	}
	
	/// <summary>
	/// a fee
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fee
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		/// <summary>
		/// type of fee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<FeeType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TICKETING")]
		TICKETING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FORM_OF_PAYMENT")]
		FORM_OF_PAYMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUPPLIER")]
		SUPPLIER = 2,
	}
	
	/// <summary>
	/// departure or arrival information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightEndPoint : OriginalFlightEndPoint
	{
		
		/// <summary>
		/// local date and time in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="at")]
		public System.Nullable<System.DateTimeOffset> At { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightOffer
	{
		
		/// <summary>
		/// BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source "GDS"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disablePricing")]
		public System.Nullable<System.Boolean> DisablePricing { get; set; }
		
		/// <summary>
		/// Id of the flight offer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If true, inform that a ticketing will be required at booking step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instantTicketingRequired")]
		public System.Nullable<System.Boolean> InstantTicketingRequired { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itineraries")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public FlightOfferItineraries[] FlightOfferItineraries { get; set; }
		
		/// <summary>
		/// If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastTicketingDate")]
		public string LastTicketingDate { get; set; }
		
		/// <summary>
		/// If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonHomogeneous")]
		public System.Nullable<System.Boolean> NonHomogeneous { get; set; }
		
		/// <summary>
		/// Number of seats bookable in a single request. Can not be higher than 9.
		/// Minimum: 1
		/// Maximum: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfBookableSeats")]
		[System.ComponentModel.DataAnnotations.Range(1, 9)]
		public System.Nullable<System.Double> NumberOfBookableSeats { get; set; }
		
		/// <summary>
		/// If true, the flight offer fulfills only one originDestination and has to be combined with other oneWays to complete the whole journey.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneWay")]
		public System.Nullable<System.Boolean> OneWay { get; set; }
		
		/// <summary>
		/// If true, a payment card is mandatory to book this flight offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentCardRequired")]
		public System.Nullable<System.Boolean> PaymentCardRequired { get; set; }
		
		/// <summary>
		/// price information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Extended_Price Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricingOptions")]
		public FlightOfferPricingOptions PricingOptions { get; set; }
		
		/// <summary>
		/// source of the flight offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<FlightOfferSource> Source { get; set; }
		
		/// <summary>
		/// Fare information for each traveler/segment
		/// Minimum items: 1
		/// Maximum items: 18
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="travelerPricings")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public FlightOfferTravelerPricings[] FlightOfferTravelerPricings { get; set; }
		
		/// <summary>
		/// the resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// This option ensures that the system will only consider these airlines.
		/// Minimum items: 1
		/// Maximum items: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validatingAirlineCodes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string[] ValidatingAirlineCodes { get; set; }
	}
	
	public class FlightOfferItineraries
	{
		
		/// <summary>
		/// duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M for a duration of 2h10m
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segments")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public Segment[] Segments { get; set; }
	}
	
	public class Segment
	{
	}
	
	public class FlightOfferPricingOptions
	{
		
		/// <summary>
		/// type of fare of the flight-offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fareType")]
		public string[] FareType { get; set; }
		
		/// <summary>
		/// If true, returns the flight-offers with included checked bags only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedCheckedBagsOnly")]
		public System.Nullable<System.Boolean> IncludedCheckedBagsOnly { get; set; }
		
		/// <summary>
		/// If true, returns the flight-offers with no penalty fares only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noPenaltyFare")]
		public System.Nullable<System.Boolean> NoPenaltyFare { get; set; }
		
		/// <summary>
		/// If true, returns the flight-offers with no restriction fares only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noRestrictionFare")]
		public System.Nullable<System.Boolean> NoRestrictionFare { get; set; }
		
		/// <summary>
		/// If true, returns the flight-offers with refundable fares only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundableFare")]
		public System.Nullable<System.Boolean> RefundableFare { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FlightOfferSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GDS")]
		GDS = 0,
	}
	
	public class FlightOfferTravelerPricings
	{
		
		/// <summary>
		/// if type="HELD_INFANT", corresponds to the adult traveler's id who will share the seat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedAdultId")]
		public string AssociatedAdultId { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fareDetailsBySegment")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public FlightOfferTravelerPricingsFareDetailsBySegment[] FlightOfferTravelerPricingsFareDetailsBySegment { get; set; }
		
		/// <summary>
		/// option specifying a group of fares, which may be valid under certain conditons
		///Can be used to specify special fare discount for a passenger
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fareOption")]
		public FlightOfferTravelerPricingsFareOption FareOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Id of the traveler
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="travelerId")]
		public string TravelerId { get; set; }
		
		/// <summary>
		/// traveler type
		///age restrictions : CHILD < 12y, HELD_INFANT < 2y, SEATED_INFANT < 2y, SENIOR >=60y
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="travelerType")]
		public FlightOfferTravelerPricingsTravelerType TravelerType { get; set; }
	}
	
	public class FlightOfferTravelerPricingsFareDetailsBySegment
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalServices")]
		public FlightOfferTravelerPricingsFareDetailsBySegmentAdditionalServices AdditionalServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allotmentDetails")]
		public FlightOfferTravelerPricingsFareDetailsBySegmentAllotmentDetails AllotmentDetails { get; set; }
		
		/// <summary>
		/// The name of the Fare Family corresponding to the fares. Only for the GDS provider and if the airline has fare families filled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandedFare")]
		public string BrandedFare { get; set; }
		
		/// <summary>
		/// quality of service offered in the cabin where the seat is located in this flight. Economy, premium economy, business or first class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cabin")]
		public Co2EmissionCabin Cabin { get; set; }
		
		/// <summary>
		/// The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)
		/// Pattern: [A-Z]{1}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{1}")]
		public string Class { get; set; }
		
		/// <summary>
		/// Fare basis specifying the rules of a fare. Usually, though not always, is composed of the booking class code followed by a set of letters and digits representing other characteristics of the ticket, such as refundability, minimum stay requirements, discounts or special promotional elements.
		/// Pattern: [[A-Z0-9]{1,18}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fareBasis")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[[A-Z0-9]{1,18}")]
		public string FareBasis { get; set; }
		
		/// <summary>
		/// baggageAllowance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedCheckedBags")]
		public BaggageAllowance IncludedCheckedBags { get; set; }
		
		/// <summary>
		/// True if the corresponding booking class is in an allotment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAllotment")]
		public System.Nullable<System.Boolean> IsAllotment { get; set; }
		
		/// <summary>
		/// Id of the segment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
		
		/// <summary>
		/// slice and Dice indicator, such as Local Availability, Sub OnD(Origin and Destination) 1 Availability and Sub OnD 2 Availability
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sliceDiceIndicator")]
		public System.Nullable<FlightOfferTravelerPricingsFareDetailsBySegmentSliceDiceIndicator> SliceDiceIndicator { get; set; }
	}
	
	public class FlightOfferTravelerPricingsFareDetailsBySegmentAdditionalServices
	{
		
		/// <summary>
		/// baggageAllowance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeableCheckedBags")]
		public BaggageAllowance ChargeableCheckedBags { get; set; }
		
		/// <summary>
		/// seat number
		/// Pattern: [1-9][0-9]{0,2}[A-Z]?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeableSeatNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[1-9][0-9]{0,2}[A-Z]?")]
		public string ChargeableSeatNumber { get; set; }
		
		/// <summary>
		/// Other services to add
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherServices")]
		public ServiceName[] OtherServices { get; set; }
	}
	
	/// <summary>
	/// type of service
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIORITY_BOARDING")]
		PRIORITY_BOARDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIRPORT_CHECKIN")]
		AIRPORT_CHECKIN = 1,
	}
	
	public class FlightOfferTravelerPricingsFareDetailsBySegmentAllotmentDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="tourName")]
		public string TourName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tourReference")]
		public string TourReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FlightOfferTravelerPricingsFareDetailsBySegmentSliceDiceIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCAL_AVAILABILITY")]
		LOCAL_AVAILABILITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUB_OD_AVAILABILITY_1")]
		SUB_OD_AVAILABILITY_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUB_OD_AVAILABILITY_2")]
		SUB_OD_AVAILABILITY_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FlightOfferTravelerPricingsFareOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD")]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUSIVE_TOUR")]
		INCLUSIVE_TOUR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPANISH_MELILLA_RESIDENT")]
		SPANISH_MELILLA_RESIDENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPANISH_CEUTA_RESIDENT")]
		SPANISH_CEUTA_RESIDENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPANISH_CANARY_RESIDENT")]
		SPANISH_CANARY_RESIDENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPANISH_BALEARIC_RESIDENT")]
		SPANISH_BALEARIC_RESIDENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS")]
		AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIR_FRANCE_DOM_DISCOUNT_PASS")]
		AIR_FRANCE_DOM_DISCOUNT_PASS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIR_FRANCE_COMBINED_DISCOUNT_PASS")]
		AIR_FRANCE_COMBINED_DISCOUNT_PASS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIR_FRANCE_FAMILY")]
		AIR_FRANCE_FAMILY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADULT_WITH_COMPANION")]
		ADULT_WITH_COMPANION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPANION")]
		COMPANION = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FlightOfferTravelerPricingsTravelerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADULT")]
		ADULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHILD")]
		CHILD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SENIOR")]
		SENIOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YOUNG")]
		YOUNG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HELD_INFANT")]
		HELD_INFANT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEATED_INFANT")]
		SEATED_INFANT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STUDENT")]
		STUDENT = 6,
	}
	
	/// <summary>
	/// defining a flight segment; including both operating and marketing details when applicable
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightSegment
	{
		
		/// <summary>
		/// information related to the aircraft
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aircraft")]
		public AircraftEquipment Aircraft { get; set; }
		
		/// <summary>
		/// departure or arrival information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrival")]
		public FlightEndPoint Arrival { get; set; }
		
		/// <summary>
		/// providing the airline / carrier code
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string CarrierCode { get; set; }
		
		/// <summary>
		/// departure or arrival information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departure")]
		public FlightEndPoint Departure { get; set; }
		
		/// <summary>
		/// stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// the flight number as assigned by the carrier
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Number { get; set; }
		
		/// <summary>
		/// information about the operating flight
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operating")]
		public OperatingFlight Operating { get; set; }
		
		/// <summary>
		/// information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stops")]
		public FlightStop[] Stops { get; set; }
	}
	
	/// <summary>
	/// information about the operating flight
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperatingFlight
	{
		
		/// <summary>
		/// providing the airline / carrier code
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string CarrierCode { get; set; }
	}
	
	/// <summary>
	/// details of stops for direct or change of gauge flights
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightStop : OriginalFlightStop
	{
		
		/// <summary>
		/// arrival at the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrivalAt")]
		public System.Nullable<System.DateTimeOffset> ArrivalAt { get; set; }
		
		/// <summary>
		/// departure from the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departureAt")]
		public System.Nullable<System.DateTimeOffset> DepartureAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetFlightOffersQuery
	{
		
		/// <summary>
		/// The currency code, as defined in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217), to reflect the currency in which this amount is expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Origins and Destinations must be properly ordered in time (chronological order in accordance with the timezone of each location) to describe the journey consistently. Dates and times must not be past nor more than 365 days in the future, according to provider settings.Number of Origins and Destinations must not exceed the limit defined in provider settings.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originDestinations")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public OriginDestination[] OriginDestinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchCriteria")]
		public SearchCriteria SearchCriteria { get; set; }
		
		/// <summary>
		/// Allows enable one or more sources. If present in the list, these sources will be called by the system.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public FlightOfferSource[] Sources { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="travelers")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public Traveler[] Travelers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OriginDestination
	{
		
		/// <summary>
		/// Set of alternative destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternativeDestinationsCodes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string[] AlternativeDestinationsCodes { get; set; }
		
		/// <summary>
		/// Set of alternative origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternativeOriginsCodes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string[] AlternativeOriginsCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arrivalDateTimeRange")]
		public DateTimeRange ArrivalDateTimeRange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="departureDateTimeRange")]
		public DateTimeRange DepartureDateTimeRange { get; set; }
		
		/// <summary>
		/// Destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationLocationCode")]
		public string DestinationLocationCode { get; set; }
		
		/// <summary>
		/// Include other possible locations around the point, located less than this distance in kilometers away. Max:300
		///
		///Can not be combined with "dateWindow" or "timeWindow".
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationRadius")]
		public System.Nullable<System.Double> DestinationRadius { get; set; }
		
		/// <summary>
		/// List of excluded connections points. Any FlightOffer with these connections points will be present in response. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider
		/// Minimum items: 1
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedConnectionPoints")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string[] ExcludedConnectionPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List of included connections points. When an includedViaPoints option is specified, all FlightOffer returned must at least go via this Connecting Point. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedConnectionPoints")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string[] IncludedConnectionPoints { get; set; }
		
		/// <summary>
		/// Origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originLocationCode")]
		public string OriginLocationCode { get; set; }
		
		/// <summary>
		/// Include other possible locations around the point, located less than this distance in kilometers away. Max:300
		///
		///Can not be combined with "dateWindow" or "timeWindow".
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originRadius")]
		public System.Nullable<System.Double> OriginRadius { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchCriteria
	{
		
		/// <summary>
		/// This option allows activate the one-way combinable feature
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addOneWayOffers")]
		public System.Nullable<System.Boolean> AddOneWayOffers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalInformation")]
		public SearchCriteriaAdditionalInformation AdditionalInformation { get; set; }
		
		/// <summary>
		/// This option allows to default to a standard fareOption if no offers are found for the selected fareOption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowAlternativeFareOptions")]
		public System.Nullable<System.Boolean> AllowAlternativeFareOptions { get; set; }
		
		/// <summary>
		/// This option allows to exclude the isAllotment flag associated to a booking class in the search response when it exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeAllotments")]
		public System.Nullable<System.Boolean> ExcludeAllotments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flightFilters")]
		public SearchCriteriaFlightFilters FlightFilters { get; set; }
		
		/// <summary>
		/// Maximum number of flight offers returned (Max 250)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxFlightOffers")]
		public System.Nullable<System.Double> MaxFlightOffers { get; set; }
		
		/// <summary>
		/// maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPrice")]
		public System.Nullable<System.Int32> MaxPrice { get; set; }
		
		/// <summary>
		/// Requests the system to find at least one flight-offer per day, if possible, when a range of dates is specified. Default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneFlightOfferPerDay")]
		public System.Nullable<System.Boolean> OneFlightOfferPerDay { get; set; }
		
		/// <summary>
		/// fare filter options
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricingOptions")]
		public ExtendedPricingOptions PricingOptions { get; set; }
	}
	
	public class SearchCriteriaAdditionalInformation
	{
		
		/// <summary>
		/// If true, returns the fare family name for each flight-offer which supports fare family
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandedFares")]
		public System.Nullable<System.Boolean> BrandedFares { get; set; }
		
		/// <summary>
		/// If true, returns the price of the first additional bag when the airline is an "Amadeus Ancillary Services" member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeableCheckedBags")]
		public System.Nullable<System.Boolean> ChargeableCheckedBags { get; set; }
	}
	
	public class SearchCriteriaFlightFilters
	{
		
		/// <summary>
		/// This flag enable/disable filtering of bus segment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="busSegmentAllowed")]
		public System.Nullable<System.Boolean> BusSegmentAllowed { get; set; }
		
		/// <summary>
		/// Restriction towards cabins.
		/// Minimum items: 1
		/// Maximum items: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cabinRestrictions")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public SearchCriteriaFlightFiltersCabinRestrictions[] SearchCriteriaFlightFiltersCabinRestrictions { get; set; }
		
		/// <summary>
		/// Restriction towards carriers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierRestrictions")]
		public SearchCriteriaFlightFiltersCarrierRestrictions CarrierRestrictions { get; set; }
		
		/// <summary>
		/// Restriction towards number of connections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionRestriction")]
		public SearchCriteriaFlightFiltersConnectionRestriction ConnectionRestriction { get; set; }
		
		/// <summary>
		/// Allows to search a location outside the borders when a radius around a location is specified. Default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossBorderAllowed")]
		public System.Nullable<System.Boolean> CrossBorderAllowed { get; set; }
		
		/// <summary>
		/// This option allows to modify the value for the Elapsed Flying Time (EFT) masterPricer option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxFlightTime")]
		public System.Nullable<System.Double> MaxFlightTime { get; set; }
		
		/// <summary>
		/// This flag enables/disables the possibility to have more overnight flights in Low Fare Search
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moreOvernightsAllowed")]
		public System.Nullable<System.Boolean> MoreOvernightsAllowed { get; set; }
		
		/// <summary>
		/// This flag enable/disable filtering of rail segment (TGV AIR, RAIL ...)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="railSegmentAllowed")]
		public System.Nullable<System.Boolean> RailSegmentAllowed { get; set; }
		
		/// <summary>
		/// This option force to retrieve flight-offer with a departure and a return in the same airport
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnToDepartureAirport")]
		public System.Nullable<System.Boolean> ReturnToDepartureAirport { get; set; }
	}
	
	public class SearchCriteriaFlightFiltersCabinRestrictions
	{
		
		/// <summary>
		/// quality of service offered in the cabin where the seat is located in this flight. Economy, premium economy, business or first class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cabin")]
		public Co2EmissionCabin Cabin { get; set; }
		
		/// <summary>
		/// part of the trip covered by the travel class restriction (ALL_SEGMENTS if ommited)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage")]
		public Coverage Coverage { get; set; }
		
		/// <summary>
		/// The list of originDestination identifiers for which the cabinRestriction applies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originDestinationIds")]
		public string[] OriginDestinationIds { get; set; }
	}
	
	public class SearchCriteriaFlightFiltersCarrierRestrictions
	{
		
		/// <summary>
		/// This flag enable/disable filtering of blacklisted airline by EU. The list of the banned airlines is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blacklistedInEUAllowed")]
		public System.Nullable<System.Boolean> BlacklistedInEUAllowed { get; set; }
		
		/// <summary>
		/// This option ensures that the system will only consider these airlines.
		/// Minimum items: 1
		/// Maximum items: 99
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedCarrierCodes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string[] ExcludedCarrierCodes { get; set; }
		
		/// <summary>
		/// This option ensures that the system will only consider these airlines.
		/// Minimum items: 1
		/// Maximum items: 99
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedCarrierCodes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string[] IncludedCarrierCodes { get; set; }
	}
	
	public class SearchCriteriaFlightFiltersConnectionRestriction
	{
		
		/// <summary>
		/// Allow to change airport during connection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airportChangeAllowed")]
		public System.Nullable<System.Boolean> AirportChangeAllowed { get; set; }
		
		/// <summary>
		/// The maximal number of connections for each itinerary. Value can be 0, 1 or 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxNumberOfConnections")]
		public System.Nullable<System.Double> MaxNumberOfConnections { get; set; }
		
		/// <summary>
		/// This option allows the single segment to have one or more intermediate stops (technical stops).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="technicalStopsAllowed")]
		public System.Nullable<System.Boolean> TechnicalStopsAllowed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Traveler
	{
		
		/// <summary>
		/// if type="HELD_INFANT", corresponds to the adult travelers's id who will share the seat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedAdultId")]
		public string AssociatedAdultId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// traveler type
		///age restrictions : CHILD < 12y, HELD_INFANT < 2y, SEATED_INFANT < 2y, SENIOR >=60y
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="travelerType")]
		public FlightOfferTravelerPricingsTravelerType TravelerType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationValue
	{
		
		/// <summary>
		/// City code associated to the airport
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cityCode")]
		public string CityCode { get; set; }
		
		/// <summary>
		/// Country code of the airport
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
	}
	
	/// <summary>
	/// departure or arrival information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OriginalFlightEndPoint
	{
		
		/// <summary>
		/// [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iataCode")]
		public string IataCode { get; set; }
		
		/// <summary>
		/// terminal name / number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminal")]
		public string Terminal { get; set; }
	}
	
	/// <summary>
	/// details of stops for direct or change of gauge flights
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OriginalFlightStop
	{
		
		/// <summary>
		/// stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iataCode")]
		public string IataCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Price
	{
		
		/// <summary>
		/// Amount without taxes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base")]
		public string Base { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// List of applicable fees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fees")]
		public Fee[] Fees { get; set; }
		
		/// <summary>
		/// The amount of taxes which are refundable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundableTaxes")]
		public string RefundableTaxes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public Tax[] Taxes { get; set; }
		
		/// <summary>
		/// Total amount paid by the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public string Total { get; set; }
	}
	
	/// <summary>
	/// a tax
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tax
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
	}
	
	/// <summary>
	/// slice and Dice indicator, such as Local Availability, Sub OnD(Origin and Destination) 1 Availability and Sub OnD 2 Availability
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SliceDiceIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCAL_AVAILABILITY")]
		LOCAL_AVAILABILITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUB_OD_AVAILABILITY_1")]
		SUB_OD_AVAILABILITY_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUB_OD_AVAILABILITY_2")]
		SUB_OD_AVAILABILITY_2 = 2,
	}
	
	/// <summary>
	/// quality of service offered in the cabin where the seat is located in this flight. Economy, premium economy, business or first class
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TravelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ECONOMY")]
		ECONOMY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREMIUM_ECONOMY")]
		PREMIUM_ECONOMY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUSINESS")]
		BUSINESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIRST")]
		FIRST = 3,
	}
	
	/// <summary>
	/// option specifying a group of fares, which may be valid under certain conditons
	///Can be used to specify special fare discount for a passenger
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TravelerPricingFareOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD")]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUSIVE_TOUR")]
		INCLUSIVE_TOUR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPANISH_MELILLA_RESIDENT")]
		SPANISH_MELILLA_RESIDENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPANISH_CEUTA_RESIDENT")]
		SPANISH_CEUTA_RESIDENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPANISH_CANARY_RESIDENT")]
		SPANISH_CANARY_RESIDENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPANISH_BALEARIC_RESIDENT")]
		SPANISH_BALEARIC_RESIDENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS")]
		AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIR_FRANCE_DOM_DISCOUNT_PASS")]
		AIR_FRANCE_DOM_DISCOUNT_PASS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIR_FRANCE_COMBINED_DISCOUNT_PASS")]
		AIR_FRANCE_COMBINED_DISCOUNT_PASS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIR_FRANCE_FAMILY")]
		AIR_FRANCE_FAMILY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADULT_WITH_COMPANION")]
		ADULT_WITH_COMPANION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPANION")]
		COMPANION = 11,
	}
	
	/// <summary>
	/// traveler type
	///age restrictions : CHILD < 12y, HELD_INFANT < 2y, SEATED_INFANT < 2y, SENIOR >=60y
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TravelerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADULT")]
		ADULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHILD")]
		CHILD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SENIOR")]
		SENIOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YOUNG")]
		YOUNG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HELD_INFANT")]
		HELD_INFANT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEATED_INFANT")]
		SEATED_INFANT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STUDENT")]
		STUDENT = 6,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Return list of Flight Offers based on searching criteria.
		/// GetFlightOffers shopping/flight-offers
		/// </summary>
		/// <param name="originLocationCode">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston</param>
		/// <param name="destinationLocationCode">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris</param>
		/// <param name="departureDate">the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25</param>
		/// <param name="returnDate">the date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, only one-way itineraries are found. If this parameter is specified, only round-trip itineraries are found. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28</param>
		/// <param name="adults">the number of adult travelers (age 12 or older on date of departure).
		/// Minimum: 1
		/// Maximum: 9
		// </param>
		/// <param name="children">the number of child travelers (older than age 2 and younger than age 12 on date of departure) who will each have their own separate seat. If specified, this number should be greater than or equal to 0
		/// Minimum: 0
		/// Maximum: 9
		// </param>
		/// <param name="infants">the number of infant travelers (whose age is less or equal to 2 on date of departure). Infants travel on the lap of an adult traveler, and thus the number of infants must not exceed the number of adults. If specified, this number should be greater than or equal to 0
		/// Minimum: 0
		/// Maximum: 9
		// </param>
		/// <param name="travelClass">most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class</param>
		/// <param name="includedAirlineCodes">This option ensures that the system will only consider these airlines. This can not be cumulated with parameter excludedAirlineCodes.
		///
		///Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X
		///</param>
		/// <param name="excludedAirlineCodes">This option ensures that the system will ignore these airlines. This can not be cumulated with parameter includedAirlineCodes.
		///
		///Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X
		///</param>
		/// <param name="nonStop">if set to true, the search will find only flights going from the origin to the destination with no stop in between</param>
		/// <param name="currencyCode">the preferred currency for the flight offers. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro</param>
		/// <param name="maxPrice">maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals
		/// Minimum: 1
		// </param>
		/// <param name="max">maximum number of flight offers to return. If specified, the value should be greater than or equal to 1
		/// Minimum: 1
		// </param>
		/// <returns>Successful Operation</returns>
		public async Task GetFlightOffersAsync(string originLocationCode, string destinationLocationCode, System.DateOnly departureDate, System.DateOnly returnDate, int adults, int children, int infants, Co2EmissionCabin travelClass, string includedAirlineCodes, string excludedAirlineCodes, bool nonStop, string currencyCode, int maxPrice, int max, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shopping/flight-offers?originLocationCode=" + (originLocationCode==null? "" : System.Uri.EscapeDataString(originLocationCode))+"&destinationLocationCode=" + (destinationLocationCode==null? "" : System.Uri.EscapeDataString(destinationLocationCode))+"&departureDate="+departureDate+"&returnDate="+returnDate+"&adults="+adults+"&children="+children+"&infants="+infants+"&travelClass=" + travelClass+"&includedAirlineCodes=" + (includedAirlineCodes==null? "" : System.Uri.EscapeDataString(includedAirlineCodes))+"&excludedAirlineCodes=" + (excludedAirlineCodes==null? "" : System.Uri.EscapeDataString(excludedAirlineCodes))+"&nonStop="+nonStop+"&currencyCode=" + (currencyCode==null? "" : System.Uri.EscapeDataString(currencyCode))+"&maxPrice="+maxPrice+"&max="+max;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
