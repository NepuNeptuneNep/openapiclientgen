//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		/// <summary>
		/// Name of administrative area, such as the state or province.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="administrativeAreaLevel1")]
		public string AdministrativeAreaLevel1 { get; set; }
		
		/// <summary>
		/// Two letter country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Name of the address country.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryName")]
		public string CountryName { get; set; }
		
		/// <summary>
		/// Name of address locality, such as the city.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Name of the address locality area, such as the neighborhood or district.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localityAreaLevel1")]
		public string LocalityAreaLevel1 { get; set; }
		
		/// <summary>
		/// Address postal code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Address route or street name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route")]
		public string Route { get; set; }
		
		/// <summary>
		/// Address street number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streetNumber")]
		public string StreetNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Profile
	{
		
		/// <summary>
		/// Client's birth date in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthDate")]
		public string BirthDate { get; set; }
		
		/// <summary>
		/// Client's document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Type of document informed in `document`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		/// <summary>
		/// Client's email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Client's first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Client's last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Prospect
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Schema
	{
		
		/// <summary>
		/// Schema's human readable description.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Document time to live, in days. After this many days from its creation or update, any document cerated from this schema will be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentTTL")]
		public System.Nullable<System.Int32> DocumentTTL { get; set; }
		
		/// <summary>
		/// Object describing each field in your desired schema. In this object, each property is a new object, describing the field according to: `type` (string); `sensitive` (boolean); `pii` (boolean) and; `items.type` (if field is array).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SchemaProperties Properties { get; set; }
		
		/// <summary>
		/// Schema required fields.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="required")]
		public string[] Required { get; set; }
		
		/// <summary>
		/// Schema title.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Schema type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v-indexed")]
		public string[] V_indexed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v-unique")]
		public string[] V_unique { get; set; }
		
		/// <summary>
		/// Schema version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	public class SchemaProperties
	{
		
		/// <summary>
		/// Schema of any given field described in the `properties` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="{fieldName}")]
		public SchemaPropertiesFieldName FieldName { get; set; }
	}
	
	public class SchemaPropertiesFieldName
	{
		
		/// <summary>
		/// Object containing the type of the items if the field is an array. Typically, arrays will contain strings and will be used for fields such as `email`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string Items { get; set; }
		
		/// <summary>
		/// Indicates whether property is Personal Identifiable Information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pii")]
		public bool Pii { get; set; }
		
		/// <summary>
		/// Indicates whether property is sensitive data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sensitive")]
		public bool Sensitive { get; set; }
		
		/// <summary>
		/// Schema property type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create client profile
		/// Creates new client profile.
		/// 
		/// > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
		/// 
		/// > The `id` field returned by this request is the `profileId` used to retrieve information on a specific profile later.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// CreateClientProfile api/storage/profile-system/profiles
		/// </summary>
		/// <param name="ttl">This parameter sets the the Time To Live (TTL), in days, of the specific document being created or updated with this request. After this period of time from the moment of the request, the document is deleted. By sending this parameter you override the TTL set for the schema.
		///
		///		///> Currently, the available default document schemas have no TTL. This means that documents are stored indefinitely, unless a TTL is sent when creating or updating.</param>
		public async Task CreateClientProfileAsync(int ttl, Profile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles?ttl="+ttl;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update profile schema
		/// Creates or updates profile schema.
		/// 
		/// > Each account has one profile schema. Updating it with this request will substitute the previous version.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// CreateOrUpdateProfileSchema api/storage/profile-system/profiles/schema
		/// </summary>
		public async Task CreateOrUpdateProfileSchemaAsync(Schema requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/schema";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete client profile
		/// Deletes a client profile by `profileId`.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// DeleteClientProfile api/storage/profile-system/profiles/{profileId}
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		public async Task DeleteClientProfileAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get profile
		/// Retrieves the information of a specific client, by its `profileId`.
		/// 
		/// > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
		/// 
		/// > For security and privacy reasons, this request returns masked profile data. For unmasked information, see Get unmasked profile.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetProfile api/storage/profile-system/profiles/{profileId}
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <returns>OK</returns>
		public async Task<string[]> GetProfileAsync(string profileId, string alternativeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates client profile
		/// Updates one or more fields of an existing client profile.
		/// 
		/// > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// UpdateClientProfile api/storage/profile-system/profiles/{profileId}
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <param name="ttl">This parameter sets the the Time To Live (TTL), in days, of the specific document being created or updated with this request. After this period of time from the moment of the request, the document is deleted. By sending this parameter you override the TTL set for the schema.
		///
		///		///> Currently, the available default document schemas have no TTL. This means that documents are stored indefinitely, unless a TTL is sent when creating or updating.</param>
		/// <returns>OK</returns>
		public async Task<string> UpdateClientProfileAsync(string profileId, string alternativeKey, int ttl, UpdateClientProfilePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey))+"&ttl="+ttl;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get client addresses
		/// Retrieves information of all addresses of a given client, by its `profileId`.
		/// 
		/// > For security and privacy reasons, this request returns masked address data. For unmasked information, see Get unmasked client addresses.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetClientAddresses api/storage/profile-system/profiles/{profileId}/addresses
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <returns>OK</returns>
		public async Task<string[]> GetClientAddressesAsync(string profileId, string alternativeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/addresses&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create client address
		/// Creates new address for a given client profile.
		/// 
		/// > The `id` field returned by this request is the `addressId` used to retrieve or update information of a specific address later.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// CreateClientAddress api/storage/profile-system/profiles/{profileId}/addresses
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		public async Task CreateClientAddressAsync(string profileId, string alternativeKey, Address requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/addresses&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get unmasked client addresses
		/// Retrieves unmasked information of all addresses of a given client, by its `profileId`.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetUnmaskedClientAddresses api/storage/profile-system/profiles/{profileId}/addresses/unmask
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <returns>OK</returns>
		public async Task<string[]> GetUnmaskedClientAddressesAsync(string profileId, string alternativeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/addresses/unmask&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete address
		/// Deletes a client's address by `profileId` and `addressId`.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// DeleteAddress api/storage/profile-system/profiles/{profileId}/addresses/{addressId}
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="addressId">ID of a client's specific address as returned in the Create client address endpoint's response, in the `id` field.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		public async Task DeleteAddressAsync(string profileId, string addressId, string alternativeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/addresses/"+ (addressId==null? "" : System.Uri.EscapeDataString(addressId))+"&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get address
		/// Retrieves information of a specific address of a given client, by its respectives `adderssId` and `profileId`.
		/// 
		/// > For security and privacy reasons, this request returns masked address data. For unmasked information, see Get unmasked address.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetAddress api/storage/profile-system/profiles/{profileId}/addresses/{addressId}
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="addressId">ID of a client's specific address as returned in the Create client address endpoint's response, in the `id` field.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <returns>OK</returns>
		public async Task<string> GetAddressAsync(string profileId, string addressId, string alternativeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/addresses/"+ (addressId==null? "" : System.Uri.EscapeDataString(addressId))+"&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update client address
		/// Updates one or more fields of an existing address for a given client profile.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// UpdateClientAddress api/storage/profile-system/profiles/{profileId}/addresses/{addressId}
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="addressId">ID of a client's specific address as returned in the Create client address endpoint's response, in the `id` field.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <returns>OK</returns>
		public async Task<string> UpdateClientAddressAsync(string profileId, string addressId, string alternativeKey, UpdateClientAddressPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/addresses/"+ (addressId==null? "" : System.Uri.EscapeDataString(addressId))+"&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get unmasked address
		/// Retrieves unmasked information of a specific address of a given client, by its respectives `adderssId` and `profileId`.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetUnmaskedAddress api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/unmask
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="addressId">ID of a client's specific address as returned in the Create client address endpoint's response, in the `id` field.</param>
		/// <param name="reason">Reason for requesting unmasked data.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <returns>OK</returns>
		public async Task<string> GetUnmaskedAddressAsync(string profileId, string addressId, string reason, string alternativeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/addresses/"+ (addressId==null? "" : System.Uri.EscapeDataString(addressId))+"/unmask&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason))+"&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get address by version
		/// Retrieves information of a specific version address of a given client.
		/// 
		/// > For security and privacy reasons, this request returns masked address data by version. For unmasked information, see Get unmasked address by version.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetAddressByVersion api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/versions/{addressVersionId}
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="addressId">ID of a client's specific address as returned in the Create client address endpoint's response, in the `id` field.</param>
		/// <param name="addressVersionId">ID of the version of a given client's address as returned by endpoints that create or update address information in the `version` field.</param>
		/// <param name="reason">Reason for requesting unmasked data.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <returns>OK</returns>
		public async Task<string> GetAddressByVersionAsync(string profileId, string addressId, string addressVersionId, string reason, string alternativeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/addresses/"+ (addressId==null? "" : System.Uri.EscapeDataString(addressId))+"/versions/"+ (addressVersionId==null? "" : System.Uri.EscapeDataString(addressVersionId))+"&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason))+"&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get unmasked address by version
		/// Retrieves unmasked information of a specific address version of a given client.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetUnmaskedAddressByVersion api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/versions/{addressVersionId}/unmask
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="addressId">ID of a client's specific address as returned in the Create client address endpoint's response, in the `id` field.</param>
		/// <param name="addressVersionId">ID of the version of a given client's address as returned by endpoints that create or update address information in the `version` field.</param>
		/// <param name="reason">Reason for requesting unmasked data.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <returns>OK</returns>
		public async Task<string> GetUnmaskedAddressByVersionAsync(string profileId, string addressId, string addressVersionId, string reason, string alternativeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/addresses/"+ (addressId==null? "" : System.Uri.EscapeDataString(addressId))+"/versions/"+ (addressVersionId==null? "" : System.Uri.EscapeDataString(addressVersionId))+"/unmask&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason))+"&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete purchase information
		/// Deletes purchase informaiton by `profileId`.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// DeletePurchaseInformation api/storage/profile-system/profiles/{profileId}/purchase-info
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		public async Task DeletePurchaseInformationAsync(string profileId, string alternativeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/purchase-info&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get purchase information
		/// Retrieves purchase information of a given client, by its `profileId`.
		/// 
		/// > For security and privacy reasons, this request returns masked data. For unmasked information, see Get unmasked purchase information.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetPurchaseInformation api/storage/profile-system/profiles/{profileId}/purchase-info
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <returns>OK</returns>
		public async Task<string[]> GetPurchaseInformationAsync(string profileId, string alternativeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/purchase-info&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update purchase information
		/// Updates one or more fields of existing purchase information for a given client profile.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// UpdatePurchaseInformation api/storage/profile-system/profiles/{profileId}/purchase-info
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <returns>OK</returns>
		public async Task<string> UpdatePurchaseInformationAsync(string profileId, string alternativeKey, object requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/purchase-info&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create purchase information
		/// Creates purchase information for a given client profile.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// CreatePurchaseInformation api/storage/profile-system/profiles/{profileId}/purchase-info
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		public async Task CreatePurchaseInformationAsync(string profileId, string alternativeKey, object requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/purchase-info&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get unmasked purchase information
		/// Retrieves unmasked purchase information of a given client, by its `profileId`.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetUnmaskedPurchaseInformation api/storage/profile-system/profiles/{profileId}/purchase-info/unmask
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <returns>OK</returns>
		public async Task<string[]> GetUnmaskedPurchaseInformationAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/purchase-info/unmask";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get unmasked profile
		/// Retrieves unmasked information of a specific client, by its `profileId`.
		/// 
		/// > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetUnmaskedProfile api/storage/profile-system/profiles/{profileId}/unmask
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="reason">Reason for requesting unmasked data.</param>
		/// <param name="alternativeKey">The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
		///
		///		///> Currently, there are two possible values for this parameter: `email` and `document`.</param>
		/// <returns>OK</returns>
		public async Task<string[]> GetUnmaskedProfileAsync(string profileId, string reason, string alternativeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/unmask&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason))+"&alternativeKey=" + (alternativeKey==null? "" : System.Uri.EscapeDataString(alternativeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get profile by version
		/// Retrieves the information of a specific version of a client profile.
		/// 
		/// > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
		/// 
		/// > For security and privacy reasons, this request returns masked profile data. For unmasked information, see Get unmasked profile by version.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetProfileByVersion api/storage/profile-system/profiles/{profileId}/versions/{profileVersionId}
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="profileVersionId">ID of the version of the client's profile as returned by endpoints that create or update profile information in the `version` field.</param>
		/// <returns>OK</returns>
		public async Task<string[]> GetProfileByVersionAsync(string profileId, string profileVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/versions/"+ (profileVersionId==null? "" : System.Uri.EscapeDataString(profileVersionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get unmasked profile by version
		/// Retrieves unmasked information of a specific version of a client profile.
		/// 
		/// > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetUnmaskedProfileByVersion api/storage/profile-system/profiles/{profileId}/versions/{profileVersionId}/unmask
		/// </summary>
		/// <param name="profileId">ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.</param>
		/// <param name="profileVersionId">ID of the version of the client's profile as returned by endpoints that create or update profile information in the `version` field.</param>
		/// <param name="reason">Reason for requesting unmasked data.</param>
		/// <returns>OK</returns>
		public async Task<string[]> GetUnmaskedProfileByVersionAsync(string profileId, string profileVersionId, string reason, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/versions/"+ (profileVersionId==null? "" : System.Uri.EscapeDataString(profileVersionId))+"/unmask&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create prospect
		/// Creates new prospect.
		/// 
		/// > The `id` field returned by this request is the `prospectId` used to retrieve information on a specific prospect later.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// CreateProspect api/storage/profile-system/prospects
		/// </summary>
		public async Task CreateProspectAsync(Prospect requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/prospects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete prospect
		/// Deletes a prospect by `prospectId`.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// DeleteProspect api/storage/profile-system/prospects/{prospectId}
		/// </summary>
		/// <param name="prospectId">ID of the prospect as returned by the Create prospect endpoint's response, in the `id` field.</param>
		public async Task DeleteProspectAsync(string prospectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/prospects/"+ (prospectId==null? "" : System.Uri.EscapeDataString(prospectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get prospect
		/// Retrieves the information of a specific prospect, by its `prospectId`.
		/// 
		/// > For security and privacy reasons, this request returns masked prospect data. For unmasked information, see Get unmasked prospect.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetProspect api/storage/profile-system/prospects/{prospectId}
		/// </summary>
		/// <param name="prospectId">ID of the prospect as returned by the Create prospect endpoint's response, in the `id` field.</param>
		/// <returns>OK</returns>
		public async Task<string[]> GetProspectAsync(string prospectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/prospects/"+ (prospectId==null? "" : System.Uri.EscapeDataString(prospectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update prospect
		/// Updates one or more fields of an existing prospect.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// UpdateProspect api/storage/profile-system/prospects/{prospectId}
		/// </summary>
		/// <param name="prospectId">ID of the prospect as returned by the Create prospect endpoint's response, in the `id` field.</param>
		/// <returns>OK</returns>
		public async Task<string> UpdateProspectAsync(string prospectId, object requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/prospects/"+ (prospectId==null? "" : System.Uri.EscapeDataString(prospectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get unmasked prospect
		/// Retrieves unmasked information of a specific prospect, by its `prospectId`.
		/// 
		/// > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
		/// GetUnmaskedProspect api/storage/profile-system/prospects/{prospectId}/unmask
		/// </summary>
		/// <param name="prospectId">ID of the prospect as returned by the Create prospect endpoint's response, in the `id` field.</param>
		/// <param name="reason">Reason for requesting unmasked data.</param>
		/// <returns>OK</returns>
		public async Task<string[]> GetUnmaskedProspectAsync(string prospectId, string reason, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/storage/profile-system/prospects/"+ (prospectId==null? "" : System.Uri.EscapeDataString(prospectId))+"/unmask&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class UpdateClientProfilePatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="birthDate")]
		public Profile BirthDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Profile Document { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public Profile DocumentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public Profile Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public Profile FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public Profile LastName { get; set; }
	}
	
	public class UpdateClientAddressPatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="administrativeAreaLevel1")]
		public Address AdministrativeAreaLevel1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public Address CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryName")]
		public Address CountryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public Address Locality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localityAreaLevel1")]
		public Address LocalityAreaLevel1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public Address PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route")]
		public Address Route { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetNumber")]
		public Address StreetNumber { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
