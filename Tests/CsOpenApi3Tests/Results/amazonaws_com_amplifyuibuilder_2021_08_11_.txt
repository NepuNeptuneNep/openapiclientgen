//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public Component Entity { get; set; }
	}
	
	/// <summary>
	/// Contains the configuration settings for a user interface (UI) element for an Amplify app. A component is configured as a primary, stand-alone UI element. Use <code>ComponentChild</code> to configure an instance of a <code>Component</code>. A <code>ComponentChild</code> instance inherits the configuration of the main <code>Component</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Component
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentName")]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentType")]
		public string ComponentType { get; set; }
		
		/// <summary>
		/// Describes the component's properties. You can't specify <code>tags</code> as a valid property for <code>properties</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public ComponentChild[] Children { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public ComponentVariant[] Variants { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ComponentOverrides Overrides { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bindingProperties")]
		public ComponentBindingProperties BindingProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectionProperties")]
		public ComponentCollectionProperties CollectionProperties { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedAt")]
		public System.DateTimeOffset ModifiedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public ComponentEvents Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	/// <summary>
	/// A nested UI configuration within a parent <code>Component</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentChild
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentType")]
		public string ComponentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Describes the properties of the child component. You can't specify <code>tags</code> as a valid property for <code>properties</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public ComponentChild[] Children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public ComponentEvents Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentEvents
	{
	}
	
	/// <summary>
	/// Describes the style configuration of a unique variation of a main component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentVariant
	{
		
		[System.Runtime.Serialization.DataMember(Name="variantValues")]
		public ComponentVariantValues VariantValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ComponentOverrides Overrides { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentVariantValues
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentOverrides
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentBindingProperties
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentCollectionProperties
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tags
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFormResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public Form Entity { get; set; }
	}
	
	/// <summary>
	/// Contains the configuration settings for a <code>Form</code> user interface (UI) element for an Amplify app. A form is a component you can add to your project by specifying a data source as the default configuration for the form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Form
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentName")]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formActionType")]
		public FormActionType FormActionType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="style")]
		public FormStyle Style { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public FormDataTypeConfig DataType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public FieldsMap Fields { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sectionalElements")]
		public SectionalElementMap SectionalElements { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cta")]
		public FormCTA Cta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelDecorator")]
		public LabelDecorator LabelDecorator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FormActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="create")]
		create = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="update")]
		update = 1,
	}
	
	/// <summary>
	/// Describes the configuration for the form's style.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormStyle
	{
		
		[System.Runtime.Serialization.DataMember(Name="horizontalGap")]
		public FormStyleConfig HorizontalGap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verticalGap")]
		public FormStyleConfig VerticalGap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outerPadding")]
		public FormStyleConfig OuterPadding { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration settings for the form's style properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormStyleConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="tokenReference")]
		public string TokenReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes the data type configuration for the data source associated with a form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormDataTypeConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSourceType")]
		public FormDataSourceType DataSourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataTypeName")]
		public string DataTypeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FormDataSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataStore")]
		DataStore = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Custom")]
		Custom = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FieldsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SectionalElementMap
	{
	}
	
	/// <summary>
	/// Describes the call to action button configuration for the form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormCTA
	{
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public FormButtonsPosition Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clear")]
		public FormButton Clear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancel")]
		public FormButton Cancel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="submit")]
		public FormButton Submit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FormButtonsPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="top")]
		top = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bottom")]
		bottom = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="top_and_bottom")]
		top_and_bottom = 2,
	}
	
	/// <summary>
	/// Describes the configuration for a button UI element that is a part of a form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormButton
	{
		
		[System.Runtime.Serialization.DataMember(Name="excluded")]
		public System.Nullable<System.Boolean> Excluded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public string Children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public FieldPosition Position { get; set; }
	}
	
	/// <summary>
	/// Describes the field position.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FieldPosition
	{
		
		[System.Runtime.Serialization.DataMember(Name="fixed")]
		public FixedPosition Fixed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rightOf")]
		public string RightOf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="below")]
		public string Below { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FixedPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="first")]
		first = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LabelDecorator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="required")]
		required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="optional")]
		optional = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateThemeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public Theme Entity { get; set; }
	}
	
	/// <summary>
	/// A theme is a collection of style settings that apply globally to the components associated with an Amplify application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Theme
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentName")]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedAt")]
		public System.DateTimeOffset ModifiedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public ThemeValues[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ThemeValues[] Overrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// A key-value pair that defines a property of a theme.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThemeValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ThemeValue Value { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration of a theme's properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThemeValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public ThemeValues[] Children { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExchangeCodeForTokenResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public int ExpiresIn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportComponentsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public Component[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportFormsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public Form[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportThemesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public Theme[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCodegenJobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public CodegenJob Job { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration for a code generation job that is associated with an Amplify app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenJob
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentName")]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Describes the configuration information for rendering the UI component associated with the code generation job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderConfig")]
		public CodegenJobRenderConfig RenderConfig { get; set; }
		
		/// <summary>
		/// Describes the data schema for a code generation job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genericDataSchema")]
		public CodegenJobGenericDataSchema GenericDataSchema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoGenerateForms")]
		public System.Nullable<System.Boolean> AutoGenerateForms { get; set; }
		
		/// <summary>
		/// Describes the feature flags that you can specify for a code generation job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public CodegenFeatureFlags Features { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CodegenJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asset")]
		public CodegenJobAsset Asset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedAt")]
		public System.DateTimeOffset ModifiedAt { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration information for rendering the UI component associated with the code generation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenJobRenderConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="react")]
		public ReactStartCodegenJobData React { get; set; }
	}
	
	/// <summary>
	/// Describes the code generation job configuration for a React project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReactStartCodegenJobData
	{
		
		[System.Runtime.Serialization.DataMember(Name="module")]
		public JSModule Module { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public JSTarget Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public JSScript Script { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="renderTypeDeclarations")]
		public System.Nullable<System.Boolean> RenderTypeDeclarations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inlineSourceMap")]
		public System.Nullable<System.Boolean> InlineSourceMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiConfiguration")]
		public ApiConfiguration ApiConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JSModule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es2020")]
		es2020 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="esnext")]
		esnext = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JSTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es2015")]
		es2015 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es2020")]
		es2020 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JSScript
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jsx")]
		jsx = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tsx")]
		tsx = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="js")]
		js = 2,
	}
	
	/// <summary>
	/// Describes the API configuration for a code generation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="graphQLConfig")]
		public GraphQLRenderConfig GraphQLConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataStoreConfig")]
		public DataStoreRenderConfig DataStoreConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noApiConfig")]
		public NoApiRenderConfig NoApiConfig { get; set; }
	}
	
	/// <summary>
	/// Describes the GraphQL configuration for an API for a code generation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GraphQLRenderConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typesFilePath")]
		public string TypesFilePath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queriesFilePath")]
		public string QueriesFilePath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mutationsFilePath")]
		public string MutationsFilePath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionsFilePath")]
		public string SubscriptionsFilePath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fragmentsFilePath")]
		public string FragmentsFilePath { get; set; }
	}
	
	/// <summary>
	/// Describes the DataStore configuration for an API for a code generation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataStoreRenderConfig
	{
	}
	
	/// <summary>
	/// Describes the configuration for an application with no API being used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoApiRenderConfig
	{
	}
	
	/// <summary>
	/// Describes the data schema for a code generation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenJobGenericDataSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSourceType")]
		public CodegenJobGenericDataSourceType DataSourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="models")]
		public CodegenGenericDataModels Models { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enums")]
		public CodegenGenericDataEnums Enums { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nonModels")]
		public CodegenGenericDataNonModels NonModels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CodegenJobGenericDataSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataStore")]
		DataStore = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenGenericDataModels
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenGenericDataEnums
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenGenericDataNonModels
	{
	}
	
	/// <summary>
	/// Describes the feature flags that you can specify for a code generation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenFeatureFlags
	{
		
		[System.Runtime.Serialization.DataMember(Name="isRelationshipSupported")]
		public System.Nullable<System.Boolean> IsRelationshipSupported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isNonModelSupported")]
		public System.Nullable<System.Boolean> IsNonModelSupported { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CodegenJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="succeeded")]
		succeeded = 2,
	}
	
	/// <summary>
	/// Describes an asset for a code generation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenJobAsset
	{
		
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="component")]
		public Component Component { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetFormResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="form")]
		public Form Form { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMetadataResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="features")]
		public FeaturesMap Features { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeaturesMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetThemeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public Theme Theme { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCodegenJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public CodegenJobSummary[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of the basic information about the code generation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenJobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentName")]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedAt")]
		public System.DateTimeOffset ModifiedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListComponentsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public ComponentSummary[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains a summary of a component. This is a read-only data type that is returned by <code>ListComponents</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentName")]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentType")]
		public string ComponentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFormsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public FormSummary[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the basic information about a form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public FormDataTypeConfig DataType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentName")]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formActionType")]
		public FormActionType FormActionType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThemesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public ThemeSummary[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the basic information about a theme.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThemeSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentName")]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RefreshTokenResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public int ExpiresIn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartCodegenJobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public CodegenJob Entity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public Component Entity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFormResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public Form Entity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateThemeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public Theme Entity { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration for all of a component's properties. Use <code>ComponentProperty</code> to specify the values to render or bind by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentProperty
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindingProperties")]
		public ComponentPropertyBindingProperties BindingProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectionBindingProperties")]
		public ComponentPropertyBindingProperties CollectionBindingProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public FormBindings Bindings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event")]
		public string Event { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAttribute")]
		public string UserAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concat")]
		public ComponentProperty[] Concat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public ComponentConditionProperty Condition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configured")]
		public System.Nullable<System.Boolean> Configured { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importedValue")]
		public string ImportedValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="property")]
		public string Property { get; set; }
	}
	
	/// <summary>
	/// Associates a component property to a binding property. This enables exposed properties on the top level component to propagate data to the component's property values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentPropertyBindingProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="property")]
		public string Property { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormBindings
	{
	}
	
	/// <summary>
	/// Represents a conditional expression to set a component property. Use <code>ComponentConditionProperty</code> to set a property to different values conditionally, based on the value of another property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentConditionProperty
	{
		
		[System.Runtime.Serialization.DataMember(Name="property")]
		public string Property { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operand")]
		public string Operand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="then")]
		public ComponentProperty Then { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="else")]
		public ComponentProperty Else { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operandType")]
		public string OperandType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentProperties
	{
	}
	
	/// <summary>
	/// Represents the state configuration when an action modifies a property of another element within the same component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MutationActionSetStateParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="property")]
		public string Property { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="set")]
		public ComponentProperty Set { get; set; }
	}
	
	/// <summary>
	/// Represents the event action configuration for an element of a <code>Component</code> or <code>ComponentChild</code>. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components. <code>ActionParameters</code> defines the action that is performed when an event occurs on the component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ComponentProperty Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public ComponentProperty Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="anchor")]
		public ComponentProperty Anchor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public ComponentProperty Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="global")]
		public ComponentProperty Global { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public ComponentProperty Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public ComponentProperties Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public MutationActionSetStateParameter State { get; set; }
	}
	
	/// <summary>
	/// Describes the enums in a generic data schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenGenericDataEnum
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CodegenGenericDataFieldDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ID")]
		ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="String")]
		String = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Int")]
		Int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Float")]
		Float = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSDate")]
		AWSDate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSTime")]
		AWSTime = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSDateTime")]
		AWSDateTime = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSTimestamp")]
		AWSTimestamp = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSEmail")]
		AWSEmail = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSURL")]
		AWSURL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIPAddress")]
		AWSIPAddress = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Boolean")]
		Boolean = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSJSON")]
		AWSJSON = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSPhone")]
		AWSPhone = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Enum")]
		Enum = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Model")]
		Model = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NonModel")]
		NonModel = 16,
	}
	
	/// <summary>
	/// Describes the relationship between generic data models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenGenericDataRelationshipType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GenericDataRelationshipType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedModelName")]
		public string RelatedModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedModelFields")]
		public string[] RelatedModelFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canUnlinkAssociatedModel")]
		public System.Nullable<System.Boolean> CanUnlinkAssociatedModel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedJoinFieldName")]
		public string RelatedJoinFieldName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedJoinTableName")]
		public string RelatedJoinTableName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="belongsToFieldOnRelatedModel")]
		public string BelongsToFieldOnRelatedModel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedFields")]
		public string[] AssociatedFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isHasManyIndex")]
		public System.Nullable<System.Boolean> IsHasManyIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GenericDataRelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HAS_MANY")]
		HAS_MANY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HAS_ONE")]
		HAS_ONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BELONGS_TO")]
		BELONGS_TO = 2,
	}
	
	/// <summary>
	/// Describes a field in a generic data schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenGenericDataField
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public CodegenGenericDataFieldDataType DataType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataTypeValue")]
		public string DataTypeValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="required")]
		public bool Required { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public bool ReadOnly { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isArray")]
		public bool IsArray { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationship")]
		public CodegenGenericDataRelationshipType Relationship { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenGenericDataFields
	{
	}
	
	/// <summary>
	/// Describes a model in a generic data schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenGenericDataModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public CodegenGenericDataFields Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isJoinTable")]
		public System.Nullable<System.Boolean> IsJoinTable { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="primaryKeys")]
		public string[] PrimaryKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenGenericDataNonModelFields
	{
	}
	
	/// <summary>
	/// Describes a non-model in a generic data schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodegenGenericDataNonModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public CodegenGenericDataNonModelFields Fields { get; set; }
	}
	
	/// <summary>
	/// Represents the data binding configuration for a component at runtime. You can use <code>ComponentBindingPropertiesValue</code> to add exposed properties to a component to allow different values to be entered when a component is reused in different places in an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentBindingPropertiesValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindingProperties")]
		public ComponentBindingPropertiesValueProperties BindingProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
	}
	
	/// <summary>
	/// Represents the data binding configuration for a specific property using data stored in Amazon Web Services. For Amazon Web Services connected properties, you can bind a property to data stored in an Amazon S3 bucket, an Amplify DataStore model or an authenticated user attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentBindingPropertiesValueProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="predicates")]
		public Predicate[] Predicates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAttribute")]
		public string UserAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		public string SlotName { get; set; }
	}
	
	/// <summary>
	/// Stores information for generating Amplify DataStore queries. Use a <code>Predicate</code> to retrieve a subset of the data in a collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Predicate
	{
		
		[System.Runtime.Serialization.DataMember(Name="or")]
		public Predicate[] Or { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="and")]
		public Predicate[] And { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operand")]
		public string Operand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operandType")]
		public string OperandType { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration for binding a component's properties to data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentDataConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public SortProperty[] Sort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="predicate")]
		public Predicate Predicate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifiers")]
		public string[] Identifiers { get; set; }
	}
	
	/// <summary>
	/// Describes how to sort the data that you bind to a component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SortProperty
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public SortDirection Direction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SortDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASC")]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESC")]
		DESC = 1,
	}
	
	/// <summary>
	/// Describes the configuration of an event. You can bind an event and a corresponding action to a <code>Component</code> or a <code>ComponentChild</code>. A button click is an example of an event. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ActionParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindingEvent")]
		public string BindingEvent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentOverridesValue
	{
	}
	
	/// <summary>
	/// Represents all of the information that is required to create a component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateComponentData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentType")]
		public string ComponentType { get; set; }
		
		/// <summary>
		/// Describes the component's properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public ComponentChild[] Children { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public ComponentVariant[] Variants { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ComponentOverrides Overrides { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bindingProperties")]
		public ComponentBindingProperties BindingProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectionProperties")]
		public ComponentCollectionProperties CollectionProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public ComponentEvents Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateComponentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentToCreate")]
		public CreateComponentData ComponentToCreate { get; set; }
	}
	
	/// <summary>
	/// Represents all of the information that is required to create a form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFormData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public FormDataTypeConfig DataType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formActionType")]
		public FormActionType FormActionType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public FieldsMap Fields { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="style")]
		public FormStyle Style { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sectionalElements")]
		public SectionalElementMap SectionalElements { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cta")]
		public FormCTA Cta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelDecorator")]
		public LabelDecorator LabelDecorator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFormRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formToCreate")]
		public CreateFormData FormToCreate { get; set; }
	}
	
	/// <summary>
	/// Represents all of the information that is required to create a theme.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateThemeData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public ThemeValues[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ThemeValues[] Overrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateThemeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="themeToCreate")]
		public CreateThemeData ThemeToCreate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteComponentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFormRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteThemeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TokenProviders
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="figma")]
		figma = 0,
	}
	
	/// <summary>
	/// Describes the configuration of a request to exchange an access code for a token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExchangeCodeForTokenRequestBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redirectUri")]
		public string RedirectUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExchangeCodeForTokenRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="request")]
		public ExchangeCodeForTokenRequestBody Request { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportComponentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportFormsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportThemesRequest
	{
	}
	
	/// <summary>
	/// Describes the configuration for the default input values to display for a field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FieldInputConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="placeholder")]
		public string Placeholder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="descriptiveText")]
		public string DescriptiveText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultChecked")]
		public System.Nullable<System.Boolean> DefaultChecked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultCountryCode")]
		public string DefaultCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueMappings")]
		public ValueMappings ValueMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public float MinValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public float MaxValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="step")]
		public float Step { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isArray")]
		public System.Nullable<System.Boolean> IsArray { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileUploaderConfig")]
		public FileUploaderFieldConfig FileUploaderConfig { get; set; }
	}
	
	/// <summary>
	/// Represents the data binding configuration for a value map.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValueMappings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public ValueMapping[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindingProperties")]
		public FormInputBindingProperties BindingProperties { get; set; }
	}
	
	/// <summary>
	/// Associates a complex object with a display value. Use <code>ValueMapping</code> to store how to represent complex objects when they are displayed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValueMapping
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayValue")]
		public FormInputValueProperty DisplayValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public FormInputValueProperty Value { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration for an input field on a form. Use <code>FormInputValueProperty</code> to specify the values to render or bind by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormInputValueProperty
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindingProperties")]
		public FormInputValuePropertyBindingProperties BindingProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concat")]
		public FormInputValueProperty[] Concat { get; set; }
	}
	
	/// <summary>
	/// Associates a form property to a binding property. This enables exposed properties on the top level form to propagate data to the form's property values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormInputValuePropertyBindingProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="property")]
		public string Property { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormInputBindingProperties
	{
	}
	
	/// <summary>
	/// Describes the configuration for the file uploader field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileUploaderFieldConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessLevel")]
		public StorageAccessLevel AccessLevel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acceptedFileTypes")]
		public string[] AcceptedFileTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showThumbnails")]
		public System.Nullable<System.Boolean> ShowThumbnails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isResumable")]
		public System.Nullable<System.Boolean> IsResumable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxFileCount")]
		public System.Nullable<System.Int32> MaxFileCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxSize")]
		public System.Nullable<System.Int32> MaxSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StorageAccessLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="protected")]
		_protected = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 2,
	}
	
	/// <summary>
	/// Describes the validation configuration for a field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FieldValidationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strValues")]
		public string[] StrValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numValues")]
		public System.Nullable<System.Int32> NumValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationMessage")]
		public string ValidationMessage { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration information for a field in a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FieldConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public FieldPosition Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="excluded")]
		public System.Nullable<System.Boolean> Excluded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputType")]
		public FieldInputConfig InputType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validations")]
		public FieldValidationConfiguration[] Validations { get; set; }
	}
	
	/// <summary>
	/// Describes how to bind a component property to form data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormBindingElement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="element")]
		public string Element { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="property")]
		public string Property { get; set; }
	}
	
	/// <summary>
	/// Represents the data binding configuration for a form's input fields at runtime.You can use <code>FormInputBindingPropertiesValue</code> to add exposed properties to a form to allow different values to be entered when a form is reused in different places in an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormInputBindingPropertiesValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindingProperties")]
		public FormInputBindingPropertiesValueProperties BindingProperties { get; set; }
	}
	
	/// <summary>
	/// Represents the data binding configuration for a specific property using data stored in Amazon Web Services. For Amazon Web Services connected properties, you can bind a property to data stored in an Amplify DataStore model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormInputBindingPropertiesValueProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCodegenJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComponentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetFormRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMetadataRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetThemeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCodegenJobsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListComponentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFormsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThemesRequest
	{
	}
	
	/// <summary>
	/// Stores the metadata information about a feature on a form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutMetadataFlagBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newValue")]
		public string NewValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutMetadataFlagRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public PutMetadataFlagBody Body { get; set; }
	}
	
	/// <summary>
	/// Describes a refresh token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RefreshTokenRequestBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RefreshTokenRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="refreshTokenBody")]
		public RefreshTokenRequestBody RefreshTokenBody { get; set; }
	}
	
	/// <summary>
	/// Stores the configuration information for a visual helper element for a form. A sectional element can be a header, a text block, or a divider. These elements are static and not associated with any data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SectionalElement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public FieldPosition Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Int32> Level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public string Orientation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="excluded")]
		public System.Nullable<System.Boolean> Excluded { get; set; }
	}
	
	/// <summary>
	/// The code generation job resource configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartCodegenJobData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="renderConfig")]
		public CodegenJobRenderConfig RenderConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genericDataSchema")]
		public CodegenJobGenericDataSchema GenericDataSchema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoGenerateForms")]
		public System.Nullable<System.Boolean> AutoGenerateForms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public CodegenFeatureFlags Features { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartCodegenJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="codegenJobToCreate")]
		public StartCodegenJobData CodegenJobToCreate { get; set; }
	}
	
	/// <summary>
	/// Updates and saves all of the information about a component, based on component ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateComponentData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentType")]
		public string ComponentType { get; set; }
		
		/// <summary>
		/// Describes the component's properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public ComponentChild[] Children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public ComponentVariant[] Variants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ComponentOverrides Overrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindingProperties")]
		public ComponentBindingProperties BindingProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectionProperties")]
		public ComponentCollectionProperties CollectionProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public ComponentEvents Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateComponentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedComponent")]
		public UpdateComponentData UpdatedComponent { get; set; }
	}
	
	/// <summary>
	/// Updates and saves all of the information about a form, based on form ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFormData
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public FormDataTypeConfig DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formActionType")]
		public FormActionType FormActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public FieldsMap Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="style")]
		public FormStyle Style { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sectionalElements")]
		public SectionalElementMap SectionalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cta")]
		public FormCTA Cta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelDecorator")]
		public LabelDecorator LabelDecorator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFormRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedForm")]
		public UpdateFormData UpdatedForm { get; set; }
	}
	
	/// <summary>
	/// Saves the data binding information for a theme.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateThemeData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public ThemeValues[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ThemeValues[] Overrides { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateThemeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedTheme")]
		public UpdateThemeData UpdatedTheme { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a new component for an Amplify app.
		/// CreateComponent app/{appId}/environment/{environmentName}/components
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app to associate with the component.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="clientToken">The unique client token.</param>
		/// <returns>Success</returns>
		public async Task<CreateComponentResponse> CreateComponentAsync(string appId, string environmentName, string clientToken, CreateComponentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/components&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of components for a specified Amplify app and backend environment.
		/// ListComponents app/{appId}/environment/{environmentName}/components
		/// </summary>
		/// <param name="appId">The unique ID for the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="nextToken">The token to request the next page of results.</param>
		/// <param name="maxResults">The maximum number of components to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<ListComponentsResponse> ListComponentsAsync(string appId, string environmentName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/components&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListComponentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new form for an Amplify app.
		/// CreateForm app/{appId}/environment/{environmentName}/forms
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app to associate with the form.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="clientToken">The unique client token.</param>
		/// <returns>Success</returns>
		public async Task<CreateFormResponse> CreateFormAsync(string appId, string environmentName, string clientToken, CreateFormPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/forms&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateFormResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of forms for a specified Amplify app and backend environment.
		/// ListForms app/{appId}/environment/{environmentName}/forms
		/// </summary>
		/// <param name="appId">The unique ID for the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="nextToken">The token to request the next page of results.</param>
		/// <param name="maxResults">The maximum number of forms to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<ListFormsResponse> ListFormsAsync(string appId, string environmentName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/forms&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFormsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a theme to apply to the components in an Amplify app.
		/// CreateTheme app/{appId}/environment/{environmentName}/themes
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app associated with the theme.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="clientToken">The unique client token.</param>
		/// <returns>Success</returns>
		public async Task<CreateThemeResponse> CreateThemeAsync(string appId, string environmentName, string clientToken, CreateThemePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/themes&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateThemeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of themes for a specified Amplify app and backend environment.
		/// ListThemes app/{appId}/environment/{environmentName}/themes
		/// </summary>
		/// <param name="appId">The unique ID for the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="nextToken">The token to request the next page of results.</param>
		/// <param name="maxResults">The maximum number of theme results to return in the response.</param>
		/// <returns>Success</returns>
		public async Task<ListThemesResponse> ListThemesAsync(string appId, string environmentName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/themes&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListThemesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a component from an Amplify app.
		/// DeleteComponent app/{appId}/environment/{environmentName}/components/{id}
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app associated with the component to delete.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="id">The unique ID of the component to delete.</param>
		/// <returns>Success</returns>
		public async Task DeleteComponentAsync(string appId, string environmentName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/components/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an existing component for an Amplify app.
		/// GetComponent app/{appId}/environment/{environmentName}/components/{id}
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is part of the Amplify app.</param>
		/// <param name="id">The unique ID of the component.</param>
		/// <returns>Success</returns>
		public async Task<GetComponentResponse> GetComponentAsync(string appId, string environmentName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/components/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing component.
		/// UpdateComponent app/{appId}/environment/{environmentName}/components/{id}
		/// </summary>
		/// <param name="appId">The unique ID for the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is part of the Amplify app.</param>
		/// <param name="id">The unique ID for the component.</param>
		/// <param name="clientToken">The unique client token.</param>
		/// <returns>Success</returns>
		public async Task<UpdateComponentResponse> UpdateComponentAsync(string appId, string environmentName, string id, string clientToken, UpdateComponentPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/components/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a form from an Amplify app.
		/// DeleteForm app/{appId}/environment/{environmentName}/forms/{id}
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app associated with the form to delete.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="id">The unique ID of the form to delete.</param>
		/// <returns>Success</returns>
		public async Task DeleteFormAsync(string appId, string environmentName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/forms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an existing form for an Amplify app.
		/// GetForm app/{appId}/environment/{environmentName}/forms/{id}
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is part of the Amplify app.</param>
		/// <param name="id">The unique ID of the form.</param>
		/// <returns>Success</returns>
		public async Task<GetFormResponse> GetFormAsync(string appId, string environmentName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/forms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetFormResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing form.
		/// UpdateForm app/{appId}/environment/{environmentName}/forms/{id}
		/// </summary>
		/// <param name="appId">The unique ID for the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is part of the Amplify app.</param>
		/// <param name="id">The unique ID for the form.</param>
		/// <param name="clientToken">The unique client token.</param>
		/// <returns>Success</returns>
		public async Task<UpdateFormResponse> UpdateFormAsync(string appId, string environmentName, string id, string clientToken, UpdateFormPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/forms/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateFormResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a theme from an Amplify app.
		/// DeleteTheme app/{appId}/environment/{environmentName}/themes/{id}
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app associated with the theme to delete.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="id">The unique ID of the theme to delete.</param>
		/// <returns>Success</returns>
		public async Task DeleteThemeAsync(string appId, string environmentName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/themes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an existing theme for an Amplify app.
		/// GetTheme app/{appId}/environment/{environmentName}/themes/{id}
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is part of the Amplify app.</param>
		/// <param name="id">The unique ID for the theme.</param>
		/// <returns>Success</returns>
		public async Task<GetThemeResponse> GetThemeAsync(string appId, string environmentName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/themes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetThemeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing theme.
		/// UpdateTheme app/{appId}/environment/{environmentName}/themes/{id}
		/// </summary>
		/// <param name="appId">The unique ID for the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is part of the Amplify app.</param>
		/// <param name="id">The unique ID for the theme.</param>
		/// <param name="clientToken">The unique client token.</param>
		/// <returns>Success</returns>
		public async Task<UpdateThemeResponse> UpdateThemeAsync(string appId, string environmentName, string id, string clientToken, UpdateThemePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/themes/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateThemeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Exchanges an access code for a token.
		/// ExchangeCodeForToken tokens/{provider}
		/// </summary>
		/// <param name="provider">The third-party provider for the token. The only valid value is <code>figma</code>.</param>
		/// <returns>Success</returns>
		public async Task<ExchangeCodeForTokenResponse> ExchangeCodeForTokenAsync(TokenProviders provider, ExchangeCodeForTokenPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tokens/"+provider;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExchangeCodeForTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Exports component configurations to code that is ready to integrate into an Amplify app.
		/// ExportComponents export/app/{appId}/environment/{environmentName}/components
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app to export components to.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="nextToken">The token to request the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ExportComponentsResponse> ExportComponentsAsync(string appId, string environmentName, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/components&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportComponentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports form configurations to code that is ready to integrate into an Amplify app.
		/// ExportForms export/app/{appId}/environment/{environmentName}/forms
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app to export forms to.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="nextToken">The token to request the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ExportFormsResponse> ExportFormsAsync(string appId, string environmentName, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/forms&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportFormsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports theme configurations to code that is ready to integrate into an Amplify app.
		/// ExportThemes export/app/{appId}/environment/{environmentName}/themes
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app to export the themes to.</param>
		/// <param name="environmentName">The name of the backend environment that is part of the Amplify app.</param>
		/// <param name="nextToken">The token to request the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ExportThemesResponse> ExportThemesAsync(string appId, string environmentName, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/themes&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportThemesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an existing code generation job.
		/// GetCodegenJob app/{appId}/environment/{environmentName}/codegen-jobs/{id}
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app associated with the code generation job.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app associated with the code generation job.</param>
		/// <param name="id">The unique ID of the code generation job.</param>
		/// <returns>Success</returns>
		public async Task<GetCodegenJobResponse> GetCodegenJobAsync(string appId, string environmentName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/codegen-jobs/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCodegenJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns existing metadata for an Amplify app.
		/// GetMetadata app/{appId}/environment/{environmentName}/metadata
		/// </summary>
		/// <param name="appId">The unique ID of the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is part of the Amplify app.</param>
		/// <returns>Success</returns>
		public async Task<GetMetadataResponse> GetMetadataAsync(string appId, string environmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMetadataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of code generation jobs for a specified Amplify app and backend environment.
		/// ListCodegenJobs app/{appId}/environment/{environmentName}/codegen-jobs
		/// </summary>
		/// <param name="appId">The unique ID for the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="nextToken">The token to request the next page of results.</param>
		/// <param name="maxResults">The maximum number of jobs to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<ListCodegenJobsResponse> ListCodegenJobsAsync(string appId, string environmentName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/codegen-jobs&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCodegenJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a code generation job for a specified Amplify app and backend environment.
		/// StartCodegenJob app/{appId}/environment/{environmentName}/codegen-jobs
		/// </summary>
		/// <param name="appId">The unique ID for the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is a part of the Amplify app.</param>
		/// <param name="clientToken">The idempotency token used to ensure that the code generation job request completes only once.</param>
		/// <returns>Success</returns>
		public async Task<StartCodegenJobResponse> StartCodegenJobAsync(string appId, string environmentName, string clientToken, StartCodegenJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/codegen-jobs&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartCodegenJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stores the metadata information about a feature on a form.
		/// PutMetadataFlag app/{appId}/environment/{environmentName}/metadata/features/{featureName}
		/// </summary>
		/// <param name="appId">The unique ID for the Amplify app.</param>
		/// <param name="environmentName">The name of the backend environment that is part of the Amplify app.</param>
		/// <param name="featureName">The name of the feature associated with the metadata.</param>
		/// <returns>Success</returns>
		public async Task PutMetadataFlagAsync(string appId, string environmentName, string featureName, PutMetadataFlagPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environment/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"/metadata/features/"+ (featureName==null? "" : System.Uri.EscapeDataString(featureName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Refreshes a previously issued access token that might have expired.
		/// RefreshToken tokens/{provider}/refresh
		/// </summary>
		/// <param name="provider">The third-party provider for the token. The only valid value is <code>figma</code>.</param>
		/// <returns>Success</returns>
		public async Task<RefreshTokenResponse> RefreshTokenAsync(TokenProviders provider, RefreshTokenPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tokens/"+provider+"/refresh";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RefreshTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateComponentPostBody
	{
		
		/// <summary>
		/// Represents all of the information that is required to create a component.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentToCreate")]
		public CreateComponentPostBodyComponentToCreate ComponentToCreate { get; set; }
	}
	
	public class CreateComponentPostBodyComponentToCreate
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentType")]
		public string ComponentType { get; set; }
		
		/// <summary>
		/// Describes the component's properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public ComponentChild[] Children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public ComponentVariant[] Variants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ComponentOverrides Overrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindingProperties")]
		public ComponentBindingProperties BindingProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectionProperties")]
		public ComponentCollectionProperties CollectionProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public ComponentEvents Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	public class CreateFormPostBody
	{
		
		/// <summary>
		/// Represents all of the information that is required to create a form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formToCreate")]
		public CreateFormPostBodyFormToCreate FormToCreate { get; set; }
	}
	
	public class CreateFormPostBodyFormToCreate
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public FormDataTypeConfig DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formActionType")]
		public FormActionType FormActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public FieldsMap Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="style")]
		public FormStyle Style { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sectionalElements")]
		public SectionalElementMap SectionalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cta")]
		public FormCTA Cta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelDecorator")]
		public LabelDecorator LabelDecorator { get; set; }
	}
	
	public class CreateThemePostBody
	{
		
		/// <summary>
		/// Represents all of the information that is required to create a theme.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="themeToCreate")]
		public CreateThemePostBodyThemeToCreate ThemeToCreate { get; set; }
	}
	
	public class CreateThemePostBodyThemeToCreate
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public ThemeValues[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ThemeValues[] Overrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	public class UpdateComponentPatchBody
	{
		
		/// <summary>
		/// Updates and saves all of the information about a component, based on component ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedComponent")]
		public UpdateComponentPatchBodyUpdatedComponent UpdatedComponent { get; set; }
	}
	
	public class UpdateComponentPatchBodyUpdatedComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentType")]
		public string ComponentType { get; set; }
		
		/// <summary>
		/// Describes the component's properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public ComponentChild[] Children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public ComponentVariant[] Variants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ComponentOverrides Overrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindingProperties")]
		public ComponentBindingProperties BindingProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectionProperties")]
		public ComponentCollectionProperties CollectionProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public ComponentEvents Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	public class UpdateFormPatchBody
	{
		
		/// <summary>
		/// Updates and saves all of the information about a form, based on form ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedForm")]
		public UpdateFormPatchBodyUpdatedForm UpdatedForm { get; set; }
	}
	
	public class UpdateFormPatchBodyUpdatedForm
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public FormDataTypeConfig DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formActionType")]
		public FormActionType FormActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public FieldsMap Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="style")]
		public FormStyle Style { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sectionalElements")]
		public SectionalElementMap SectionalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cta")]
		public FormCTA Cta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelDecorator")]
		public LabelDecorator LabelDecorator { get; set; }
	}
	
	public class UpdateThemePatchBody
	{
		
		/// <summary>
		/// Saves the data binding information for a theme.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedTheme")]
		public UpdateThemePatchBodyUpdatedTheme UpdatedTheme { get; set; }
	}
	
	public class UpdateThemePatchBodyUpdatedTheme
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public ThemeValues[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public ThemeValues[] Overrides { get; set; }
	}
	
	public class ExchangeCodeForTokenPostBody
	{
		
		/// <summary>
		/// Describes the configuration of a request to exchange an access code for a token.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="request")]
		public ExchangeCodeForTokenPostBodyRequest Request { get; set; }
	}
	
	public class ExchangeCodeForTokenPostBodyRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirectUri")]
		public string RedirectUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
	}
	
	public class StartCodegenJobPostBody
	{
		
		/// <summary>
		/// The code generation job resource configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="codegenJobToCreate")]
		public StartCodegenJobPostBodyCodegenJobToCreate CodegenJobToCreate { get; set; }
	}
	
	public class StartCodegenJobPostBodyCodegenJobToCreate
	{
		
		[System.Runtime.Serialization.DataMember(Name="renderConfig")]
		public CodegenJobRenderConfig RenderConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genericDataSchema")]
		public CodegenJobGenericDataSchema GenericDataSchema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoGenerateForms")]
		public System.Nullable<System.Boolean> AutoGenerateForms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public CodegenFeatureFlags Features { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	public class PutMetadataFlagPutBody
	{
		
		/// <summary>
		/// Stores the metadata information about a feature on a form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public PutMetadataFlagPutBodyBody Body { get; set; }
	}
	
	public class PutMetadataFlagPutBodyBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="newValue")]
		public string NewValue { get; set; }
	}
	
	public class RefreshTokenPostBody
	{
		
		/// <summary>
		/// Describes a refresh token.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="refreshTokenBody")]
		public RefreshTokenPostBodyRefreshTokenBody RefreshTokenBody { get; set; }
	}
	
	public class RefreshTokenPostBodyRefreshTokenBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
