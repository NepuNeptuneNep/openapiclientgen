//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcEntryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountCode")]
		public string AccountCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="analysisCategoryId")]
		public System.Nullable<System.Int64> AnalysisCategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountGroup")]
		public string AccountGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountTranDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookTranId")]
		public System.Nullable<System.Int64> BookTranId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTransactionReference")]
		public string BookTransactionReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTypeDesc")]
		public string BookTypeDesc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credit")]
		public System.Nullable<System.Double> Credit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debit")]
		public System.Nullable<System.Double> Debit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcudfValueDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userDefinedFieldId")]
		public System.Nullable<System.Int64> UserDefinedFieldId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalysisCategoryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountCode")]
		public string AccountCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryTypeId")]
		public System.Nullable<System.Int64> CategoryTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderIndex")]
		public System.Nullable<System.Int32> OrderIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BankAccountDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string[] Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankFeedSource")]
		public System.Nullable<System.Int32> BankFeedSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessIdentifierCodes")]
		public string BusinessIdentifierCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public System.Nullable<System.Int64> CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditorScheme")]
		public string CreditorScheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internationalBankAccountNumber")]
		public string InternationalBankAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultBank")]
		public System.Nullable<System.Boolean> IsDefaultBank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastChq")]
		public string LastChq { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nominalAcCode")]
		public string NominalAcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oBalance")]
		public System.Nullable<System.Double> OBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortCode")]
		public string SortCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BankAccountQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string[] Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankFeedSource")]
		public System.Nullable<System.Int32> BankFeedSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessIdentifierCodes")]
		public string BusinessIdentifierCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public System.Nullable<System.Int64> CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditorScheme")]
		public string CreditorScheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internationalBankAccountNumber")]
		public string InternationalBankAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultBank")]
		public System.Nullable<System.Boolean> IsDefaultBank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastChq")]
		public string LastChq { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nominalAcCode")]
		public string NominalAcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortCode")]
		public string SortCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_BankAccountDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public BankAccountDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_BankAccountDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_BankAccountDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_CashPaymentDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public CashPaymentDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_CashPaymentDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashPaymentDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankAccountCode")]
		public string BankAccountCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankAccountId")]
		public System.Nullable<System.Int64> BankAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailCollection")]
		public string[] DetailCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public System.Nullable<System.Double> Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ledger")]
		public System.Nullable<System.Double> Ledger { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lodgement")]
		public System.Nullable<System.Double> Lodgement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plaidTransactionId")]
		public string PlaidTransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplierId")]
		public System.Nullable<System.Int64> SupplierId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_CashPaymentDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_CashReceiptDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public CashReceiptDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_CashReceiptDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashReceiptDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public System.Nullable<System.Int64> CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailCollection")]
		public string[] DetailCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public System.Nullable<System.Double> Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ledger")]
		public System.Nullable<System.Double> Ledger { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plaidTransactionId")]
		public string PlaidTransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unallocated")]
		public System.Nullable<System.Double> Unallocated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatEntries")]
		public VatEntryDto[] VatEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatTypeId")]
		public System.Nullable<System.Int64> VatTypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VatEntryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRateId")]
		public System.Nullable<System.Int64> VatRateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_CashReceiptDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_CustomerDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public CustomerDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_CustomerDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalEmails")]
		public string[] AdditionalEmails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string[] Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authCode")]
		public string AuthCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bank")]
		public EFTBankDto Bank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessIdentifierCode")]
		public string BusinessIdentifierCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public string Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delivery")]
		public string[] Delivery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eFTReference")]
		public string EFTReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internationalBankAccountNumber")]
		public string InternationalBankAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ledgerBalance")]
		public System.Nullable<System.Double> LedgerBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openingBalance")]
		public OwnerOpeningBalanceInPeriodsDto OpeningBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openingBalances")]
		public OwnerOpeningBalanceDto[] OpeningBalances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ourCode")]
		public string OurCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerTypeId")]
		public System.Nullable<System.Int64> OwnerTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatAnalysisTypeId")]
		public System.Nullable<System.Int64> VatAnalysisTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatReg")]
		public string VatReg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatType")]
		public System.Nullable<System.Int64> VatType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EFTBankDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortCode")]
		public string SortCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OwnerOpeningBalanceInPeriodsDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentMonth")]
		public System.Nullable<System.Double> CurrentMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oneMonthOld")]
		public System.Nullable<System.Double> OneMonthOld { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="threeMonthsOld")]
		public System.Nullable<System.Double> ThreeMonthsOld { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twoMonthsOld")]
		public System.Nullable<System.Double> TwoMonthsOld { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OwnerOpeningBalanceDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isChanged")]
		public System.Nullable<System.Boolean> IsChanged { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVAT")]
		public System.Nullable<System.Double> TotalVAT { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unpaid")]
		public System.Nullable<System.Double> Unpaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatEntries")]
		public OwnerOpeningBalanceVatEntryDto[] VatEntries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OwnerOpeningBalanceVatEntryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRateId")]
		public System.Nullable<System.Int64> VatRateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_CustomerDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_PaymentDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public PaymentDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_PaymentDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankAccountCode")]
		public string BankAccountCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankAccountId")]
		public System.Nullable<System.Int64> BankAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailCollection")]
		public string[] DetailCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public System.Nullable<System.Double> Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plaidTransactionId")]
		public string PlaidTransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplierId")]
		public System.Nullable<System.Int64> SupplierId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferBankCode")]
		public string TransferBankCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferBankId")]
		public System.Nullable<System.Int64> TransferBankId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unallocated")]
		public System.Nullable<System.Double> Unallocated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_PaymentDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_ProductDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public ProductDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_ProductDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grossUnitPrice")]
		public System.Nullable<System.Boolean> GrossUnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasDefaultVatRate")]
		public System.Nullable<System.Boolean> HasDefaultVatRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productTypeId")]
		public System.Nullable<System.Int64> ProductTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stockCode")]
		public string StockCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public System.Nullable<System.Double> UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatAnalysisTypeId")]
		public System.Nullable<System.Int64> VatAnalysisTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRateId")]
		public System.Nullable<System.Int64> VatRateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_ProductDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_PurchaseDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public PurchaseDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_PurchaseDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailCollection")]
		public string[] DetailCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDiscrepancyAccepted")]
		public System.Nullable<System.Boolean> IsDiscrepancyAccepted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netGoods")]
		public System.Nullable<System.Double> NetGoods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netServices")]
		public System.Nullable<System.Double> NetServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postponedAccounting")]
		public System.Nullable<System.Boolean> PostponedAccounting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplierId")]
		public System.Nullable<System.Int64> SupplierId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalNet")]
		public System.Nullable<System.Double> TotalNet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVAT")]
		public System.Nullable<System.Double> TotalVAT { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unallocated")]
		public System.Nullable<System.Double> Unallocated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unpaid")]
		public System.Nullable<System.Double> Unpaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatEntries")]
		public VatEntryDto[] VatEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatTypeId")]
		public System.Nullable<System.Int64> VatTypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_PurchaseDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_QuoteDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public QuoteDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_QuoteDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuoteDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closedDate")]
		public System.Nullable<System.DateTimeOffset> ClosedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public System.Nullable<System.Int64> CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerOwnerId")]
		public System.Nullable<System.Int64> CustomerOwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerOwnerName")]
		public string CustomerOwnerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ddNumber")]
		public string DdNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryList")]
		public string DeliveryList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryTo")]
		public string[] DeliveryTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layoutType")]
		public System.Nullable<System.Int32> LayoutType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poNumber")]
		public string PoNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productTrans")]
		public QuoteProductTransDto[] ProductTrans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saleInvoiceId")]
		public System.Nullable<System.Int64> SaleInvoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saleRepCode")]
		public string SaleRepCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saleRepId")]
		public System.Nullable<System.Int64> SaleRepId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalNet")]
		public System.Nullable<System.Double> TotalNet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVat")]
		public System.Nullable<System.Double> TotalVat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatTypeId")]
		public System.Nullable<System.Int64> VatTypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuoteProductTransDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public QuoteAcEntriesDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public System.Nullable<System.Int64> CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public System.Nullable<System.Int64> ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tranNotes")]
		public string[] TranNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public System.Nullable<System.Double> UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatAmount")]
		public System.Nullable<System.Double> VatAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatAnalysisTypeId")]
		public System.Nullable<System.Int64> VatAnalysisTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRateId")]
		public System.Nullable<System.Int64> VatRateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuoteAcEntriesDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountCode")]
		public string AccountCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="analysisCategoryId")]
		public System.Nullable<System.Int64> AnalysisCategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public System.Nullable<System.Int64> CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quoteProductTranId")]
		public System.Nullable<System.Int64> QuoteProductTranId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_QuoteDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_SaleRepsDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public SaleRepsDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_SaleRepsDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SaleRepsDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public System.Nullable<System.Int64> CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_SaleRepsDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_SalesEntryDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public SalesEntryDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_SalesEntryDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesEntryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public System.Nullable<System.Int64> CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailCollection")]
		public string[] DetailCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netGoods")]
		public System.Nullable<System.Double> NetGoods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netServices")]
		public System.Nullable<System.Double> NetServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalNet")]
		public System.Nullable<System.Double> TotalNet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVAT")]
		public System.Nullable<System.Double> TotalVAT { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unpaid")]
		public System.Nullable<System.Double> Unpaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatEntries")]
		public VatEntryDto[] VatEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatTypeId")]
		public System.Nullable<System.Int64> VatTypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_SalesEntryDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_SalesInvoiceCreditNoteDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public SalesInvoiceCreditNoteDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_SalesInvoiceCreditNoteDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesInvoiceCreditNoteDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public System.Nullable<System.Int64> CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryTo")]
		public string[] DeliveryTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loType")]
		public string LoType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netGoods")]
		public System.Nullable<System.Double> NetGoods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netServices")]
		public System.Nullable<System.Double> NetServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ourReference")]
		public string OurReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productTrans")]
		public ProductTranDto[] ProductTrans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quoteId")]
		public System.Nullable<System.Int64> QuoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saleRepCode")]
		public string SaleRepCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saleRepId")]
		public System.Nullable<System.Int64> SaleRepId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalNet")]
		public System.Nullable<System.Double> TotalNet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVAT")]
		public System.Nullable<System.Double> TotalVAT { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unpaid")]
		public System.Nullable<System.Double> Unpaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatTypeId")]
		public System.Nullable<System.Int64> VatTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yourReference")]
		public string YourReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductTranDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amountNet")]
		public double AmountNet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public System.Nullable<System.Int64> ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tranNotes")]
		public string[] TranNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public System.Nullable<System.Double> UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat")]
		public System.Nullable<System.Double> Vat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatAnalysisTypeId")]
		public System.Nullable<System.Int64> VatAnalysisTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRateId")]
		public System.Nullable<System.Int64> VatRateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_SalesInvoiceCreditNoteDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchItem_SupplierDto_
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public SupplierDto Item { get; set; }
		
		/// <summary>
		/// 1 - Create
		///2 - Update
		///3 - Delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opCode")]
		public System.Nullable<BatchItem_SupplierDto_OpCode> OpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupplierDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalEmails")]
		public string[] AdditionalEmails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string[] Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authCode")]
		public string AuthCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bank")]
		public EFTBankDto Bank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessIdentifierCode")]
		public string BusinessIdentifierCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public string Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eFTReference")]
		public string EFTReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internationalBankAccountNumber")]
		public string InternationalBankAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ledgerBalance")]
		public System.Nullable<System.Double> LedgerBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openingBalance")]
		public OwnerOpeningBalanceInPeriodsDto OpeningBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openingBalances")]
		public OwnerOpeningBalanceDto[] OpeningBalances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ourCode")]
		public string OurCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerTypeId")]
		public System.Nullable<System.Int64> OwnerTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postponedAccounting")]
		public System.Nullable<System.Boolean> PostponedAccounting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatAnalysisTypeId")]
		public System.Nullable<System.Int64> VatAnalysisTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatReg")]
		public string VatReg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatType")]
		public System.Nullable<System.Int64> VatType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchItem_SupplierDto_OpCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BookTranTypeDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashPaymentQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankAccountCode")]
		public string BankAccountCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankAccountId")]
		public System.Nullable<System.Int64> BankAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailCollection")]
		public string[] DetailCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public System.Nullable<System.Double> Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ledger")]
		public System.Nullable<System.Double> Ledger { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lodgement")]
		public System.Nullable<System.Double> Lodgement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plaidTransactionId")]
		public string PlaidTransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplierId")]
		public System.Nullable<System.Int64> SupplierId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unallocated")]
		public System.Nullable<System.Double> Unallocated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashReceiptQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public System.Nullable<System.Int64> CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailCollection")]
		public string[] DetailCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public System.Nullable<System.Double> Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ledger")]
		public System.Nullable<System.Double> Ledger { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plaidTransactionId")]
		public string PlaidTransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unallocated")]
		public System.Nullable<System.Double> Unallocated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatEntries")]
		public VatEntryDto[] VatEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatTypeId")]
		public System.Nullable<System.Int64> VatTypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryTypeDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyFinancialYearViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstMonth")]
		public System.Nullable<System.Int32> FirstMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startMonth")]
		public System.Nullable<System.Int32> StartMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startYear")]
		public System.Nullable<System.Int32> StartYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyGeneralDetaisViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="companyAddresses")]
		public string[] CompanyAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyDescription")]
		public string CurrencyDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyId")]
		public System.Nullable<System.Int64> CurrencyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentcySymbol")]
		public string CurrentcySymbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="faxes")]
		public string[] Faxes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phones")]
		public string[] Phones { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionDescription")]
		public string RegionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionId")]
		public System.Nullable<System.Int64> RegionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatReg")]
		public string VatReg { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyOptionDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowEntryOfGrossPriceInInvoicing")]
		public System.Nullable<System.Boolean> AllowEntryOfGrossPriceInInvoicing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditInputForReverseChargeVAT")]
		public System.Nullable<System.Boolean> CreditInputForReverseChargeVAT { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditNoteJournalAgeingName")]
		public string CreditNoteJournalAgeingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditNoteJournalAgeingValue")]
		public System.Nullable<System.Int32> CreditNoteJournalAgeingValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discrepancyAllowed")]
		public System.Nullable<System.Double> DiscrepancyAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableVOCRReporting")]
		public System.Nullable<System.Boolean> EnableVOCRReporting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marginVatScheme")]
		public System.Nullable<System.Boolean> MarginVatScheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="printOSItemsOnly")]
		public System.Nullable<System.Boolean> PrintOSItemsOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchasesVatAnalysisType")]
		public System.Nullable<System.Int64> PurchasesVatAnalysisType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesVatAnalysisType")]
		public System.Nullable<System.Int64> SalesVatAnalysisType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useAllocations")]
		public System.Nullable<System.Boolean> UseAllocations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useNominal")]
		public System.Nullable<System.Boolean> UseNominal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useNominalCode")]
		public System.Nullable<System.Boolean> UseNominalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vocrSettingValue")]
		public System.Nullable<System.Boolean> VocrSettingValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyOptionViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowEntryOfGrossPriceInInvoicing")]
		public System.Nullable<System.Boolean> AllowEntryOfGrossPriceInInvoicing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditInputForReverseChargeVAT")]
		public System.Nullable<System.Boolean> CreditInputForReverseChargeVAT { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditNoteJournalAgeingName")]
		public string CreditNoteJournalAgeingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditNoteJournalAgeingValue")]
		public System.Nullable<System.Int32> CreditNoteJournalAgeingValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discrepancyAllowed")]
		public System.Nullable<System.Double> DiscrepancyAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableVOCRReporting")]
		public System.Nullable<System.Boolean> EnableVOCRReporting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marginVatScheme")]
		public System.Nullable<System.Boolean> MarginVatScheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="printOSItemsOnly")]
		public System.Nullable<System.Boolean> PrintOSItemsOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchasesVatAnalysisType")]
		public System.Nullable<System.Int64> PurchasesVatAnalysisType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesVatAnalysisType")]
		public System.Nullable<System.Int64> SalesVatAnalysisType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useAllocations")]
		public System.Nullable<System.Boolean> UseAllocations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useNominal")]
		public System.Nullable<System.Boolean> UseNominal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useNominalCode")]
		public System.Nullable<System.Boolean> UseNominalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vocrSettingValue")]
		public System.Nullable<System.Boolean> VocrSettingValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyReferenceSettingViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="creditorsJournal")]
		public System.Nullable<System.Boolean> CreditorsJournal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debtorsJournal")]
		public System.Nullable<System.Boolean> DebtorsJournal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchases")]
		public System.Nullable<System.Boolean> Purchases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sales")]
		public System.Nullable<System.Boolean> Sales { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanySettingDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="enableVOCRReporting")]
		public System.Nullable<System.Boolean> EnableVOCRReporting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useAllocations")]
		public System.Nullable<System.Boolean> UseAllocations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vocrSettingValue")]
		public System.Nullable<System.Boolean> VocrSettingValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanySetupConfigViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="financialYear")]
		public CompanyFinancialYearViewModel FinancialYear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generalDetails")]
		public CompanyGeneralDetaisViewModel GeneralDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CompanyOptionViewModel Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceSettings")]
		public CompanyReferenceSettingViewModel ReferenceSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalEmails")]
		public string[] AdditionalEmails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string[] Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authCode")]
		public string AuthCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bank")]
		public EFTBankDto Bank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessIdentifierCode")]
		public string BusinessIdentifierCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public string Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delivery")]
		public string[] Delivery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eFTReference")]
		public string EFTReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internationalBankAccountNumber")]
		public string InternationalBankAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ourCode")]
		public string OurCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerTypeId")]
		public System.Nullable<System.Int64> OwnerTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatAnalysisTypeId")]
		public System.Nullable<System.Int64> VatAnalysisTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatReg")]
		public string VatReg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatType")]
		public System.Nullable<System.Int64> VatType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmailQuoteDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="bccAddresses")]
		public string[] BccAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageBody")]
		public string MessageBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quoteId")]
		public System.Nullable<System.Int64> QuoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toAddress")]
		public string ToAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmailStatementDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="bccAddresses")]
		public string[] BccAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public System.Nullable<System.Int64> CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromPeriod")]
		public System.Nullable<System.DateTimeOffset> FromPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageBody")]
		public string MessageBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumBalance")]
		public System.Nullable<System.Double> MinimumBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toAddress")]
		public string ToAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toPeriod")]
		public System.Nullable<System.DateTimeOffset> ToPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterClause
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SingleValueNode Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmTypeReference ItemType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RangeVariable RangeVariable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleValueNode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<SingleValueNodeKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmTypeReference TypeReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SingleValueNodeKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_15 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_16 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_17 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_18 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_19 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_20 = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IEdmTypeReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmType Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsNullable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IEdmType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<IEdmTypeTypeKind> TypeKind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum IEdmTypeTypeKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RangeVariable
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmTypeReference TypeReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterQueryOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterClause FilterClause { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RawValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryContext
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ElementClrType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmType ElementType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmModel Model { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IEdmModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmDirectValueAnnotationsManager DirectValueAnnotationsManager { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmModel[] ReferencedModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmSchemaElement[] SchemaElements { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmVocabularyAnnotation[] VocabularyAnnotations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IEdmDirectValueAnnotationsManager
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IEdmSchemaElement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<IEdmSchemaElementSchemaElementKind> SchemaElementKind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum IEdmSchemaElementSchemaElementKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IEdmVocabularyAnnotation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Qualifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmVocabularyAnnotatable Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmTerm Term { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IEdmVocabularyAnnotatable
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IEdmTerm
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<IEdmTermSchemaElementKind> SchemaElementKind { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<IEdmTermTermKind> TermKind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum IEdmTermSchemaElementKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum IEdmTermTermKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterQueryValidator
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FinancialYearDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstMonth")]
		public System.Nullable<System.Int32> FirstMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startMonth")]
		public System.Nullable<System.Int32> StartMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startYear")]
		public System.Nullable<System.Int32> StartYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InlineCountQueryOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RawValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<InlineCountQueryOptionValue> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InlineCountQueryOptionValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_AccountDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderByQueryOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByClause OrderByClause { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByNode[] OrderByNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RawValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderByClause
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OrderByClauseDirection> Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SingleValueNode Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IEdmTypeReference ItemType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RangeVariable RangeVariable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByClause ThenBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderByClauseDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderByNode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OrderByNodeDirection> Direction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderByNodeDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderByQueryValidator
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataRawQueryOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Expand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Select { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SkipToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Top { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectExpandQueryOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RawExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RawSelect { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandClause SelectExpandClause { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectExpandClause
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllSelected { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectItem[] SelectedItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectItem
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectExpandQueryValidator
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SkipQueryOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RawValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryValidator Validator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SkipQueryValidator
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopQueryOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RawValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryValidator Validator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopQueryValidator
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryValidator
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_AnalysisCategoryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_BankAccountQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_BookTranTypeDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_CashPaymentQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_CashReceiptQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_CategoryTypeDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_CompanySettingDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_CustomerQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_OwnerTypeDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_OwnerTypeGroupDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_PaymentQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_ProductDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_PurchaseQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_QuoteDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_SaleRepsDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_SalesCreditNoteQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_SalesEntryQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_SalesInvoiceQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_SalesQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_SupplierQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_UserDefinedFieldDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_VatAnalysisTypeDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_VatCategoryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_VatRateDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ODataQueryOptions_VatTypeDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterQueryOption Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IfNoneMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InlineCountQueryOption InlineCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderByQueryOption OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataRawQueryOptions RawValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectExpandQueryOption SelectExpand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkipQueryOption Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopQueryOption Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ODataQueryValidator Validator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OwnerTypeDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recordTypeGroupId")]
		public System.Nullable<System.Int64> RecordTypeGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OwnerTypeGroupDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_AccountDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_AnalysisCategoryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AnalysisCategoryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_BankAccountQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BankAccountQueryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_BookTranTypeDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BookTranTypeDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_CashPaymentQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CashPaymentQueryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_CashReceiptQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CashReceiptQueryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_CategoryTypeDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CategoryTypeDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_CompanySettingDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CompanySettingDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_CustomerQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerQueryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_OwnerTypeDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OwnerTypeDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_OwnerTypeGroupDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OwnerTypeGroupDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_PaymentQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PaymentQueryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankAccountCode")]
		public string BankAccountCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankAccountId")]
		public System.Nullable<System.Int64> BankAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailCollection")]
		public string[] DetailCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public System.Nullable<System.Double> Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plaidTransactionId")]
		public string PlaidTransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplierId")]
		public System.Nullable<System.Int64> SupplierId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferBankCode")]
		public string TransferBankCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferBankId")]
		public System.Nullable<System.Int64> TransferBankId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unallocated")]
		public System.Nullable<System.Double> Unallocated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_ProductDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_PurchaseQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PurchaseQueryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailCollection")]
		public string[] DetailCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netGoods")]
		public System.Nullable<System.Double> NetGoods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netServices")]
		public System.Nullable<System.Double> NetServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postponedAccounting")]
		public System.Nullable<System.Boolean> PostponedAccounting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplierId")]
		public System.Nullable<System.Int64> SupplierId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalNet")]
		public System.Nullable<System.Double> TotalNet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVAT")]
		public System.Nullable<System.Double> TotalVAT { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unallocated")]
		public System.Nullable<System.Double> Unallocated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unpaid")]
		public System.Nullable<System.Double> Unpaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatEntries")]
		public VatEntryDto[] VatEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatTypeId")]
		public System.Nullable<System.Int64> VatTypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_QuoteDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QuoteDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_SaleRepsDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SaleRepsDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_SalesCreditNoteQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesCreditNoteQueryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesCreditNoteQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public System.Nullable<System.Int64> CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryTo")]
		public string[] DeliveryTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loType")]
		public string LoType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netGoods")]
		public System.Nullable<System.Double> NetGoods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netServices")]
		public System.Nullable<System.Double> NetServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ourReference")]
		public string OurReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productTrans")]
		public ProductTranQueryDto[] ProductTrans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quoteId")]
		public System.Nullable<System.Int64> QuoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saleRepCode")]
		public string SaleRepCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saleRepId")]
		public System.Nullable<System.Int64> SaleRepId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalNet")]
		public System.Nullable<System.Double> TotalNet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVAT")]
		public System.Nullable<System.Double> TotalVAT { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unpaid")]
		public System.Nullable<System.Double> Unpaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatTypeId")]
		public System.Nullable<System.Int64> VatTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yourReference")]
		public string YourReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductTranQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountNet")]
		public System.Nullable<System.Double> AmountNet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public System.Nullable<System.Int64> ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tranNotes")]
		public string[] TranNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public System.Nullable<System.Double> UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat")]
		public System.Nullable<System.Double> Vat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatAnalysisTypeId")]
		public System.Nullable<System.Int64> VatAnalysisTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRateId")]
		public System.Nullable<System.Int64> VatRateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_SalesEntryQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesEntryQueryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesEntryQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public System.Nullable<System.Int64> CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailCollection")]
		public string[] DetailCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netGoods")]
		public System.Nullable<System.Double> NetGoods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netServices")]
		public System.Nullable<System.Double> NetServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalNet")]
		public System.Nullable<System.Double> TotalNet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVAT")]
		public System.Nullable<System.Double> TotalVAT { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unpaid")]
		public System.Nullable<System.Double> Unpaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatEntries")]
		public VatEntryDto[] VatEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatTypeId")]
		public System.Nullable<System.Int64> VatTypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_SalesInvoiceQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesInvoiceQueryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesInvoiceQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public System.Nullable<System.Int64> CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryTo")]
		public string[] DeliveryTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loType")]
		public string LoType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netGoods")]
		public System.Nullable<System.Double> NetGoods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netServices")]
		public System.Nullable<System.Double> NetServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ourReference")]
		public string OurReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productTrans")]
		public ProductTranQueryDto[] ProductTrans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quoteId")]
		public System.Nullable<System.Int64> QuoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saleRepCode")]
		public string SaleRepCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saleRepId")]
		public System.Nullable<System.Int64> SaleRepId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalNet")]
		public System.Nullable<System.Double> TotalNet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVAT")]
		public System.Nullable<System.Double> TotalVAT { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unpaid")]
		public System.Nullable<System.Double> Unpaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatTypeId")]
		public System.Nullable<System.Int64> VatTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yourReference")]
		public string YourReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_SalesQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesQueryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="acCode")]
		public string AcCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acEntries")]
		public AcEntryDto[] AcEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookTranTypeId")]
		public System.Nullable<System.Int64> BookTranTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public AcudfValueDto[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public System.Nullable<System.Int64> CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loType")]
		public string LoType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procDate")]
		public System.Nullable<System.DateTimeOffset> ProcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalNet")]
		public System.Nullable<System.Double> TotalNet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVAT")]
		public System.Nullable<System.Double> TotalVAT { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unpaid")]
		public System.Nullable<System.Double> Unpaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatEntries")]
		public VatEntryDto[] VatEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatTypeId")]
		public System.Nullable<System.Int64> VatTypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_SupplierQueryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupplierQueryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupplierQueryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalEmails")]
		public string[] AdditionalEmails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string[] Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authCode")]
		public string AuthCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bank")]
		public EFTBankDto Bank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessIdentifierCode")]
		public string BusinessIdentifierCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public string Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eFTReference")]
		public string EFTReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internationalBankAccountNumber")]
		public string InternationalBankAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ourCode")]
		public string OurCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerTypeId")]
		public System.Nullable<System.Int64> OwnerTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postponedAccounting")]
		public System.Nullable<System.Boolean> PostponedAccounting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatAnalysisTypeId")]
		public System.Nullable<System.Int64> VatAnalysisTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatReg")]
		public string VatReg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatType")]
		public System.Nullable<System.Int64> VatType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_UserDefinedFieldDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserDefinedFieldDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserDefinedFieldDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="categoryTypeId")]
		public System.Nullable<System.Int64> CategoryTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderIndex")]
		public System.Nullable<System.Int32> OrderIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_VatAnalysisTypeDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VatAnalysisTypeDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VatAnalysisTypeDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_VatCategoryDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VatCategoryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VatCategoryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_VatRateDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VatRateDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VatRateDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderIndex")]
		public System.Nullable<System.Int32> OrderIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatCategoryId")]
		public System.Nullable<System.Int64> VatCategoryId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResult_VatTypeDto_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VatTypeDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VatTypeDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isNotApplicable")]
		public System.Nullable<System.Boolean> IsNotApplicable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOnlyZero")]
		public System.Nullable<System.Boolean> IsOnlyZero { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuoteGeneratingInvoiceDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="quoteId")]
		public System.Nullable<System.Int64> QuoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saleInvoice")]
		public SalesInvoiceCreditNoteDto SaleInvoice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesInvoiceEmailInfoDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="bccAddresses")]
		public string[] BccAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageBody")]
		public string MessageBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesInvoiceId")]
		public System.Nullable<System.Int64> SalesInvoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toAddress")]
		public string ToAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VatRatesByVatCategoryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="vatCategoryId")]
		public System.Nullable<System.Int64> VatCategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRates")]
		public VatRateDto[] VatRates { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of company's Accounts. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" and "code" fields.
		/// Accounts_Get v1/accounts
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_AccountDto_> Accounts_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_AccountDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Analysis Categories. Supports OData querying protocol.
		/// Filtering is allowed by "categoryTypeId" field.
		/// Ordering is allowed by "id" and "orderIndex" fields.
		/// AnalysisCategories_Get v1/analysisCategories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_AnalysisCategoryDto_> AnalysisCategories_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/analysisCategories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_AnalysisCategoryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Bank Account. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" and "acCode" fields.
		/// BankAccounts_Get v1/bankAccounts
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_BankAccountQueryDto_> BankAccounts_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bankAccounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_BankAccountQueryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Bank Account.
		/// BankAccounts_Post v1/bankAccounts
		/// </summary>
		/// <param name="requestBody">Information of Bank Account to create.</param>
		/// <returns>OK</returns>
		public async Task<string> BankAccounts_PostAsync(BankAccountDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bankAccounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Bank Accounts.
		/// BankAccounts_ProcessBatch v1/bankAccounts/batch
		/// </summary>
		/// <param name="requestBody">Batch of Bank Accounts to process.</param>
		/// <returns>OK</returns>
		public async Task<string> BankAccounts_ProcessBatchAsync(BatchItem_BankAccountDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bankAccounts/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Bank Account.
		/// BankAccounts_Delete v1/bankAccounts/{id}
		/// </summary>
		/// <param name="id">Id of Bank Account to remove.</param>
		/// <param name="timestamp">Timestamp of Bank Account to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> BankAccounts_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bankAccounts/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Bank Account.
		/// BankAccountsGetById v1/bankAccounts/{id}
		/// </summary>
		/// <param name="id">Id of Bank Account to return.</param>
		/// <returns>OK</returns>
		public async Task<BankAccountDto> BankAccountsGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bankAccounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankAccountDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Bank Account.
		/// BankAccounts_Put v1/bankAccounts/{id}
		/// </summary>
		/// <param name="id">Id of Bank Account to update.</param>
		/// <param name="requestBody">Information of Bank Account to update.</param>
		/// <returns>OK</returns>
		public async Task<string> BankAccounts_PutAsync(long id, BankAccountDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bankAccounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of global Book Transactions' Types. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" field.
		/// BookTranTypes_Get v1/bookTranTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_BookTranTypeDto_> BookTranTypes_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bookTranTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_BookTranTypeDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Cash Payments. Supports OData querying protocol.
		/// Filtering is allowed by "entryDate" field.
		/// Ordering is allowed by "id" field.
		/// CashPayments_Get v1/cashPayments
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_CashPaymentQueryDto_> CashPayments_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashPayments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_CashPaymentQueryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Cash Payment.
		/// CashPayments_Post v1/cashPayments
		/// </summary>
		/// <param name="requestBody">Information of Cash Receipt to create.</param>
		/// <returns>OK</returns>
		public async Task<string> CashPayments_PostAsync(CashPaymentDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashPayments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Cash Payments.
		/// CashPayments_ProcessBatch v1/cashPayments/batch
		/// </summary>
		/// <param name="requestBody">Batch of Cash Receipts to process.</param>
		/// <returns>OK</returns>
		public async Task<string> CashPayments_ProcessBatchAsync(BatchItem_CashPaymentDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashPayments/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Cash Payment.
		/// CashPayments_Delete v1/cashPayments/{id}
		/// </summary>
		/// <param name="id">Id of Cash Receipt to remove.</param>
		/// <param name="timestamp">Timestamp of Cash Receipt to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> CashPayments_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashPayments/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Cash Payment.
		/// CashPaymentsGetById v1/cashPayments/{id}
		/// </summary>
		/// <param name="id">Id of Cash Receipt to return.</param>
		/// <returns>OK</returns>
		public async Task<CashPaymentDto> CashPaymentsGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashPayments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CashPaymentDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Cash Payment.
		/// CashPayments_Put v1/cashPayments/{id}
		/// </summary>
		/// <param name="id">Id of Cash Receipt to update.</param>
		/// <param name="requestBody">Information of Cash Receipt to update.</param>
		/// <returns>OK</returns>
		public async Task<string> CashPayments_PutAsync(long id, CashPaymentDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashPayments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Cash Receipts. Supports OData querying protocol.
		/// Filtering is allowed by "entryDate" field.
		/// Ordering is allowed by "id" field.
		/// CashReceipts_Get v1/cashReceipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_CashReceiptQueryDto_> CashReceipts_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashReceipts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_CashReceiptQueryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Cash Receipt.
		/// CashReceipts_Post v1/cashReceipts
		/// </summary>
		/// <param name="requestBody">Information of Cash Receipt to create.</param>
		/// <returns>OK</returns>
		public async Task<string> CashReceipts_PostAsync(CashReceiptDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashReceipts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Cash Receipts.
		/// CashReceipts_ProcessBatch v1/cashReceipts/batch
		/// </summary>
		/// <param name="requestBody">Batch of Cash Receipts to process.</param>
		/// <returns>OK</returns>
		public async Task<string> CashReceipts_ProcessBatchAsync(BatchItem_CashReceiptDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashReceipts/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Cash Receipt.
		/// CashReceipts_Delete v1/cashReceipts/{id}
		/// </summary>
		/// <param name="id">Id of Cash Receipt to remove.</param>
		/// <param name="timestamp">Timestamp of Cash Receipt to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> CashReceipts_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashReceipts/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Cash Receipt.
		/// CashReceiptsGetById v1/cashReceipts/{id}
		/// </summary>
		/// <param name="id">Id of Cash Receipt to return.</param>
		/// <returns>OK</returns>
		public async Task<CashReceiptDto> CashReceiptsGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashReceipts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CashReceiptDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Cash Receipt.
		/// CashReceipts_Put v1/cashReceipts/{id}
		/// </summary>
		/// <param name="id">Id of Cash Receipt to update.</param>
		/// <param name="requestBody">Information of Cash Receipt to update.</param>
		/// <returns>OK</returns>
		public async Task<string> CashReceipts_PutAsync(long id, CashReceiptDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cashReceipts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Category Types. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" field.
		/// CategoryTypes_Get v1/categoryTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_CategoryTypeDto_> CategoryTypes_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/categoryTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_CategoryTypeDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company settings. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// CompanySettings_Get v1/companySettings
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_CompanySettingDto_> CompanySettings_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/companySettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_CompanySettingDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the company configuration settings.
		/// CompanySetupConfig_Get v1/companySetupConfig
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CompanySetupConfigViewModel> CompanySetupConfig_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/companySetupConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanySetupConfigViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the company option setting.
		/// CompanySetupConfig_GetCompanyOptions v1/companySetupConfig/getCompanyOptions
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CompanyOptionDto> CompanySetupConfig_GetCompanyOptionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/companySetupConfig/getCompanyOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyOptionDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the financial year.
		/// CompanySetupConfig_GetFinancialYear v1/companySetupConfig/getFinancialYear
		/// </summary>
		/// <returns>OK</returns>
		public async Task<FinancialYearDto> CompanySetupConfig_GetFinancialYearAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/companySetupConfig/getFinancialYear";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FinancialYearDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Customers. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" and "code" fields.
		/// Customers_Get v1/customers
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_CustomerQueryDto_> Customers_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_CustomerQueryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Customer.
		/// Customers_Post v1/customers
		/// </summary>
		/// <param name="requestBody">Information of Customer to create.</param>
		/// <returns>OK</returns>
		public async Task<string> Customers_PostAsync(CustomerDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Customers.
		/// Customers_ProcessBatch v1/customers/batch
		/// </summary>
		/// <param name="requestBody">Batch of Customers to process.</param>
		/// <returns>OK</returns>
		public async Task<string> Customers_ProcessBatchAsync(BatchItem_CustomerDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Customer.
		/// Customers_Delete v1/customers/{id}
		/// </summary>
		/// <param name="id">Id of Customer to remove.</param>
		/// <param name="timestamp">Timestamp of Customer to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> Customers_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Customer. You may specify that Customer's ledger balance should be calculated.
		/// CustomersGetByIdAndNeedBalance v1/customers/{id}
		/// </summary>
		/// <param name="id">Id of Customer to return.</param>
		/// <param name="needBalance">If "true" then Customer's ledger balance will be calculated; otherwise balance will be returned as 0.</param>
		/// <returns>OK</returns>
		public async Task<CustomerDto> CustomersGetByIdAndNeedBalanceAsync(long id, bool needBalance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+id+"?needBalance="+needBalance;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Customer.
		/// Customers_Put v1/customers/{id}
		/// </summary>
		/// <param name="id">Id of Customer to update.</param>
		/// <param name="requestBody">Information of Customer to update.</param>
		/// <returns>OK</returns>
		public async Task<string> Customers_PutAsync(long id, CustomerDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Customer's account transactions.
		/// Customers_GetAccountTrans v1/customers/{itemId}/accountTrans
		/// </summary>
		/// <param name="itemId">Id of Customer to return account transaction.</param>
		/// <returns>OK</returns>
		public async Task<AccountTranDto[]> Customers_GetAccountTransAsync(long itemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+itemId+"/accountTrans";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountTranDto[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a Customer's opening balances, calculated for the next periods: current month, one month old, two months old, three and more months old.
		/// Customers_GetOpeningBalance v1/customers/{itemId}/openingBalance
		/// </summary>
		/// <param name="itemId">Id of Customer to return opening balances.</param>
		/// <returns>OK</returns>
		public async Task<OwnerOpeningBalanceInPeriodsDto> Customers_GetOpeningBalanceAsync(long itemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+itemId+"/openingBalance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OwnerOpeningBalanceInPeriodsDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Customer's opening balance transactions.
		/// Customers_GetOpeningBalanceList v1/customers/{itemId}/openingBalanceList
		/// </summary>
		/// <param name="itemId">Id of Customer to return opening balances transaction.</param>
		/// <returns>OK</returns>
		public async Task<OwnerOpeningBalanceDto[]> Customers_GetOpeningBalanceListAsync(long itemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+itemId+"/openingBalanceList";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OwnerOpeningBalanceDto[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Customer's quotes.
		/// Customers_GetQuotes v1/customers/{itemId}/quotes
		/// </summary>
		/// <param name="itemId">Id of Customer to return quotes.</param>
		/// <returns>OK</returns>
		public async Task<QuoteDto[]> Customers_GetQuotesAsync(long itemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+itemId+"/quotes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QuoteDto[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends a Statement email.
		/// If "toAddress" is not empty then email will be sent to this address. Otherwise email will be sent to Statement Customer's address.
		/// Email_SendEmailStatement v1/email/sendEmailStatement
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Email_SendEmailStatementAsync(EmailStatementDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/email/sendEmailStatement";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sends a Quote email.
		/// If "toAddress" is not empty then email will be sent to this address. Otherwise email will be sent to Statement Customer's address.
		/// Email_SendQuote v1/email/sendQuote
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Email_SendQuoteAsync(EmailQuoteDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/email/sendQuote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sends a Sales Invoice email.
		/// If "toAddress" is not empty then email will be sent to this address. Otherwise email will be sent to Sales Invoice Customer's address.
		/// Email_SendSalesInvoice v1/email/sendSalesInvoice
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Email_SendSalesInvoiceAsync(SalesInvoiceEmailInfoDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/email/sendSalesInvoice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of global Owner Type Groups. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" field.
		/// OwnerTypeGroups_Get v1/ownerTypeGroups
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_OwnerTypeGroupDto_> OwnerTypeGroups_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/ownerTypeGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_OwnerTypeGroupDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of global Owner Types. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" field.
		/// OwnerTypes_Get v1/ownerTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_OwnerTypeDto_> OwnerTypes_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/ownerTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_OwnerTypeDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Payments. Supports OData querying protocol.
		/// Filtering is allowed by "entryDate" field.
		/// Ordering is allowed by "id" field.
		/// Payments_Get v1/payments
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_PaymentQueryDto_> Payments_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_PaymentQueryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Payment.
		/// Payments_Post v1/payments
		/// </summary>
		/// <param name="requestBody">Information of Payment to create.</param>
		/// <returns>OK</returns>
		public async Task<string> Payments_PostAsync(PaymentDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Payments.
		/// Payments_ProcessBatch v1/payments/batch
		/// </summary>
		/// <param name="requestBody">Batch of Payments to process.</param>
		/// <returns>OK</returns>
		public async Task<string> Payments_ProcessBatchAsync(BatchItem_PaymentDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payments/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Payment.
		/// Payments_Delete v1/payments/{id}
		/// </summary>
		/// <param name="id">Id of Payment to remove.</param>
		/// <param name="timestamp">Timestamp of Payment to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> Payments_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payments/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Payments.
		/// PaymentsGetById v1/payments/{id}
		/// </summary>
		/// <param name="id">Id of Payment to return.</param>
		/// <returns>OK</returns>
		public async Task<PaymentDto> PaymentsGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Payment.
		/// Payments_Put v1/payments/{id}
		/// </summary>
		/// <param name="id">Id of Payment to update.</param>
		/// <param name="requestBody">Information of Payment to update.</param>
		/// <returns>OK</returns>
		public async Task<string> Payments_PutAsync(long id, PaymentDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of global Product Types. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" field.
		/// ProductTypes_Get v1/productTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_OwnerTypeDto_> ProductTypes_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/productTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_OwnerTypeDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Products. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" and "stockCode" fields.
		/// Products_Get v1/products
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_ProductDto_> Products_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_ProductDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Product.
		/// Products_Post v1/products
		/// </summary>
		/// <param name="requestBody">Information of Product to create.</param>
		/// <returns>OK</returns>
		public async Task<string> Products_PostAsync(ProductDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Products.
		/// Products_ProcessBatch v1/products/batch
		/// </summary>
		/// <param name="requestBody">Batch of Products to process.</param>
		/// <returns>OK</returns>
		public async Task<string> Products_ProcessBatchAsync(BatchItem_ProductDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Product.
		/// Products_Delete v1/products/{id}
		/// </summary>
		/// <param name="id">Id of Product to remove.</param>
		/// <param name="timestamp">Timestamp of Product to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> Products_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Product.
		/// ProductsGetById v1/products/{id}
		/// </summary>
		/// <param name="id">Id of Product to return.</param>
		/// <returns>OK</returns>
		public async Task<ProductDto> ProductsGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Product.
		/// Products_Put v1/products/{id}
		/// </summary>
		/// <param name="id">Id of Product to update.</param>
		/// <param name="requestBody">Information of Product to update.</param>
		/// <returns>OK</returns>
		public async Task<string> Products_PutAsync(long id, ProductDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Purchases. Supports OData querying protocol.
		/// Filtering is allowed by "entryDate" field.
		/// Ordering is allowed by "id" field.
		/// Purchases_Get v1/purchases
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_PurchaseQueryDto_> Purchases_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/purchases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_PurchaseQueryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Purchase.
		/// Purchases_Post v1/purchases
		/// </summary>
		/// <param name="requestBody">Information of Purchase to create.</param>
		/// <returns>OK</returns>
		public async Task<string> Purchases_PostAsync(PurchaseDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/purchases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Purchases.
		/// Purchases_ProcessBatch v1/purchases/batch
		/// </summary>
		/// <param name="requestBody">Batch of Purchases to process.</param>
		/// <returns>OK</returns>
		public async Task<string> Purchases_ProcessBatchAsync(BatchItem_PurchaseDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/purchases/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Purchase.
		/// Purchases_Delete v1/purchases/{id}
		/// </summary>
		/// <param name="id">Id of Purchase to remove.</param>
		/// <param name="timestamp">Timestamp of Purchase to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> Purchases_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/purchases/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Purchases.
		/// PurchasesGetById v1/purchases/{id}
		/// </summary>
		/// <param name="id">Id of Purchase to return.</param>
		/// <returns>OK</returns>
		public async Task<PurchaseDto> PurchasesGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/purchases/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Purchase.
		/// Purchases_Put v1/purchases/{id}
		/// </summary>
		/// <param name="id">Id of Purchase to update.</param>
		/// <param name="requestBody">Information of Purchase to update.</param>
		/// <returns>OK</returns>
		public async Task<string> Purchases_PutAsync(long id, PurchaseDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/purchases/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Quotes.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id".
		/// Quote_Get v1/quotes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_QuoteDto_> Quote_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quotes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_QuoteDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Quote.
		/// Quote_Post v1/quotes
		/// </summary>
		/// <param name="requestBody">Information of Quote to create.</param>
		/// <returns>OK</returns>
		public async Task<string> Quote_PostAsync(QuoteDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quotes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Quote.
		/// Quote_ProcessBatch v1/quotes/batch
		/// </summary>
		/// <param name="requestBody">Batch of Quote to process.</param>
		/// <returns>OK</returns>
		public async Task<string> Quote_ProcessBatchAsync(BatchItem_QuoteDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quotes/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Close a Quote.
		/// Quote_Close v1/quotes/close/{id}
		/// </summary>
		/// <param name="id">Id of Quote to close</param>
		/// <returns>OK</returns>
		public async Task<string> Quote_CloseAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quotes/close/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Quote with auto generating reference.
		/// Quote_Post_CreateQuoteWithGeneratingReference v1/quotes/createQuoteWithGeneratingReference
		/// </summary>
		/// <param name="requestBody">Information of Quote to create.</param>
		/// <returns>OK</returns>
		public async Task<string> Quote_Post_CreateQuoteWithGeneratingReferenceAsync(QuoteDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quotes/createQuoteWithGeneratingReference";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate a sale invoice from a Quote.
		/// When sale invoice is empty, new sale invoice will be generated from Quote.
		/// Quote_Post_GenerateSaleInvoice v1/quotes/generateSaleInvoice
		/// </summary>
		/// <param name="requestBody">Id of Quote to generate</param>
		/// <returns>OK</returns>
		public async Task<string> Quote_Post_GenerateSaleInvoiceAsync(QuoteGeneratingInvoiceDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quotes/generateSaleInvoice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reopen a Quote.
		/// Quote_Reopen v1/quotes/reopen/{id}
		/// </summary>
		/// <param name="id">Id of Quote to reopen</param>
		/// <returns>OK</returns>
		public async Task<string> Quote_ReopenAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quotes/reopen/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Quote.
		/// Quote_Delete v1/quotes/{id}
		/// </summary>
		/// <param name="id">Id of Quote to remove.</param>
		/// <param name="timestamp">Timestamp of Quote to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> Quote_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quotes/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Quote.
		/// QuoteGetById v1/quotes/{id}
		/// </summary>
		/// <param name="id">Id of Sale Rep to return.</param>
		/// <returns>OK</returns>
		public async Task<QuoteDto> QuoteGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quotes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QuoteDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Quote.
		/// Quote_Put v1/quotes/{id}
		/// </summary>
		/// <param name="id">Id of Quote to update.</param>
		/// <param name="requestBody">Information of Quote to update.</param>
		/// <returns>OK</returns>
		public async Task<string> Quote_PutAsync(long id, QuoteDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quotes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Sales Entries, Sales Invoices and Sales Credit Notes. Supports OData querying protocol.
		/// Filtering is allowed by "entryDate" field.
		/// Ordering is allowed by "id" field.
		/// Sales_Get v1/sales
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_SalesQueryDto_> Sales_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/sales";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_SalesQueryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Sales Credit Notes. Supports OData querying protocol.
		/// Filtering is allowed by "entryDate" field.
		/// Ordering is allowed by "id" field.
		/// SalesCreditNotes_Get v1/salesCreditNotes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_SalesCreditNoteQueryDto_> SalesCreditNotes_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesCreditNotes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_SalesCreditNoteQueryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Sales Credit Note.
		/// SalesCreditNotes_Post v1/salesCreditNotes
		/// </summary>
		/// <param name="requestBody">Information of Sales Credit Note to create.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesCreditNotes_PostAsync(SalesInvoiceCreditNoteDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesCreditNotes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Sales Credit Notes.
		/// SalesCreditNotes_ProcessBatch v1/salesCreditNotes/batch
		/// </summary>
		/// <param name="requestBody">Batch of Sales Credit Notes to process.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesCreditNotes_ProcessBatchAsync(BatchItem_SalesInvoiceCreditNoteDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesCreditNotes/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Sales Credit Note.
		/// SalesCreditNotes_Delete v1/salesCreditNotes/{id}
		/// </summary>
		/// <param name="id">Id of Sales Credit Note to remove.</param>
		/// <param name="timestamp">Timestamp of Sales Credit Note to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesCreditNotes_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesCreditNotes/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Sales Credit Note.
		/// SalesCreditNotesGetById v1/salesCreditNotes/{id}
		/// </summary>
		/// <param name="id">Id of Sales Credit Note to return.</param>
		/// <returns>OK</returns>
		public async Task<SalesInvoiceCreditNoteDto> SalesCreditNotesGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesCreditNotes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesInvoiceCreditNoteDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Sales Credit Note.
		/// SalesCreditNotes_Put v1/salesCreditNotes/{id}
		/// </summary>
		/// <param name="id">Id of Sales Credit Note to update.</param>
		/// <param name="requestBody">Information of Sales Credit Note to update.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesCreditNotes_PutAsync(long id, SalesInvoiceCreditNoteDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesCreditNotes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Sales Entries. Supports OData querying protocol.
		/// Filtering is allowed by "entryDate" field.
		/// Ordering is allowed by "id" field.
		/// SalesEntries_Get v1/salesEntries
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_SalesEntryQueryDto_> SalesEntries_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesEntries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_SalesEntryQueryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Sales Entry.
		/// SalesEntries_Post v1/salesEntries
		/// </summary>
		/// <param name="requestBody">Information of Sales Entry to create.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesEntries_PostAsync(SalesEntryDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesEntries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Sales Entries.
		/// SalesEntries_ProcessBatch v1/salesEntries/batch
		/// </summary>
		/// <param name="requestBody">Batch of Sales Entries to process.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesEntries_ProcessBatchAsync(BatchItem_SalesEntryDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesEntries/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Sales Entry.
		/// SalesEntries_Delete v1/salesEntries/{id}
		/// </summary>
		/// <param name="id">Id of Sales Entry to remove.</param>
		/// <param name="timestamp">Timestamp of Sales Entry to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesEntries_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesEntries/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Sales Entry.
		/// SalesEntriesGetById v1/salesEntries/{id}
		/// </summary>
		/// <param name="id">Id of Sales Entry to return.</param>
		/// <returns>OK</returns>
		public async Task<SalesEntryDto> SalesEntriesGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesEntries/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesEntryDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Sales Entry.
		/// SalesEntries_Put v1/salesEntries/{id}
		/// </summary>
		/// <param name="id">Id of Sales Entry to update.</param>
		/// <param name="requestBody">Information of Sales Entry to update.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesEntries_PutAsync(long id, SalesEntryDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesEntries/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Sales Invoices. Supports OData querying protocol.
		/// Filtering is allowed by "entryDate" field.
		/// Ordering is allowed by "id" field.
		/// SalesInvoices_Get v1/salesInvoices
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_SalesInvoiceQueryDto_> SalesInvoices_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesInvoices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_SalesInvoiceQueryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Sales Invoice.
		/// SalesInvoices_Post v1/salesInvoices
		/// </summary>
		/// <param name="requestBody">Information of Sales Invoice to create.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesInvoices_PostAsync(SalesInvoiceCreditNoteDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesInvoices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Sales Invoices.
		/// SalesInvoices_ProcessBatch v1/salesInvoices/batch
		/// </summary>
		/// <param name="requestBody">Batch of Sales Invoices to process.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesInvoices_ProcessBatchAsync(BatchItem_SalesInvoiceCreditNoteDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesInvoices/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new Sale Invoice with auto generating reference.
		/// SalesInvoices_Post_CreateSaleInvoiceWithGeneratingReference v1/salesInvoices/createSaleInvoiceWithGeneratingReference
		/// </summary>
		/// <param name="requestBody">Information of Sale Invoice to create.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesInvoices_Post_CreateSaleInvoiceWithGeneratingReferenceAsync(SalesInvoiceCreditNoteDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesInvoices/createSaleInvoiceWithGeneratingReference";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Sales Invoice.
		/// SalesInvoices_Delete v1/salesInvoices/{id}
		/// </summary>
		/// <param name="id">Id of Sales Invoice to remove.</param>
		/// <param name="timestamp">Timestamp of Sales Invoice to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesInvoices_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesInvoices/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Sales Invoice.
		/// SalesInvoicesGetById v1/salesInvoices/{id}
		/// </summary>
		/// <param name="id">Id of Sales Invoice to return.</param>
		/// <returns>OK</returns>
		public async Task<SalesInvoiceCreditNoteDto> SalesInvoicesGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesInvoices/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesInvoiceCreditNoteDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Sales Invoice.
		/// SalesInvoices_Put v1/salesInvoices/{id}
		/// </summary>
		/// <param name="id">Id of Sales Invoice to update.</param>
		/// <param name="requestBody">Information of Sales Invoice to update.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesInvoices_PutAsync(long id, SalesInvoiceCreditNoteDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesInvoices/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's SaleRep.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id".
		/// SalesRep_Get v1/salesReps
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_SaleRepsDto_> SalesRep_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesReps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_SaleRepsDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new SaleRep.
		/// SalesRep_Post v1/salesReps
		/// </summary>
		/// <param name="requestBody">Information of Sale Rep to create.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesRep_PostAsync(SaleRepsDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesReps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Sale Rep.
		/// SalesRep_ProcessBatch v1/salesReps/batch
		/// </summary>
		/// <param name="requestBody">Batch of Sale Rep to process.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesRep_ProcessBatchAsync(BatchItem_SaleRepsDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesReps/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Sale Rep.
		/// SalesRep_Delete v1/salesReps/{id}
		/// </summary>
		/// <param name="id">Id of Sale Rep to remove.</param>
		/// <param name="timestamp">Timestamp of Sale Rep to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesRep_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesReps/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single SaleRep.
		/// SalesRepGetById v1/salesReps/{id}
		/// </summary>
		/// <param name="id">Id of Sale Rep to return.</param>
		/// <returns>OK</returns>
		public async Task<SaleRepsDto> SalesRepGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesReps/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SaleRepsDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Sale Rep.
		/// SalesRep_Put v1/salesReps/{id}
		/// </summary>
		/// <param name="id">Id of Sale Rep to update.</param>
		/// <param name="requestBody">Information of Sale Rep to update.</param>
		/// <returns>OK</returns>
		public async Task<string> SalesRep_PutAsync(long id, SaleRepsDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesReps/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Suppliers. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" and "code" fields.
		/// Suppliers_Get v1/suppliers
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_SupplierQueryDto_> Suppliers_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/suppliers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_SupplierQueryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Supplier.
		/// Suppliers_Post v1/suppliers
		/// </summary>
		/// <param name="requestBody">Information of Supplier to create.</param>
		/// <returns>OK</returns>
		public async Task<string> Suppliers_PostAsync(SupplierDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/suppliers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Processes a batch of Suppliers.
		/// Suppliers_ProcessBatch v1/suppliers/batch
		/// </summary>
		/// <param name="requestBody">Batch of Suppliers to process.</param>
		/// <returns>OK</returns>
		public async Task<string> Suppliers_ProcessBatchAsync(BatchItem_SupplierDto_[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/suppliers/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an existing Supplier.
		/// Suppliers_Delete v1/suppliers/{id}
		/// </summary>
		/// <param name="id">Id of Supplier to remove.</param>
		/// <param name="timestamp">Timestamp of Supplier to remove. Should be encoded in Base64.</param>
		/// <returns>OK</returns>
		public async Task<string> Suppliers_DeleteAsync(long id, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/suppliers/"+id+"?timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a single Supplier. You may specify that Supplier's ledger balance should be calculated.
		/// SuppliersGetByIdAndNeedBalance v1/suppliers/{id}
		/// </summary>
		/// <param name="id">Id of Supplier to return.</param>
		/// <param name="needBalance">If "true" then Supplier's ledger balance will be calculated; otherwise balance will be returned as 0.</param>
		/// <returns>OK</returns>
		public async Task<SupplierDto> SuppliersGetByIdAndNeedBalanceAsync(long id, bool needBalance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/suppliers/"+id+"?needBalance="+needBalance;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SupplierDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Supplier.
		/// Suppliers_Put v1/suppliers/{id}
		/// </summary>
		/// <param name="id">Id of Supplier to update.</param>
		/// <param name="requestBody">Information of Supplier to update.</param>
		/// <returns>OK</returns>
		public async Task<string> Suppliers_PutAsync(long id, SupplierDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/suppliers/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Supplier's account transactions.
		/// Suppliers_GetAccountTrans v1/suppliers/{itemId}/accountTrans
		/// </summary>
		/// <param name="itemId">Id of Supplier to return account transaction.</param>
		/// <returns>OK</returns>
		public async Task<AccountTranDto[]> Suppliers_GetAccountTransAsync(long itemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/suppliers/"+itemId+"/accountTrans";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountTranDto[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a Supplier's opening balances, calculated for the next periods: current month, one month old, two months old, three and more months old.
		/// Suppliers_GetOpeningBalance v1/suppliers/{itemId}/openingBalance
		/// </summary>
		/// <param name="itemId">Id of Supplier to return opening balances.</param>
		/// <returns>OK</returns>
		public async Task<OwnerOpeningBalanceInPeriodsDto> Suppliers_GetOpeningBalanceAsync(long itemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/suppliers/"+itemId+"/openingBalance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OwnerOpeningBalanceInPeriodsDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Supplier's opening balance transactions.
		/// Suppliers_GetOpeningBalanceList v1/suppliers/{itemId}/openingBalanceList
		/// </summary>
		/// <param name="itemId">Id of Supplier to return opening balances transaction.</param>
		/// <returns>OK</returns>
		public async Task<OwnerOpeningBalanceDto[]> Suppliers_GetOpeningBalanceListAsync(long itemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/suppliers/"+itemId+"/openingBalanceList";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OwnerOpeningBalanceDto[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's User Defined Fields. Supports OData querying protocol.
		/// Filtering is allowed by "categoryTypeId" field.
		/// Ordering is allowed by "id" and "orderIndex" fields.
		/// UserDefinedFields_Get v1/userDefinedFields
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_UserDefinedFieldDto_> UserDefinedFields_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/userDefinedFields";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_UserDefinedFieldDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of global Vat Analysis Types. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" field.
		/// VatAnalysisTypes_Get v1/vatAnalysisTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_VatAnalysisTypeDto_> VatAnalysisTypes_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vatAnalysisTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_VatAnalysisTypeDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of global Vat Categories. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" field.
		/// VatCategories_Get v1/vatCategories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_VatCategoryDto_> VatCategories_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vatCategories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_VatCategoryDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Process Vat Rates
		/// VatCategories_ProcessVatRates v1/vatCategories/vatRates
		/// </summary>
		/// <param name="requestBody">Array of Vat Rates.</param>
		/// <returns>OK</returns>
		public async Task<string> VatCategories_ProcessVatRatesAsync(VatRatesByVatCategoryDto[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vatCategories/vatRates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of company's Vat Rates. Supports OData querying protocol.
		/// Filtering is allowed by "vatCategoryId" field.
		/// Ordering is allowed by "id" and "orderIndex" fields.
		/// VatRates_Get v1/vatRates
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_VatRateDto_> VatRates_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vatRates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_VatRateDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of global Vat Types. Supports OData querying protocol.
		/// Filtering is forbidden.
		/// Ordering is allowed by "id" field.
		/// VatTypes_Get v1/vatTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PageResult_VatTypeDto_> VatTypes_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vatTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResult_VatTypeDto_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
