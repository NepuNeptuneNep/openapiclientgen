//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Calculate shipping carbon offset
		/// Calculates the donation amount (to CarbonFund 501\(c\)3) needed to offset a physical shipment. This calculation depends on the weight, primary transportation method, and distance of the shipment. Provide the distance of the shipment using the origin and destination address, or directly with the number of miles. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
		/// ApiV1DonationsCarbon_calculateGetByOrigin_addressAndDestination_addressAndDistance_miAndWeight_lbAndTransportation_method api/v1/donations/carbon_calculate
		/// </summary>
		/// <param name="origin_address">The origin zip code (US only) of the shipment. If you send this parameter, also send `destination_address`.</param>
		/// <param name="destination_address">The destination zip code (US only) of the shipment. If you send this parameter, also send `origin_address`.</param>
		/// <param name="distance_mi">The total distance (in miles) of the shipment. You can use this parameter in place of `origin_address` and `destination_address`.</param>
		/// <param name="weight_lb">The total weight (in pounds) of the shipment.</param>
		/// <param name="transportation_method">The primary transportation method of the shipment.</param>
		/// <returns>successful</returns>
		public async Task ApiV1DonationsCarbon_calculateGetByOrigin_addressAndDestination_addressAndDistance_miAndWeight_lbAndTransportation_methodAsync(double origin_address, double destination_address, double distance_mi, double weight_lb, ApiV1DonationsCarbon_calculateGetByOrigin_addressAndDestination_addressAndDistance_miAndWeight_lbAndTransportation_methodTransportation_method transportation_method, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/donations/carbon_calculate?origin_address="+origin_address+"&destination_address="+destination_address+"&distance_mi="+distance_mi+"&weight_lb="+weight_lb+"&transportation_method=" + transportation_method;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve carbon offset stats
		/// Measures your carbon offset impact in relatable terms. Provide the id of a donation to CarbonFund to see stats about that specific donation. If you omit the donation id, this endpoint returns aggregate stats for all of your CarbonFund donations.
		/// ApiV1DonationsCarbon_statsGetById api/v1/donations/carbon_stats
		/// </summary>
		/// <param name="id">The id of a donation to the CarbonFund nonprofit. Ids are returned when a donation is created. If an ID is not provided, the total stats for all donations to CarbonFund are returned.</param>
		/// <returns>successful</returns>
		public async Task ApiV1DonationsCarbon_statsGetByIdAsync(double id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/donations/carbon_stats?id="+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a donation
		/// Creates a donation to any nonprofit. CHANGE keeps track of your donations, bills you at the end of the month, and handles the nonprofit payouts for you.
		/// ApiV1DonationsCreatePostByAmountAndNonprofit_idAndFunding_sourceAndZip_code api/v1/donations/create
		/// </summary>
		/// <param name="amount">The amount of the donation in cents.</param>
		/// <param name="nonprofit_id">The id of a nonprofit from the CHANGE network.</param>
		/// <param name="funding_source">Source of the donation funds. If you are collecting payment from your customer for the donation, use `customer`.</param>
		/// <param name="zip_code">The customer's zip code. Provide this to unlock geographic insights.</param>
		/// <returns>Donation successful</returns>
		public async Task ApiV1DonationsCreatePostByAmountAndNonprofit_idAndFunding_sourceAndZip_codeAsync(string amount, string nonprofit_id, ApiV1DonationsCreatePostByAmountAndNonprofit_idAndFunding_sourceAndZip_codeFunding_source funding_source, string zip_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/donations/create?amount=" + (amount==null? "" : System.Uri.EscapeDataString(amount))+"&nonprofit_id=" + (nonprofit_id==null? "" : System.Uri.EscapeDataString(nonprofit_id))+"&funding_source=" + funding_source+"&zip_code=" + (zip_code==null? "" : System.Uri.EscapeDataString(zip_code));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate crypto carbon offset
		/// Calculates the donation amount (to CarbonFund 501\(c\)3) needed to offset a cryptocurrency transaction. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
		/// ApiV1DonationsCrypto_calculateGetByCountAndCurrency api/v1/donations/crypto_calculate
		/// </summary>
		/// <param name="count">The number of transactions to offset.</param>
		/// <param name="currency">The currency of the transaction.</param>
		/// <returns>successful</returns>
		public async Task ApiV1DonationsCrypto_calculateGetByCountAndCurrencyAsync(double count, ApiV1DonationsCrypto_calculateGetByCountAndCurrencyCurrency currency, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/donations/crypto_calculate?count="+count+"&currency=" + currency;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List your donations
		/// Retrieves a list of donations you've previously made. The donations are returned in order of creation, with the most recent donations appearing first. This endpoint is paginated.
		/// ApiV1DonationsIndexGetByPage api/v1/donations/index
		/// </summary>
		/// <param name="page">Which page to return. This endpoint is paginated, and returns maximum 30 donations per page.</param>
		/// <returns>successful</returns>
		public async Task ApiV1DonationsIndexGetByPageAsync(double page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/donations/index?page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a donation
		/// Retrieves the details of a donation you've previously made.
		/// ApiV1DonationsShowGetById api/v1/donations/show
		/// </summary>
		/// <param name="id">The id of a donation. Ids are returned when a donation is created.</param>
		/// <returns>successful</returns>
		public async Task ApiV1DonationsShowGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/donations/show?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search a nonprofit
		/// Retrieves a list of nonprofits whose names match the provided name. This endpoint is paginated.
		/// ApiV1NonprofitsListGetByNameAndPage api/v1/nonprofits/list
		/// </summary>
		/// <param name="name">A string to search.</param>
		/// <param name="page">The page to return. This endpoint is paginated, and returns up to 30 nonprofits at a time.</param>
		/// <returns>List successful</returns>
		public async Task ApiV1NonprofitsListGetByNameAndPageAsync(string name, double page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/nonprofits/list?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show a nonprofit
		/// Retrieves information for a nonprofit.
		/// ApiV1NonprofitsShowGetById api/v1/nonprofits/show
		/// </summary>
		/// <param name="id">The id of a nonprofit from the CHANGE network.</param>
		/// <returns>Show successful</returns>
		public async Task ApiV1NonprofitsShowGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/nonprofits/show?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ApiV1DonationsCarbon_calculateGetByOrigin_addressAndDestination_addressAndDistance_miAndWeight_lbAndTransportation_methodTransportation_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="air")]
		air = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="truck")]
		truck = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rail")]
		rail = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sea")]
		sea = 3,
	}
	
	public enum ApiV1DonationsCreatePostByAmountAndNonprofit_idAndFunding_sourceAndZip_codeFunding_source
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="merchant")]
		merchant = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer")]
		customer = 1,
	}
	
	public enum ApiV1DonationsCrypto_calculateGetByCountAndCurrencyCurrency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eth")]
		eth = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="btc")]
		btc = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
