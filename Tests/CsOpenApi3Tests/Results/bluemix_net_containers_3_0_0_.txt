//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Binding
	{
		
		/// <summary>
		/// Unique identifier representing a container
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContainerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Certificate
	{
		
		/// <summary>
		/// Certificate Authority (CA) certificate including the CA public key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ca_cert")]
		public string Ca_cert { get; set; }
		
		/// <summary>
		/// Server certificate including the server's public key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server_cert")]
		public string Server_cert { get; set; }
		
		/// <summary>
		/// User certificate including the user's public key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_cert")]
		public string User_cert { get; set; }
		
		/// <summary>
		/// User's private key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_key")]
		public string User_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateRefresh
	{
		
		/// <summary>
		/// Certificate Authority (CA) certificate including the CA public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ca_cert")]
		public string Ca_cert { get; set; }
		
		/// <summary>
		/// Full URL to the IBM Bluemix registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reg_host")]
		public string Reg_host { get; set; }
		
		/// <summary>
		/// Server certificate including the server's public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="server_cert")]
		public string Server_cert { get; set; }
		
		/// <summary>
		/// User certificate including the user's public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_cert")]
		public string User_cert { get; set; }
		
		/// <summary>
		/// User's private key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_key")]
		public string User_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Container
	{
		
		/// <summary>
		/// The command and arguments that were passed to the container during container creation. This command is executed when the container is started.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Command { get; set; }
		
		/// <summary>
		/// The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContainerState { get; set; }
		
		/// <summary>
		/// The time when the container was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Created { get; set; }
		
		/// <summary>
		/// A list of all the environment variables of the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Env { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Group Group { get; set; }
		
		/// <summary>
		/// Unique identifier representing a container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Full path to the container image in your private Bluemix registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		/// <summary>
		/// Unique identifier representing a container image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		/// <summary>
		/// List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// The amount of container memory in Megabyte that was assigned to your container. The memory is counted towards the quota that is allocated for the space.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Memory { get; set; }
		
		/// <summary>
		/// The name of the container. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkSetting NetworkSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Port Ports { get; set; }
		
		/// <summary>
		/// Total size of all the files in the container, in bytes. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeRootFs { get; set; }
		
		/// <summary>
		/// The size of the files which have been created or changed, if you compare the container to its base image. Just after creation, this should be zero. Ass you modify (or create) files, this size will increase.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeRw { get; set; }
		
		/// <summary>
		/// Time when the container was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Started { get; set; }
		
		/// <summary>
		/// The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// Number of virtual CPUs that are assigned to the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VCPU { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ArgsEscaped { get; set; }
		
		/// <summary>
		/// Attaches the container to stderr.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AttachStderr { get; set; }
		
		/// <summary>
		/// Attaches the container to sdtin.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AttachStdin { get; set; }
		
		/// <summary>
		/// Attaches the container to stdout.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AttachStdout { get; set; }
		
		/// <summary>
		/// The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>["ping","localhost"]<br>["tail","-f","/dev/null"]<br>["sh","-c","while true; do date; sleep 20; done"]
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Cmd { get; set; }
		
		/// <summary>
		/// The domain name to be used for the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Domainname { get; set; }
		
		/// <summary>
		/// A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Env { get; set; }
		
		/// <summary>
		/// List of public ports that were exposed during container creation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] ExposedPorts { get; set; }
		
		/// <summary>
		/// The host name to be used for the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Hostname { get; set; }
		
		/// <summary>
		/// Full path to the image that the container is based on in your private Bluemix registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		/// <summary>
		/// The hardware architecture the image is based on. It can either be 'amd64' indicating an Intel-based architecture, or 'ppc64le' representing a Power-based architecture.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ImageArchitecture { get; set; }
		
		/// <summary>
		/// List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// The amount of container memory that is assigned to the container in Megabyte.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Memory { get; set; }
		
		/// <summary>
		/// The total container memory limit (memory + swap)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MemorySwap { get; set; }
		
		/// <summary>
		/// When set to true, it opens stdin. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OpenStdin { get; set; }
		
		/// <summary>
		/// Not supported by IBM Containers, empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PortSpecs { get; set; }
		
		/// <summary>
		/// When set to true it closes stdin after the attached client disconnects.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StdinOnce { get; set; }
		
		/// <summary>
		/// When set to true, attach standard streams to a tty, including stdin if it is not closed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tty { get; set; }
		
		/// <summary>
		/// User to be used inside the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string User { get; set; }
		
		/// <summary>
		/// Number of virtual CPUs that are assigned to the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VCPU { get; set; }
		
		/// <summary>
		/// List of volumes to inherit from another container. This feature is not supported in IBM Containers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VolumesFrom { get; set; }
		
		/// <summary>
		/// The working directory inside the container where specified commands are executed. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkingDir { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerId
	{
		
		/// <summary>
		/// Unique ID representing a container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the container size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flavor_id")]
		public System.Nullable<System.Int32> Flavor_id { get; set; }
		
		/// <summary>
		/// The amount of container memory that has been assigned to the container. If the container memory was not specified in the API request, a container with 64 Megabyte container memory is created by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mem")]
		public System.Nullable<System.Int32> Mem { get; set; }
		
		/// <summary>
		/// Number of virtual CPUs that are assigned to the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcpu")]
		public System.Nullable<System.Int32> Vcpu { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerInfo
	{
		
		/// <summary>
		/// The name of the Cloud Foundry app that was bound to the container during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BluemixApp { get; set; }
		
		/// <summary>
		/// The name of the Bluemix service instance that was bound to the container during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BluemixServices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainerConfig Config { get; set; }
		
		/// <summary>
		/// The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContainerState { get; set; }
		
		/// <summary>
		/// The date and time the container was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Group Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HostConfig HostConfig { get; set; }
		
		/// <summary>
		/// The ID representing the physical compute host.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HostId { get; set; }
		
		/// <summary>
		/// The name of the container. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Human_Id { get; set; }
		
		/// <summary>
		/// Unique identifier representing a container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Unique identifier representing a container image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		/// <summary>
		/// A list of volumes that are mounted to the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Mounts { get; set; }
		
		/// <summary>
		/// The name of the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkSetting NetworkSettings { get; set; }
		
		/// <summary>
		/// The environment variable indicating the binary location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Path to the resolve.conf file inside the container. The resolve.conf file is used to resolve the DNS servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResolveConfPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainerState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Volume Volumes { get; set; }
		
		/// <summary>
		/// LIst of volumes that is mounted to the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] VolumesRW { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HostConfig
	{
		
		/// <summary>
		/// A list of volumes to be bound to the container. Each volume must be listed in the following format: VOLNAME:/CONTAINER_PATH:rw [ro]. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Binds { get; set; }
		
		/// <summary>
		/// A list of hostnames/IP mappings to be added to the container’s /etc/hosts file. Specified in the form ["hostname:IP"]
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] ExtraHosts { get; set; }
		
		/// <summary>
		/// A list of containers that need to be linked.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Links { get; set; }
		
		/// <summary>
		/// The container ports that you want to expose to the public. Ports need to be specified in the form of &lt;port&gt;/&lt;protocol&gt;: [{ "HostIp": "&lt;IP&gt;", "HostPort": "&lt;port&gt;" }]
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] PortBindings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerState
	{
		
		/// <summary>
		/// The exit code indicating the root cause of why the container exited. Review the Docker API documentation to find a list of exit codes and their meaning. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExitCode { get; set; }
		
		/// <summary>
		/// Time when the container stopped.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FinishedAt { get; set; }
		
		/// <summary>
		/// Not supported by IBM Containers, empty string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Ghost { get; set; }
		
		/// <summary>
		/// The process ID on the compute host that runs the container process.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pid { get; set; }
		
		/// <summary>
		/// If set to true, the container is in a RUNNING state. If set to false, the container has stopped or crashed. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Running { get; set; }
		
		/// <summary>
		/// Time when the container started.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StartedAt { get; set; }
		
		/// <summary>
		/// The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainersGroupsGetListItem
	{
		
		/// <summary>
		/// Time when the container group is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Creation_time { get; set; }
		
		/// <summary>
		/// Unique identifier of the container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The port number that is exposed to the public during container group creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// The public route that is mapped to the container group. You can use this route to access your container group from the Internet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Routes { get; set; }
		
		/// <summary>
		/// Current status of the container group. The container group status is a composite of ACTION and STATUS:<br><br> ACTIONS = (CREATE, DELETE, UPDATE, ROLLBACK, SUSPEND, RESUME, ADOPT, SNAPSHOT, CHECK, RESTORE)<br><br> STATUSES = (IN_PROGRESS, FAILED, COMPLETE)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// Time when the container group is changed and updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Updated_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainersGroupsNameOrIdGetDetails
	{
		
		/// <summary>
		/// If set to `true` the container instances in the group are spread across separate physical compute nodes, which reduces the likelihood of containers crashing due to hardware failures. If set to `false`, the container instances in the group share the same physical compute node. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Anti-affinity")]
		public string Anti_affinity { get; set; }
		
		/// <summary>
		/// Can be either true or false. If set to true, the Autorecovery mode is enabled for your container group. In case a container instance crashes or stops, this instance is removed and a new one is automatically recreated. If set to false, the Autorecovery mode is disabled. In case a container instances crashes or stops, it is not automatically recreated by IBM Containers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Autorecovery { get; set; }
		
		/// <summary>
		/// Current IBM Containers availability zone on Openstack. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// The Docker command that was specified to be run when the container instances are started. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Cmd { get; set; }
		
		/// <summary>
		/// Timestamp when the container group was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Creation_time { get; set; }
		
		/// <summary>
		/// The list of environmental variables that were defined for the container group. Each environment variable consists of a unique key and a value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Env { get; set; }
		
		/// <summary>
		/// Unique identifier representing a specific container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The unique ID of the container image your container group instances are based on.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		/// <summary>
		/// The full path to the container image in your private Bluemix repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		/// <summary>
		/// The size of each container instance that runs in the container group in MegaByte.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Memory { get; set; }
		
		/// <summary>
		/// The name of the container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainersGroupsNameOrIdGetDetailsNumberInstances NumberInstances { get; set; }
		
		/// <summary>
		/// The public port that has been exposed. If you specified a route, your container group is accessible from the Internet. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainersGroupsNameOrIdGetDetailsRoute_Status Route_Status { get; set; }
		
		/// <summary>
		/// The public route that is mapped to the container group. When you expose a public port, you can use the route to access your container group from the Internet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Routes { get; set; }
		
		/// <summary>
		/// The current status of the container group. The container group status is a composite of ACTION and STATUS:<br><br> ACTIONS = (CREATE, DELETE, UPDATE, ROLLBACK, SUSPEND, RESUME, ADOPT, SNAPSHOT, CHECK, RESTORE)<br><br> STATUSES = (IN_PROGRESS, FAILED, COMPLETE)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// Timestamp when the container group was updated. If the container group was not updated before, `null` is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedTime { get; set; }
		
		/// <summary>
		/// List of volumes to be associated with the container, in the format of volume name:path:mode where mode can be ro or rw.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Volumes { get; set; }
	}
	
	public class ContainersGroupsNameOrIdGetDetailsNumberInstances
	{
		
		/// <summary>
		/// The current number of container instances that are running in your container group. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentSize { get; set; }
		
		/// <summary>
		/// The number of container instances that you require.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Desired { get; set; }
		
		/// <summary>
		/// The maximum number of container instance that you want to run in your container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max { get; set; }
		
		/// <summary>
		/// The minimum number of container instances that you want to run in your container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Min { get; set; }
	}
	
	public class ContainersGroupsNameOrIdGetDetailsRoute_Status
	{
		
		/// <summary>
		/// Can be either true or false. If set to true, then the route is in the process of being mapped to the container group and set up in the GoRouter. Is set to false, then the set up of the route is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in_progress")]
		public System.Nullable<System.Boolean> In_progress { get; set; }
		
		/// <summary>
		/// Info message for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Can be either true or false. If set to true, then the route is successfully registrered with the GoRouter. If set to false, then the route registration has not yet finished yet or could not be completed without errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successful")]
		public System.Nullable<System.Boolean> Successful { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainersGroupsNameOrIdMaproutePostInfo : ContainersGroupsPostCreatedInfo
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainersGroupsNameOrIdPatchUpdatedInfo
	{
		
		/// <summary>
		/// Enable or disable the Autorecovery mode for your container group. To enable it, enter true. If you want to disable it, enter false. Note: You can only enable/ disable Autorecovery mode if your container group was initially created with Autorecovery mode enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Autorecovery { get; set; }
		
		/// <summary>
		/// A list of environment variables that you want to add to your container group. Every environment variable needs to be a key=value pair. Every key that you use needs to be unique for this container group. Multiple environment variables are separated with comma (,)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainersGroupsNameOrIdPatchUpdatedInfoNumberInstances NumberInstances { get; set; }
	}
	
	public class ContainersGroupsNameOrIdPatchUpdatedInfoNumberInstances
	{
		
		/// <summary>
		/// The number of container instances that you require.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Desired { get; set; }
		
		/// <summary>
		/// The maximum number of container instances that you want to run in your container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max { get; set; }
		
		/// <summary>
		/// The minimum number of container instances that you want to run in your container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainersGroupsPostCreatedInfo
	{
		
		/// <summary>
		/// Unique identifier representing a specific container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Warning information (Initial warning is empty).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainersGroupsPostRequiredAttributes
	{
		
		/// <summary>
		/// (Optional) Enable the Auto-recovery mode for your container group. If set to true, IBM Containers checks the health of each instance with an HTTP request to the port that is assigned. If the health check does not receive a TCP response from a container instance in two subsequent 90-second intervals, the instance is removed and replaced with a new instance. If set to false and container instances crash, they are not recovered by IBM Containers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Autorecovery { get; set; }
		
		/// <summary>
		/// (Optional) The name of the Cloud Foundry app that you created in your organization space.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BluemixApp { get; set; }
		
		/// <summary>
		/// (Optional) Docker command that is passed to the container group to be run when the container instances are started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Cmd { get; set; }
		
		/// <summary>
		/// (Optional) List of environmental variables. Every environment variable that is listed here needs to be a key=value pair. Every key that you use needs to be unique for this container group. Multiple environment variables are separated with comma (,).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Env { get; set; }
		
		/// <summary>
		/// (Required) The full path to your private Bluemix repository. If you want to use an image in your private Bluemix repository, specify the image in the following format: registry.ng.bluemix.net/NAMESPACE/IMAGE. If you want to use an IBM Containers provided image, do not include your organization's namespace. Specify the image in the following format: registry.ng.bluemix.net/IMAGE
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		/// <summary>
		/// (Optional) The size of each container instance in the container group. The size of each container instance in the group. Choose one of the following sizes and enter the size in MegaBytes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB). If you do not specify a size, all container instances in this group are created with 256 MB.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Memory { get; set; }
		
		/// <summary>
		/// (Required) Name of the container group that you want to create. The name needs to be unique in your organization space and must start with a letter. Then, you can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainersGroupsPostRequiredAttributesNumberInstances NumberInstances { get; set; }
		
		/// <summary>
		/// (Optional) Expose a port for HTTP traffic to make your container group available from the Internet. Every container instance that is started for this group, listens on this port. Container groups cannot expose multiple ports. Note: You need to expose a port, when "Autorecovery" is set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainersGroupsPostRequiredAttributesRoute Route { get; set; }
		
		/// <summary>
		/// (Optional) List of volumes to be mounted to the container instances of your container group. You need to create the volume first by using the cf ic volume-create command before you can mount a volume to a container group. When you specify a volume, use the following format: NAME:PATH:MODE. For NAME, use either the name or ID of the volume. For the PATH, enter the absolute path to the volume directory in the container. For MODE, enter either ro (read-only) or rw (read-write).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Volumes { get; set; }
	}
	
	public class ContainersGroupsPostRequiredAttributesNumberInstances
	{
		
		/// <summary>
		/// (Optional) The number of container instances that you require.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Desired { get; set; }
		
		/// <summary>
		/// (Optional) The maximum number of container instances that you want to run in your container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max { get; set; }
		
		/// <summary>
		/// (Optional) The minimum number of container instances that need to run in your container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Min { get; set; }
	}
	
	public class ContainersGroupsPostRequiredAttributesRoute
	{
		
		/// <summary>
		/// The default system domain is mybluemix.net and already provides a SSL certificate, so you can access your container groups with HTTPS without any additional configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The host name of your container group, such as mycontainerhost. Do not include underscores (_) in the host name. The host and the domain combined form the full public route URL, such as http://mycontainerhost.mybluemix.net. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainersQuotaInfo
	{
		
		/// <summary>
		/// The Bluemix account type indicating the quota limits and how the organization is billed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_type")]
		public string Account_type { get; set; }
		
		/// <summary>
		/// The country in which the account was opened.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_quota")]
		public ContainersQuotaInfoOrg_quota Org_quota { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="space_quota")]
		public ContainersQuotaInfoSpace_quota Space_quota { get; set; }
	}
	
	public class ContainersQuotaInfoOrg_quota
	{
		
		/// <summary>
		/// The number of public IP addresses that can be assigned across all spaces of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floating_ips_max")]
		public string Floating_ips_max { get; set; }
		
		/// <summary>
		/// The number of public IP addresses that are required for one space. If the number of public IP addresses is not available, then a new space cannot be created to be used with IBM Containers. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floating_ips_space_default")]
		public string Floating_ips_space_default { get; set; }
		
		/// <summary>
		/// The number of public IP addresses that are currently assigned to the spaces of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floating_ips_usage")]
		public System.Nullable<System.Int32> Floating_ips_usage { get; set; }
		
		/// <summary>
		/// The maximum amount of container memory on the compute host that can be assigned across the spaces of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ram_max")]
		public System.Nullable<System.Int32> Ram_max { get; set; }
		
		/// <summary>
		/// The amount of container memory that is required to be used for one space. If this amount is not available, then a new space cannot be created to be used with IBM Containers. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ram_space_default")]
		public System.Nullable<System.Int32> Ram_space_default { get; set; }
		
		/// <summary>
		/// The amount of container memory that is currently used across all spaces of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ram_usage")]
		public System.Nullable<System.Int32> Ram_usage { get; set; }
		
		/// <summary>
		/// The number of subnets that were created across all spaces of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet_usage")]
		public System.Nullable<System.Int32> Subnet_usage { get; set; }
		
		/// <summary>
		/// The number of subnets that is required to create a new space. If this number is not available, then a new space cannot be created to be used with IBM Containers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnets_default")]
		public System.Nullable<System.Int32> Subnets_default { get; set; }
		
		/// <summary>
		/// The maximum number of container private subnet that can be created across all spaces of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnets_max")]
		public System.Nullable<System.Int32> Subnets_max { get; set; }
	}
	
	public class ContainersQuotaInfoSpace_quota
	{
		
		/// <summary>
		/// The maximum number of public IP addresses that can be allocated to a space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floating_ips_max")]
		public string Floating_ips_max { get; set; }
		
		/// <summary>
		/// The maximum amount of container memory that can be shared across all containers that are created in a space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ram_max")]
		public System.Nullable<System.Int32> Ram_max { get; set; }
		
		/// <summary>
		/// The maximum number of private subnets that can be created in one space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnets_max")]
		public System.Nullable<System.Int32> Subnets_max { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainersQuotaList
	{
		
		/// <summary>
		/// The new number of public IP addresses that you want to assign to your space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floating_ips")]
		public System.Nullable<System.Int32> Floating_ips { get; set; }
		
		/// <summary>
		/// The amount of container memory that you want to assign to your space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ram")]
		public System.Nullable<System.Int32> Ram { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainersUsageInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContainersUsageInfoAvailableSizes[] AvailableSizes { get; set; }
		
		/// <summary>
		/// The IBM Containers machine where the space is located
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainersUsageInfoLimits Limits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainersUsageInfoUsage Usage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainersUsageInfoAvailableSizes
	{
		
		/// <summary>
		/// The amount of disk space on the compute host that is assigned to the container in gigabyte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disk")]
		public System.Nullable<System.Int32> Disk { get; set; }
		
		/// <summary>
		/// The ID of the container size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The amount of container memory on the compute host that is assigned to the container in megabyte.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memory_MB")]
		public System.Nullable<System.Int32> Memory_MB { get; set; }
		
		/// <summary>
		/// The IBM Containers name of the container size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of virtual CPUs that can be assigned to the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcpus")]
		public System.Nullable<System.Int32> Vcpus { get; set; }
	}
	
	public class ContainersUsageInfoLimits
	{
		
		/// <summary>
		/// The number of containers that can be created in the space. If -1 is returned, then an unlimited number of containers can be created. The number however is counted towards and limited by the container memory. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public System.Nullable<System.Int32> Containers { get; set; }
		
		/// <summary>
		/// The number of public IP addresses that can be allocated to the space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floating_ips")]
		public System.Nullable<System.Int32> Floating_ips { get; set; }
		
		/// <summary>
		/// The amount of container memory that can be used in the space in megabyte.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memory_MB")]
		public System.Nullable<System.Int32> Memory_MB { get; set; }
		
		/// <summary>
		/// The number of virtual CPUs that are assigned to the space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcpu")]
		public System.Nullable<System.Int32> Vcpu { get; set; }
	}
	
	public class ContainersUsageInfoUsage
	{
		
		/// <summary>
		/// The number of containers that were created in the space. All containers that count towards the quota limit are listed independent on their current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public System.Nullable<System.Int32> Containers { get; set; }
		
		/// <summary>
		/// The number of public IP addresses that are allocated to the space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floating_ips")]
		public System.Nullable<System.Int32> Floating_ips { get; set; }
		
		/// <summary>
		/// The number of public IP addresses that are bound to a container in the space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floating_ips_bound")]
		public System.Nullable<System.Int32> Floating_ips_bound { get; set; }
		
		/// <summary>
		/// The number of private images that were added to the private Bluemix registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public System.Nullable<System.Int32> Images { get; set; }
		
		/// <summary>
		/// The amount of container memory that is already used by the containers that were created in the space in megabyte.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memory_MB")]
		public System.Nullable<System.Int32> Memory_MB { get; set; }
		
		/// <summary>
		/// The number of containers that are currently in a running state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="running")]
		public System.Nullable<System.Int32> Running { get; set; }
		
		/// <summary>
		/// The number of virtual CPUs that are allocated to the space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcpu")]
		public System.Nullable<System.Int32> Vcpu { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainersVersionGetInfo
	{
		
		/// <summary>
		/// The current API version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// The current Arch version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainersVersionGetInfoBuildDetail BuildDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BuildID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BuildNumber { get; set; }
		
		/// <summary>
		/// Timestamp when the API version and all attached microservices were built.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BuildTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GitCommit { get; set; }
		
		/// <summary>
		/// The latest Go version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GoVersion { get; set; }
		
		/// <summary>
		/// The latest Kernel version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KernelVersion { get; set; }
		
		/// <summary>
		/// Bluemix Containers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Os { get; set; }
		
		/// <summary>
		/// The latest API version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	public class ContainersVersionGetInfoBuildDetail
	{
		
		/// <summary>
		/// The build ID of the current API version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		/// <summary>
		/// The build ID of the current automount microservice version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automount")]
		public string Automount { get; set; }
		
		/// <summary>
		/// The build ID of the current grupdater microservice version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grupdater")]
		public string Grupdater { get; set; }
		
		/// <summary>
		/// The build ID of the current harmony microservice version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="harmony")]
		public string Harmony { get; set; }
		
		/// <summary>
		/// The build ID of the current health-monitor microservice version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="health-monitor")]
		public string Health_monitor { get; set; }
		
		/// <summary>
		/// The build ID of the current hijack microservice version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hijack")]
		public string Hijack { get; set; }
		
		/// <summary>
		/// The build ID of the current ldap microservice version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ldap")]
		public string Ldap { get; set; }
		
		/// <summary>
		/// The build ID of the current logmet microservice version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logmet")]
		public string Logmet { get; set; }
		
		/// <summary>
		/// The build ID of the current lumberjack microservice version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lumberjack")]
		public string Lumberjack { get; set; }
		
		/// <summary>
		/// The build ID of the current redis-cluster version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redis-cluster")]
		public string Redis_cluster { get; set; }
		
		/// <summary>
		/// The build ID of the current sgwatcher microservice version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sgwatcher")]
		public string Sgwatcher { get; set; }
		
		/// <summary>
		/// The build ID of the current volumes manager microservice version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volmgr")]
		public string Volmgr { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContainer
	{
		
		/// <summary>
		/// The name of the Cloud Foundry app that you want to bind to your container. The Cloud Foundry app must be created in the same space where you want to create your container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BluemixApp { get; set; }
		
		/// <summary>
		/// The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>["ping","localhost"]<br>["tail","-f","/dev/null"]<br>["sh","-c","while true; do date; sleep 20; done"]
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Cmd { get; set; }
		
		/// <summary>
		/// Pins the container processes to a specific CPU core on the compute host. For example: 0 means that processes are executed on the first core only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Cpuset { get; set; }
		
		/// <summary>
		/// A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Env { get; set; }
		
		/// <summary>
		/// All public ports that need to be exposed for the container, so the container can be accessed from the Internet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] ExposedPorts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HostConfig HostConfig { get; set; }
		
		/// <summary>
		/// Full path to the image in your private Bluemix registry in the format `registry.ng.bluemix.net/namespace/image`. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		/// <summary>
		/// The container memory that is set for the container in Megabyte. Choose one of the following sizes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Memory { get; set; }
		
		/// <summary>
		/// Number of virtual CPUs that are allocated to the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberCpus { get; set; }
		
		/// <summary>
		/// Mount a volume to a container by specifying the details in the following format: `VOLUME_NAME:/DIRECTORY_PATH[:ro]`. Example: testvolume:/volumedata/temp:rw. By default, all volumes will be set up with read-write access inside the container (rw). If you wish to set up your volume with read-only access, enter `ro`.  Note: To mount a volume to a container, you must create the volume in your space first by using the `cf ic volume-create` command, or calling the `POST /volumes/create endpoint`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Volumes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fileshare
	{
		
		/// <summary>
		/// The size of the file share in gigabyte.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// The timestamp when the file share was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public string Created_date { get; set; }
		
		/// <summary>
		/// The name of the file share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fsName")]
		public string FsName { get; set; }
		
		/// <summary>
		/// The path to the volume on the host node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostPath")]
		public string HostPath { get; set; }
		
		/// <summary>
		/// The number of Input/Output operations per second. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iops")]
		public System.Nullable<System.Double> Iops { get; set; }
		
		/// <summary>
		/// The total number of IOPS considering the size of the file share. The size of your file share in gigabyte multiplied with the number of IOPS indicates the total number of IOPS. The higher the number of IOPS the faster you can read from and write to your volumes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iopsTotal")]
		public System.Nullable<System.Int32> IopsTotal { get; set; }
		
		/// <summary>
		/// The ID received from softlayer when the file share was ordered to be set up in softlayer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The provider of the file share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The unique ID representing a Bluemix space in which the file share was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceGuid")]
		public string SpaceGuid { get; set; }
		
		/// <summary>
		/// The current state of the file share. When the file share is ready to be used, this attribute is set to `READY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The timestamp when the file share last was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_date")]
		public string Updated_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileshareParam
	{
		
		/// <summary>
		/// The number of input/output transactions per second. Available values are 0.25, 2 or 4.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fsIOPS")]
		public double FsIOPS { get; set; }
		
		/// <summary>
		/// The name of the new file share that you want to create. The name can contain uppercase letters, lowercase letters, numbers, underscores (_), and hyphens (-).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fsName")]
		public string FsName { get; set; }
		
		/// <summary>
		/// The size of the file share in gigabyte. Run `cf ic volume fs-flavor-list` or call the GET /volumes/fs/flavors/json API endpoint to retrieve a list of available file share sizes. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fsSize")]
		public int FsSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileshareUsage
	{
		
		/// <summary>
		/// The amount of space that is available in the file share in gigabytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_space")]
		public string Available_space { get; set; }
		
		/// <summary>
		/// The total size of the file share in gigabytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_space")]
		public string Total_space { get; set; }
		
		/// <summary>
		/// The amount of space that is currently used from the file share. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="used_space")]
		public string Used_space { get; set; }
		
		/// <summary>
		/// The amount of space that is currently used from the file share in percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="used_space_percentage")]
		public string Used_space_percentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FloatingIP
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Binding Bindings { get; set; }
		
		/// <summary>
		/// The public IP address that is allocated to the organization space.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetFileshareDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="fs")]
		public Fileshare[] Fs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fsUsage")]
		public FileshareUsage[] FsUsage { get; set; }
		
		/// <summary>
		/// A list of volume names that are mounted to the file share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volnames")]
		public string[] Volnames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		/// <summary>
		/// Unique identifier representing a group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageDetail
	{
		
		/// <summary>
		/// The hardware architecture for which the image was built for. The architecture can either be Intel (amd64) or Power (ppc64le). 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImageDetailConfig Config { get; set; }
		
		/// <summary>
		/// ???
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Container { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainerConfig ContainerConfig { get; set; }
		
		/// <summary>
		/// The time when the image was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// ???
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DockerVersion { get; set; }
		
		/// <summary>
		/// Unique ID of the image that you inspected. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// ???
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Os { get; set; }
		
		/// <summary>
		/// The ID of the parent image that was used to build this image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parent { get; set; }
		
		/// <summary>
		/// The real size of the image. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// The version of the image 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tag { get; set; }
		
		/// <summary>
		/// ???
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Throwaway { get; set; }
		
		/// <summary>
		/// The virtual size of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VirtualSize { get; set; }
	}
	
	public class ImageDetailConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ArgsEscaped { get; set; }
		
		/// <summary>
		/// Attaches the container to stderr.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AttachStderr { get; set; }
		
		/// <summary>
		/// Attaches the container to stdin.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AttachStdin { get; set; }
		
		/// <summary>
		/// Attaches the container to stdout.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AttachStdout { get; set; }
		
		/// <summary>
		/// The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>["ping","localhost"]<br>["tail","-f","/dev/null"]<br>["sh","-c","while true; do date; sleep 20; done"]
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Cmd { get; set; }
		
		/// <summary>
		/// The domain name to be used for the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Domainmame { get; set; }
		
		/// <summary>
		/// The entrypoint specifies a command that will always be executed when the container starts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Entrypoint { get; set; }
		
		/// <summary>
		/// A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Env { get; set; }
		
		/// <summary>
		/// A list of all udp and tcp ports that have been publicly exposed during the container creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] ExposedPorts { get; set; }
		
		/// <summary>
		/// The host name of the container provided by Openstack. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Hostname { get; set; }
		
		/// <summary>
		/// The unique ID of the image. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		/// <summary>
		/// List of custom metadata that was added to the image. Labels serve a wide range of uses, such as adding notes or license requirements to an image. Every label is a key/ value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// ???
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] OnBuild { get; set; }
		
		/// <summary>
		/// When set to true, it opens stdin.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OpenStdin { get; set; }
		
		/// <summary>
		/// When set to true it closes stdin after the attached client disconnects.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StdinOnce { get; set; }
		
		/// <summary>
		/// When set to true, attach standard streams to a tty, including stdin if it is not closed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Tty { get; set; }
		
		/// <summary>
		/// The user to be used inside the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string User { get; set; }
		
		/// <summary>
		/// Docker specific. Not supported by IBM Containers. The path to the volume that is created when deploying a container from the image. To use a volume in IBM Containers, you must first create a volume and then mount it to your container during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Volumes { get; set; }
		
		/// <summary>
		/// The working directory inside the container where specified commands are executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkingDir { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageInfo
	{
		
		/// <summary>
		/// The time when your container image was created. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Created { get; set; }
		
		/// <summary>
		/// The unique identifier representing a container image. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of your container image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		/// <summary>
		/// The full path to the private Bluemix registry where the image is stored including the registry name, the organization namespace, and image tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] RepoTags { get; set; }
		
		/// <summary>
		/// The real size of the container image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// The virtual size of the container image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VirtualSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Namespace
	{
		
		/// <summary>
		/// The namespace that is either set for an organization, or a namespace that is not available to be used in Bluemix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Network
	{
		
		/// <summary>
		/// Alternative name of the private container network the container is connected to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Aliases { get; set; }
		
		/// <summary>
		/// Unique ID representing a container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EndpointID { get; set; }
		
		/// <summary>
		/// The private IP address of the network gateway in IPv4 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Gateway { get; set; }
		
		/// <summary>
		/// Private IP address of the container in IPv6 format. IBM Containers only supports IPv4 format. This attribute is returned as empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GlobalIPv6Address { get; set; }
		
		/// <summary>
		/// Not supported by IBM Containers, empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalIPv6PrefixLen { get; set; }
		
		/// <summary>
		/// Specific configurations for the network driver.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IPAMConfig { get; set; }
		
		/// <summary>
		/// The prefix of the subnet in the private container network. The prefix indicates that 16 bits out of 32 bits are used to address the network. As every IPv4 IP adress consists of 32 bits, the last 16 bits are used to assign private IP addresses to the container. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IPPrefixLen { get; set; }
		
		/// <summary>
		/// The private IP address of the network gateway in IPv6 format. IBM Containers only supports IPv4 format. This attribute is returned as empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IPv6Gateway { get; set; }
		
		/// <summary>
		/// List of container names that are linked to the container. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Links { get; set; }
		
		/// <summary>
		/// The MAC address that is assigned to the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		/// <summary>
		/// Unique identifier representing the private container network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NetworkID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkSetting
	{
		
		/// <summary>
		/// The name of the private network bridge.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Bridge { get; set; }
		
		/// <summary>
		/// The IP address of the private network gateway in IPv4 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Gateway { get; set; }
		
		/// <summary>
		/// The private IP address that is assigned to the container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> IpPrefixLen { get; set; }
		
		/// <summary>
		/// The MAC address that was assigned to the container. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Network Network { get; set; }
		
		/// <summary>
		/// Specific to Docker. List of private container ports and their mapping to the host ports. In IBM Containers all container ports are exposed on the host by default. This attribute is returned as an empty list. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PortMapping { get; set; }
		
		/// <summary>
		/// All ports of the container that were exposed to the public.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Ports { get; set; }
		
		/// <summary>
		/// The Public IP address that was bound to the container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PublicIpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Port
	{
		
		/// <summary>
		/// Public IP address that was bound to the container in IPv4 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IP { get; set; }
		
		/// <summary>
		/// The private port of the container on which the container listens during run time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrivatePort { get; set; }
		
		/// <summary>
		/// The public port that was exposed during container creation. When a public port is exposed, a public IP address can be bound to the container which makes the container accessible from the internet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PublicPort { get; set; }
		
		/// <summary>
		/// The type of IP protocol that is used for the port. It can either be `udp` or `tcp`.  
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The public route that is mapped to the container group. You can use this route to access your container group from the Internet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Route
	{
		
		/// <summary>
		/// The default system domain is mybluemix.net and already provides a SSL certificate, so you can access your container groups with HTTPS without any additional configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The host name of your container group, such as mycontainerhost. Do not include underscores (_) in the host name. The host and the domain combined form the full public route URL, such as http://mycontainerhost.mybluemix.net.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVolume
	{
		
		/// <summary>
		/// The name or ID of the space where you want to provision your existing volume. Run `cf spaces` to retrieve the name, or `cf space <space_name> --guid` to retrieve the space ID. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addSpaces")]
		public string[] AddSpaces { get; set; }
		
		/// <summary>
		/// The name or ID of the space from which you want to unprovision your existing volume. Run `cf spaces` to retrieve the name, or `cf space <space_name> --guid` to retrieve the space ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeSpaces")]
		public string[] RemoveSpaces { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Volume
	{
		
		/// <summary>
		///  Unique identifier representing the file share on which the volume is hosted. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fsID")]
		public string FsID { get; set; }
		
		/// <summary>
		/// Full path to the mounted volume inside the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostPath")]
		public string HostPath { get; set; }
		
		/// <summary>
		/// List of space IDs in which the volume is visible and can be used by all the single containers and container groups. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherSpaceVisibility")]
		public string[] OtherSpaceVisibility { get; set; }
		
		/// <summary>
		/// Unique identifier representing the space where the volume got created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceGuid")]
		public string SpaceGuid { get; set; }
		
		/// <summary>
		/// The name of the volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volName")]
		public string VolName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerStatus
	{
		
		/// <summary>
		/// The unique identifier of the container. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NameOrId { get; set; }
		
		/// <summary>
		/// The current status of the container. The status can either be a transient one, such as BUILDING or NETWORKING, or a non-transient one, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// When set to true, the current container state is temporary and will change soon. An example for a transient state is the BUILDING state. A container that is created will be set to the BUILDING state until all container layers are created and the container is started. When set to false, the container state is permanent, such as CRASHED.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Transient { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create and start a single container
		/// This endpoint creates and starts a single container in your space based on the Docker image that is specified in the Image field of the request json. A single container in IBM Containers is similar to a container that you create in your local Docker environment. Single containers are a good way to start with IBM Containers and to learn about how containers work in the IBM Cloud and the features that IBM Containers provides. They are also recommended when you want to run simple app tests or during the development process of an app.
		/// 
		/// In the Docker API there are two separate APIs to create and start a container. However in IBM Containers a container is created and started in a single API call. Therefore, this API merges parameters from the Docker API to create and start container.
		/// 
		/// To create a container with IBM Containers, you must at least define the image that the container is based on.
		/// 
		/// - Image: You must include the full path to the image in your private Bluemix registry in the format: `registry.ng.bluemix.net/<namespace>/<image>`.
		/// ContainersCreatePostByName containers/create
		/// </summary>
		/// <param name="name">Choose a name for your container. The characters in the name can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-), but the name must start with a letter.</param>
		/// <param name="requestBody">Summary of input parameter to create a container in IBM Containers.</param>
		public async Task ContainersCreatePostByNameAsync(string name, CreateContainer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/create?name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List available public IP addresses in a space
		/// This endpoint returns a list of all public IP addresses that are allocated to a space and not bound to a container. If you want to list all public IP addresses that are allocated to a space, even those that are already bound to a container, use the `all` query parameter (corrsponding IBM Containers command: `cf ic ip list`).
		/// ContainersFloating_ipsGetByAll containers/floating-ips
		/// </summary>
		/// <param name="all">If this option is set to `all=1`, `all=True`, or `all=true`, all public IP addresses that are allocated to a space are returned. If this option is set to `all=0`, `all=False`, or `all=false`, only available public IP addresses that are allocated but not bound to a container are returned. By default, only available public IP addresses are returned.</param>
		/// <returns>OK. A list of public IP addresses that are allocated to the space is returned.</returns>
		public async Task<FloatingIP[]> ContainersFloating_ipsGetByAllAsync(bool all, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/floating-ips?all="+all;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FloatingIP[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request a public IP address for a space
		/// This endpoint requests a new public IP address for a space (corresponding IBM Containers command: `cf ic ip request`). The number of public IP addresses depends on the quota that is assigned to the space. If there is not enough quota left to request a new public IP address, you can either contact your organization manager to increase the quota, or unbind an existing IP address from a container by running `cf ic ip unbind <ip_adress> <container>` command, or  calling the `POST /container/{name_or_id}/floating-ips/{ip}/unbind` endpoint.
		/// ContainersFloating_ipsRequestPost containers/floating-ips/request
		/// </summary>
		/// <returns>OK. A new public IP address is allocated to your space.</returns>
		public async Task<string> ContainersFloating_ipsRequestPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/floating-ips/request";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Release public IP address
		/// This endpoint releases a public IP address from a space (corresponding IBM Containers command: `cf ic ip release <ip_adress>`). The public IP address is no longer allocated to the space. If a container was bound to the IP address, it is automatically unbound.
		/// ContainersFloating_ips_ipReleasePost containers/floating-ips/{ip}/release
		/// </summary>
		/// <param name="ip">The public IP address that you want to release. Run `cf ic ip list` or call the `GET /containers/floating-ips?all=true` endpoint to review all public IP address that are allocated to your space. After a public IP address is released, it will no longer be allocated to your space.</param>
		public async Task ContainersFloating_ips_ipReleasePostAsync(string ip, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/floating-ips/"+ (ip==null? "" : System.Uri.EscapeDataString(ip))+"/release";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all container groups in a space
		/// This endpoint returns a list of all container groups in a space independent of their current state. (corresponding IBM Containers command: `cf ic group list`).
		/// ContainersGroupsGet containers/groups
		/// </summary>
		/// <returns>OK. A list of container groups is returned.</returns>
		public async Task<ContainersGroupsGetListItem[]> ContainersGroupsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContainersGroupsGetListItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create and start a container group.
		/// This endpoint creates and starts a new container group in your space. A container group consists of two or more single containers that are all created from the same container image and as a consequence are configured in the same way. Container groups offer different options at no cost to make your app highly available, such as in-built load balancing, auto-recovery of unhealthy container instances, and auto-scaling of container instances based on CPU and memory usage.
		/// 
		/// To create a container group with IBM Containers, you must at least define a container group name and the image that the container group is based on. Required attributes:
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// - Name: The container group name must start with a letter and then can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-).
		/// - Image: You must include the full path to the image in your private Bluemix registry in the format:`registry.ng.bluemix.net/<namespace>/<image>`.
		/// ContainersGroupsPost containers/groups
		/// </summary>
		/// <param name="requestBody">Attributes that are required to create a container group in your space.</param>
		public async Task ContainersGroupsPostAsync(ContainersGroupsPostRequiredAttributes requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stop and delete all container instances in a container group.
		/// Stops and deletes the container instances that run in a container group (corresponding IBM Containers command: `cf ic group rm <group_name>`). When you delete a container group, all floating private IP addresses are released.
		/// ContainersGroups_name_or_idDeleteByForce containers/groups/{name_or_id}
		/// </summary>
		/// <param name="name_or_id">The name or unique ID of the container group that you want to delete. Run `cf ic group list` or call the `GET /containers/groups` endpoint to retrieve a list of container groups in your space.</param>
		/// <param name="force">If you want to force the deletion of a container group that has running container instances, use the force option. This parameter needs to be set to either true or false. If set to `force=true`, `force=True`, or `force=1`, running container instances are deleted. If set to `force=false`, `force=False`, or `force=0`, running container instances are not deleted. If you do not specify this paramater, running container instances are not deleted by default. </param>
		public async Task ContainersGroups_name_or_idDeleteByForceAsync(string name_or_id, string force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/groups/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"&force=" + (force==null? "" : System.Uri.EscapeDataString(force));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inspect a container group.
		/// This endpoint retrieves detailed information about a container group with a given name (corresponding IBM Containers command: `cf ic group inspect GROUP`).
		/// ContainersGroups_name_or_idGet containers/groups/{name_or_id}
		/// </summary>
		/// <param name="name_or_id">The name or unique ID of the container group that you want to inspect. Run `cf ic group list` or call the `GET /containers/groups` endpoint to retrieve a list of container groups in your space.</param>
		/// <returns>OK. A detailed list of information about a container group is retrieved.</returns>
		public async Task<ContainersGroupsNameOrIdGetDetails> ContainersGroups_name_or_idGetAsync(string name_or_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/groups/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContainersGroupsNameOrIdGetDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a container group.
		/// Update the number of container instances that run in a container group (corresponding IBM Containers command: `cf ic group update <option> <group>`).
		/// 
		/// Note: You can run only one update at a time.
		/// 
		/// The desired number is the number of container instances that you require. It must be within the current limits of Max and Min. To increase the number of desired container instances above the Max value, you must first execute an update on the Max value. Once this update is completed, you can increase the desired number of container instances.
		/// ContainersGroups_name_or_idPatch containers/groups/{name_or_id}
		/// </summary>
		/// <param name="name_or_id">The name or unique ID of the container group that you want to update.</param>
		/// <param name="requestBody">The container group parameter that you want to update.</param>
		public async Task ContainersGroups_name_or_idPatchAsync(string name_or_id, ContainersGroupsNameOrIdPatchUpdatedInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/groups/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Map a public route to a container group.
		/// If you want your container group to be accessible from the Internet, you need to expose a public port and map a public route to it (corresponding IBM Containers command: `cf ic route map -n <host> -d <domain> <group>`). Every route consists of the host name and domain.
		/// ContainersGroups_name_or_idMaproutePost containers/groups/{name_or_id}/maproute
		/// </summary>
		/// <param name="name_or_id">The name or unique ID of the container group to which you want to map a public route. Run `cf ic group list` or call the `GET /containers/groups` endpoint to retrieve a list of container groups in your space.</param>
		/// <param name="requestBody">The public route that is mapped to the container group. A public route consists of the host name and domain.</param>
		public async Task ContainersGroups_name_or_idMaproutePostAsync(string name_or_id, Route requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/groups/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/maproute";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unmap a public route from a container group
		/// This endpoint unmaps a public route from a container group (corresponding IBM Containers command: `cf ic route unmap -n <host> -d <domain> <group>`). If no other public route is mapped to the container group, then the container group is no longer available from the internet.
		/// 
		/// When you unmap a route from a container group, the route is not deleted and can be mapped to other container groups.
		/// ContainersGroups_name_or_idUnmaproutePost containers/groups/{name_or_id}/unmaproute
		/// </summary>
		/// <param name="name_or_id">The name or unique ID (UUID) of the container group that you want to inspect.</param>
		/// <param name="requestBody">The public route that is unmapped from the container group. A public route consists of the host name and domain.</param>
		public async Task ContainersGroups_name_or_idUnmaproutePostAsync(string name_or_id, Route requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/groups/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/unmaproute";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List single containers in a space.
		/// This endpoint returns a list of all single containers in a space that are currently in a running state (corresponding IBM Containers command: `cf ic ps`). To list all single containers independent of their current state, set the `all` query parameter to true.
		/// ContainersJsonGetByAllAndFilters containers/json
		/// </summary>
		/// <param name="all">By default, the `GET /containers/json` endpoint returns a list of all single containers in a space that are in a running state. To request a list of all containers independent of their current state, set the `all` query parameter to true. Allowed values are: `all=true`, `all=True`, and `all=1`. </param>
		/// <param name="filters">You can filter your containers by any environment variable key or value that is listed in the `Env` section of your CLI/ API response when you run the `cf ic inspect <container>` command, or call the `GET /containers/{id}/json` endpoint. Your search criteria does not need to be an exact match. It can also be a part of the key or value you are looking for. For example, to filter all containers with an environment variable that contains `id` in one of their environment variables, use `filter=id`.</param>
		/// <returns>OK. A list of single containers that match the search criteria is returned.</returns>
		public async Task<Container[]> ContainersJsonGetByAllAndFiltersAsync(string all, string filters, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/json?all=" + (all==null? "" : System.Uri.EscapeDataString(all))+"&filters=" + (filters==null? "" : System.Uri.EscapeDataString(filters));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Container[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List messages for the user
		/// This endpoint retrieves all IBM Containers system messages for the user.
		/// ContainersMessagesGet containers/messages
		/// </summary>
		/// <returns>OK. A list of messages is returned.</returns>
		public async Task<ContainersMessagesGetReturn> ContainersMessagesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/messages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContainersMessagesGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve organization and space specific quota
		/// Retrieve the quota that is assigned to the organization and space.
		/// ContainersQuotaGet containers/quota
		/// </summary>
		/// <returns>OK. The current quota that is assigned to the organization and space is returned. </returns>
		public async Task<ContainersQuotaInfo> ContainersQuotaGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/quota";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContainersQuotaInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update space quota
		/// This endpoint updates the quota that is allocated to a Bluemix space.
		/// 
		/// **Note**: Only paid accounts are eligbile to update the space quota. If you are using a free-trial account, upgrade to a paid account first.
		/// ContainersQuotaPut containers/quota
		/// </summary>
		/// <param name="requestBody">The space quota details that you want to update.</param>
		public async Task ContainersQuotaPutAsync(ContainersQuotaList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/quota";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List container sizes and quota limits
		/// This endpoint returns a list of available container sizes and the quota limit and usage for the space.
		/// 
		/// - Container sizes: A list of available container sizes indicating the amount of container memory, disk space and virtual CPUs that can be assigned to the container.
		/// - Quota limit: Lists the number of containers, public IP addresses, available container memory, and virtual CPUS that are allocated to a space.
		/// - Quota usage: Lists the current number of containers, images, and public IP addresses in a space that is counted towards your quota limit.
		/// ContainersUsageGet containers/usage
		/// </summary>
		/// <returns>OK. A list of available container sizes as well as the quota limit and usage for a space is returned. </returns>
		public async Task<ContainersUsageInfo> ContainersUsageGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/usage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContainersUsageInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List latest API version
		/// This endpoint retrieves a list of all microservices that are used in the IBM Containers service with their current build version. This method does not require authentication.
		/// ContainersVersionGet containers/version
		/// </summary>
		/// <returns>OK. A list of the current API and microservices versions is returend.</returns>
		public async Task<ContainersVersionGetInfo> ContainersVersionGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/version";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContainersVersionGetInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the current state of a container.
		/// This endpoint returns the current state of a container. This state can either be a transient state, such as BUILDING and NETWORKING, or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
		/// Containers_idStatusGet containers/{id}/status
		/// </summary>
		/// <param name="id">The unique identifier that represents the container. Run `cf ic ps`, or call the `GET /containers/json` endpoint to retrieve the ID of the container.</param>
		public async Task Containers_idStatusGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a single container
		/// Remove a single container that is identified by container ID or name from a space (corresponding IBM Containers command: `cf ic delete <container>`). The container must be stopped before it can be deleted, unless the `force` query parameter is set to true.
		/// Containers_name_or_idDeleteByForce containers/{name_or_id}
		/// </summary>
		/// <param name="name_or_id">The unique identifier or name of the container that you want to delete. Run `cf ic ps -a` or call the `GET /containers/json?all=true` endpoint to review all containers in your space.</param>
		/// <param name="force">Use the `force` query parameter if you want to delete the container independent of their current state. The container does not need to be stopped first. To force the deletion of a container, enter `force=true`, `force=True`, or `force=1`. If you want to delete containers that are in a non-running state only, do either not set this query parameter, or enter `force=false`, `force=False`, or `force=0`.</param>
		public async Task Containers_name_or_idDeleteByForceAsync(string name_or_id, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"&force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Bind a public IP address to a single container
		/// This endpoint binds an available public IP address to a single container (corresponding IBM Containers command: `cf ic ip bind <ip_adress> <container>`). After a container is bound to a public IP address, it can be accessed at `https://<public_ip_adress>:<public_port>`.
		/// Containers_name_or_idFloating_ips_ipBindPost containers/{name_or_id}/floating-ips/{ip}/bind
		/// </summary>
		/// <param name="name_or_id">The name or ID of the container that you want to bind to the public IP address. Run the `cf ic ps` command or call the `GET /containers/json` endpoint to retrieve a list of containers in your space.</param>
		/// <param name="ip">The public IP address that you want to bind to your container. 
		///
		///Note: The public IP address must be available in the space and not bound to a container. Run `cf ic ip list` or call the `GET /containers/floating-ips` endpoint.</param>
		public async Task Containers_name_or_idFloating_ips_ipBindPostAsync(string name_or_id, string ip, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/floating-ips/"+ (ip==null? "" : System.Uri.EscapeDataString(ip))+"/bind";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unbind a public IP address from a container
		/// This endpoint unbinds a public IP address from a container (corresponding IBM Containers command: `cf ic ip unbind <ip_adress> <container>`). The container that is unbound from the IP address will not be accessible from the internet anymore. The public IP address will be further allocated to the space and can be used to be bound to other containers.
		/// Containers_name_or_idFloating_ips_ipUnbindPost containers/{name_or_id}/floating-ips/{ip}/unbind
		/// </summary>
		/// <param name="name_or_id">The name or ID of the container that you want to bind to the public IP address. Run the `cf ic ps` command or call the `GET /containers/json` endpoint to retrieve a list of containers in your space. </param>
		/// <param name="ip">The public IP address that you want to unbind from your container. 
		///
		/// Note: After unbinding a public IP address, this IP address will still be allocated to the space and can be used to be bound to other containers.</param>
		public async Task Containers_name_or_idFloating_ips_ipUnbindPostAsync(string name_or_id, string ip, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/floating-ips/"+ (ip==null? "" : System.Uri.EscapeDataString(ip))+"/unbind";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inspect a single container
		/// This endpoint retrieves detailed information about a single container (corresponding IBM Containers command: `cf ic inspect <container>`).
		/// Containers_name_or_idJsonGet containers/{name_or_id}/json
		/// </summary>
		/// <param name="name_or_id">The name or ID of the container that you want to inspect. Run the `cf ic ps` command or call the `GET /containers/json` endpoint to retrieve a list of containers in your space.</param>
		/// <returns>OK. A list with detailed information about the container is returned. </returns>
		public async Task<ContainerInfo> Containers_name_or_idJsonGetAsync(string name_or_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContainerInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pause a single container
		/// Pause all processes in a running single container with a given container ID or name (corresponding IBM Containers command: `cf ic pause <container>`).
		/// Containers_name_or_idPausePost containers/{name_or_id}/pause
		/// </summary>
		/// <param name="name_or_id">The unique identifier or name of the container that you want to pause. Run `cf ic ps` or call the `GET /containers/json` endpoint to review all containers in your space that are currently in a running state.</param>
		public async Task Containers_name_or_idPausePostAsync(string name_or_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/pause";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rename a single container
		/// Change the current name of an existing single container that is identified by the container ID or name (corresponding IBM Containers command: `cf ic rename <old_name> <new_name>`).
		/// Containers_name_or_idRenamePostByName containers/{name_or_id}/rename
		/// </summary>
		/// <param name="name_or_id">The unique identifier or name of the container that you want to rename. Run `cf ic ps -a` or call the `GET /containers/json?all=true` endpoint to review all containers in your space.</param>
		/// <param name="name">The new name for the container. The characters in the name can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-), but the name must start with a letter.</param>
		public async Task Containers_name_or_idRenamePostByNameAsync(string name_or_id, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/rename&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restart a single container
		/// Restart a container with a given container ID or name (corresponding IBM Containers command: `cf ic restart <container>`).
		/// Containers_name_or_idRestartPostByT containers/{name_or_id}/restart
		/// </summary>
		/// <param name="name_or_id">The unique identifier or name of the container that you want to restart. Run `cf ic ps` or call the `GET /containers/json` endpoint to review all containers in your space.</param>
		/// <param name="t">The number of seconds to wait before the container is restarted. For example, if you want a container to restart after 10 seconds, enter `t=10`.</param>
		public async Task Containers_name_or_idRestartPostByTAsync(string name_or_id, int t, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/restart&t="+t;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start a single container
		/// Start a single container with a given container name or ID (corresponding IBM Containers command: `cf ic start <container>`).
		/// Containers_name_or_idStartPost containers/{name_or_id}/start
		/// </summary>
		/// <param name="name_or_id">The unique identifier or name of the container that you want to start. Run `cf ic ps -a` or call the `GET /containers/json?all=true` endpoint to review the containers in your space that are currently not in a running state.</param>
		public async Task Containers_name_or_idStartPostAsync(string name_or_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop a single container
		/// Stop a single container with a given container name or ID (corresponding IBM Containers command: `cf ic stop <container>`).
		/// Containers_name_or_idStopPostByT containers/{name_or_id}/stop
		/// </summary>
		/// <param name="name_or_id">The unique identifier or name of the container that you want to stop. Run `cf ic ps` or call the `GET /containers/json` endpoint to review the containers in your space that are currently in a running state.</param>
		/// <param name="t">The number of seconds to wait before the container is stopped. For example, if you want a container to stop after 10 seconds, enter `t=10`.</param>
		public async Task Containers_name_or_idStopPostByTAsync(string name_or_id, int t, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/stop&t="+t;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unpause a single container
		/// Unpause all processes that are currently stopped inside a single containers with a given container ID or name (corresponding IBM Containers command: `cf ic unpause <container>`).
		/// Containers_name_or_idUnpausePost containers/{name_or_id}/unpause
		/// </summary>
		/// <param name="name_or_id">The unique identifier or name of the container that you want to unpause. Run `cf ic ps -a` or call the `GET /containers/json?all=true` endpoint to review all containers in your space.</param>
		public async Task Containers_name_or_idUnpausePostAsync(string name_or_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "containers/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/unpause";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Docker images that are available in your private Bluemix registry.
		/// This endpoint returns a list of all available Docker images in a private Bluemix registry (corresponding IBM Containers command: `cf ic images`.
		/// ImagesJsonGet images/json
		/// </summary>
		/// <returns>OK. A list of all available Docker images in the private Bluemix registry is returned.</returns>
		public async Task<ImageInfo> ImagesJsonGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "images/json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImageInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a Docker image.
		/// Remove a Docker image from the private Bluemix registry that is identified by the image ID (corresponding IBM Containers command: `cf ic rmi <image>`).
		/// Images_idDelete images/{id}
		/// </summary>
		/// <param name="id">The unique identifier representing a Docker image. Run `cf ic images`, or call the `GET /images/json` endpoint to review the Docker images that are available in your private Bluemix registry.</param>
		public async Task Images_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "images/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inspect a Docker image in private Bluemix registry
		/// This endpoint returns detailed information about a Docker image that is stored in the private Bluemix registry of an organization (corresponding IBM Containers command: `cf ic inspect <image_name_or_id>`).
		/// Images_name_or_idJsonGet images/{name_or_id}/json
		/// </summary>
		/// <param name="name_or_id">The full private Bluemix registry path to your image or the unique ID of the image that you want to inspect. Run `cf ic images` or call the `GET /images/json` endpoint to review the images in your private Bluemix registry. </param>
		/// <returns>OK. A list of details about the container image is returned.</returns>
		public async Task<ImageDetail> Images_name_or_idJsonGetAsync(string name_or_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "images/"+ (name_or_id==null? "" : System.Uri.EscapeDataString(name_or_id))+"/json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImageDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the namespace of an organization.
		/// This endpoint retrieves the namespace that was set for the organization that owns the current space (corresponding IBM Containers command: `cf ic namespace get`).
		/// RegistryNamespacesGet registry/namespaces
		/// </summary>
		/// <returns>OK. The namespace of the organization is returned.</returns>
		public async Task<Namespace> RegistryNamespacesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registry/namespaces";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Namespace>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check the availability of a namespace
		/// This endpoint checks whether a namespace is available in Bluemix and can be used to set up the private Docker images registry for an organization. When a HTTP code `201 Ok` is returned, the namespace is already assigned to another organization in Bluemix and cannot be used. When a HTTP code `404 Not found` is returned, the namespace can be used for your organization.
		/// 
		/// Consider the following rules when choosing a namespace for your organization:
		/// 
		/// - Every organization can have one namespace at a time only
		/// - The namespace must be unique in Bluemix.
		/// - The namespace can be 4-30 characters long.
		/// - The namespace must start with at least one letter or number.
		/// - The namespace can only contain lowercase letters, numbers or underscores (_).
		/// RegistryNamespaces_namespaceGet registry/namespaces/{namespace}
		/// </summary>
		/// <param name="_namespace">The name of the namespace that you would like to use for your organization and for which you would like to check availability in Bluemix.</param>
		/// <returns>OK. The namespace that you chose is already used in Bluemix. Choose another namespace and re-run the API call.</returns>
		public async Task<Namespace> RegistryNamespaces_namespaceGetAsync(string _namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registry/namespaces/"+ (_namespace==null? "" : System.Uri.EscapeDataString(_namespace));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Namespace>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set a namespace for your private Bluemix registry.
		/// Set up your own Docker images registry in Bluemix by defining a namespace for your organization (corresponding IBM Containers command: `cf ic namespace set <namespace>`). The namespace is used to generate a unique URL to your private Bluemix registry. In your private registry you store all Docker images that you want to share across your organization. To create a container from an image, you must first push the image to your registry.
		/// 
		/// The namespace cannot be changed after is has been set. Consider the following rules to choose a namespace for your organization:
		/// 
		/// - Every organization can have one namespace at a time only
		/// - The namespace must be unique in Bluemix.
		/// - The namespace can be 4-30 characters long.
		/// - The namespace must start with at least one letter or number.
		/// - The namespace can only contain lowercase letters, numbers or underscores (_).
		/// RegistryNamespaces_namespacePut registry/namespaces/{namespace}
		/// </summary>
		/// <param name="_namespace">The name for your namespace to create your private Docker images registry in Bluemix. You cannot change the name afterward. The namespace can be 4-30 characters long, must start with at least one letter or number, and can only contain lowercase letters, numbers or underscores (_). You can test the availability of your namespace by calling the `GET /registry/namespaces/<namespace>` endpoint. When a HTTP code `404 Not Found` is returned, the namespace is available in Bluemix. </param>
		public async Task RegistryNamespaces_namespacePutAsync(string _namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registry/namespaces/"+ (_namespace==null? "" : System.Uri.EscapeDataString(_namespace));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the TLS Certificate
		/// This endpoint returns the TLS (Transport Layer Security) certificate to the user (corresponding IBM Containers command: `cf ic login`). The TLS certificate is a SSL certificate that is used to authenticate the user's CLI with the IBM Containers service and to establish a secure communication between the user's local machine and the container in Bluemix.
		/// TlskeyGet tlskey
		/// </summary>
		/// <returns>Ok. A list of certificates is returned</returns>
		public async Task<Certificate> TlskeyGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tlskey";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Certificate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refresh the TLS Certificate
		/// This endpoint requests to generate a new TLS (Transport Layer Security) certificate on the server and to update the existing user TLS certificate (corresponding IBM Containers command: `cf ic init`).
		/// TlskeyRefreshPut tlskey/refresh
		/// </summary>
		public async Task TlskeyRefreshPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tlskey/refresh";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a volume in a space
		/// This endpoints creates a new volume in your space (corresponding IBM Containers command: `cf ic volume create VOLNAME`). A volume is used to persist and access app data between container restarts. Volumes are hosted on file shares that define the available actual storage in Bluemix and the number of input and output transactions per second (IOPS).
		/// 
		/// After you have created a volume, you must mount it to a container by using the `--volume` option in the `cf ic run` (single containers) or `cf ic group create` (container groups) command. You can also define the volume as part of the HTTP body and send a request to the `POST /containers/create` (single containers) or `POST /containers/groups` (container groups) endpoints.
		/// 
		/// Note: If you mount multiple containers in a space to the same volume, they share the data in the volume and can access them anytime. When a container is deleted, the associated volume is not removed.
		/// VolumesCreatePostByNameAndFsName volumes/create
		/// </summary>
		/// <param name="name">The name of the volume. The name must be unique for a space and can contain uppercase letters, lowercase letters, numbers, underscores (_), and hyphens (-).</param>
		/// <param name="fsName">The name of the file share that the volume is hosted on. File shares can have different storage sizes and IOPS based on the required workload. If this field is left blank, the volume is hosted on the default file share.</param>
		public async Task VolumesCreatePostByNameAndFsNameAsync(string name, string fsName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volumes/create?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&fsName=" + (fsName==null? "" : System.Uri.EscapeDataString(fsName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a file share in a space
		/// This endpoint creates a new file share in a space (corresponding IBM Containers command: `cf ic volume fs-create FSNAME FSSIZE FSIOPS`).
		/// 
		/// A file share is a persistent NFS-based (Network File System) storage system that hosts Docker volumes in a Bluemix space and allows a user to store and access container and app-related files. To store files in a file share, you must create a container volume and save the data into this volume.
		/// 
		/// As soon as you create your first volume in a space with the `cf ic volume create VOLNAME` command or the `POST /volumes/create` API endpoint, a default file share with 20 GB at 4 IOPS (Input Output operations Per Second) is created at no cost.
		/// 
		/// The organization manager can create file shares with specific storage size and IOPS to meet the storage needs of the space. File shares can be provisioned in sizes from 20 GB to 12 TB and at IOPS per GB of 0.25, 2 or 4. Run `cf ic volume fs-flavor-list` or call the `GET /volumes/fs/flavors/json` API endpoint to retrieve a list of available file share sizes. The file share size in relation to the number of IOPS impacts the speed that data can be read and written from and to the container volume.
		/// VolumesFsCreatePost volumes/fs/create
		/// </summary>
		/// <param name="requestBody">The input parameter to create a new file share in a space.</param>
		public async Task VolumesFsCreatePostAsync(FileshareParam requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volumes/fs/create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List available file share sizes
		/// This endpoint returns a list of available file shares in gigabyte (corresponding IBM Containers command: `cf ic volume fs-flavor-list`).
		/// VolumesFsFlavorsJsonGet volumes/fs/flavors/json
		/// </summary>
		/// <returns>OK. A list of available file share sizes in gigabyte is returned.</returns>
		public async Task<int[]> VolumesFsFlavorsJsonGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volumes/fs/flavors/json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List available file shares in a space
		/// This endpoint returns a list of all file shares that are availble in a space (corresponding IBM Containers command: `cf ic volume fs-list`).
		/// VolumesFsJsonGet volumes/fs/json
		/// </summary>
		/// <returns>OK. A list of available file shares is returned.</returns>
		public async Task<Fileshare[]> VolumesFsJsonGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volumes/fs/json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Fileshare[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a file share
		/// This endpoint deletes a file share from a space (corresponding IBM Containers command: `cf ic volume fs-rm FSNAME`).
		/// 
		/// Before you can delete a file share, all mounted volumes must be deleted first. To delete a volume, run `cf ic volume rm VOLNAME` or call the `DELETE /volumes/{name}` API endpoint.
		/// 
		/// **Note:** To delete a file share you must have been granted organization developer rights.
		/// VolumesFs_nameDelete volumes/fs/{name}
		/// </summary>
		/// <param name="name">The name of the file share that you want to delete. Run `cf ic volume fs-list` or call the `GET /volumes/fs/json` API endpoint to retrieve a list of available file shares in your space.</param>
		public async Task VolumesFs_nameDeleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volumes/fs/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inspect a file share
		/// This endpoint returns detailed information about a file share (corresponding IBM Containers command: `cf ic volume fs-inspect FSNAME`).
		/// VolumesFs_nameJsonGet volumes/fs/{name}/json
		/// </summary>
		/// <param name="name">The name of the file share that you want to inspect. Run `cf ic volume fs-list` or call the `GET /volumes/fs/json` endpoint to retrieve a list of available file shares in your space.</param>
		/// <returns>OK. Detailed information about a file share is returned.</returns>
		public async Task<GetFileshareDetails[]> VolumesFs_nameJsonGetAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volumes/fs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetFileshareDetails[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all volumes for a space
		/// This endpoint returns a list of all volumes that are available in the given space (corresponding IBM Containers command: `cf ic volume list`).
		/// VolumesJsonGet volumes/json
		/// </summary>
		/// <returns>OK. A list containing all volumes of a given space is returned.</returns>
		public async Task<Volume[]> VolumesJsonGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volumes/json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Volume[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a volume
		/// Delete a volume with a given name from a space (corresponding IBM Containers command: `cf ic volume rm VOLNAME`). To delete a volume, all mounted containers must be unmounted first. After the volume is deleted, the data that are stored in the volume are lost.
		/// Volumes_nameDelete volumes/{name}
		/// </summary>
		/// <param name="name">The name of the volume that you want to delete. Run `cf ic volume list` or call the `GET /volumes/json` endpoint to retrieve a list of all volumes that are available in your space.</param>
		public async Task Volumes_nameDeleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volumes/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Share a volume with another space
		/// This endpoint provisions an existing volume that was created in one space to another space within the same organization. Single containers and container groups in each space can read and write to the shared volume. The volume remains owned by the original space it was created in, including management and billing. For example, the volume can be deleted from the original space only.
		/// Volumes_namePost volumes/{name}
		/// </summary>
		/// <param name="name">The name of the volume that you want to share with another space in your organization.</param>
		/// <param name="requestBody">Input parameter that are required to provision an existing volume to a new space and to unprovision it from a space.</param>
		/// <returns>Ok. A list with detailed information about the volume is returned. Review the changes in the `otherSpaceVisibility` property.</returns>
		public async Task<Volume> Volumes_namePostAsync(string name, UpdateVolume requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volumes/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Volume>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve detailed information about a volume.
		/// Retrieve a detailed list of information about a volume that is identified by the volume name (corresponding IBM Containers command: `cf ic volume inspect VOLNAME`).
		/// Volumes_nameJsonGet volumes/{name}/json
		/// </summary>
		/// <param name="name">The name of the volume, for which you want to retrieve detailed information. Run `cf ic volume list` or call the `GET /volumes/json` endpoint to retrieve a list of all volumes that are available in your space.</param>
		/// <returns>Ok. A list with detailed information about the volume is returned. </returns>
		public async Task<Volume> Volumes_nameJsonGetAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "volumes/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Volume>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ContainersMessagesGetReturn
	{
		
		/// <summary>
		/// Timestamp when the message was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public string Created_date { get; set; }
		
		/// <summary>
		/// Important information for the IBM Containers user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
