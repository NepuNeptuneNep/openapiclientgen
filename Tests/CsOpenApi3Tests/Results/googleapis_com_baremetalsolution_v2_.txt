//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents an 'access point' for the share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AllowedClient
	{
		
		/// <summary>
		/// Allow dev flag. Which controls whether to allow creation of devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowDev")]
		public System.Nullable<System.Boolean> AllowDev { get; set; }
		
		/// <summary>
		/// Allow the setuid flag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowSuid")]
		public System.Nullable<System.Boolean> AllowSuid { get; set; }
		
		/// <summary>
		/// The subnet of IP addresses permitted to access the share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedClientsCidr")]
		public string AllowedClientsCidr { get; set; }
		
		/// <summary>
		/// Mount permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPermissions")]
		public System.Nullable<AllowedClientMountPermissions> MountPermissions { get; set; }
		
		/// <summary>
		/// The network the access point sits on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like "10.0.0.0:/g123456789-nfs001"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfsPath")]
		public string NfsPath { get; set; }
		
		/// <summary>
		/// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noRootSquash")]
		public System.Nullable<System.Boolean> NoRootSquash { get; set; }
		
		/// <summary>
		/// Output only. The IP address of the share on this network. Assigned automatically during provisioning based on the network's services_cidr.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareIp")]
		public string ShareIp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AllowedClientMountPermissions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_PERMISSIONS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_WRITE = 2,
	}
	
	/// <summary>
	/// Message for detach specific LUN from an Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetachLunRequest
	{
		
		/// <summary>
		/// Required. Name of the Lun to detach.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lun")]
		public string Lun { get; set; }
		
		/// <summary>
		/// If true, performs lun unmapping without instance reboot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipReboot")]
		public System.Nullable<System.Boolean> SkipReboot { get; set; }
	}
	
	/// <summary>
	/// Message for disabling the interactive serial console on an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisableInteractiveSerialConsoleRequest
	{
	}
	
	/// <summary>
	/// Message for response of DisableInteractiveSerialConsole.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisableInteractiveSerialConsoleResponse
	{
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Message for enabling the interactive serial console on an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnableInteractiveSerialConsoleRequest
	{
	}
	
	/// <summary>
	/// Message for response of EnableInteractiveSerialConsole.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnableInteractiveSerialConsoleResponse
	{
	}
	
	/// <summary>
	/// Request for skip lun cooloff and delete it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvictLunRequest
	{
	}
	
	/// <summary>
	/// Request for skip volume cooloff and delete it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvictVolumeRequest
	{
	}
	
	/// <summary>
	/// Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudBaremetalsolutionV2LogicalInterface
	{
		
		/// <summary>
		/// The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interfaceIndex")]
		public System.Nullable<System.Int32> InterfaceIndex { get; set; }
		
		/// <summary>
		/// List of logical network interfaces within a logical interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logicalNetworkInterfaces")]
		public LogicalNetworkInterface[] LogicalNetworkInterfaces { get; set; }
		
		/// <summary>
		/// Interface name. This is of syntax or and forms part of the network template name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Each logical network interface is effectively a network and IP pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogicalNetworkInterface
	{
		
		/// <summary>
		/// Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultGateway")]
		public System.Nullable<System.Boolean> DefaultGateway { get; set; }
		
		/// <summary>
		/// An identifier for the `Network`, generated by the backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// IP address in the network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Name of the network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Type of network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkType")]
		public System.Nullable<LogicalNetworkInterfaceNetworkType> NetworkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LogicalNetworkInterfaceNetworkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 2,
	}
	
	/// <summary>
	/// Logical interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface
	{
		
		/// <summary>
		/// Interface name. This is not a globally unique identifier. Name is unique only inside the ServerNetworkTemplate. This is of syntax or and forms part of the network template name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If true, interface must have network connected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// Interface type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterfaceType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterfaceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERFACE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NIC = 2,
	}
	
	/// <summary>
	/// A server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Instance
	{
		
		/// <summary>
		/// Output only. Create a time stamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The firmware version for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firmwareVersion")]
		public string FirmwareVersion { get; set; }
		
		/// <summary>
		/// True if you enable hyperthreading for the server, otherwise false. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hyperthreadingEnabled")]
		public System.Nullable<System.Boolean> HyperthreadingEnabled { get; set; }
		
		/// <summary>
		/// Output only. An identifier for the `Instance`, generated by the backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactiveSerialConsoleEnabled")]
		public System.Nullable<System.Boolean> InteractiveSerialConsoleEnabled { get; set; }
		
		/// <summary>
		/// Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose. Format is `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyVersion")]
		public string KmsKeyVersion { get; set; }
		
		/// <summary>
		/// Labels as key value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logicalInterfaces")]
		public GoogleCloudBaremetalsolutionV2LogicalInterface[] LogicalInterfaces { get; set; }
		
		/// <summary>
		/// Output only. Text field about info for logging in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginInfo")]
		public string LoginInfo { get; set; }
		
		/// <summary>
		/// Immutable. List of LUNs associated with this server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="luns")]
		public Lun[] Luns { get; set; }
		
		/// <summary>
		/// Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkTemplate")]
		public string NetworkTemplate { get; set; }
		
		/// <summary>
		/// Output only. List of networks associated with this server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public Network[] Networks { get; set; }
		
		/// <summary>
		/// The OS image currently installed on the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osImage")]
		public string OsImage { get; set; }
		
		/// <summary>
		/// Immutable. Pod name. Pod is an independent part of infrastructure. Instance can only be connected to the assets (networks, volumes) allocated in the same pod.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pod")]
		public string Pod { get; set; }
		
		/// <summary>
		/// Optional. List of SSH Keys used during instance provisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshKeys")]
		public string[] SshKeys { get; set; }
		
		/// <summary>
		/// Output only. The state of the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<InstanceState> State { get; set; }
		
		/// <summary>
		/// Output only. Update a time stamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
		
		/// <summary>
		/// The workload profile for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadProfile")]
		public System.Nullable<InstanceWorkloadProfile> WorkloadProfile { get; set; }
	}
	
	/// <summary>
	/// A storage volume logical unit number (LUN).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Lun
	{
		
		/// <summary>
		/// Display if this LUN is a boot LUN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootLun")]
		public System.Nullable<System.Boolean> BootLun { get; set; }
		
		/// <summary>
		/// Output only. Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// An identifier for the LUN, generated by the backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Instances this Lun is attached to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public string[] Instances { get; set; }
		
		/// <summary>
		/// The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiprotocolType")]
		public System.Nullable<LunMultiprotocolType> MultiprotocolType { get; set; }
		
		/// <summary>
		/// Output only. The name of the LUN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Display if this LUN can be shared between multiple physical servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareable")]
		public System.Nullable<System.Boolean> Shareable { get; set; }
		
		/// <summary>
		/// The size of this LUN, in GiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGb")]
		public string SizeGb { get; set; }
		
		/// <summary>
		/// The state of this storage volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<LunState> State { get; set; }
		
		/// <summary>
		/// The storage type for this LUN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public System.Nullable<LunStorageType> StorageType { get; set; }
		
		/// <summary>
		/// Display the storage volume for this LUN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageVolume")]
		public string StorageVolume { get; set; }
		
		/// <summary>
		/// The WWID for this LUN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wwid")]
		public string Wwid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LunMultiprotocolType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPROTOCOL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LunState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COOL_OFF = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LunStorageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HDD = 2,
	}
	
	/// <summary>
	/// A Network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Network
	{
		
		/// <summary>
		/// The cidr of the Network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cidr")]
		public string Cidr { get; set; }
		
		/// <summary>
		/// Output only. Gateway ip address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayIp")]
		public string GatewayIp { get; set; }
		
		/// <summary>
		/// An identifier for the `Network`, generated by the backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// IP address configured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Whether network uses standard frames or jumbo ones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jumboFramesEnabled")]
		public System.Nullable<System.Boolean> JumboFramesEnabled { get; set; }
		
		/// <summary>
		/// Labels as key value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// List of physical interfaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string[] MacAddress { get; set; }
		
		/// <summary>
		/// Input only. List of mount points to attach the network to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPoints")]
		public NetworkMountPoint[] MountPoints { get; set; }
		
		/// <summary>
		/// Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Immutable. Pod name. Pod is an independent part of infrastructure. Network can only be connected to the assets (instances, nfsshares) allocated in the same pod.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pod")]
		public string Pod { get; set; }
		
		/// <summary>
		/// List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations")]
		public NetworkAddressReservation[] Reservations { get; set; }
		
		/// <summary>
		/// IP range for reserved for services (e.g. NFS).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicesCidr")]
		public string ServicesCidr { get; set; }
		
		/// <summary>
		/// The Network state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<NetworkState> State { get; set; }
		
		/// <summary>
		/// The type of this network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LogicalNetworkInterfaceNetworkType Type { get; set; }
		
		/// <summary>
		/// The vlan id of the Network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vlanId")]
		public string VlanId { get; set; }
		
		/// <summary>
		/// A network VRF.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vrf")]
		public VRF Vrf { get; set; }
		
		/// <summary>
		/// Optional. The name of a pre-existing Vrf that the network should be attached to. Format is `vrfs/{vrf}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vrfAttachment")]
		public string VrfAttachment { get; set; }
	}
	
	/// <summary>
	/// Mount point for a network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkMountPoint
	{
		
		/// <summary>
		/// Network should be a default gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultGateway")]
		public System.Nullable<System.Boolean> DefaultGateway { get; set; }
		
		/// <summary>
		/// Instance to attach network to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Ip address of the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Logical interface to detach from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logicalInterface")]
		public string LogicalInterface { get; set; }
	}
	
	/// <summary>
	/// A reservation of one or more addresses in a network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkAddressReservation
	{
		
		/// <summary>
		/// The last address of this reservation block, inclusive. I.e., for cases when reservations are only single addresses, end_address and start_address will be the same. Must be specified as a single IPv4 address, e.g. 10.1.2.2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endAddress")]
		public string EndAddress { get; set; }
		
		/// <summary>
		/// A note about this reservation, intended for human consumption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The first address of this reservation block. Must be specified as a single IPv4 address, e.g. 10.1.2.2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startAddress")]
		public string StartAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPROVISIONING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 4,
	}
	
	/// <summary>
	/// A network VRF.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VRF
	{
		
		/// <summary>
		/// The name of the VRF.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// QOS policy parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qosPolicy")]
		public QosPolicy QosPolicy { get; set; }
		
		/// <summary>
		/// The possible state of VRF.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<VRFState> State { get; set; }
		
		/// <summary>
		/// The list of VLAN attachments for the VRF.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vlanAttachments")]
		public VlanAttachment[] VlanAttachments { get; set; }
	}
	
	/// <summary>
	/// QOS policy parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QosPolicy
	{
		
		/// <summary>
		/// The bandwidth permitted by the QOS policy, in gbps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthGbps")]
		public System.Nullable<System.Double> BandwidthGbps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VRFState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONED = 2,
	}
	
	/// <summary>
	/// VLAN attachment details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VlanAttachment
	{
		
		/// <summary>
		/// Immutable. The identifier of the attachment within vrf.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Optional. The name of the vlan attachment within vrf. This is of the form projects/{project_number}/regions/{region}/interconnectAttachments/{interconnect_attachment}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interconnectAttachment")]
		public string InterconnectAttachment { get; set; }
		
		/// <summary>
		/// Input only. Pairing key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pairingKey")]
		public string PairingKey { get; set; }
		
		/// <summary>
		/// The peer IP of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peerIp")]
		public string PeerIp { get; set; }
		
		/// <summary>
		/// The peer vlan ID of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peerVlanId")]
		public string PeerVlanId { get; set; }
		
		/// <summary>
		/// QOS policy parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qosPolicy")]
		public QosPolicy QosPolicy { get; set; }
		
		/// <summary>
		/// The router IP of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routerIp")]
		public string RouterIp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHUTDOWN = 7,
	}
	
	/// <summary>
	/// A storage volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Volume
	{
		
		/// <summary>
		/// Output only. Is the Volume attached at at least one instance. This field is a lightweight counterpart of `instances` field. It is filled in List responses as well.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attached")]
		public System.Nullable<System.Boolean> Attached { get; set; }
		
		/// <summary>
		/// The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoGrownSizeGib")]
		public string AutoGrownSizeGib { get; set; }
		
		/// <summary>
		/// Output only. Whether this volume is a boot volume. A boot volume is one which contains a boot LUN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootVolume")]
		public System.Nullable<System.Boolean> BootVolume { get; set; }
		
		/// <summary>
		/// The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentSizeGib")]
		public string CurrentSizeGib { get; set; }
		
		/// <summary>
		/// Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emergencySizeGib")]
		public string EmergencySizeGib { get; set; }
		
		/// <summary>
		/// Output only. Time after which volume will be fully deleted. It is filled only for volumes in COOLOFF state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// An identifier for the `Volume`, generated by the backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Instances this Volume is attached to. This field is set only in Get requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public string[] Instances { get; set; }
		
		/// <summary>
		/// Labels as key value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Maximum size volume can be expanded to in case of evergency, in GiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSizeGib")]
		public string MaxSizeGib { get; set; }
		
		/// <summary>
		/// Output only. The resource name of this `Volume`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/volumes/{volume}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Originally requested size, in GiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originallyRequestedSizeGib")]
		public string OriginallyRequestedSizeGib { get; set; }
		
		/// <summary>
		/// Immutable. Performance tier of the Volume. Default is SHARED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceTier")]
		public System.Nullable<VolumePerformanceTier> PerformanceTier { get; set; }
		
		/// <summary>
		/// Immutable. Pod name. Pod is an independent part of infrastructure. Volume can only be connected to the instances allocated in the same pod.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pod")]
		public string Pod { get; set; }
		
		/// <summary>
		/// Output only. Storage protocol for the Volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<VolumeProtocol> Protocol { get; set; }
		
		/// <summary>
		/// The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remainingSpaceGib")]
		public string RemainingSpaceGib { get; set; }
		
		/// <summary>
		/// The requested size of this storage volume, in GiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedSizeGib")]
		public string RequestedSizeGib { get; set; }
		
		/// <summary>
		/// The behavior to use when snapshot reserved space is full.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotAutoDeleteBehavior")]
		public System.Nullable<VolumeSnapshotAutoDeleteBehavior> SnapshotAutoDeleteBehavior { get; set; }
		
		/// <summary>
		/// Whether snapshots are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotEnabled")]
		public System.Nullable<System.Boolean> SnapshotEnabled { get; set; }
		
		/// <summary>
		/// Details about snapshot space reservation and usage on the storage volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotReservationDetail")]
		public SnapshotReservationDetail SnapshotReservationDetail { get; set; }
		
		/// <summary>
		/// The state of this storage volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<VolumeState> State { get; set; }
		
		/// <summary>
		/// The storage type for this volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public LunStorageType StorageType { get; set; }
		
		/// <summary>
		/// The workload profile for the volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadProfile")]
		public System.Nullable<VolumeWorkloadProfile> WorkloadProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VolumePerformanceTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOLUME_PERFORMANCE_TIER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOLUME_PERFORMANCE_TIER_SHARED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOLUME_PERFORMANCE_TIER_ASSIGNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOLUME_PERFORMANCE_TIER_HT = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VolumeProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTOCOL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIBRE_CHANNEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NFS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VolumeSnapshotAutoDeleteBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT_AUTO_DELETE_BEHAVIOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OLDEST_FIRST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEWEST_FIRST = 3,
	}
	
	/// <summary>
	/// Details about snapshot space reservation and usage on the storage volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SnapshotReservationDetail
	{
		
		/// <summary>
		/// The space on this storage volume reserved for snapshots, shown in GiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedSpaceGib")]
		public string ReservedSpaceGib { get; set; }
		
		/// <summary>
		/// Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedSpacePercent")]
		public System.Nullable<System.Int32> ReservedSpacePercent { get; set; }
		
		/// <summary>
		/// The amount, in GiB, of available space in this storage volume's reserved snapshot space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedSpaceRemainingGib")]
		public string ReservedSpaceRemainingGib { get; set; }
		
		/// <summary>
		/// The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedSpaceUsedPercent")]
		public System.Nullable<System.Int32> ReservedSpaceUsedPercent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VolumeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COOL_OFF = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VolumeWorkloadProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKLOAD_PROFILE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HANA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceWorkloadProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKLOAD_PROFILE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKLOAD_PROFILE_GENERIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKLOAD_PROFILE_HANA = 2,
	}
	
	/// <summary>
	/// Configuration parameters for a new instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceConfig
	{
		
		/// <summary>
		/// If true networks can be from different projects of the same vendor account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNetworksEnabled")]
		public System.Nullable<System.Boolean> AccountNetworksEnabled { get; set; }
		
		/// <summary>
		/// A network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientNetwork")]
		public NetworkAddress ClientNetwork { get; set; }
		
		/// <summary>
		/// Whether the instance should be provisioned with Hyperthreading enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hyperthreading")]
		public System.Nullable<System.Boolean> Hyperthreading { get; set; }
		
		/// <summary>
		/// A transient unique identifier to idenfity an instance within an ProvisioningConfig request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyVersion")]
		public string KmsKeyVersion { get; set; }
		
		/// <summary>
		/// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logicalInterfaces")]
		public GoogleCloudBaremetalsolutionV2LogicalInterface[] LogicalInterfaces { get; set; }
		
		/// <summary>
		/// The name of the instance config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of network configuration on the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfig")]
		public System.Nullable<InstanceConfigNetworkConfig> NetworkConfig { get; set; }
		
		/// <summary>
		/// Server network template name. Filled if InstanceConfig.multivlan_config is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkTemplate")]
		public string NetworkTemplate { get; set; }
		
		/// <summary>
		/// OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osImage")]
		public string OsImage { get; set; }
		
		/// <summary>
		/// A network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateNetwork")]
		public NetworkAddress PrivateNetwork { get; set; }
		
		/// <summary>
		/// Optional. List of names of ssh keys used to provision the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshKeyNames")]
		public string[] SshKeyNames { get; set; }
		
		/// <summary>
		/// User note field, it can be used by customers to add additional information for the BMS Ops team .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userNote")]
		public string UserNote { get; set; }
	}
	
	/// <summary>
	/// A network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkAddress
	{
		
		/// <summary>
		/// IPv4 address to be assigned to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Name of the existing network to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="existingNetworkId")]
		public string ExistingNetworkId { get; set; }
		
		/// <summary>
		/// Id of the network to use, within the same ProvisioningConfig request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkId")]
		public string NetworkId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceConfigNetworkConfig
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORKCONFIG_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_VLAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_VLAN = 2,
	}
	
	/// <summary>
	/// A resource budget.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceQuota
	{
		
		/// <summary>
		/// Number of machines than can be created for the given location and instance_type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableMachineCount")]
		public System.Nullable<System.Int32> AvailableMachineCount { get; set; }
		
		/// <summary>
		/// The gcp service of the provisioning quota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcpService")]
		public string GcpService { get; set; }
		
		/// <summary>
		/// Instance type. Deprecated: use gcp_service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Location where the quota applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Output only. The name of the instance quota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A GCP vlan attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntakeVlanAttachment
	{
		
		/// <summary>
		/// Identifier of the VLAN attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Attachment pairing key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pairingKey")]
		public string PairingKey { get; set; }
	}
	
	/// <summary>
	/// Response message for the list of servers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInstancesResponse
	{
		
		/// <summary>
		/// The list of servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public Instance[] Instances { get; set; }
		
		/// <summary>
		/// A token identifying a page of results from the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Response message containing the list of storage volume luns.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLunsResponse
	{
		
		/// <summary>
		/// The list of luns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="luns")]
		public Lun[] Luns { get; set; }
		
		/// <summary>
		/// A token identifying a page of results from the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response with Networks with IPs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworkUsageResponse
	{
		
		/// <summary>
		/// Networks with IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public NetworkUsage[] Networks { get; set; }
	}
	
	/// <summary>
	/// Network with all used IP addresses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkUsage
	{
		
		/// <summary>
		/// A Network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Network Network { get; set; }
		
		/// <summary>
		/// All used IP addresses in this network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usedIps")]
		public string[] UsedIps { get; set; }
	}
	
	/// <summary>
	/// Response message containing the list of networks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworksResponse
	{
		
		/// <summary>
		/// The list of networks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public Network[] Networks { get; set; }
		
		/// <summary>
		/// A token identifying a page of results from the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response message containing the list of NFS shares.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNfsSharesResponse
	{
		
		/// <summary>
		/// A token identifying a page of results from the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of NFS shares.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfsShares")]
		public NfsShare[] NfsShares { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// An NFS share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NfsShare
	{
		
		/// <summary>
		/// List of allowed access points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedClients")]
		public AllowedClient[] AllowedClients { get; set; }
		
		/// <summary>
		/// Output only. An identifier for the NFS share, generated by the backend. This is the same value as nfs_share_id and will replace it in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Labels as key value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Immutable. The name of the NFS share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfsShareId")]
		public string NfsShareId { get; set; }
		
		/// <summary>
		/// Immutable. Pod name. Pod is an independent part of infrastructure. NFSShare can only be connected to the assets (networks, instances) allocated in the same pod.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pod")]
		public string Pod { get; set; }
		
		/// <summary>
		/// The requested size, in GiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedSizeGib")]
		public string RequestedSizeGib { get; set; }
		
		/// <summary>
		/// Output only. The state of the NFS share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<NfsShareState> State { get; set; }
		
		/// <summary>
		/// Immutable. The storage type of the underlying volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public LunStorageType StorageType { get; set; }
		
		/// <summary>
		/// Output only. The underlying volume of the share. Created automatically during provisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public string Volume { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NfsShareState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
	}
	
	/// <summary>
	/// Request for getting all available OS images.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOSImagesResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The OS images available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osImages")]
		public OSImage[] OsImages { get; set; }
	}
	
	/// <summary>
	/// Operation System image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSImage
	{
		
		/// <summary>
		/// Instance types this image is applicable to. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableInstanceTypes")]
		public string[] ApplicableInstanceTypes { get; set; }
		
		/// <summary>
		/// OS Image code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// OS Image description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. OS Image's unique name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Network templates that can be used with this OS Image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedNetworkTemplates")]
		public string[] SupportedNetworkTemplates { get; set; }
	}
	
	/// <summary>
	/// Response message for the list of provisioning quotas.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProvisioningQuotasResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The provisioning quotas registered in this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningQuotas")]
		public ProvisioningQuota[] ProvisioningQuotas { get; set; }
	}
	
	/// <summary>
	/// A provisioning quota for a given project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvisioningQuota
	{
		
		/// <summary>
		/// The asset type of this provisioning quota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assetType")]
		public System.Nullable<ProvisioningQuotaAssetType> AssetType { get; set; }
		
		/// <summary>
		/// The available count of the provisioning quota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableCount")]
		public System.Nullable<System.Int32> AvailableCount { get; set; }
		
		/// <summary>
		/// The gcp service of the provisioning quota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcpService")]
		public string GcpService { get; set; }
		
		/// <summary>
		/// A resource budget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceQuota")]
		public InstanceQuota InstanceQuota { get; set; }
		
		/// <summary>
		/// The specific location of the provisioining quota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Output only. The name of the provisioning quota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Network bandwidth, Gbps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkBandwidth")]
		public string NetworkBandwidth { get; set; }
		
		/// <summary>
		/// Server count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverCount")]
		public string ServerCount { get; set; }
		
		/// <summary>
		/// Storage size (GB).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageGib")]
		public string StorageGib { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProvisioningQuotaAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_TYPE_SERVER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_TYPE_STORAGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_TYPE_NETWORK = 3,
	}
	
	/// <summary>
	/// Message for response of ListSSHKeys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSSHKeysResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The SSH keys registered in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshKeys")]
		public SSHKey[] SshKeys { get; set; }
	}
	
	/// <summary>
	/// An SSH key, used for authorizing with the interactive serial console feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SSHKey
	{
		
		/// <summary>
		/// Output only. The name of this SSH key. Currently, the only valid value for the location is "global".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The public SSH key. This must be in OpenSSH .authorized_keys format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public string PublicKey { get; set; }
	}
	
	/// <summary>
	/// Response message containing the list of volume snapshots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVolumeSnapshotsResponse
	{
		
		/// <summary>
		/// A token identifying a page of results from the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
		
		/// <summary>
		/// The list of snapshots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeSnapshots")]
		public VolumeSnapshot[] VolumeSnapshots { get; set; }
	}
	
	/// <summary>
	/// A snapshot of a volume. Only boot volumes can have snapshots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeSnapshot
	{
		
		/// <summary>
		/// Output only. The creation time of the snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The description of the snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. An identifier for the snapshot, generated by the backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The name of the volume which this snapshot belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageVolume")]
		public string StorageVolume { get; set; }
		
		/// <summary>
		/// Output only. The type of the snapshot which indicates whether it was scheduled or manual/ad-hoc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<VolumeSnapshotType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VolumeSnapshotType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_HOC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 2,
	}
	
	/// <summary>
	/// Response message containing the list of storage volumes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVolumesResponse
	{
		
		/// <summary>
		/// A token identifying a page of results from the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
		
		/// <summary>
		/// The list of storage volumes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
	}
	
	/// <summary>
	/// Response for LoadInstanceAuthInfo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoadInstanceAuthInfoResponse
	{
		
		/// <summary>
		/// List of ssh keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshKeys")]
		public SSHKey[] SshKeys { get; set; }
		
		/// <summary>
		/// Map of username to the user account info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAccounts")]
		public System.Collections.Generic.Dictionary<string, UserAccount> UserAccounts { get; set; }
	}
	
	/// <summary>
	/// User account provisioned for the customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccount
	{
		
		/// <summary>
		/// Encrypted initial password value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedPassword")]
		public string EncryptedPassword { get; set; }
		
		/// <summary>
		/// KMS CryptoKey Version used to encrypt the password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyVersion")]
		public string KmsKeyVersion { get; set; }
	}
	
	/// <summary>
	/// A LUN(Logical Unit Number) range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LunRange
	{
		
		/// <summary>
		/// Number of LUNs to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// The requested size of each LUN, in GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGb")]
		public System.Nullable<System.Int32> SizeGb { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters for a new network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkConfig
	{
		
		/// <summary>
		/// Interconnect bandwidth. Set only when type is CLIENT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidth")]
		public System.Nullable<NetworkConfigBandwidth> Bandwidth { get; set; }
		
		/// <summary>
		/// CIDR range of the network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cidr")]
		public string Cidr { get; set; }
		
		/// <summary>
		/// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcpService")]
		public string GcpService { get; set; }
		
		/// <summary>
		/// A transient unique identifier to identify a volume within an ProvisioningConfig request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The JumboFramesEnabled option for customer to set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jumboFramesEnabled")]
		public System.Nullable<System.Boolean> JumboFramesEnabled { get; set; }
		
		/// <summary>
		/// Output only. The name of the network config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service CIDR, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceCidr")]
		public System.Nullable<NetworkConfigServiceCidr> ServiceCidr { get; set; }
		
		/// <summary>
		/// The type of this network, either Client or Private.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LogicalNetworkInterfaceNetworkType Type { get; set; }
		
		/// <summary>
		/// User note field, it can be used by customers to add additional information for the BMS Ops team .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userNote")]
		public string UserNote { get; set; }
		
		/// <summary>
		/// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vlanAttachments")]
		public IntakeVlanAttachment[] VlanAttachments { get; set; }
		
		/// <summary>
		/// Whether the VLAN attachment pair is located in the same project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vlanSameProject")]
		public System.Nullable<System.Boolean> VlanSameProject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkConfigBandwidth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANDWIDTH_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW_1_GBPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW_2_GBPS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW_5_GBPS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW_10_GBPS = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkConfigServiceCidr
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_CIDR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_26 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_27 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_28 = 4,
	}
	
	/// <summary>
	/// A NFS export entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NfsExport
	{
		
		/// <summary>
		/// Allow dev flag in NfsShare AllowedClientsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowDev")]
		public System.Nullable<System.Boolean> AllowDev { get; set; }
		
		/// <summary>
		/// Allow the setuid flag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowSuid")]
		public System.Nullable<System.Boolean> AllowSuid { get; set; }
		
		/// <summary>
		/// A CIDR range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cidr")]
		public string Cidr { get; set; }
		
		/// <summary>
		/// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineId")]
		public string MachineId { get; set; }
		
		/// <summary>
		/// Network to use to publish the export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkId")]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noRootSquash")]
		public System.Nullable<System.Boolean> NoRootSquash { get; set; }
		
		/// <summary>
		/// Export permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public System.Nullable<NfsExportPermissions> Permissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NfsExportPermissions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSIONS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_WRITE = 2,
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A provisioning configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvisioningConfig
	{
		
		/// <summary>
		/// Output only. URI to Cloud Console UI view of this provisioning config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudConsoleUri")]
		public string CloudConsoleUri { get; set; }
		
		/// <summary>
		/// Optional. The user-defined identifier of the provisioning config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customId")]
		public string CustomId { get; set; }
		
		/// <summary>
		/// Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// A service account to enable customers to access instance credentials upon handover.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handoverServiceAccount")]
		public string HandoverServiceAccount { get; set; }
		
		/// <summary>
		/// Instances to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public InstanceConfig[] Instances { get; set; }
		
		/// <summary>
		/// Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Output only. The system-generated name of the provisioning config. This follows the UUID format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Networks to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public NetworkConfig[] Networks { get; set; }
		
		/// <summary>
		/// Optional. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes, nfsshares) allocated in the same pod only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pod")]
		public string Pod { get; set; }
		
		/// <summary>
		/// Output only. State of ProvisioningConfig.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ProvisioningConfigState> State { get; set; }
		
		/// <summary>
		/// Optional status messages associated with the FAILED state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// A generated ticket id to track provisioning request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticketId")]
		public string TicketId { get; set; }
		
		/// <summary>
		/// Output only. Last update timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Volumes to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public VolumeConfig[] Volumes { get; set; }
		
		/// <summary>
		/// If true, VPC SC is enabled for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcScEnabled")]
		public System.Nullable<System.Boolean> VpcScEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProvisioningConfigState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 7,
	}
	
	/// <summary>
	/// Configuration parameters for a new volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeConfig
	{
		
		/// <summary>
		/// The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcpService")]
		public string GcpService { get; set; }
		
		/// <summary>
		/// A transient unique identifier to identify a volume within an ProvisioningConfig request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lunRanges")]
		public LunRange[] LunRanges { get; set; }
		
		/// <summary>
		/// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineIds")]
		public string[] MachineIds { get; set; }
		
		/// <summary>
		/// Output only. The name of the volume config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// NFS exports. Set only when protocol is PROTOCOL_NFS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfsExports")]
		public NfsExport[] NfsExports { get; set; }
		
		/// <summary>
		/// Performance tier of the Volume. Default is SHARED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceTier")]
		public VolumePerformanceTier PerformanceTier { get; set; }
		
		/// <summary>
		/// Volume protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<VolumeConfigProtocol> Protocol { get; set; }
		
		/// <summary>
		/// The requested size of this volume, in GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGb")]
		public System.Nullable<System.Int32> SizeGb { get; set; }
		
		/// <summary>
		/// Whether snapshots should be enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotsEnabled")]
		public System.Nullable<System.Boolean> SnapshotsEnabled { get; set; }
		
		/// <summary>
		/// The type of this Volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<VolumeConfigType> Type { get; set; }
		
		/// <summary>
		/// User note field, it can be used by customers to add additional information for the BMS Ops team .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userNote")]
		public string UserNote { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VolumeConfigProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTOCOL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTOCOL_FC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTOCOL_NFS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VolumeConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLASH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISK = 2,
	}
	
	/// <summary>
	/// Message requesting rename of a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RenameInstanceRequest
	{
		
		/// <summary>
		/// Required. The new `id` of the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newInstanceId")]
		public string NewInstanceId { get; set; }
	}
	
	/// <summary>
	/// Message requesting rename of a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RenameNetworkRequest
	{
		
		/// <summary>
		/// Required. The new `id` of the network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newNetworkId")]
		public string NewNetworkId { get; set; }
	}
	
	/// <summary>
	/// Message requesting rename of a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RenameNfsShareRequest
	{
		
		/// <summary>
		/// Required. The new `id` of the nfsshare.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newNfsshareId")]
		public string NewNfsshareId { get; set; }
	}
	
	/// <summary>
	/// Message requesting rename of a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RenameVolumeRequest
	{
		
		/// <summary>
		/// Required. The new `id` of the volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newVolumeId")]
		public string NewVolumeId { get; set; }
	}
	
	/// <summary>
	/// Message requesting to reset a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetInstanceRequest
	{
	}
	
	/// <summary>
	/// Response message from resetting a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetInstanceResponse
	{
	}
	
	/// <summary>
	/// Request for emergency resize Volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResizeVolumeRequest
	{
		
		/// <summary>
		/// New Volume size, in GiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGib")]
		public string SizeGib { get; set; }
	}
	
	/// <summary>
	/// Message for restoring a volume snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RestoreVolumeSnapshotRequest
	{
	}
	
	/// <summary>
	/// Network template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServerNetworkTemplate
	{
		
		/// <summary>
		/// Instance types this template is applicable to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableInstanceTypes")]
		public string[] ApplicableInstanceTypes { get; set; }
		
		/// <summary>
		/// Logical interfaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logicalInterfaces")]
		public GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface[] LogicalInterfaces { get; set; }
		
		/// <summary>
		/// Output only. Template's unique name. The full resource name follows the pattern: `projects/{project}/locations/{location}/serverNetworkTemplate/{server_network_template}` Generally, the {server_network_template} follows the syntax of "bond" or "nic".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Message requesting to start a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartInstanceRequest
	{
	}
	
	/// <summary>
	/// Response message from starting a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartInstanceResponse
	{
	}
	
	/// <summary>
	/// Message requesting to stop a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopInstanceRequest
	{
	}
	
	/// <summary>
	/// Response message from stopping a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopInstanceResponse
	{
	}
	
	/// <summary>
	/// Request for SubmitProvisioningConfig.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubmitProvisioningConfigRequest
	{
		
		/// <summary>
		/// Optional. Email provided to send a confirmation with provisioning config to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// A provisioning configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningConfig")]
		public ProvisioningConfig ProvisioningConfig { get; set; }
	}
	
	/// <summary>
	/// Response for SubmitProvisioningConfig.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubmitProvisioningConfigResponse
	{
		
		/// <summary>
		/// A provisioning configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningConfig")]
		public ProvisioningConfig ProvisioningConfig { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Detach LUN from Instance.
		/// Baremetalsolution_projects_locations_instances_detachLun v2/{instance}:detachLun
		/// </summary>
		/// <param name="instance">Required. Name of the instance.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Baremetalsolution_projects_locations_instances_detachLunAsync(string instance, DetachLunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+":detachLun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Networks (and used IPs for each Network) in the vendor account associated with the specified project.
		/// Baremetalsolution_projects_locations_networks_listNetworkUsage v2/{location}/networks:listNetworkUsage
		/// </summary>
		/// <param name="location">Required. Parent value (project and location).</param>
		/// <returns>Successful response</returns>
		public async Task<ListNetworkUsageResponse> Baremetalsolution_projects_locations_networks_listNetworkUsageAsync(string location, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/networks:listNetworkUsage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListNetworkUsageResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a volume snapshot. Returns INVALID_ARGUMENT if called for a non-boot volume.
		/// Baremetalsolution_projects_locations_volumes_snapshots_delete v2/{name}
		/// </summary>
		/// <param name="name">Required. The name of the snapshot to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Baremetalsolution_projects_locations_volumes_snapshots_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the specified snapshot resource. Returns INVALID_ARGUMENT if called for a non-boot volume.
		/// Baremetalsolution_projects_locations_volumes_snapshots_get v2/{name}
		/// </summary>
		/// <param name="name">Required. The name of the snapshot.</param>
		/// <returns>Successful response</returns>
		public async Task<VolumeSnapshot> Baremetalsolution_projects_locations_volumes_snapshots_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VolumeSnapshot>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update details of a single storage volume.
		/// Baremetalsolution_projects_locations_volumes_patch v2/{name}
		/// </summary>
		/// <param name="name">Output only. The resource name of this `Volume`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/volumes/{volume}`</param>
		/// <param name="updateMask">The list of fields to update. The only currently supported fields are: 'labels'</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Baremetalsolution_projects_locations_volumes_patchAsync(string name, string updateMask, Volume requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Baremetalsolution_projects_locations_list v2/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Baremetalsolution_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable the interactive serial console feature on an instance.
		/// Baremetalsolution_projects_locations_instances_disableInteractiveSerialConsole v2/{name}:disableInteractiveSerialConsole
		/// </summary>
		/// <param name="name">Required. Name of the resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Baremetalsolution_projects_locations_instances_disableInteractiveSerialConsoleAsync(string name, DisableInteractiveSerialConsoleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":disableInteractiveSerialConsole";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable the interactive serial console feature on an instance.
		/// Baremetalsolution_projects_locations_instances_enableInteractiveSerialConsole v2/{name}:enableInteractiveSerialConsole
		/// </summary>
		/// <param name="name">Required. Name of the resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Baremetalsolution_projects_locations_instances_enableInteractiveSerialConsoleAsync(string name, EnableInteractiveSerialConsoleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":enableInteractiveSerialConsole";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Skips lun's cooloff and deletes it now. Lun must be in cooloff state.
		/// Baremetalsolution_projects_locations_volumes_luns_evict v2/{name}:evict
		/// </summary>
		/// <param name="name">Required. The name of the lun.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Baremetalsolution_projects_locations_volumes_luns_evictAsync(string name, EvictLunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":evict";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Load auth info for a server.
		/// Baremetalsolution_projects_locations_instances_loadAuthInfo v2/{name}:loadAuthInfo
		/// </summary>
		/// <param name="name">Required. Name of the server.</param>
		/// <returns>Successful response</returns>
		public async Task<LoadInstanceAuthInfoResponse> Baremetalsolution_projects_locations_instances_loadAuthInfoAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":loadAuthInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LoadInstanceAuthInfoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RenameVolume sets a new name for a volume. Use with caution, previous names become immediately invalidated.
		/// Baremetalsolution_projects_locations_volumes_rename v2/{name}:rename
		/// </summary>
		/// <param name="name">Required. The `name` field is used to identify the volume. Format: projects/{project}/locations/{location}/volumes/{volume}</param>
		/// <returns>Successful response</returns>
		public async Task<Volume> Baremetalsolution_projects_locations_volumes_renameAsync(string name, RenameVolumeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":rename";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Volume>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Perform an ungraceful, hard reset on a server. Equivalent to shutting the power off and then turning it back on.
		/// Baremetalsolution_projects_locations_instances_reset v2/{name}:reset
		/// </summary>
		/// <param name="name">Required. Name of the resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Baremetalsolution_projects_locations_instances_resetAsync(string name, ResetInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a server that was shutdown.
		/// Baremetalsolution_projects_locations_instances_start v2/{name}:start
		/// </summary>
		/// <param name="name">Required. Name of the resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Baremetalsolution_projects_locations_instances_startAsync(string name, StartInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop a running server.
		/// Baremetalsolution_projects_locations_instances_stop v2/{name}:stop
		/// </summary>
		/// <param name="name">Required. Name of the resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Baremetalsolution_projects_locations_instances_stopAsync(string name, StopInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List servers in a given project and location.
		/// Baremetalsolution_projects_locations_instances_list v2/{parent}/instances
		/// </summary>
		/// <param name="parent">Required. Parent value for ListInstancesRequest.</param>
		/// <param name="filter">List filter.</param>
		/// <param name="pageSize">Requested page size. Server may return fewer items than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results from the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInstancesResponse> Baremetalsolution_projects_locations_instances_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/instances&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListInstancesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List storage volume luns for given storage volume.
		/// Baremetalsolution_projects_locations_volumes_luns_list v2/{parent}/luns
		/// </summary>
		/// <param name="parent">Required. Parent value for ListLunsRequest.</param>
		/// <param name="pageSize">Requested page size. The server might return fewer items than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results from the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLunsResponse> Baremetalsolution_projects_locations_volumes_luns_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/luns&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLunsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List network in a given project and location.
		/// Baremetalsolution_projects_locations_networks_list v2/{parent}/networks
		/// </summary>
		/// <param name="parent">Required. Parent value for ListNetworksRequest.</param>
		/// <param name="filter">List filter.</param>
		/// <param name="pageSize">Requested page size. The server might return fewer items than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results from the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListNetworksResponse> Baremetalsolution_projects_locations_networks_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/networks&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListNetworksResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List NFS shares.
		/// Baremetalsolution_projects_locations_nfsShares_list v2/{parent}/nfsShares
		/// </summary>
		/// <param name="parent">Required. Parent value for ListNfsSharesRequest.</param>
		/// <param name="filter">List filter.</param>
		/// <param name="pageSize">Requested page size. The server might return fewer items than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results from the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListNfsSharesResponse> Baremetalsolution_projects_locations_nfsShares_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/nfsShares&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListNfsSharesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an NFS share.
		/// Baremetalsolution_projects_locations_nfsShares_create v2/{parent}/nfsShares
		/// </summary>
		/// <param name="parent">Required. The parent project and location.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Baremetalsolution_projects_locations_nfsShares_createAsync(string parent, NfsShare requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/nfsShares";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of OS images which are currently approved.
		/// Baremetalsolution_projects_locations_osImages_list v2/{parent}/osImages
		/// </summary>
		/// <param name="parent">Required. Parent value for ListOSImagesRequest.</param>
		/// <param name="pageSize">Requested page size. The server might return fewer items than requested. If unspecified, server will pick an appropriate default. Notice that page_size field is not supported and won't be respected in the API request for now, will be updated when pagination is supported.</param>
		/// <param name="pageToken">A token identifying a page of results from the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOSImagesResponse> Baremetalsolution_projects_locations_osImages_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/osImages&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOSImagesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new ProvisioningConfig.
		/// Baremetalsolution_projects_locations_provisioningConfigs_create v2/{parent}/provisioningConfigs
		/// </summary>
		/// <param name="parent">Required. The parent project and location containing the ProvisioningConfig.</param>
		/// <param name="email">Optional. Email provided to send a confirmation with provisioning config to.</param>
		/// <returns>Successful response</returns>
		public async Task<ProvisioningConfig> Baremetalsolution_projects_locations_provisioningConfigs_createAsync(string parent, string email, ProvisioningConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/provisioningConfigs&email=" + (email==null? "" : System.Uri.EscapeDataString(email));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProvisioningConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a provisiong configuration for a given project.
		/// Baremetalsolution_projects_locations_provisioningConfigs_submit v2/{parent}/provisioningConfigs:submit
		/// </summary>
		/// <param name="parent">Required. The parent project and location containing the ProvisioningConfig.</param>
		/// <returns>Successful response</returns>
		public async Task<SubmitProvisioningConfigResponse> Baremetalsolution_projects_locations_provisioningConfigs_submitAsync(string parent, SubmitProvisioningConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/provisioningConfigs:submit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubmitProvisioningConfigResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the budget details to provision resources on a given project.
		/// Baremetalsolution_projects_locations_provisioningQuotas_list v2/{parent}/provisioningQuotas
		/// </summary>
		/// <param name="parent">Required. Parent value for ListProvisioningQuotasRequest.</param>
		/// <param name="pageSize">Requested page size. The server might return fewer items than requested. If unspecified, server will pick an appropriate default. Notice that page_size field is not supported and won't be respected in the API request for now, will be updated when pagination is supported.</param>
		/// <param name="pageToken">A token identifying a page of results from the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListProvisioningQuotasResponse> Baremetalsolution_projects_locations_provisioningQuotas_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/provisioningQuotas&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListProvisioningQuotasResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of snapshots for the specified volume. Returns a response with an empty list of snapshots if called for a non-boot volume.
		/// Baremetalsolution_projects_locations_volumes_snapshots_list v2/{parent}/snapshots
		/// </summary>
		/// <param name="parent">Required. Parent value for ListVolumesRequest.</param>
		/// <param name="pageSize">Requested page size. The server might return fewer items than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results from the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVolumeSnapshotsResponse> Baremetalsolution_projects_locations_volumes_snapshots_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/snapshots&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListVolumeSnapshotsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Takes a snapshot of a boot volume. Returns INVALID_ARGUMENT if called for a non-boot volume.
		/// Baremetalsolution_projects_locations_volumes_snapshots_create v2/{parent}/snapshots
		/// </summary>
		/// <param name="parent">Required. The volume to snapshot.</param>
		/// <returns>Successful response</returns>
		public async Task<VolumeSnapshot> Baremetalsolution_projects_locations_volumes_snapshots_createAsync(string parent, VolumeSnapshot requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/snapshots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VolumeSnapshot>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the public SSH keys registered for the specified project. These SSH keys are used only for the interactive serial console feature.
		/// Baremetalsolution_projects_locations_sshKeys_list v2/{parent}/sshKeys
		/// </summary>
		/// <param name="parent">Required. The parent containing the SSH keys. Currently, the only valid value for the location is "global".</param>
		/// <param name="pageSize">The maximum number of items to return.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSSHKeysResponse> Baremetalsolution_projects_locations_sshKeys_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/sshKeys&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSSHKeysResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register a public SSH key in the specified project for use with the interactive serial console feature.
		/// Baremetalsolution_projects_locations_sshKeys_create v2/{parent}/sshKeys
		/// </summary>
		/// <param name="parent">Required. The parent containing the SSH keys.</param>
		/// <param name="sshKeyId">Required. The ID to use for the key, which will become the final component of the key's resource name. This value must match the regex: [a-zA-Z0-9@.\-_]{1,64}</param>
		/// <returns>Successful response</returns>
		public async Task<SSHKey> Baremetalsolution_projects_locations_sshKeys_createAsync(string parent, string sshKeyId, SSHKey requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/sshKeys&sshKeyId=" + (sshKeyId==null? "" : System.Uri.EscapeDataString(sshKeyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SSHKey>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List storage volumes in a given project and location.
		/// Baremetalsolution_projects_locations_volumes_list v2/{parent}/volumes
		/// </summary>
		/// <param name="parent">Required. Parent value for ListVolumesRequest.</param>
		/// <param name="filter">List filter.</param>
		/// <param name="pageSize">Requested page size. The server might return fewer items than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results from the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVolumesResponse> Baremetalsolution_projects_locations_volumes_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/volumes&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListVolumesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uses the specified snapshot to restore its parent volume. Returns INVALID_ARGUMENT if called for a non-boot volume.
		/// Baremetalsolution_projects_locations_volumes_snapshots_restoreVolumeSnapshot v2/{volumeSnapshot}:restoreVolumeSnapshot
		/// </summary>
		/// <param name="volumeSnapshot">Required. Name of the snapshot which will be used to restore its parent volume.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Baremetalsolution_projects_locations_volumes_snapshots_restoreVolumeSnapshotAsync(string volumeSnapshot, RestoreVolumeSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (volumeSnapshot==null? "" : System.Uri.EscapeDataString(volumeSnapshot))+":restoreVolumeSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Emergency Volume resize.
		/// Baremetalsolution_projects_locations_volumes_resize v2/{volume}:resize
		/// </summary>
		/// <param name="volume">Required. Volume to resize.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Baremetalsolution_projects_locations_volumes_resizeAsync(string volume, ResizeVolumeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (volume==null? "" : System.Uri.EscapeDataString(volume))+":resize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
