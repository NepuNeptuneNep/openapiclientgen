//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Output for PublishUrlNotification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublishUrlNotificationResponse
	{
		
		/// <summary>
		/// Summary of the most recent Indexing API notifications successfully received, for a given URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlNotificationMetadata")]
		public UrlNotificationMetadata UrlNotificationMetadata { get; set; }
	}
	
	/// <summary>
	/// Summary of the most recent Indexing API notifications successfully received, for a given URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlNotificationMetadata
	{
		
		/// <summary>
		/// `UrlNotification` is the resource used in all Indexing API calls. It describes one event in the life cycle of a Web Document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestRemove")]
		public UrlNotification LatestRemove { get; set; }
		
		/// <summary>
		/// `UrlNotification` is the resource used in all Indexing API calls. It describes one event in the life cycle of a Web Document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestUpdate")]
		public UrlNotification LatestUpdate { get; set; }
		
		/// <summary>
		/// URL to which this metadata refers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// `UrlNotification` is the resource used in all Indexing API calls. It describes one event in the life cycle of a Web Document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlNotification
	{
		
		/// <summary>
		/// Creation timestamp for this notification. Users should _not_ specify it, the field is ignored at the request time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyTime")]
		public string NotifyTime { get; set; }
		
		/// <summary>
		/// The URL life cycle event that Google is being notified about.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<UrlNotificationType> Type { get; set; }
		
		/// <summary>
		/// The object of this notification. The URL must be owned by the publisher of this notification and, in case of `URL_UPDATED` notifications, it _must_ be crawlable by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UrlNotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL_NOTIFICATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL_UPDATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL_DELETED = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets metadata about a Web Document. This method can _only_ be used to query URLs that were previously seen in successful Indexing API notifications. Includes the latest `UrlNotification` received via this API.
		/// Indexing_urlNotifications_getMetadata v3/urlNotifications/metadata
		/// </summary>
		/// <param name="url">URL that is being queried.</param>
		/// <returns>Successful response</returns>
		public async Task<UrlNotificationMetadata> Indexing_urlNotifications_getMetadataAsync(string url, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/urlNotifications/metadata?url=" + (url==null? "" : System.Uri.EscapeDataString(url));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UrlNotificationMetadata>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Notifies that a URL has been updated or deleted.
		/// Indexing_urlNotifications_publish v3/urlNotifications:publish
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<PublishUrlNotificationResponse> Indexing_urlNotifications_publishAsync(UrlNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/urlNotifications:publish";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublishUrlNotificationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
