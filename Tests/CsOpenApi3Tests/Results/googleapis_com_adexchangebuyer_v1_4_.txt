//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Configuration data for an Ad Exchange buyer account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// When this is false, bid requests that include a deal ID for a private auction or preferred deal are always sent to your bidder. When true, all active pretargeting configs will be applied to private auctions and preferred deals. Programmatic Guaranteed deals (when enabled) are always sent to your bidder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applyPretargetingToNonGuaranteedDeals")]
		public System.Nullable<System.Boolean> ApplyPretargetingToNonGuaranteedDeals { get; set; }
		
		/// <summary>
		/// Your bidder locations that have distinct URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidderLocation")]
		public AccountBidderLocation[] AccountBidderLocation { get; set; }
		
		/// <summary>
		/// The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieMatchingNid")]
		public string CookieMatchingNid { get; set; }
		
		/// <summary>
		/// The base URL used in cookie match requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieMatchingUrl")]
		public string CookieMatchingUrl { get; set; }
		
		/// <summary>
		/// Account id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#account")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#account";
		
		/// <summary>
		/// The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumActiveCreatives")]
		public System.Nullable<System.Int32> MaximumActiveCreatives { get; set; }
		
		/// <summary>
		/// The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumTotalQps")]
		public System.Nullable<System.Int32> MaximumTotalQps { get; set; }
		
		/// <summary>
		/// The number of creatives that this account inserted or bid with in the last 30 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberActiveCreatives")]
		public System.Nullable<System.Int32> NumberActiveCreatives { get; set; }
	}
	
	public class AccountBidderLocation
	{
		
		/// <summary>
		/// The protocol that the bidder endpoint is using. OpenRTB protocols with prefix PROTOCOL_OPENRTB_PROTOBUF use proto buffer, otherwise use JSON.  Allowed values:  
		///- PROTOCOL_ADX 
		///- PROTOCOL_OPENRTB_2_2 
		///- PROTOCOL_OPENRTB_2_3 
		///- PROTOCOL_OPENRTB_2_4 
		///- PROTOCOL_OPENRTB_2_5 
		///- PROTOCOL_OPENRTB_PROTOBUF_2_3 
		///- PROTOCOL_OPENRTB_PROTOBUF_2_4 
		///- PROTOCOL_OPENRTB_PROTOBUF_2_5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidProtocol")]
		public string BidProtocol { get; set; }
		
		/// <summary>
		/// The maximum queries per second the Ad Exchange will send.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumQps")]
		public System.Nullable<System.Int32> MaximumQps { get; set; }
		
		/// <summary>
		/// The geographical region the Ad Exchange should send requests from. Only used by some quota systems, but always setting the value is recommended. Allowed values:  
		///- ASIA 
		///- EUROPE 
		///- US_EAST 
		///- US_WEST
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// The URL to which the Ad Exchange will send bid requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// An account feed lists Ad Exchange buyer accounts that the user has access to. Each entry in the feed corresponds to a single buyer account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountsList
	{
		
		/// <summary>
		/// A list of accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Account[] Items { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#accountsList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#accountsList";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOrderDealsRequest
	{
		
		/// <summary>
		/// The list of deals to add
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deals")]
		public MarketplaceDeal[] Deals { get; set; }
		
		/// <summary>
		/// The last known proposal revision number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevisionNumber")]
		public string ProposalRevisionNumber { get; set; }
		
		/// <summary>
		/// Indicates an optional action to take on the proposal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateAction")]
		public string UpdateAction { get; set; }
	}
	
	/// <summary>
	/// A proposal can contain multiple deals. A deal contains the terms and targeting information that is used for serving.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketplaceDeal
	{
		
		[System.Runtime.Serialization.DataMember(Name="buyerPrivateData")]
		public PrivateData BuyerPrivateData { get; set; }
		
		/// <summary>
		/// The time (ms since epoch) of the deal creation. (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTimeMs")]
		public string CreationTimeMs { get; set; }
		
		/// <summary>
		/// Specifies the creative pre-approval policy (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativePreApprovalPolicy")]
		public string CreativePreApprovalPolicy { get; set; }
		
		/// <summary>
		/// Specifies whether the creative is safeFrame compatible (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeSafeFrameCompatibility")]
		public string CreativeSafeFrameCompatibility { get; set; }
		
		/// <summary>
		/// A unique deal-id for the deal (readonly).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealId")]
		public string DealId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dealServingMetadata")]
		public DealServingMetadata DealServingMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryControl")]
		public DeliveryControl DeliveryControl { get; set; }
		
		/// <summary>
		/// The external deal id assigned to this deal once the deal is finalized. This is the deal-id that shows up in serving/reporting etc. (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalDealId")]
		public string ExternalDealId { get; set; }
		
		/// <summary>
		/// Proposed flight end time of the deal (ms since epoch) This will generally be stored in a granularity of a second. (updatable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightEndTimeMs")]
		public string FlightEndTimeMs { get; set; }
		
		/// <summary>
		/// Proposed flight start time of the deal (ms since epoch) This will generally be stored in a granularity of a second. (updatable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightStartTimeMs")]
		public string FlightStartTimeMs { get; set; }
		
		/// <summary>
		/// Description for the deal terms. (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryDescription")]
		public string InventoryDescription { get; set; }
		
		/// <summary>
		/// Indicates whether the current deal is a RFP template. RFP template is created by buyer and not based on seller created products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRfpTemplate")]
		public System.Nullable<System.Boolean> IsRfpTemplate { get; set; }
		
		/// <summary>
		/// True, if the buyside inventory setup is complete for this deal. (readonly, except via OrderSetupCompleted action)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSetupComplete")]
		public System.Nullable<System.Boolean> IsSetupComplete { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#marketplaceDeal".
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#marketplaceDeal")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#marketplaceDeal";
		
		/// <summary>
		/// The time (ms since epoch) when the deal was last updated. (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTimeMs")]
		public string LastUpdateTimeMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="makegoodRequestedReason")]
		public string MakegoodRequestedReason { get; set; }
		
		/// <summary>
		/// The name of the deal. (updatable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The product-id from which this deal was created. (readonly, except on create)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The revision number of the product that the deal was created from (readonly, except on create)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productRevisionNumber")]
		public string ProductRevisionNumber { get; set; }
		
		/// <summary>
		/// Specifies the creative source for programmatic deals, PUBLISHER means creative is provided by seller and ADVERTISR means creative is provided by buyer. (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programmaticCreativeSource")]
		public string ProgrammaticCreativeSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposalId")]
		public string ProposalId { get; set; }
		
		/// <summary>
		/// Optional Seller contact information for the deal (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerContacts")]
		public ContactInformation[] SellerContacts { get; set; }
		
		/// <summary>
		/// The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together. (updatable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedTargetings")]
		public SharedTargeting[] SharedTargetings { get; set; }
		
		/// <summary>
		/// The syndication product associated with the deal. (readonly, except on create)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syndicationProduct")]
		public string SyndicationProduct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="terms")]
		public DealTerms Terms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webPropertyCode")]
		public string WebPropertyCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateData
	{
		
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public string ReferenceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referencePayload")]
		public string ReferencePayload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DealServingMetadata
	{
		
		/// <summary>
		/// True if alcohol ads are allowed for this deal (read-only). This field is only populated when querying for finalized orders using the method GetFinalizedOrderDeals
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alcoholAdsAllowed")]
		public System.Nullable<System.Boolean> AlcoholAdsAllowed { get; set; }
		
		/// <summary>
		/// Tracks which parties (if any) have paused a deal. The deal is considered paused if has_buyer_paused || has_seller_paused. Each of the has_buyer_paused or the has_seller_paused bits can be set independently.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealPauseStatus")]
		public DealServingMetadataDealPauseStatus DealPauseStatus { get; set; }
	}
	
	/// <summary>
	/// Tracks which parties (if any) have paused a deal. The deal is considered paused if has_buyer_paused || has_seller_paused. Each of the has_buyer_paused or the has_seller_paused bits can be set independently.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DealServingMetadataDealPauseStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="buyerPauseReason")]
		public string BuyerPauseReason { get; set; }
		
		/// <summary>
		/// If the deal is paused, records which party paused the deal first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPausedBy")]
		public string FirstPausedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasBuyerPaused")]
		public System.Nullable<System.Boolean> HasBuyerPaused { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasSellerPaused")]
		public System.Nullable<System.Boolean> HasSellerPaused { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sellerPauseReason")]
		public string SellerPauseReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeliveryControl
	{
		
		[System.Runtime.Serialization.DataMember(Name="creativeBlockingLevel")]
		public string CreativeBlockingLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryRateType")]
		public string DeliveryRateType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequencyCaps")]
		public DeliveryControlFrequencyCap[] FrequencyCaps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeliveryControlFrequencyCap
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxImpressions")]
		public System.Nullable<System.Int32> MaxImpressions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numTimeUnits")]
		public System.Nullable<System.Int32> NumTimeUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeUnitType")]
		public string TimeUnitType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactInformation
	{
		
		/// <summary>
		/// Email address of the contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The name of the contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SharedTargeting
	{
		
		/// <summary>
		/// The list of values to exclude from targeting. Each value is AND'd together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusions")]
		public TargetingValue[] Exclusions { get; set; }
		
		/// <summary>
		/// The list of value to include as part of the targeting. Each value is OR'd together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusions")]
		public TargetingValue[] Inclusions { get; set; }
		
		/// <summary>
		/// The key representing the shared targeting criterion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetingValue
	{
		
		/// <summary>
		/// Next Id: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeSizeValue")]
		public TargetingValueCreativeSize CreativeSizeValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayPartTargetingValue")]
		public TargetingValueDayPartTargeting DayPartTargetingValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="demogAgeCriteriaValue")]
		public TargetingValueDemogAgeCriteria DemogAgeCriteriaValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="demogGenderCriteriaValue")]
		public TargetingValueDemogGenderCriteria DemogGenderCriteriaValue { get; set; }
		
		/// <summary>
		/// The long value to exclude/include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longValue")]
		public string LongValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestPlatformTargetingValue")]
		public TargetingValueRequestPlatformTargeting RequestPlatformTargetingValue { get; set; }
		
		/// <summary>
		/// The string value to exclude/include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	/// <summary>
	/// Next Id: 7
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetingValueCreativeSize
	{
		
		/// <summary>
		/// The formats allowed by the publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedFormats")]
		public string[] AllowedFormats { get; set; }
		
		/// <summary>
		/// For video size type, the list of companion sizes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companionSizes")]
		public TargetingValueSize[] CompanionSizes { get; set; }
		
		/// <summary>
		/// The Creative size type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeSizeType")]
		public string CreativeSizeType { get; set; }
		
		/// <summary>
		/// The native template for native ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativeTemplate")]
		public string NativeTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public TargetingValueSize Size { get; set; }
		
		/// <summary>
		/// The skippable ad type for video size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippableAdType")]
		public string SkippableAdType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetingValueSize
	{
		
		/// <summary>
		/// The height of the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The width of the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetingValueDayPartTargeting
	{
		
		[System.Runtime.Serialization.DataMember(Name="dayParts")]
		public TargetingValueDayPartTargetingDayPart[] DayParts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeZoneType")]
		public string TimeZoneType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetingValueDayPartTargetingDayPart
	{
		
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public string DayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endHour")]
		public System.Nullable<System.Int32> EndHour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endMinute")]
		public System.Nullable<System.Int32> EndMinute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startHour")]
		public System.Nullable<System.Int32> StartHour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startMinute")]
		public System.Nullable<System.Int32> StartMinute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetingValueDemogAgeCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="demogAgeCriteriaIds")]
		public string[] DemogAgeCriteriaIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetingValueDemogGenderCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="demogGenderCriteriaIds")]
		public string[] DemogGenderCriteriaIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetingValueRequestPlatformTargeting
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestPlatforms")]
		public string[] RequestPlatforms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DealTerms
	{
		
		/// <summary>
		/// Visibility of the URL in bid requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandingType")]
		public string BrandingType { get; set; }
		
		/// <summary>
		/// Indicates that this ExternalDealId exists under at least two different AdxInventoryDeals. Currently, the only case that the same ExternalDealId will exist is programmatic cross sell case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossListedExternalDealIdType")]
		public string CrossListedExternalDealIdType { get; set; }
		
		/// <summary>
		/// Description for the proposed terms of the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="estimatedGrossSpend")]
		public Price EstimatedGrossSpend { get; set; }
		
		/// <summary>
		/// Non-binding estimate of the impressions served per day Can be set by buyer or seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedImpressionsPerDay")]
		public string EstimatedImpressionsPerDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guaranteedFixedPriceTerms")]
		public DealTermsGuaranteedFixedPriceTerms GuaranteedFixedPriceTerms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonGuaranteedAuctionTerms")]
		public DealTermsNonGuaranteedAuctionTerms NonGuaranteedAuctionTerms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonGuaranteedFixedPriceTerms")]
		public DealTermsNonGuaranteedFixedPriceTerms NonGuaranteedFixedPriceTerms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rubiconNonGuaranteedTerms")]
		public DealTermsRubiconNonGuaranteedTerms RubiconNonGuaranteedTerms { get; set; }
		
		/// <summary>
		/// For deals with Cost Per Day billing, defines the timezone used to mark the boundaries of a day (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerTimeZone")]
		public string SellerTimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Price
	{
		
		/// <summary>
		/// The price value in micros.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountMicros")]
		public System.Nullable<System.Double> AmountMicros { get; set; }
		
		/// <summary>
		/// The currency code for the price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// In case of CPD deals, the expected CPM in micros.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedCpmMicros")]
		public System.Nullable<System.Double> ExpectedCpmMicros { get; set; }
		
		/// <summary>
		/// The pricing type for the deal/product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricingType")]
		public string PricingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DealTermsGuaranteedFixedPriceTerms
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingInfo")]
		public DealTermsGuaranteedFixedPriceTermsBillingInfo BillingInfo { get; set; }
		
		/// <summary>
		/// Fixed price for the specified buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPrices")]
		public PricePerBuyer[] FixedPrices { get; set; }
		
		/// <summary>
		/// Guaranteed impressions as a percentage. This is the percentage of guaranteed looks that the buyer is guaranteeing to buy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guaranteedImpressions")]
		public string GuaranteedImpressions { get; set; }
		
		/// <summary>
		/// Count of guaranteed looks. Required for deal, optional for product. For CPD deals, buyer changes to guaranteed_looks will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guaranteedLooks")]
		public string GuaranteedLooks { get; set; }
		
		/// <summary>
		/// Count of minimum daily looks for a CPD deal. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumDailyLooks")]
		public string MinimumDailyLooks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DealTermsGuaranteedFixedPriceTermsBillingInfo
	{
		
		/// <summary>
		/// The timestamp (in ms since epoch) when the original reservation price for the deal was first converted to DFP currency. This is used to convert the contracted price into buyer's currency without discrepancy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyConversionTimeMs")]
		public string CurrencyConversionTimeMs { get; set; }
		
		/// <summary>
		/// The DFP line item id associated with this deal. For features like CPD, buyers can retrieve the DFP line item for billing reconciliation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dfpLineItemId")]
		public string DfpLineItemId { get; set; }
		
		/// <summary>
		/// The original contracted quantity (# impressions) for this deal. To ensure delivery, sometimes the publisher will book the deal with a impression buffer, such that guaranteed_looks is greater than the contracted quantity. However clients are billed using the original contracted quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalContractedQuantity")]
		public string OriginalContractedQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
	}
	
	/// <summary>
	/// Used to specify pricing rules for buyers. Each PricePerBuyer in a product can become [0,1] deals. To check if there is a PricePerBuyer for a particular buyer we look for the most specific matching rule - we first look for a rule matching the buyer and otherwise look for a matching rule where no buyer is set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PricePerBuyer
	{
		
		/// <summary>
		/// Optional access type for this buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auctionTier")]
		public string AuctionTier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billedBuyer")]
		public Buyer BilledBuyer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buyer")]
		public Buyer Buyer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Buyer
	{
		
		/// <summary>
		/// Adx account id of the buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DealTermsNonGuaranteedAuctionTerms
	{
		
		/// <summary>
		/// True if open auction buyers are allowed to compete with invited buyers in this private auction (buyer-readonly).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoOptimizePrivateAuction")]
		public System.Nullable<System.Boolean> AutoOptimizePrivateAuction { get; set; }
		
		/// <summary>
		/// Reserve price for the specified buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservePricePerBuyers")]
		public PricePerBuyer[] ReservePricePerBuyers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DealTermsNonGuaranteedFixedPriceTerms
	{
		
		/// <summary>
		/// Fixed price for the specified buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPrices")]
		public PricePerBuyer[] FixedPrices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DealTermsRubiconNonGuaranteedTerms
	{
		
		[System.Runtime.Serialization.DataMember(Name="priorityPrice")]
		public Price PriorityPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="standardPrice")]
		public Price StandardPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOrderDealsResponse
	{
		
		/// <summary>
		/// List of deals added (in the same proposal as passed in the request)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deals")]
		public MarketplaceDeal[] Deals { get; set; }
		
		/// <summary>
		/// The updated revision number for the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevisionNumber")]
		public string ProposalRevisionNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOrderNotesRequest
	{
		
		/// <summary>
		/// The list of notes to add.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public MarketplaceNote[] Notes { get; set; }
	}
	
	/// <summary>
	/// A proposal is associated with a bunch of notes which may optionally be associated with a deal and/or revision number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketplaceNote
	{
		
		/// <summary>
		/// The role of the person (buyer/seller) creating the note. (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorRole")]
		public string CreatorRole { get; set; }
		
		/// <summary>
		/// Notes can optionally be associated with a deal. (readonly, except on create)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealId")]
		public string DealId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#marketplaceNote".
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#marketplaceNote")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#marketplaceNote";
		
		/// <summary>
		/// The actual note to attach. (readonly, except on create)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The unique id for the note. (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noteId")]
		public string NoteId { get; set; }
		
		/// <summary>
		/// The proposalId that a note is attached to. (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalId")]
		public string ProposalId { get; set; }
		
		/// <summary>
		/// If the note is associated with a proposal revision number, then store that here. (readonly, except on create)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevisionNumber")]
		public string ProposalRevisionNumber { get; set; }
		
		/// <summary>
		/// The timestamp (ms since epoch) that this note was created. (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampMs")]
		public string TimestampMs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOrderNotesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public MarketplaceNote[] Notes { get; set; }
	}
	
	/// <summary>
	/// The configuration data for an Ad Exchange billing info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingInfo
	{
		
		/// <summary>
		/// Account id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int32> AccountId { get; set; }
		
		/// <summary>
		/// Account name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// A list of adgroup IDs associated with this particular account. These IDs may show up as part of a realtime bidding BidRequest, which indicates a bid request for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingId")]
		public string[] BillingId { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#billingInfo")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#billingInfo";
	}
	
	/// <summary>
	/// A billing info feed lists Billing Info the Ad Exchange buyer account has access to. Each entry in the feed corresponds to a single billing info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingInfoList
	{
		
		/// <summary>
		/// A list of billing info relevant for your account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BillingInfo[] Items { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#billingInfoList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#billingInfoList";
	}
	
	/// <summary>
	/// The configuration data for Ad Exchange RTB - Budget API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Budget
	{
		
		/// <summary>
		/// The id of the account. This is required for get and update requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The billing id to determine which adgroup to provide budget information for. This is required for get and update requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingId")]
		public string BillingId { get; set; }
		
		/// <summary>
		/// The daily budget amount in unit amount of the account currency to apply for the billingId provided. This is required for update requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetAmount")]
		public string BudgetAmount { get; set; }
		
		/// <summary>
		/// The currency code for the buyer. This cannot be altered here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The unique id that describes this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of the resource, i.e. "adexchangebuyer#budget".
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#budget")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#budget";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOrdersRequest
	{
		
		/// <summary>
		/// The list of proposals to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposals")]
		public Proposal[] Proposals { get; set; }
		
		/// <summary>
		/// Web property id of the seller creating these orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyCode")]
		public string WebPropertyCode { get; set; }
	}
	
	/// <summary>
	/// Represents a proposal in the marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Each field in a proposal can have one of the following setting:
	///
	///(readonly) - It is an error to try and set this field. (buyer-readonly) - Only the seller can set this field. (seller-readonly) - Only the buyer can set this field. (updatable) - The field is updatable at all times by either buyer or the seller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Proposal
	{
		
		[System.Runtime.Serialization.DataMember(Name="billedBuyer")]
		public Buyer BilledBuyer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buyer")]
		public Buyer Buyer { get; set; }
		
		/// <summary>
		/// Optional contact information of the buyer. (seller-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerContacts")]
		public ContactInformation[] BuyerContacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buyerPrivateData")]
		public PrivateData BuyerPrivateData { get; set; }
		
		/// <summary>
		/// IDs of DBM advertisers permission to this proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dbmAdvertiserIds")]
		public string[] DbmAdvertiserIds { get; set; }
		
		/// <summary>
		/// When an proposal is in an accepted state, indicates whether the buyer has signed off. Once both sides have signed off on a deal, the proposal can be finalized by the seller. (seller-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasBuyerSignedOff")]
		public System.Nullable<System.Boolean> HasBuyerSignedOff { get; set; }
		
		/// <summary>
		/// When an proposal is in an accepted state, indicates whether the buyer has signed off Once both sides have signed off on a deal, the proposal can be finalized by the seller. (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasSellerSignedOff")]
		public System.Nullable<System.Boolean> HasSellerSignedOff { get; set; }
		
		/// <summary>
		/// What exchange will provide this inventory (readonly, except on create).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySource")]
		public string InventorySource { get; set; }
		
		/// <summary>
		/// True if the proposal is being renegotiated (readonly).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRenegotiating")]
		public System.Nullable<System.Boolean> IsRenegotiating { get; set; }
		
		/// <summary>
		/// True, if the buyside inventory setup is complete for this proposal. (readonly, except via OrderSetupCompleted action) Deprecated in favor of deal level setup complete flag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSetupComplete")]
		public System.Nullable<System.Boolean> IsSetupComplete { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#proposal".
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#proposal")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#proposal";
		
		/// <summary>
		/// List of labels associated with the proposal. (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public MarketplaceLabel[] Labels { get; set; }
		
		/// <summary>
		/// The role of the last user that either updated the proposal or left a comment. (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterOrCommentorRole")]
		public string LastUpdaterOrCommentorRole { get; set; }
		
		/// <summary>
		/// The name for the proposal (updatable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional negotiation id if this proposal is a preferred deal proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negotiationId")]
		public string NegotiationId { get; set; }
		
		/// <summary>
		/// Indicates whether the buyer/seller created the proposal.(readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorRole")]
		public string OriginatorRole { get; set; }
		
		/// <summary>
		/// Optional private auction id if this proposal is a private auction proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateAuctionId")]
		public string PrivateAuctionId { get; set; }
		
		/// <summary>
		/// The unique id of the proposal. (readonly).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalId")]
		public string ProposalId { get; set; }
		
		/// <summary>
		/// The current state of the proposal. (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalState")]
		public string ProposalState { get; set; }
		
		/// <summary>
		/// The revision number for the proposal (readonly).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionNumber")]
		public string RevisionNumber { get; set; }
		
		/// <summary>
		/// The time (ms since epoch) when the proposal was last revised (readonly).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionTimeMs")]
		public string RevisionTimeMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public Seller Seller { get; set; }
		
		/// <summary>
		/// Optional contact information of the seller (buyer-readonly).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerContacts")]
		public ContactInformation[] SellerContacts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketplaceLabel
	{
		
		/// <summary>
		/// The accountId of the party that created the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The creation time (in ms since epoch) for the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTimeMs")]
		public string CreateTimeMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deprecatedMarketplaceDealParty")]
		public MarketplaceDealParty DeprecatedMarketplaceDealParty { get; set; }
		
		/// <summary>
		/// The label to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketplaceDealParty
	{
		
		[System.Runtime.Serialization.DataMember(Name="buyer")]
		public Buyer Buyer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public Seller Seller { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Seller
	{
		
		/// <summary>
		/// The unique id for the seller. The seller fills in this field. The seller account id is then available to buyer in the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Optional sub-account id for the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subAccountId")]
		public string SubAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOrdersResponse
	{
		
		/// <summary>
		/// The list of proposals successfully created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposals")]
		public Proposal[] Proposals { get; set; }
	}
	
	/// <summary>
	/// A creative and its classification data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Creative
	{
		
		/// <summary>
		/// The HTML snippet that displays the ad when inserted in the web page. If set, videoURL, videoVastXML, and nativeAd should not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HTMLSnippet { get; set; }
		
		/// <summary>
		/// Account id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int32> AccountId { get; set; }
		
		/// <summary>
		/// The link to the Ad Preferences page. This is only supported for native ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adChoicesDestinationUrl")]
		public string AdChoicesDestinationUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adTechnologyProviders")]
		public CreativeAdTechnologyProviders AdTechnologyProviders { get; set; }
		
		/// <summary>
		/// Detected advertiser id, if any. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string[] AdvertiserId { get; set; }
		
		/// <summary>
		/// The name of the company being advertised in the creative. A list of advertisers is provided in the advertisers.txt file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserName")]
		public string AdvertiserName { get; set; }
		
		/// <summary>
		/// The agency id for this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyId")]
		public string AgencyId { get; set; }
		
		/// <summary>
		/// The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiUploadTimestamp")]
		public System.Nullable<System.DateTimeOffset> ApiUploadTimestamp { get; set; }
		
		/// <summary>
		/// List of buyer selectable attributes for the ads that may be shown from this snippet. Each attribute is represented by an integer as defined in  buyer-declarable-creative-attributes.txt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public int[] Attribute { get; set; }
		
		/// <summary>
		/// A buyer-specific id identifying the creative in this ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerCreativeId")]
		public string BuyerCreativeId { get; set; }
		
		/// <summary>
		/// The set of destination urls for the snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrl")]
		public string[] ClickThroughUrl { get; set; }
		
		/// <summary>
		/// Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corrections")]
		public CreativeCorrections[] CreativeCorrections { get; set; }
		
		/// <summary>
		/// Creative status identity type that the creative item applies to. Ad Exchange real-time bidding is migrating to the sizeless creative verification. Originally, Ad Exchange assigned creative verification status to a unique combination of a buyer creative ID and creative dimensions. Post-migration, a single verification status will be assigned at the buyer creative ID level. This field allows to distinguish whether a given creative status applies to a unique combination of a buyer creative ID and creative dimensions, or to a buyer creative ID as a whole.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeStatusIdentityType")]
		public string CreativeStatusIdentityType { get; set; }
		
		/// <summary>
		/// Top-level deals status. Read-only. This field should not be set in requests. If disapproved, an entry for auctionType=DIRECT_DEALS (or ALL) in servingRestrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case it may be preferable to read from servingRestrictions directly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealsStatus")]
		public string DealsStatus { get; set; }
		
		/// <summary>
		/// Detected domains for this creative. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedDomains")]
		public string[] DetectedDomains { get; set; }
		
		/// <summary>
		/// The filtering reasons for the creative. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteringReasons")]
		public CreativeFilteringReasons FilteringReasons { get; set; }
		
		/// <summary>
		/// Ad height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The set of urls to be called to record an impression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionTrackingUrl")]
		public string[] ImpressionTrackingUrl { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#creative")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#creative";
		
		/// <summary>
		/// Detected languages for this creative. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// If nativeAd is set, HTMLSnippet, videoVastXML, and the videoURL outside of nativeAd should not be set. (The videoURL inside nativeAd can be set.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativeAd")]
		public CreativeNativeAd NativeAd { get; set; }
		
		/// <summary>
		/// Top-level open auction status. Read-only. This field should not be set in requests. If disapproved, an entry for auctionType=OPEN_AUCTION (or ALL) in servingRestrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case it may be preferable to read from ServingRestrictions directly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openAuctionStatus")]
		public string OpenAuctionStatus { get; set; }
		
		/// <summary>
		/// Detected product categories, if any. Each category is represented by an integer as defined in  ad-product-categories.txt. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategories")]
		public int[] ProductCategories { get; set; }
		
		/// <summary>
		/// All restricted categories for the ads that may be shown from this snippet. Each category is represented by an integer as defined in the  ad-restricted-categories.txt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictedCategories")]
		public int[] RestrictedCategories { get; set; }
		
		/// <summary>
		/// Detected sensitive categories, if any. Each category is represented by an integer as defined in  ad-sensitive-categories.txt. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sensitiveCategories")]
		public int[] SensitiveCategories { get; set; }
		
		/// <summary>
		/// The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS vs HTTP request, or the type of auction). Read-only. This field should not be set in requests. See the examples in the Creatives guide for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servingRestrictions")]
		public CreativeServingRestrictions[] CreativeServingRestrictions { get; set; }
		
		/// <summary>
		/// List of vendor types for the ads that may be shown from this snippet. Each vendor type is represented by an integer as defined in vendors.txt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorType")]
		public int[] VendorType { get; set; }
		
		/// <summary>
		/// The version for this creative. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// The URL to fetch a video ad. If set, HTMLSnippet, videoVastXML, and nativeAd should not be set. Note, this is different from resource.native_ad.video_url above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoURL")]
		public string VideoURL { get; set; }
		
		/// <summary>
		/// The contents of a VAST document for a video ad. This document should conform to the VAST 2.0 or 3.0 standard. If set, HTMLSnippet, videoURL, and nativeAd and should not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoVastXML")]
		public string VideoVastXML { get; set; }
		
		/// <summary>
		/// Ad width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class CreativeAdTechnologyProviders
	{
		
		/// <summary>
		/// The detected ad technology provider IDs for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a privacy policy URL, and a list of domains which can be attributed to the provider. If this creative contains provider IDs that are outside of those listed in the `BidRequest.adslot.consented_providers_settings.consented_providers` field on the  Authorized Buyers Real-Time Bidding protocol or the `BidRequest.user.ext.consented_providers_settings.consented_providers` field on the OpenRTB protocol, a bid submitted for a European Economic Area (EEA) user with this creative is not compliant with the GDPR policies as mentioned in the "Third-party Ad Technology Vendors" section of Authorized Buyers Program Guidelines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedProviderIds")]
		public string[] DetectedProviderIds { get; set; }
		
		/// <summary>
		/// Whether the creative contains an unidentified ad technology provider. If true, a bid submitted for a European Economic Area (EEA) user with this creative is not compliant with the GDPR policies as mentioned in the "Third-party Ad Technology Vendors" section of Authorized Buyers Program Guidelines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasUnidentifiedProvider")]
		public System.Nullable<System.Boolean> HasUnidentifiedProvider { get; set; }
	}
	
	public class CreativeCorrections
	{
		
		/// <summary>
		/// All known serving contexts containing serving status information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contexts")]
		public CreativeCorrectionsContexts[] CreativeCorrectionsContexts { get; set; }
		
		/// <summary>
		/// Additional details about the correction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// The type of correction that was applied to the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public class CreativeCorrectionsContexts
	{
		
		/// <summary>
		/// Only set when contextType=AUCTION_TYPE. Represents the auction types this correction applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auctionType")]
		public string[] AuctionType { get; set; }
		
		/// <summary>
		/// The type of context (e.g., location, platform, auction type, SSL-ness).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextType")]
		public string ContextType { get; set; }
		
		/// <summary>
		/// Only set when contextType=LOCATION. Represents the geo criterias this correction applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCriteriaId")]
		public int[] GeoCriteriaId { get; set; }
		
		/// <summary>
		/// Only set when contextType=PLATFORM. Represents the platforms this correction applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string[] Platform { get; set; }
	}
	
	public class CreativeFilteringReasons
	{
		
		/// <summary>
		/// The date in ISO 8601 format for the data. The data is collected from 00:00:00 to 23:59:59 in PST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// The filtering reasons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasons")]
		public CreativeFilteringReasonsReasons[] CreativeFilteringReasonsReasons { get; set; }
	}
	
	public class CreativeFilteringReasonsReasons
	{
		
		/// <summary>
		/// The number of times the creative was filtered for the status. The count is aggregated across all publishers on the exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteringCount")]
		public string FilteringCount { get; set; }
		
		/// <summary>
		/// The filtering status code as defined in  creative-status-codes.txt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteringStatus")]
		public System.Nullable<System.Int32> FilteringStatus { get; set; }
	}
	
	public class CreativeNativeAd
	{
		
		[System.Runtime.Serialization.DataMember(Name="advertiser")]
		public string Advertiser { get; set; }
		
		/// <summary>
		/// The app icon, for app download ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appIcon")]
		public CreativeNativeAdAppIcon AppIcon { get; set; }
		
		/// <summary>
		/// A long description of the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// A label for the button that the user is supposed to click.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callToAction")]
		public string CallToAction { get; set; }
		
		/// <summary>
		/// The URL that the browser/SDK will load when the user clicks the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickLinkUrl")]
		public string ClickLinkUrl { get; set; }
		
		/// <summary>
		/// The URL to use for click tracking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickTrackingUrl")]
		public string ClickTrackingUrl { get; set; }
		
		/// <summary>
		/// A short title for the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public string Headline { get; set; }
		
		/// <summary>
		/// A large image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public CreativeNativeAdImage Image { get; set; }
		
		/// <summary>
		/// The URLs are called when the impression is rendered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionTrackingUrl")]
		public string[] ImpressionTrackingUrl { get; set; }
		
		/// <summary>
		/// A smaller image, for the advertiser logo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public CreativeNativeAdLogo Logo { get; set; }
		
		/// <summary>
		/// The price of the promoted app including the currency info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		/// <summary>
		/// The app rating in the app store. Must be in the range [0-5].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starRating")]
		public System.Nullable<System.Double> StarRating { get; set; }
		
		/// <summary>
		/// The URL of the XML VAST for a native ad. Note this is a separate field from resource.video_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoURL")]
		public string VideoURL { get; set; }
	}
	
	public class CreativeNativeAdAppIcon
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class CreativeNativeAdImage
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class CreativeNativeAdLogo
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class CreativeServingRestrictions
	{
		
		/// <summary>
		/// All known contexts/restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contexts")]
		public CreativeServingRestrictionsContexts[] CreativeServingRestrictionsContexts { get; set; }
		
		/// <summary>
		/// The reasons for disapproval within this restriction, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED or CONDITIONALLY_APPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapprovalReasons")]
		public CreativeServingRestrictionsDisapprovalReasons[] CreativeServingRestrictionsDisapprovalReasons { get; set; }
		
		/// <summary>
		/// Why the creative is ineligible to serve in this context (e.g., it has been explicitly disapproved or is pending review).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public class CreativeServingRestrictionsContexts
	{
		
		/// <summary>
		/// Only set when contextType=AUCTION_TYPE. Represents the auction types this restriction applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auctionType")]
		public string[] AuctionType { get; set; }
		
		/// <summary>
		/// The type of context (e.g., location, platform, auction type, SSL-ness).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextType")]
		public string ContextType { get; set; }
		
		/// <summary>
		/// Only set when contextType=LOCATION. Represents the geo criterias this restriction applies to. Impressions are considered to match a context if either the user location or publisher location matches a given geoCriteriaId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCriteriaId")]
		public int[] GeoCriteriaId { get; set; }
		
		/// <summary>
		/// Only set when contextType=PLATFORM. Represents the platforms this restriction applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string[] Platform { get; set; }
	}
	
	public class CreativeServingRestrictionsDisapprovalReasons
	{
		
		/// <summary>
		/// Additional details about the reason for disapproval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// The categorized reason for disapproval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// The external deal ids associated with a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreativeDealIds
	{
		
		/// <summary>
		/// A list of external deal ids and ARC approval status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealStatuses")]
		public CreativeDealIdsDealStatuses[] CreativeDealIdsDealStatuses { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#creativeDealIds")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#creativeDealIds";
	}
	
	public class CreativeDealIdsDealStatuses
	{
		
		/// <summary>
		/// ARC approval status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arcStatus")]
		public string ArcStatus { get; set; }
		
		/// <summary>
		/// External deal ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealId")]
		public string DealId { get; set; }
		
		/// <summary>
		/// Publisher ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public System.Nullable<System.Int32> WebPropertyId { get; set; }
	}
	
	/// <summary>
	/// The creatives feed lists the active creatives for the Ad Exchange buyer accounts that the user has access to. Each entry in the feed corresponds to a single creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreativesList
	{
		
		/// <summary>
		/// A list of creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Creative[] Items { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#creativesList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#creativesList";
		
		/// <summary>
		/// Continuation token used to page through creatives. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOrderDealsRequest
	{
		
		/// <summary>
		/// List of deals to delete for a given proposal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealIds")]
		public string[] DealIds { get; set; }
		
		/// <summary>
		/// The last known proposal revision number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevisionNumber")]
		public string ProposalRevisionNumber { get; set; }
		
		/// <summary>
		/// Indicates an optional action to take on the proposal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateAction")]
		public string UpdateAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOrderDealsResponse
	{
		
		/// <summary>
		/// List of deals deleted (in the same proposal as passed in the request)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deals")]
		public MarketplaceDeal[] Deals { get; set; }
		
		/// <summary>
		/// The updated revision number for the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevisionNumber")]
		public string ProposalRevisionNumber { get; set; }
	}
	
	/// <summary>
	/// This message carries publisher provided breakdown. E.g. {dimension_type: 'COUNTRY', [{dimension_value: {id: 1, name: 'US'}}, {dimension_value: {id: 2, name: 'UK'}}]}
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dimension
	{
		
		[System.Runtime.Serialization.DataMember(Name="dimensionType")]
		public string DimensionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dimensionValues")]
		public DimensionDimensionValue[] DimensionValues { get; set; }
	}
	
	/// <summary>
	/// Value of the dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DimensionDimensionValue
	{
		
		/// <summary>
		/// Id of the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the dimension mainly for debugging purposes, except for the case of CREATIVE_SIZE. For CREATIVE_SIZE, strings are used instead of ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Percent of total impressions for a dimension type. e.g. {dimension_type: 'GENDER', [{dimension_value: {id: 1, name: 'MALE', percentage: 60}}]} Gender MALE is 60% of all impressions which have gender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Int32> Percentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EditAllOrderDealsRequest
	{
		
		/// <summary>
		/// List of deals to edit. Service may perform 3 different operations based on comparison of deals in this list vs deals already persisted in database: 1. Add new deal to proposal If a deal in this list does not exist in the proposal, the service will create a new deal and add it to the proposal. Validation will follow AddOrderDealsRequest. 2. Update existing deal in the proposal If a deal in this list already exist in the proposal, the service will update that existing deal to this new deal in the request. Validation will follow UpdateOrderDealsRequest. 3. Delete deals from the proposal (just need the id) If a existing deal in the proposal is not present in this list, the service will delete that deal from the proposal. Validation will follow DeleteOrderDealsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deals")]
		public MarketplaceDeal[] Deals { get; set; }
		
		/// <summary>
		/// Represents a proposal in the marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Each field in a proposal can have one of the following setting:
		///
		///(readonly) - It is an error to try and set this field. (buyer-readonly) - Only the seller can set this field. (seller-readonly) - Only the buyer can set this field. (updatable) - The field is updatable at all times by either buyer or the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposal")]
		public Proposal Proposal { get; set; }
		
		/// <summary>
		/// The last known revision number for the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevisionNumber")]
		public string ProposalRevisionNumber { get; set; }
		
		/// <summary>
		/// Indicates an optional action to take on the proposal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateAction")]
		public string UpdateAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EditAllOrderDealsResponse
	{
		
		/// <summary>
		/// List of all deals in the proposal after edit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deals")]
		public MarketplaceDeal[] Deals { get; set; }
		
		/// <summary>
		/// The latest revision number after the update has been applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderRevisionNumber")]
		public string OrderRevisionNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOffersResponse
	{
		
		/// <summary>
		/// The returned list of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public Product[] Products { get; set; }
	}
	
	/// <summary>
	/// A product is segment of inventory that a seller wishes to sell. It is associated with certain terms and targeting information which helps buyer know more about the inventory. Each field in a product can have one of the following setting:
	///
	///(readonly) - It is an error to try and set this field. (buyer-readonly) - Only the seller can set this field. (seller-readonly) - Only the buyer can set this field. (updatable) - The field is updatable at all times by either buyer or the seller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Product
	{
		
		[System.Runtime.Serialization.DataMember(Name="billedBuyer")]
		public Buyer BilledBuyer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buyer")]
		public Buyer Buyer { get; set; }
		
		/// <summary>
		/// Creation time in ms. since epoch (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTimeMs")]
		public string CreationTimeMs { get; set; }
		
		/// <summary>
		/// Optional contact information for the creator of this product. (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorContacts")]
		public ContactInformation[] CreatorContacts { get; set; }
		
		/// <summary>
		/// The role that created the offer. Set to BUYER for buyer initiated offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorRole")]
		public string CreatorRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryControl")]
		public DeliveryControl DeliveryControl { get; set; }
		
		/// <summary>
		/// The proposed end time for the deal (ms since epoch) (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightEndTimeMs")]
		public string FlightEndTimeMs { get; set; }
		
		/// <summary>
		/// Inventory availability dates. (times are in ms since epoch) The granularity is generally in the order of seconds. (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightStartTimeMs")]
		public string FlightStartTimeMs { get; set; }
		
		/// <summary>
		/// If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasCreatorSignedOff")]
		public System.Nullable<System.Boolean> HasCreatorSignedOff { get; set; }
		
		/// <summary>
		/// What exchange will provide this inventory (readonly, except on create).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySource")]
		public string InventorySource { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#product".
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#product")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#product";
		
		/// <summary>
		/// Optional List of labels for the product (optional, buyer-readonly).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public MarketplaceLabel[] Labels { get; set; }
		
		/// <summary>
		/// Time of last update in ms. since epoch (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTimeMs")]
		public string LastUpdateTimeMs { get; set; }
		
		/// <summary>
		/// Optional legacy offer id if this offer is a preferred deal offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyOfferId")]
		public string LegacyOfferId { get; set; }
		
		/// <summary>
		/// Marketplace publisher profile Id. This Id differs from the regular publisher_profile_id in that 1. This is a new id, the old Id will be deprecated in 2017. 2. This id uniquely identifies a publisher profile by itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketplacePublisherProfileId")]
		public string MarketplacePublisherProfileId { get; set; }
		
		/// <summary>
		/// The name for this product as set by the seller. (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional private auction id if this offer is a private auction offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateAuctionId")]
		public string PrivateAuctionId { get; set; }
		
		/// <summary>
		/// The unique id for the product (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Id of the publisher profile for a given seller. A (seller.account_id, publisher_profile_id) pair uniquely identifies a publisher profile. Buyers can call the PublisherProfiles::List endpoint to get a list of publisher profiles for a given seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherProfileId")]
		public string PublisherProfileId { get; set; }
		
		/// <summary>
		/// This message carries publisher provided forecasting information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherProvidedForecast")]
		public PublisherProvidedForecast PublisherProvidedForecast { get; set; }
		
		/// <summary>
		/// The revision number of the product. (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionNumber")]
		public string RevisionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public Seller Seller { get; set; }
		
		/// <summary>
		/// Targeting that is shared between the buyer and the seller. Each targeting criteria has a specified key and for each key there is a list of inclusion value or exclusion values. (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedTargetings")]
		public SharedTargeting[] SharedTargetings { get; set; }
		
		/// <summary>
		/// The state of the product. (buyer-readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The syndication product associated with the deal. (readonly, except on create)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syndicationProduct")]
		public string SyndicationProduct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="terms")]
		public DealTerms Terms { get; set; }
		
		/// <summary>
		/// The web property code for the seller. This field is meant to be copied over as is when creating deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyCode")]
		public string WebPropertyCode { get; set; }
	}
	
	/// <summary>
	/// This message carries publisher provided forecasting information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublisherProvidedForecast
	{
		
		/// <summary>
		/// Publisher provided dimensions. E.g. geo, sizes etc...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Publisher provided weekly impressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyImpressions")]
		public string WeeklyImpressions { get; set; }
		
		/// <summary>
		/// Publisher provided weekly uniques.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyUniques")]
		public string WeeklyUniques { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrderDealsResponse
	{
		
		/// <summary>
		/// List of deals for the proposal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deals")]
		public MarketplaceDeal[] Deals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrderNotesResponse
	{
		
		/// <summary>
		/// The list of matching notes. The notes for a proposal are ordered from oldest to newest. If the notes span multiple proposals, they will be grouped by proposal, with the notes for the most recently modified proposal appearing first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public MarketplaceNote[] Notes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrdersResponse
	{
		
		/// <summary>
		/// The list of matching proposals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposals")]
		public Proposal[] Proposals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPublisherProfilesByAccountIdResponse
	{
		
		/// <summary>
		/// Profiles for the requested publisher
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profiles")]
		public PublisherProfileApiProto[] Profiles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublisherProfileApiProto
	{
		
		/// <summary>
		/// Publisher provided info on its audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audience")]
		public string Audience { get; set; }
		
		/// <summary>
		/// A pitch statement for the buyer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerPitchStatement")]
		public string BuyerPitchStatement { get; set; }
		
		/// <summary>
		/// Direct contact for the publisher profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directContact")]
		public string DirectContact { get; set; }
		
		/// <summary>
		/// Exchange where this publisher profile is from. E.g. AdX, Rubicon etc...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public string Exchange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forecastInventory")]
		public string ForecastInventory { get; set; }
		
		/// <summary>
		/// Link to publisher's Google+ page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googlePlusLink")]
		public string GooglePlusLink { get; set; }
		
		/// <summary>
		/// True, if this is the parent profile, which represents all domains owned by the publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isParent")]
		public System.Nullable<System.Boolean> IsParent { get; set; }
		
		/// <summary>
		/// True, if this profile is published. Deprecated for state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublished")]
		public System.Nullable<System.Boolean> IsPublished { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#publisherProfileApiProto".
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#publisherProfileApiProto")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#publisherProfileApiProto";
		
		/// <summary>
		/// The url to the logo for the publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logoUrl")]
		public string LogoUrl { get; set; }
		
		/// <summary>
		/// The url for additional marketing and sales materials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaKitLink")]
		public string MediaKitLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Publisher provided overview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
		
		/// <summary>
		/// The pair of (seller.account_id, profile_id) uniquely identifies a publisher profile for a given publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public System.Nullable<System.Int32> ProfileId { get; set; }
		
		/// <summary>
		/// Programmatic contact for the publisher profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programmaticContact")]
		public string ProgrammaticContact { get; set; }
		
		/// <summary>
		/// The list of app IDs represented in this publisher profile. Empty if this is a parent profile. Deprecated in favor of publisher_app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherAppIds")]
		public string[] PublisherAppIds { get; set; }
		
		/// <summary>
		/// The list of apps represented in this publisher profile. Empty if this is a parent profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherApps")]
		public MobileApplication[] PublisherApps { get; set; }
		
		/// <summary>
		/// The list of domains represented in this publisher profile. Empty if this is a parent profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherDomains")]
		public string[] PublisherDomains { get; set; }
		
		/// <summary>
		/// Unique Id for publisher profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherProfileId")]
		public string PublisherProfileId { get; set; }
		
		/// <summary>
		/// This message carries publisher provided forecasting information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherProvidedForecast")]
		public PublisherProvidedForecast PublisherProvidedForecast { get; set; }
		
		/// <summary>
		/// Link to publisher rate card
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateCardInfoLink")]
		public string RateCardInfoLink { get; set; }
		
		/// <summary>
		/// Link for a sample content page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplePageLink")]
		public string SamplePageLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public Seller Seller { get; set; }
		
		/// <summary>
		/// State of the publisher profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Publisher provided key metrics and rankings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topHeadlines")]
		public string[] TopHeadlines { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MobileApplication
	{
		
		[System.Runtime.Serialization.DataMember(Name="appStore")]
		public string AppStore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalAppId")]
		public string ExternalAppId { get; set; }
	}
	
	/// <summary>
	/// The configuration data for an Ad Exchange performance report list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerformanceReport
	{
		
		/// <summary>
		/// The number of bid responses with an ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidRate")]
		public System.Nullable<System.Double> BidRate { get; set; }
		
		/// <summary>
		/// The number of bid requests sent to your bidder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidRequestRate")]
		public System.Nullable<System.Double> BidRequestRate { get; set; }
		
		/// <summary>
		/// Rate of various prefiltering statuses per match. Please refer to the callout-status-codes.txt file for different statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calloutStatusRate")]
		public string[] CalloutStatusRate { get; set; }
		
		/// <summary>
		/// Average QPS for cookie matcher operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieMatcherStatusRate")]
		public string[] CookieMatcherStatusRate { get; set; }
		
		/// <summary>
		/// Rate of ads with a given status. Please refer to the creative-status-codes.txt file for different statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeStatusRate")]
		public string[] CreativeStatusRate { get; set; }
		
		/// <summary>
		/// The number of bid responses that were filtered due to a policy violation or other errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteredBidRate")]
		public System.Nullable<System.Double> FilteredBidRate { get; set; }
		
		/// <summary>
		/// Average QPS for hosted match operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostedMatchStatusRate")]
		public string[] HostedMatchStatusRate { get; set; }
		
		/// <summary>
		/// The number of potential queries based on your pretargeting settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryMatchRate")]
		public System.Nullable<System.Double> InventoryMatchRate { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#performanceReport")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#performanceReport";
		
		/// <summary>
		/// The 50th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency50thPercentile")]
		public System.Nullable<System.Double> Latency50thPercentile { get; set; }
		
		/// <summary>
		/// The 85th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency85thPercentile")]
		public System.Nullable<System.Double> Latency85thPercentile { get; set; }
		
		/// <summary>
		/// The 95th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency95thPercentile")]
		public System.Nullable<System.Double> Latency95thPercentile { get; set; }
		
		/// <summary>
		/// Rate of various quota account statuses per quota check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noQuotaInRegion")]
		public System.Nullable<System.Double> NoQuotaInRegion { get; set; }
		
		/// <summary>
		/// Rate of various quota account statuses per quota check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outOfQuota")]
		public System.Nullable<System.Double> OutOfQuota { get; set; }
		
		/// <summary>
		/// Average QPS for pixel match requests from clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pixelMatchRequests")]
		public System.Nullable<System.Double> PixelMatchRequests { get; set; }
		
		/// <summary>
		/// Average QPS for pixel match responses from clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pixelMatchResponses")]
		public System.Nullable<System.Double> PixelMatchResponses { get; set; }
		
		/// <summary>
		/// The configured quota limits for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaConfiguredLimit")]
		public System.Nullable<System.Double> QuotaConfiguredLimit { get; set; }
		
		/// <summary>
		/// The throttled quota limits for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaThrottledLimit")]
		public System.Nullable<System.Double> QuotaThrottledLimit { get; set; }
		
		/// <summary>
		/// The trading location of this data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// The number of properly formed bid responses received by our servers within the deadline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successfulRequestRate")]
		public System.Nullable<System.Double> SuccessfulRequestRate { get; set; }
		
		/// <summary>
		/// The unix timestamp of the starting time of this performance data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The number of bid responses that were unsuccessful due to timeouts, incorrect formatting, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsuccessfulRequestRate")]
		public System.Nullable<System.Double> UnsuccessfulRequestRate { get; set; }
	}
	
	/// <summary>
	/// The configuration data for an Ad Exchange performance report list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerformanceReportList
	{
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#performanceReportList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#performanceReportList";
		
		/// <summary>
		/// A list of performance reports relevant for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceReport")]
		public PerformanceReport[] PerformanceReport { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PretargetingConfig
	{
		
		/// <summary>
		/// The id for billing purposes, provided for reference. Leave this field blank for insert requests; the id will be generated automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingId")]
		public string BillingId { get; set; }
		
		/// <summary>
		/// The config id; generated automatically. Leave this field blank for insert requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		/// <summary>
		/// The name of the config. Must be unique. Required for all requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configName")]
		public string ConfigName { get; set; }
		
		/// <summary>
		/// List must contain exactly one of PRETARGETING_CREATIVE_TYPE_HTML or PRETARGETING_CREATIVE_TYPE_VIDEO.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeType")]
		public string[] CreativeType { get; set; }
		
		/// <summary>
		/// Requests which allow one of these (width, height) pairs will match. All pairs must be supported ad dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public PretargetingConfigDimensions[] PretargetingConfigDimensions { get; set; }
		
		/// <summary>
		/// Requests with any of these content labels will not match. Values are from content-labels.txt in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedContentLabels")]
		public string[] ExcludedContentLabels { get; set; }
		
		/// <summary>
		/// Requests containing any of these geo criteria ids will not match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedGeoCriteriaIds")]
		public string[] ExcludedGeoCriteriaIds { get; set; }
		
		/// <summary>
		/// Requests containing any of these placements will not match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedPlacements")]
		public PretargetingConfigExcludedPlacements[] PretargetingConfigExcludedPlacements { get; set; }
		
		/// <summary>
		/// Requests containing any of these users list ids will not match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedUserLists")]
		public string[] ExcludedUserLists { get; set; }
		
		/// <summary>
		/// Requests containing any of these vertical ids will not match. Values are from the publisher-verticals.txt file in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedVerticals")]
		public string[] ExcludedVerticals { get; set; }
		
		/// <summary>
		/// Requests containing any of these geo criteria ids will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCriteriaIds")]
		public string[] GeoCriteriaIds { get; set; }
		
		/// <summary>
		/// Whether this config is active. Required for all requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// The kind of the resource, i.e. "adexchangebuyer#pretargetingConfig".
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#pretargetingConfig")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#pretargetingConfig";
		
		/// <summary>
		/// Request containing any of these language codes will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The maximum QPS allocated to this pretargeting configuration, used for pretargeting-level QPS limits. By default, this is not set, which indicates that there is no QPS limit at the configuration level (a global or account-level limit may still be imposed).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumQps")]
		public string MaximumQps { get; set; }
		
		/// <summary>
		/// Requests where the predicted viewability is below the specified decile will not match. E.g. if the buyer sets this value to 5, requests from slots where the predicted viewability is below 50% will not match. If the predicted viewability is unknown this field will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumViewabilityDecile")]
		public System.Nullable<System.Int32> MinimumViewabilityDecile { get; set; }
		
		/// <summary>
		/// Requests containing any of these mobile carrier ids will match. Values are from mobile-carriers.csv in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileCarriers")]
		public string[] MobileCarriers { get; set; }
		
		/// <summary>
		/// Requests containing any of these mobile device ids will match. Values are from mobile-devices.csv in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileDevices")]
		public string[] MobileDevices { get; set; }
		
		/// <summary>
		/// Requests containing any of these mobile operating system version ids will match. Values are from mobile-os.csv in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileOperatingSystemVersions")]
		public string[] MobileOperatingSystemVersions { get; set; }
		
		/// <summary>
		/// Requests containing any of these placements will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placements")]
		public PretargetingConfigPlacements[] PretargetingConfigPlacements { get; set; }
		
		/// <summary>
		/// Requests matching any of these platforms will match. Possible values are PRETARGETING_PLATFORM_MOBILE, PRETARGETING_PLATFORM_DESKTOP, and PRETARGETING_PLATFORM_TABLET.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platforms")]
		public string[] Platforms { get; set; }
		
		/// <summary>
		/// Creative attributes should be declared here if all creatives corresponding to this pretargeting configuration have that creative attribute. Values are from pretargetable-creative-attributes.txt in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedCreativeAttributes")]
		public string[] SupportedCreativeAttributes { get; set; }
		
		/// <summary>
		/// Requests containing the specified type of user data will match. Possible values are HOSTED_MATCH_DATA, which means the request is cookie-targetable and has a match in the buyer's hosted match table, and COOKIE_OR_IDFA, which means the request has either a targetable cookie or an iOS IDFA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIdentifierDataRequired")]
		public string[] UserIdentifierDataRequired { get; set; }
		
		/// <summary>
		/// Requests containing any of these user list ids will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userLists")]
		public string[] UserLists { get; set; }
		
		/// <summary>
		/// Requests that allow any of these vendor ids will match. Values are from vendors.txt in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorTypes")]
		public string[] VendorTypes { get; set; }
		
		/// <summary>
		/// Requests containing any of these vertical ids will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticals")]
		public string[] Verticals { get; set; }
		
		/// <summary>
		/// Video requests satisfying any of these player size constraints will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoPlayerSizes")]
		public PretargetingConfigVideoPlayerSizes[] PretargetingConfigVideoPlayerSizes { get; set; }
	}
	
	public class PretargetingConfigDimensions
	{
		
		/// <summary>
		/// Height in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public string Height { get; set; }
		
		/// <summary>
		/// Width in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public string Width { get; set; }
	}
	
	public class PretargetingConfigExcludedPlacements
	{
		
		/// <summary>
		/// The value of the placement. Interpretation depends on the placement type, e.g. URL for a site placement, channel name for a channel placement, app id for a mobile app placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of the placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PretargetingConfigPlacements
	{
		
		/// <summary>
		/// The value of the placement. Interpretation depends on the placement type, e.g. URL for a site placement, channel name for a channel placement, app id for a mobile app placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of the placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PretargetingConfigVideoPlayerSizes
	{
		
		/// <summary>
		/// The type of aspect ratio. Leave this field blank to match all aspect ratios.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspectRatio")]
		public string AspectRatio { get; set; }
		
		/// <summary>
		/// The minimum player height in pixels. Leave this field blank to match any player height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minHeight")]
		public string MinHeight { get; set; }
		
		/// <summary>
		/// The minimum player width in pixels. Leave this field blank to match any player width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minWidth")]
		public string MinWidth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PretargetingConfigList
	{
		
		/// <summary>
		/// A list of pretargeting configs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PretargetingConfig[] Items { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#pretargetingConfigList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#pretargetingConfigList";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePrivateAuctionProposalRequest
	{
		
		/// <summary>
		/// The externalDealId of the deal to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalDealId")]
		public string ExternalDealId { get; set; }
		
		/// <summary>
		/// A proposal is associated with a bunch of notes which may optionally be associated with a deal and/or revision number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public MarketplaceNote Note { get; set; }
		
		/// <summary>
		/// The current revision number of the proposal to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevisionNumber")]
		public string ProposalRevisionNumber { get; set; }
		
		/// <summary>
		/// The proposed action on the private auction proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateAction")]
		public string UpdateAction { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves the authenticated user's list of accounts.
		/// Adexchangebuyer_accounts_list accounts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AccountsList> Adexchangebuyer_accounts_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one account by ID.
		/// Adexchangebuyer_accounts_get accounts/{id}
		/// </summary>
		/// <param name="id">The account id</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Adexchangebuyer_accounts_getAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing account. This method supports patch semantics.
		/// Adexchangebuyer_accounts_patch accounts/{id}
		/// </summary>
		/// <param name="id">The account id</param>
		/// <param name="confirmUnsafeAccountChange">Confirmation for erasing bidder and cookie matching urls.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Adexchangebuyer_accounts_patchAsync(int id, bool confirmUnsafeAccountChange, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id+"?confirmUnsafeAccountChange="+confirmUnsafeAccountChange;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing account.
		/// Adexchangebuyer_accounts_update accounts/{id}
		/// </summary>
		/// <param name="id">The account id</param>
		/// <param name="confirmUnsafeAccountChange">Confirmation for erasing bidder and cookie matching urls.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Adexchangebuyer_accounts_updateAsync(int id, bool confirmUnsafeAccountChange, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id+"?confirmUnsafeAccountChange="+confirmUnsafeAccountChange;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of billing information for all accounts of the authenticated user.
		/// Adexchangebuyer_billingInfo_list billinginfo
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<BillingInfoList> Adexchangebuyer_billingInfo_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billinginfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillingInfoList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the billing information for one account specified by account ID.
		/// Adexchangebuyer_billingInfo_get billinginfo/{accountId}
		/// </summary>
		/// <param name="accountId">The account id.</param>
		/// <returns>Successful response</returns>
		public async Task<BillingInfo> Adexchangebuyer_billingInfo_getAsync(int accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billinginfo/"+accountId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillingInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the budget information for the adgroup specified by the accountId and billingId.
		/// Adexchangebuyer_budget_get billinginfo/{accountId}/{billingId}
		/// </summary>
		/// <param name="accountId">The account id to get the budget information for.</param>
		/// <param name="billingId">The billing id to get the budget information for.</param>
		/// <returns>Successful response</returns>
		public async Task<Budget> Adexchangebuyer_budget_getAsync(string accountId, string billingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billinginfo/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (billingId==null? "" : System.Uri.EscapeDataString(billingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Budget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request. This method supports patch semantics.
		/// Adexchangebuyer_budget_patch billinginfo/{accountId}/{billingId}
		/// </summary>
		/// <param name="accountId">The account id associated with the budget being updated.</param>
		/// <param name="billingId">The billing id associated with the budget being updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Budget> Adexchangebuyer_budget_patchAsync(string accountId, string billingId, Budget requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billinginfo/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (billingId==null? "" : System.Uri.EscapeDataString(billingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Budget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request.
		/// Adexchangebuyer_budget_update billinginfo/{accountId}/{billingId}
		/// </summary>
		/// <param name="accountId">The account id associated with the budget being updated.</param>
		/// <param name="billingId">The billing id associated with the budget being updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Budget> Adexchangebuyer_budget_updateAsync(string accountId, string billingId, Budget requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billinginfo/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (billingId==null? "" : System.Uri.EscapeDataString(billingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Budget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.
		/// Adexchangebuyer_creatives_list creatives
		/// </summary>
		/// <param name="accountId">When specified, only creatives for the given account ids are returned.</param>
		/// <param name="buyerCreativeId">When specified, only creatives for the given buyer creative ids are returned.</param>
		/// <param name="dealsStatusFilter">When specified, only creatives having the given deals status are returned.</param>
		/// <param name="maxResults">Maximum number of entries returned on one result page. If not set, the default is 100. Optional.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="openAuctionStatusFilter">When specified, only creatives having the given open auction status are returned.</param>
		/// <param name="pageToken">A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. Optional.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativesList> Adexchangebuyer_creatives_listAsync(int[] accountId, string[] buyerCreativeId, Adexchangebuyer_creatives_listDealsStatusFilter dealsStatusFilter, int maxResults, Adexchangebuyer_creatives_listDealsStatusFilter openAuctionStatusFilter, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives?"+string.Join("&", accountId.Select(z => $"accountId={z}"))+"&"+string.Join("&", buyerCreativeId.Select(z => $"buyerCreativeId={System.Uri.EscapeDataString(z.ToString())}"))+"&dealsStatusFilter=" + dealsStatusFilter+"&maxResults="+maxResults+"&openAuctionStatusFilter=" + openAuctionStatusFilter+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreativesList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a new creative.
		/// Adexchangebuyer_creatives_insert creatives
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Creative> Adexchangebuyer_creatives_insertAsync(Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Creative>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the status for a single creative. A creative will be available 30-40 minutes after submission.
		/// Adexchangebuyer_creatives_get creatives/{accountId}/{buyerCreativeId}
		/// </summary>
		/// <param name="accountId">The id for the account that will serve this creative.</param>
		/// <param name="buyerCreativeId">The buyer-specific id for this creative.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Adexchangebuyer_creatives_getAsync(int accountId, string buyerCreativeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives/"+accountId+"/"+ (buyerCreativeId==null? "" : System.Uri.EscapeDataString(buyerCreativeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Creative>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a deal id association for the creative.
		/// Adexchangebuyer_creatives_addDeal creatives/{accountId}/{buyerCreativeId}/addDeal/{dealId}
		/// </summary>
		/// <param name="accountId">The id for the account that will serve this creative.</param>
		/// <param name="buyerCreativeId">The buyer-specific id for this creative.</param>
		/// <param name="dealId">The id of the deal id to associate with this creative.</param>
		/// <returns>Successful response</returns>
		public async Task Adexchangebuyer_creatives_addDealAsync(int accountId, string buyerCreativeId, string dealId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives/"+accountId+"/"+ (buyerCreativeId==null? "" : System.Uri.EscapeDataString(buyerCreativeId))+"/addDeal/"+ (dealId==null? "" : System.Uri.EscapeDataString(dealId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the external deal ids associated with the creative.
		/// Adexchangebuyer_creatives_listDeals creatives/{accountId}/{buyerCreativeId}/listDeals
		/// </summary>
		/// <param name="accountId">The id for the account that will serve this creative.</param>
		/// <param name="buyerCreativeId">The buyer-specific id for this creative.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeDealIds> Adexchangebuyer_creatives_listDealsAsync(int accountId, string buyerCreativeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives/"+accountId+"/"+ (buyerCreativeId==null? "" : System.Uri.EscapeDataString(buyerCreativeId))+"/listDeals";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreativeDealIds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a deal id associated with the creative.
		/// Adexchangebuyer_creatives_removeDeal creatives/{accountId}/{buyerCreativeId}/removeDeal/{dealId}
		/// </summary>
		/// <param name="accountId">The id for the account that will serve this creative.</param>
		/// <param name="buyerCreativeId">The buyer-specific id for this creative.</param>
		/// <param name="dealId">The id of the deal id to disassociate with this creative.</param>
		/// <returns>Successful response</returns>
		public async Task Adexchangebuyer_creatives_removeDealAsync(int accountId, string buyerCreativeId, string dealId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives/"+accountId+"/"+ (buyerCreativeId==null? "" : System.Uri.EscapeDataString(buyerCreativeId))+"/removeDeal/"+ (dealId==null? "" : System.Uri.EscapeDataString(dealId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the authenticated user's list of performance metrics.
		/// Adexchangebuyer_performanceReport_list performancereport
		/// </summary>
		/// <param name="accountId">The account id to get the reports.</param>
		/// <param name="endDateTime">The end time of the report in ISO 8601 timestamp format using UTC.</param>
		/// <param name="startDateTime">The start time of the report in ISO 8601 timestamp format using UTC.</param>
		/// <param name="maxResults">Maximum number of entries returned on one result page. If not set, the default is 100. Optional.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through performance reports. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. Optional.</param>
		/// <returns>Successful response</returns>
		public async Task<PerformanceReportList> Adexchangebuyer_performanceReport_listAsync(string accountId, string endDateTime, string startDateTime, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "performancereport?accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&endDateTime=" + (endDateTime==null? "" : System.Uri.EscapeDataString(endDateTime))+"&startDateTime=" + (startDateTime==null? "" : System.Uri.EscapeDataString(startDateTime))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PerformanceReportList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of the authenticated user's pretargeting configurations.
		/// Adexchangebuyer_pretargetingConfig_list pretargetingconfigs/{accountId}
		/// </summary>
		/// <param name="accountId">The account id to get the pretargeting configs for.</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfigList> Adexchangebuyer_pretargetingConfig_listAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfigList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new pretargeting configuration.
		/// Adexchangebuyer_pretargetingConfig_insert pretargetingconfigs/{accountId}
		/// </summary>
		/// <param name="accountId">The account id to insert the pretargeting config for.</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Adexchangebuyer_pretargetingConfig_insertAsync(string accountId, PretargetingConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing pretargeting config.
		/// Adexchangebuyer_pretargetingConfig_delete pretargetingconfigs/{accountId}/{configId}
		/// </summary>
		/// <param name="accountId">The account id to delete the pretargeting config for.</param>
		/// <param name="configId">The specific id of the configuration to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Adexchangebuyer_pretargetingConfig_deleteAsync(string accountId, string configId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a specific pretargeting configuration
		/// Adexchangebuyer_pretargetingConfig_get pretargetingconfigs/{accountId}/{configId}
		/// </summary>
		/// <param name="accountId">The account id to get the pretargeting config for.</param>
		/// <param name="configId">The specific id of the configuration to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Adexchangebuyer_pretargetingConfig_getAsync(string accountId, string configId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing pretargeting config. This method supports patch semantics.
		/// Adexchangebuyer_pretargetingConfig_patch pretargetingconfigs/{accountId}/{configId}
		/// </summary>
		/// <param name="accountId">The account id to update the pretargeting config for.</param>
		/// <param name="configId">The specific id of the configuration to update.</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Adexchangebuyer_pretargetingConfig_patchAsync(string accountId, string configId, PretargetingConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing pretargeting config.
		/// Adexchangebuyer_pretargetingConfig_update pretargetingconfigs/{accountId}/{configId}
		/// </summary>
		/// <param name="accountId">The account id to update the pretargeting config for.</param>
		/// <param name="configId">The specific id of the configuration to update.</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Adexchangebuyer_pretargetingConfig_updateAsync(string accountId, string configId, PretargetingConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a given private auction proposal
		/// Adexchangebuyer_marketplaceprivateauction_updateproposal privateauction/{privateAuctionId}/updateproposal
		/// </summary>
		/// <param name="privateAuctionId">The private auction id to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task Adexchangebuyer_marketplaceprivateauction_updateproposalAsync(string privateAuctionId, UpdatePrivateAuctionProposalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "privateauction/"+ (privateAuctionId==null? "" : System.Uri.EscapeDataString(privateAuctionId))+"/updateproposal";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the requested product.
		/// Adexchangebuyer_products_search products/search
		/// </summary>
		/// <param name="pqlQuery">The pql query used to query for products.</param>
		/// <returns>Successful response</returns>
		public async Task<GetOffersResponse> Adexchangebuyer_products_searchAsync(string pqlQuery, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/search?pqlQuery=" + (pqlQuery==null? "" : System.Uri.EscapeDataString(pqlQuery));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOffersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the requested product by id.
		/// Adexchangebuyer_products_get products/{productId}
		/// </summary>
		/// <param name="productId">The id for the product to get the head revision for.</param>
		/// <returns>Successful response</returns>
		public async Task<Product> Adexchangebuyer_products_getAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create the given list of proposals
		/// Adexchangebuyer_proposals_insert proposals/insert
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<CreateOrdersResponse> Adexchangebuyer_proposals_insertAsync(CreateOrdersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/insert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateOrdersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search for proposals using pql query
		/// Adexchangebuyer_proposals_search proposals/search
		/// </summary>
		/// <param name="pqlQuery">Query string to retrieve specific proposals.</param>
		/// <returns>Successful response</returns>
		public async Task<GetOrdersResponse> Adexchangebuyer_proposals_searchAsync(string pqlQuery, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/search?pqlQuery=" + (pqlQuery==null? "" : System.Uri.EscapeDataString(pqlQuery));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrdersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a proposal given its id
		/// Adexchangebuyer_proposals_get proposals/{proposalId}
		/// </summary>
		/// <param name="proposalId">Id of the proposal to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer_proposals_getAsync(string proposalId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Proposal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the deals for a given proposal
		/// Adexchangebuyer_marketplacedeals_list proposals/{proposalId}/deals
		/// </summary>
		/// <param name="proposalId">The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of the URL.</param>
		/// <param name="pqlQuery">Query string to retrieve specific deals.</param>
		/// <returns>Successful response</returns>
		public async Task<GetOrderDealsResponse> Adexchangebuyer_marketplacedeals_listAsync(string proposalId, string pqlQuery, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+"/deals&pqlQuery=" + (pqlQuery==null? "" : System.Uri.EscapeDataString(pqlQuery));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrderDealsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the specified deals from the proposal
		/// Adexchangebuyer_marketplacedeals_delete proposals/{proposalId}/deals/delete
		/// </summary>
		/// <param name="proposalId">The proposalId to delete deals from.</param>
		/// <returns>Successful response</returns>
		public async Task<DeleteOrderDealsResponse> Adexchangebuyer_marketplacedeals_deleteAsync(string proposalId, DeleteOrderDealsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+"/deals/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteOrderDealsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add new deals for the specified proposal
		/// Adexchangebuyer_marketplacedeals_insert proposals/{proposalId}/deals/insert
		/// </summary>
		/// <param name="proposalId">proposalId for which deals need to be added.</param>
		/// <returns>Successful response</returns>
		public async Task<AddOrderDealsResponse> Adexchangebuyer_marketplacedeals_insertAsync(string proposalId, AddOrderDealsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+"/deals/insert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddOrderDealsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replaces all the deals in the proposal with the passed in deals
		/// Adexchangebuyer_marketplacedeals_update proposals/{proposalId}/deals/update
		/// </summary>
		/// <param name="proposalId">The proposalId to edit deals on.</param>
		/// <returns>Successful response</returns>
		public async Task<EditAllOrderDealsResponse> Adexchangebuyer_marketplacedeals_updateAsync(string proposalId, EditAllOrderDealsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+"/deals/update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EditAllOrderDealsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the notes associated with a proposal
		/// Adexchangebuyer_marketplacenotes_list proposals/{proposalId}/notes
		/// </summary>
		/// <param name="proposalId">The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of the URL.</param>
		/// <param name="pqlQuery">Query string to retrieve specific notes. To search the text contents of notes, please use syntax like "WHERE note.note = "foo" or "WHERE note.note LIKE "%bar%"</param>
		/// <returns>Successful response</returns>
		public async Task<GetOrderNotesResponse> Adexchangebuyer_marketplacenotes_listAsync(string proposalId, string pqlQuery, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+"/notes&pqlQuery=" + (pqlQuery==null? "" : System.Uri.EscapeDataString(pqlQuery));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrderNotesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add notes to the proposal
		/// Adexchangebuyer_marketplacenotes_insert proposals/{proposalId}/notes/insert
		/// </summary>
		/// <param name="proposalId">The proposalId to add notes for.</param>
		/// <returns>Successful response</returns>
		public async Task<AddOrderNotesResponse> Adexchangebuyer_marketplacenotes_insertAsync(string proposalId, AddOrderNotesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+"/notes/insert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddOrderNotesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the given proposal to indicate that setup has been completed.
		/// Adexchangebuyer_proposals_setupcomplete proposals/{proposalId}/setupcomplete
		/// </summary>
		/// <param name="proposalId">The proposal id for which the setup is complete</param>
		/// <returns>Successful response</returns>
		public async Task Adexchangebuyer_proposals_setupcompleteAsync(string proposalId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+"/setupcomplete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the given proposal. This method supports patch semantics.
		/// Adexchangebuyer_proposals_patch proposals/{proposalId}/{revisionNumber}/{updateAction}
		/// </summary>
		/// <param name="proposalId">The proposal id to update.</param>
		/// <param name="revisionNumber">The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.</param>
		/// <param name="updateAction">The proposed action to take on the proposal. This field is required and it must be set when updating a proposal.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer_proposals_patchAsync(string proposalId, string revisionNumber, Adexchangebuyer_proposals_patchUpdateAction updateAction, Proposal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+"/"+ (revisionNumber==null? "" : System.Uri.EscapeDataString(revisionNumber))+"/"+updateAction;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Proposal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the given proposal
		/// Adexchangebuyer_proposals_update proposals/{proposalId}/{revisionNumber}/{updateAction}
		/// </summary>
		/// <param name="proposalId">The proposal id to update.</param>
		/// <param name="revisionNumber">The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.</param>
		/// <param name="updateAction">The proposed action to take on the proposal. This field is required and it must be set when updating a proposal.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer_proposals_updateAsync(string proposalId, string revisionNumber, Adexchangebuyer_proposals_patchUpdateAction updateAction, Proposal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+"/"+ (revisionNumber==null? "" : System.Uri.EscapeDataString(revisionNumber))+"/"+updateAction;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Proposal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the requested publisher profile(s) by publisher accountId.
		/// Adexchangebuyer_pubprofiles_list publisher/{accountId}/profiles
		/// </summary>
		/// <param name="accountId">The accountId of the publisher to get profiles for.</param>
		/// <returns>Successful response</returns>
		public async Task<GetPublisherProfilesByAccountIdResponse> Adexchangebuyer_pubprofiles_listAsync(int accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "publisher/"+accountId+"/profiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPublisherProfilesByAccountIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Adexchangebuyer_creatives_listDealsStatusFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approved")]
		approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conditionally_approved")]
		conditionally_approved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disapproved")]
		disapproved = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_checked")]
		not_checked = 3,
	}
	
	public enum Adexchangebuyer_proposals_patchUpdateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accept")]
		accept = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cancel")]
		cancel = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="propose")]
		propose = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proposeAndAccept")]
		proposeAndAccept = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknownAction")]
		unknownAction = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="updateNonTerms")]
		updateNonTerms = 5,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
