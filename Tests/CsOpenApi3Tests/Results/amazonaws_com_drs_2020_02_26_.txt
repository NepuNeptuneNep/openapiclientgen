//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateSourceNetworkStackResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// A job is an asynchronous workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Job
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public string CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public string EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initiatedBy")]
		public InitiatedBy InitiatedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="participatingResources")]
		public ParticipatingResource[] ParticipatingResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="participatingServers")]
		public ParticipatingServer[] ParticipatingServers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public JobType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InitiatedBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_RECOVERY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_DRILL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILBACK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAGNOSTIC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_RECOVERY_INSTANCES = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_ACCOUNT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_NETWORK_RECOVERY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_NETWORK_RECOVERY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATE_NETWORK_RECOVERY = 8,
	}
	
	/// <summary>
	/// Represents a resource participating in an asynchronous Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParticipatingResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchStatus")]
		public LaunchStatus LaunchStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="participatingResourceID")]
		public ParticipatingResourceID ParticipatingResourceID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 4,
	}
	
	/// <summary>
	/// ID of a resource participating in an asynchronous Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParticipatingResourceID
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		public string SourceNetworkID { get; set; }
	}
	
	/// <summary>
	/// Represents a server participating in an asynchronous Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParticipatingServer
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchStatus")]
		public LaunchStatus LaunchStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		public string RecoveryInstanceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_CONVERTED_SNAPSHOT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UninitializedAccountException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateExtendedSourceServerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceServer")]
		public SourceServer SourceServer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceServer
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationInfo")]
		public DataReplicationInfo DataReplicationInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastLaunchResult")]
		public LastLaunchResult LastLaunchResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifeCycle")]
		public LifeCycle LifeCycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceId")]
		public string RecoveryInstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationDirection")]
		public ReplicationDirection ReplicationDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reversedDirectionSourceServerArn")]
		public string ReversedDirectionSourceServerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCloudProperties")]
		public SourceCloudProperties SourceCloudProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		public string SourceNetworkID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceProperties")]
		public SourceProperties SourceProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingArea")]
		public StagingArea StagingArea { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// Information about Data Replication
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataReplicationInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationError")]
		public DataReplicationError DataReplicationError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationInitiation")]
		public DataReplicationInitiation DataReplicationInitiation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationState")]
		public DataReplicationState DataReplicationState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="etaDateTime")]
		public string EtaDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lagDuration")]
		public string LagDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicatedDisks")]
		public DataReplicationInfoReplicatedDisk[] ReplicatedDisks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAvailabilityZone")]
		public string StagingAvailabilityZone { get; set; }
	}
	
	/// <summary>
	/// Error in data replication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataReplicationError
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public DataReplicationErrorString Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawError")]
		public string RawError { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataReplicationErrorString
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_NOT_SEEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOTS_FAILURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_CONVERGING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSTABLE_NETWORK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_CREATE_SECURITY_GROUP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_LAUNCH_REPLICATION_SERVER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_BOOT_REPLICATION_SERVER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_AUTHENTICATE_WITH_SERVICE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_CREATE_STAGING_DISKS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_ATTACH_STAGING_DISKS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_START_DATA_TRANSFER = 13,
	}
	
	/// <summary>
	/// Data replication initiation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataReplicationInitiation
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextAttemptDateTime")]
		public string NextAttemptDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public DataReplicationInitiationStep[] Steps { get; set; }
	}
	
	/// <summary>
	/// Data replication initiation step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataReplicationInitiationStep
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public DataReplicationInitiationStepName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataReplicationInitiationStepStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataReplicationInitiationStepName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SECURITY_GROUP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_REPLICATION_SERVER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOT_REPLICATION_SERVER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATE_WITH_SERVICE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWNLOAD_REPLICATION_SOFTWARE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_STAGING_DISKS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACH_STAGING_DISKS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAIR_REPLICATION_SERVER_WITH_AGENT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECT_AGENT_TO_REPLICATION_SERVER = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_DATA_TRANSFER = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataReplicationInitiationStepStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataReplicationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIAL_SYNC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKLOG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING_SNAPSHOT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESCAN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STALLED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCONNECTED = 9,
	}
	
	/// <summary>
	/// A disk that should be replicated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataReplicationInfoReplicatedDisk
	{
		
		[System.Runtime.Serialization.DataMember(Name="backloggedStorageBytes")]
		public System.Nullable<System.Int32> BackloggedStorageBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicatedStorageBytes")]
		public System.Nullable<System.Int32> ReplicatedStorageBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rescannedStorageBytes")]
		public System.Nullable<System.Int32> RescannedStorageBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalStorageBytes")]
		public System.Nullable<System.Int32> TotalStorageBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LastLaunchResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// An object representing the Source Server Lifecycle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifeCycle
	{
		
		[System.Runtime.Serialization.DataMember(Name="addedToServiceDateTime")]
		public string AddedToServiceDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elapsedReplicationDuration")]
		public string ElapsedReplicationDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstByteDateTime")]
		public string FirstByteDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastLaunch")]
		public LifeCycleLastLaunch LastLaunch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastSeenByServiceDateTime")]
		public string LastSeenByServiceDateTime { get; set; }
	}
	
	/// <summary>
	/// An object containing information regarding the last launch of a Source Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifeCycleLastLaunch
	{
		
		[System.Runtime.Serialization.DataMember(Name="initiated")]
		public LifeCycleLastLaunchInitiated Initiated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LaunchStatus Status { get; set; }
	}
	
	/// <summary>
	/// An object containing information regarding the initiation of the last launch of a Source Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifeCycleLastLaunchInitiated
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiCallDateTime")]
		public string ApiCallDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LastLaunchType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LastLaunchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRILL = 1,
	}
	
	/// <summary>
	/// Replication direction designates if this is a failover replication, or a failback replication. When a DRS agent is installed on an instance, the replication direction is failover. In cases where a recovery launch was made in the recovery location and a new recovery instance was created, and then a failback replication was initiated from that recovery instance back to the origin location, then the replication direction will be failback.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplicationDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILOVER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILBACK = 1,
	}
	
	/// <summary>
	/// Properties of the cloud environment where this Source Server originated from.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceCloudProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="originAccountID")]
		public string OriginAccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originAvailabilityZone")]
		public string OriginAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originRegion")]
		public string OriginRegion { get; set; }
	}
	
	/// <summary>
	/// Properties of the Source Server machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="cpus")]
		public CPU[] Cpus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public Disk[] Disks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identificationHints")]
		public IdentificationHints IdentificationHints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public string LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkInterfaces")]
		public NetworkInterface[] NetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public OS Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ramBytes")]
		public System.Nullable<System.Int32> RamBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recommendedInstanceType")]
		public string RecommendedInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportsNitroInstances")]
		public System.Nullable<System.Boolean> SupportsNitroInstances { get; set; }
	}
	
	/// <summary>
	/// Information about a server's CPU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CPU
	{
		
		[System.Runtime.Serialization.DataMember(Name="cores")]
		public System.Nullable<System.Int32> Cores { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
	}
	
	/// <summary>
	/// An object representing a data storage device on a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Disk
	{
		
		[System.Runtime.Serialization.DataMember(Name="bytes")]
		public System.Nullable<System.Int32> Bytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
	}
	
	/// <summary>
	/// Hints used to uniquely identify a machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentificationHints
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsInstanceID")]
		public string AwsInstanceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmWareUuid")]
		public string VmWareUuid { get; set; }
	}
	
	/// <summary>
	/// Network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkInterface
	{
		
		[System.Runtime.Serialization.DataMember(Name="ips")]
		public string[] Ips { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPrimary")]
		public System.Nullable<System.Boolean> IsPrimary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
	}
	
	/// <summary>
	/// Operating System.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OS
	{
		
		[System.Runtime.Serialization.DataMember(Name="fullString")]
		public string FullString { get; set; }
	}
	
	/// <summary>
	/// Staging information related to source server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StagingArea
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAccountID")]
		public string StagingAccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingSourceServerArn")]
		public string StagingSourceServerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExtensionStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExtensionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTENDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTENSION_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_EXTENDED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLaunchConfigurationTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplate")]
		public LaunchConfigurationTemplate LaunchConfigurationTemplate { get; set; }
	}
	
	/// <summary>
	/// Account level Launch Configuration Template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchConfigurationTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportBucketArn")]
		public string ExportBucketArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		public string LaunchConfigurationTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public Licensing Licensing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchDisposition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTED = 1,
	}
	
	/// <summary>
	/// Configuration of a machine's license.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Licensing
	{
		
		[System.Runtime.Serialization.DataMember(Name="osByol")]
		public System.Nullable<System.Boolean> OsByol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetInstanceTypeRightSizingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_AWS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplicationConfigurationTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoReplicateNewDisks")]
		public System.Nullable<System.Boolean> AutoReplicateNewDisks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		public string EbsEncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pitPolicy")]
		public PITPolicyRule[] PitPolicy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateID")]
		public string ReplicationConfigurationTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		public string ReplicationServerInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		public string StagingAreaSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public TagsMap StagingAreaTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplicationConfigurationDataPlaneRouting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE_IP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC_IP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplicationConfigurationDefaultLargeStagingDiskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GP2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GP3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ST1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplicationConfigurationEbsEncryption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
	}
	
	/// <summary>
	/// A rule in the Point in Time (PIT) policy representing when to take snapshots and how long to retain them for.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PITPolicyRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public int Interval { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retentionDuration")]
		public int RetentionDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ruleID")]
		public System.Nullable<System.Int32> RuleID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		public PITPolicyRuleUnits Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PITPolicyRuleUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINUTE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSourceNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		public string SourceNetworkID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteJobResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLaunchConfigurationTemplateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteReplicationConfigurationTemplateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSourceNetworkResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSourceServerResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeJobLogItemsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public JobLog[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A log outputted by a Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobLog
	{
		
		[System.Runtime.Serialization.DataMember(Name="event")]
		public JobLogEvent Event { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventData")]
		public JobLogEventData EventData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logDateTime")]
		public string LogDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobLogEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_START = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER_SKIPPED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEANUP_START = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEANUP_END = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEANUP_FAIL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT_START = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT_END = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT_FAIL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USING_PREVIOUS_SNAPSHOT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USING_PREVIOUS_SNAPSHOT_FAILED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERSION_START = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERSION_END = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERSION_FAIL = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_START = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_FAILED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_CANCEL = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_END = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOY_NETWORK_CONFIGURATION_START = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOY_NETWORK_CONFIGURATION_END = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOY_NETWORK_CONFIGURATION_FAILED = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_NETWORK_CONFIGURATION_START = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_NETWORK_CONFIGURATION_END = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_NETWORK_CONFIGURATION_FAILED = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_LAUNCH_TEMPLATE_START = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_LAUNCH_TEMPLATE_END = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_LAUNCH_TEMPLATE_FAILED = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_RECOVERY_FAIL = 26,
	}
	
	/// <summary>
	/// Metadata associated with a Job log.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobLogEventData
	{
		
		[System.Runtime.Serialization.DataMember(Name="conversionProperties")]
		public ConversionProperties ConversionProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversionServerID")]
		public string ConversionServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventResourceData")]
		public EventResourceData EventResourceData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawError")]
		public string RawError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceID")]
		public string TargetInstanceID { get; set; }
	}
	
	/// <summary>
	/// Properties of a conversion job
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataTimestamp")]
		public string DataTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceUefi")]
		public System.Nullable<System.Boolean> ForceUefi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rootVolumeName")]
		public string RootVolumeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeToConversionMap")]
		public VolumeToConversionMap VolumeToConversionMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeToVolumeSize")]
		public VolumeToSizeMap VolumeToVolumeSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeToConversionMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeToSizeMap
	{
	}
	
	/// <summary>
	/// Properties of resource related to a job event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventResourceData
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkData")]
		public SourceNetworkData SourceNetworkData { get; set; }
	}
	
	/// <summary>
	/// Properties of Source Network related to a job event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceNetworkData
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		public string SourceNetworkID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVpc")]
		public string SourceVpc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackName")]
		public string StackName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetVpc")]
		public string TargetVpc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Job[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeLaunchConfigurationTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LaunchConfigurationTemplate[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRecoveryInstancesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RecoveryInstance[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A Recovery Instance is a replica of a Source Server running on EC2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryInstance
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationInfo")]
		public RecoveryInstanceDataReplicationInfo DataReplicationInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2InstanceID")]
		public string Ec2InstanceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2InstanceState")]
		public EC2InstanceState Ec2InstanceState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failback")]
		public RecoveryInstanceFailback Failback { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDrill")]
		public System.Nullable<System.Boolean> IsDrill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originAvailabilityZone")]
		public string OriginAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originEnvironment")]
		public OriginEnvironment OriginEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pointInTimeSnapshotDateTime")]
		public string PointInTimeSnapshotDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		public string RecoveryInstanceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceProperties")]
		public RecoveryInstanceProperties RecoveryInstanceProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// Information about Data Replication
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryInstanceDataReplicationInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationError")]
		public RecoveryInstanceDataReplicationError DataReplicationError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationInitiation")]
		public RecoveryInstanceDataReplicationInitiation DataReplicationInitiation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationState")]
		public RecoveryInstanceDataReplicationState DataReplicationState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="etaDateTime")]
		public string EtaDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lagDuration")]
		public string LagDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicatedDisks")]
		public RecoveryInstanceDataReplicationInfoReplicatedDisk[] ReplicatedDisks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAvailabilityZone")]
		public string StagingAvailabilityZone { get; set; }
	}
	
	/// <summary>
	/// Error in data replication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryInstanceDataReplicationError
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public FailbackReplicationError Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawError")]
		public string RawError { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FailbackReplicationError
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_NOT_SEEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILBACK_CLIENT_NOT_SEEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_CONVERGING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSTABLE_NETWORK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_CONFIGURE_REPLICATION_SOFTWARE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_PAIR_AGENT_WITH_REPLICATION_SOFTWARE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_GETTING_REPLICATION_STATE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOTS_FAILURE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_CREATE_SECURITY_GROUP = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_LAUNCH_REPLICATION_SERVER = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_BOOT_REPLICATION_SERVER = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_AUTHENTICATE_WITH_SERVICE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_CREATE_STAGING_DISKS = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_ATTACH_STAGING_DISKS = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_START_DATA_TRANSFER = 20,
	}
	
	/// <summary>
	/// Data replication initiation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryInstanceDataReplicationInitiation
	{
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public RecoveryInstanceDataReplicationInitiationStep[] Steps { get; set; }
	}
	
	/// <summary>
	/// Data replication initiation step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryInstanceDataReplicationInitiationStep
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public RecoveryInstanceDataReplicationInitiationStepName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataReplicationInitiationStepStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecoveryInstanceDataReplicationInitiationStepName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK_FAILBACK_CLIENT_WITH_RECOVERY_INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE_VOLUME_MAPPING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURE_REPLICATION_SOFTWARE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAIR_AGENT_WITH_REPLICATION_SOFTWARE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAIT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SECURITY_GROUP = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_REPLICATION_SERVER = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOT_REPLICATION_SERVER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATE_WITH_SERVICE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWNLOAD_REPLICATION_SOFTWARE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_STAGING_DISKS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACH_STAGING_DISKS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAIR_REPLICATION_SERVER_WITH_AGENT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECT_AGENT_TO_REPLICATION_SERVER = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_DATA_TRANSFER = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecoveryInstanceDataReplicationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIAL_SYNC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKLOG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING_SNAPSHOT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESCAN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STALLED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCONNECTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_STATE_NOT_AVAILABLE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 11,
	}
	
	/// <summary>
	/// A disk that should be replicated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryInstanceDataReplicationInfoReplicatedDisk
	{
		
		[System.Runtime.Serialization.DataMember(Name="backloggedStorageBytes")]
		public System.Nullable<System.Int32> BackloggedStorageBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicatedStorageBytes")]
		public System.Nullable<System.Int32> ReplicatedStorageBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rescannedStorageBytes")]
		public System.Nullable<System.Int32> RescannedStorageBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalStorageBytes")]
		public System.Nullable<System.Int32> TotalStorageBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EC2InstanceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHUTTING-DOWN")]
		SHUTTINGMinusDOWN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FOUND = 6,
	}
	
	/// <summary>
	/// An object representing failback related information of the Recovery Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryInstanceFailback
	{
		
		[System.Runtime.Serialization.DataMember(Name="agentLastSeenByServiceDateTime")]
		public string AgentLastSeenByServiceDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elapsedReplicationDuration")]
		public string ElapsedReplicationDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failbackClientID")]
		public string FailbackClientID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failbackClientLastSeenByServiceDateTime")]
		public string FailbackClientLastSeenByServiceDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failbackInitiationTime")]
		public string FailbackInitiationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failbackJobID")]
		public string FailbackJobID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failbackLaunchType")]
		public LastLaunchType FailbackLaunchType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failbackToOriginalServer")]
		public System.Nullable<System.Boolean> FailbackToOriginalServer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstByteDateTime")]
		public string FirstByteDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public FailbackState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FailbackState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILBACK_NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILBACK_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILBACK_READY_FOR_LAUNCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILBACK_COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILBACK_ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILBACK_NOT_READY_FOR_LAUNCH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILBACK_LAUNCH_STATE_NOT_AVAILABLE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OriginEnvironment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_PREMISES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 1,
	}
	
	/// <summary>
	/// Properties of the Recovery Instance machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryInstanceProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="cpus")]
		public CPU[] Cpus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public RecoveryInstanceDisk[] Disks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identificationHints")]
		public IdentificationHints IdentificationHints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public string LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkInterfaces")]
		public NetworkInterface[] NetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public OS Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ramBytes")]
		public System.Nullable<System.Int32> RamBytes { get; set; }
	}
	
	/// <summary>
	/// An object representing a block storage device on the Recovery Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryInstanceDisk
	{
		
		[System.Runtime.Serialization.DataMember(Name="bytes")]
		public System.Nullable<System.Int32> Bytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsVolumeID")]
		public string EbsVolumeID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internalDeviceName")]
		public string InternalDeviceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRecoverySnapshotsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RecoverySnapshot[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A snapshot of a Source Server used during recovery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoverySnapshot
	{
		
		[System.Runtime.Serialization.DataMember(Name="ebsSnapshots")]
		public string[] EbsSnapshots { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expectedTimestamp")]
		public string ExpectedTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="snapshotID")]
		public string SnapshotID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeReplicationConfigurationTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ReplicationConfigurationTemplate[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSourceNetworksResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SourceNetwork[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The ARN of the Source Network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceNetwork
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cfnStackName")]
		public string CfnStackName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRecovery")]
		public RecoveryLifeCycle LastRecovery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchedVpcID")]
		public string LaunchedVpcID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationStatus")]
		public ReplicationStatus ReplicationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationStatusDetails")]
		public string ReplicationStatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAccountID")]
		public string SourceAccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		public string SourceNetworkID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceRegion")]
		public string SourceRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVpcID")]
		public string SourceVpcID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// An object representing the Source Network recovery Lifecycle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryLifeCycle
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiCallDateTime")]
		public System.DateTimeOffset ApiCallDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRecoveryResult")]
		public RecoveryResult LastRecoveryResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecoveryResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_SUCCESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATE_SUCCESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATE_FAIL = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplicationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSourceServersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SourceServer[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportSourceNetworkCfnTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3DestinationUrl")]
		public string S3DestinationUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFailbackReplicationConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		public string RecoveryInstanceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usePrivateIP")]
		public System.Nullable<System.Boolean> UsePrivateIP { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2LaunchTemplateID")]
		public string Ec2LaunchTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public Licensing Licensing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplicationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoReplicateNewDisks")]
		public System.Nullable<System.Boolean> AutoReplicateNewDisks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		public string EbsEncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pitPolicy")]
		public PITPolicyRule[] PitPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicatedDisks")]
		public ReplicationConfigurationReplicatedDisk[] ReplicatedDisks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		public string ReplicationServerInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		public string StagingAreaSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public TagsMap StagingAreaTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
	}
	
	/// <summary>
	/// The configuration of a disk of the Source Server to be replicated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplicationConfigurationReplicatedDisk
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iops")]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBootDisk")]
		public System.Nullable<System.Boolean> IsBootDisk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optimizedStagingDiskType")]
		public ReplicationConfigurationReplicatedDiskStagingDiskType OptimizedStagingDiskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingDiskType")]
		public ReplicationConfigurationReplicatedDiskStagingDiskType StagingDiskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throughput")]
		public System.Nullable<System.Int32> Throughput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplicationConfigurationReplicatedDiskStagingDiskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GP2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GP3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IO1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SC1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ST1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InitializeServiceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExtensibleSourceServersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public StagingSourceServer[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Source server in staging account that extended source server connected to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StagingSourceServer
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStagingAccountsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public Account[] Accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// AWS account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReverseReplicationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="reversedDirectionSourceServerArn")]
		public string ReversedDirectionSourceServerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartFailbackLaunchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartRecoveryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// An object representing the Source Server to recover.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartRecoveryRequestSourceServer
	{
		
		[System.Runtime.Serialization.DataMember(Name="recoverySnapshotID")]
		public string RecoverySnapshotID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReplicationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceServer")]
		public SourceServer SourceServer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSourceNetworkRecoveryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// An object representing the Source Network to recover.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSourceNetworkRecoveryRequestNetworkEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="cfnStackName")]
		public string CfnStackName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		public string SourceNetworkID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSourceNetworkReplicationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceNetwork")]
		public SourceNetwork SourceNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopReplicationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceServer")]
		public SourceServer SourceServer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopSourceNetworkReplicationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceNetwork")]
		public SourceNetwork SourceNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TerminateRecoveryInstancesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLaunchConfigurationTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplate")]
		public LaunchConfigurationTemplate LaunchConfigurationTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateSourceNetworkStackRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cfnStackName")]
		public string CfnStackName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		public string SourceNetworkID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateExtendedSourceServerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerArn")]
		public string SourceServerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLaunchConfigurationTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportBucketArn")]
		public string ExportBucketArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public Licensing Licensing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateReplicationConfigurationTemplateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public bool AssociateDefaultSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoReplicateNewDisks")]
		public System.Nullable<System.Boolean> AutoReplicateNewDisks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public int BandwidthThrottling { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public bool CreatePublicIP { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		public string EbsEncryptionKeyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pitPolicy")]
		public PITPolicyRule[] PitPolicy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		public string ReplicationServerInstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		public string StagingAreaSubnetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public TagsMap StagingAreaTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public bool UseDedicatedReplicationServer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSourceNetworkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originAccountID")]
		public string OriginAccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originRegion")]
		public string OriginRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcID")]
		public string VpcID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLaunchConfigurationTemplateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		public string LaunchConfigurationTemplateID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRecoveryInstanceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		public string RecoveryInstanceID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteReplicationConfigurationTemplateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateID")]
		public string ReplicationConfigurationTemplateID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSourceNetworkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		public string SourceNetworkID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSourceServerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeJobLogItemsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A set of filters by which to return Jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeJobsRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromDate")]
		public string FromDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobIDs")]
		public string[] JobIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toDate")]
		public string ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeJobsRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeLaunchConfigurationTemplatesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateIDs")]
		public string[] LaunchConfigurationTemplateIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A set of filters by which to return Recovery Instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRecoveryInstancesRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceIDs")]
		public string[] RecoveryInstanceIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		public string[] SourceServerIDs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRecoveryInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeRecoveryInstancesRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A set of filters by which to return Recovery Snapshots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRecoverySnapshotsRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromDateTime")]
		public string FromDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toDateTime")]
		public string ToDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecoverySnapshotsOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRecoverySnapshotsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeRecoverySnapshotsRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public RecoverySnapshotsOrder Order { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeReplicationConfigurationTemplatesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateIDs")]
		public string[] ReplicationConfigurationTemplateIDs { get; set; }
	}
	
	/// <summary>
	/// A set of filters by which to return Source Networks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSourceNetworksRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="originAccountID")]
		public string OriginAccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originRegion")]
		public string OriginRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkIDs")]
		public string[] SourceNetworkIDs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSourceNetworksRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeSourceNetworksRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A set of filters by which to return Source Servers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSourceServersRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="hardwareId")]
		public string HardwareId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		public string[] SourceServerIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAccountIDs")]
		public string[] StagingAccountIDs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSourceServersRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeSourceServersRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisconnectRecoveryInstanceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		public string RecoveryInstanceID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisconnectSourceServerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportSourceNetworkCfnTemplateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		public string SourceNetworkID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FailbackLaunchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRILL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFailbackReplicationConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		public string RecoveryInstanceID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLaunchConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReplicationConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InitializeServiceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExtensibleSourceServersRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stagingAccountID")]
		public string StagingAccountID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStagingAccountsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecoveryInstanceDataReplicationInitiationStepStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
	}
	
	/// <summary>
	/// WARNING: RetryDataReplication is deprecated
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetryDataReplicationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReverseReplicationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		public string RecoveryInstanceID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartFailbackLaunchRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceIDs")]
		public string[] RecoveryInstanceIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartRecoveryRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="isDrill")]
		public System.Nullable<System.Boolean> IsDrill { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServers")]
		public StartRecoveryRequestSourceServer[] SourceServers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReplicationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSourceNetworkRecoveryRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="deployAsNew")]
		public System.Nullable<System.Boolean> DeployAsNew { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworks")]
		public StartSourceNetworkRecoveryRequestNetworkEntry[] SourceNetworks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSourceNetworkReplicationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		public string SourceNetworkID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopFailbackRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		public string RecoveryInstanceID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopReplicationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopSourceNetworkReplicationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		public string SourceNetworkID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TerminateRecoveryInstancesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceIDs")]
		public string[] RecoveryInstanceIDs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFailbackReplicationConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		public string RecoveryInstanceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usePrivateIP")]
		public System.Nullable<System.Boolean> UsePrivateIP { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLaunchConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public Licensing Licensing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLaunchConfigurationTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportBucketArn")]
		public string ExportBucketArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		public string LaunchConfigurationTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public Licensing Licensing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateReplicationConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoReplicateNewDisks")]
		public System.Nullable<System.Boolean> AutoReplicateNewDisks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		public string EbsEncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pitPolicy")]
		public PITPolicyRule[] PitPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicatedDisks")]
		public ReplicationConfigurationReplicatedDisk[] ReplicatedDisks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		public string ReplicationServerInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		public string StagingAreaSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public TagsMap StagingAreaTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateReplicationConfigurationTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoReplicateNewDisks")]
		public System.Nullable<System.Boolean> AutoReplicateNewDisks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		public string EbsEncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pitPolicy")]
		public PITPolicyRule[] PitPolicy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateID")]
		public string ReplicationConfigurationTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		public string ReplicationServerInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		public string StagingAreaSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public TagsMap StagingAreaTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associate a Source Network to an existing CloudFormation Stack and modify launch templates to use this network. Can be used for reverting to previously deployed CloudFormation stacks.
		/// AssociateSourceNetworkStack AssociateSourceNetworkStack
		/// </summary>
		public async Task AssociateSourceNetworkStackAsync(AssociateSourceNetworkStackPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "AssociateSourceNetworkStack";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an extended source server in the target Account based on the source server in staging account.
		/// CreateExtendedSourceServer CreateExtendedSourceServer
		/// </summary>
		public async Task CreateExtendedSourceServerAsync(CreateExtendedSourceServerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateExtendedSourceServer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Launch Configuration Template.
		/// CreateLaunchConfigurationTemplate CreateLaunchConfigurationTemplate
		/// </summary>
		public async Task CreateLaunchConfigurationTemplateAsync(CreateLaunchConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateLaunchConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new ReplicationConfigurationTemplate.
		/// CreateReplicationConfigurationTemplate CreateReplicationConfigurationTemplate
		/// </summary>
		public async Task CreateReplicationConfigurationTemplateAsync(CreateReplicationConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateReplicationConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Source Network resource for a provided VPC ID.
		/// CreateSourceNetwork CreateSourceNetwork
		/// </summary>
		public async Task CreateSourceNetworkAsync(CreateSourceNetworkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateSourceNetwork";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a single Job by ID.
		/// DeleteJob DeleteJob
		/// </summary>
		public async Task DeleteJobAsync(DeleteJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a single Launch Configuration Template by ID.
		/// DeleteLaunchConfigurationTemplate DeleteLaunchConfigurationTemplate
		/// </summary>
		public async Task DeleteLaunchConfigurationTemplateAsync(DeleteLaunchConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteLaunchConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a single Recovery Instance by ID. This deletes the Recovery Instance resource from Elastic Disaster Recovery. The Recovery Instance must be disconnected first in order to delete it.
		/// DeleteRecoveryInstance DeleteRecoveryInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteRecoveryInstanceAsync(DeleteRecoveryInstancePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteRecoveryInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a single Replication Configuration Template by ID
		/// DeleteReplicationConfigurationTemplate DeleteReplicationConfigurationTemplate
		/// </summary>
		public async Task DeleteReplicationConfigurationTemplateAsync(DeleteReplicationConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteReplicationConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Source Network resource.
		/// DeleteSourceNetwork DeleteSourceNetwork
		/// </summary>
		public async Task DeleteSourceNetworkAsync(DeleteSourceNetworkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteSourceNetwork";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a single Source Server by ID. The Source Server must be disconnected first.
		/// DeleteSourceServer DeleteSourceServer
		/// </summary>
		public async Task DeleteSourceServerAsync(DeleteSourceServerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteSourceServer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a detailed Job log with pagination.
		/// DescribeJobLogItems DescribeJobLogItems
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeJobLogItemsResponse> DescribeJobLogItemsAsync(string maxResults, string nextToken, DescribeJobLogItemsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeJobLogItems?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeJobLogItemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Jobs. Use the JobsID and fromDate and toDate filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are created by the StartRecovery, TerminateRecoveryInstances and StartFailbackLaunch APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.
		/// DescribeJobs DescribeJobs
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeJobsResponse> DescribeJobsAsync(string maxResults, string nextToken, DescribeJobsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeJobs?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Launch Configuration Templates, filtered by Launch Configuration Template IDs
		/// DescribeLaunchConfigurationTemplates DescribeLaunchConfigurationTemplates
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeLaunchConfigurationTemplatesResponse> DescribeLaunchConfigurationTemplatesAsync(string maxResults, string nextToken, DescribeLaunchConfigurationTemplatesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeLaunchConfigurationTemplates?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeLaunchConfigurationTemplatesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Recovery Instances or multiple Recovery Instances by ID.
		/// DescribeRecoveryInstances DescribeRecoveryInstances
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeRecoveryInstancesResponse> DescribeRecoveryInstancesAsync(string maxResults, string nextToken, DescribeRecoveryInstancesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeRecoveryInstances?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeRecoveryInstancesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Recovery Snapshots for a single Source Server.
		/// DescribeRecoverySnapshots DescribeRecoverySnapshots
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeRecoverySnapshotsResponse> DescribeRecoverySnapshotsAsync(string maxResults, string nextToken, DescribeRecoverySnapshotsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeRecoverySnapshots?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeRecoverySnapshotsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.
		/// DescribeReplicationConfigurationTemplates DescribeReplicationConfigurationTemplates
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeReplicationConfigurationTemplatesResponse> DescribeReplicationConfigurationTemplatesAsync(string maxResults, string nextToken, DescribeReplicationConfigurationTemplatesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeReplicationConfigurationTemplates?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeReplicationConfigurationTemplatesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Source Networks or multiple Source Networks filtered by ID.
		/// DescribeSourceNetworks DescribeSourceNetworks
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeSourceNetworksResponse> DescribeSourceNetworksAsync(string maxResults, string nextToken, DescribeSourceNetworksPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeSourceNetworks?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeSourceNetworksResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Source Servers or multiple Source Servers filtered by ID.
		/// DescribeSourceServers DescribeSourceServers
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeSourceServersResponse> DescribeSourceServersAsync(string maxResults, string nextToken, DescribeSourceServersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeSourceServers?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeSourceServersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disconnect a Recovery Instance from Elastic Disaster Recovery. Data replication is stopped immediately. All AWS resources created by Elastic Disaster Recovery for enabling the replication of the Recovery Instance will be terminated / deleted within 90 minutes. If the agent on the Recovery Instance has not been prevented from communicating with the Elastic Disaster Recovery service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the Recovery Instance will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
		/// DisconnectRecoveryInstance DisconnectRecoveryInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task DisconnectRecoveryInstanceAsync(DisconnectRecoveryInstancePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DisconnectRecoveryInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disconnects a specific Source Server from Elastic Disaster Recovery. Data replication is stopped immediately. All AWS resources created by Elastic Disaster Recovery for enabling the replication of the Source Server will be terminated / deleted within 90 minutes. You cannot disconnect a Source Server if it has a Recovery Instance. If the agent on the Source Server has not been prevented from communicating with the Elastic Disaster Recovery service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
		/// DisconnectSourceServer DisconnectSourceServer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> DisconnectSourceServerAsync(DisconnectSourceServerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DisconnectSourceServer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SourceServer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export the Source Network CloudFormation template to an S3 bucket.
		/// ExportSourceNetworkCfnTemplate ExportSourceNetworkCfnTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ExportSourceNetworkCfnTemplateResponse> ExportSourceNetworkCfnTemplateAsync(ExportSourceNetworkCfnTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ExportSourceNetworkCfnTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExportSourceNetworkCfnTemplateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Failback ReplicationConfigurations, filtered by Recovery Instance ID.
		/// GetFailbackReplicationConfiguration GetFailbackReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetFailbackReplicationConfigurationResponse> GetFailbackReplicationConfigurationAsync(GetFailbackReplicationConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetFailbackReplicationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetFailbackReplicationConfigurationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a LaunchConfiguration, filtered by Source Server IDs.
		/// GetLaunchConfiguration GetLaunchConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LaunchConfiguration> GetLaunchConfigurationAsync(GetLaunchConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetLaunchConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LaunchConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a ReplicationConfiguration, filtered by Source Server ID.
		/// GetReplicationConfiguration GetReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReplicationConfiguration> GetReplicationConfigurationAsync(GetReplicationConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetReplicationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReplicationConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initialize Elastic Disaster Recovery.
		/// InitializeService InitializeService
		/// </summary>
		public async Task InitializeServiceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "InitializeService";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of source servers on a staging account that are extensible, which means that: a. The source server is not already extended into this Account. b. The source server on the Account we’re reading from is not an extension of another source server.
		/// ListExtensibleSourceServers ListExtensibleSourceServers
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListExtensibleSourceServersResponse> ListExtensibleSourceServersAsync(string maxResults, string nextToken, ListExtensibleSourceServersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListExtensibleSourceServers?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListExtensibleSourceServersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an array of staging accounts for existing extended source servers.
		/// ListStagingAccounts ListStagingAccounts
		/// </summary>
		/// <param name="maxResults">The maximum number of staging Accounts to retrieve.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">The token of the next staging Account to retrieve.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListStagingAccountsResponse> ListStagingAccountsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListStagingAccounts?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListStagingAccountsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all tags for your Elastic Disaster Recovery resources.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource whose tags should be returned.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds or overwrites only the specified tags for the specified Elastic Disaster Recovery resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">ARN of the resource for which tags are to be added or updated.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// WARNING: RetryDataReplication is deprecated. Causes the data replication initiation sequence to begin immediately upon next Handshake for the specified Source Server ID, regardless of when the previous initiation started. This command will work only if the Source Server is stalled or is in a DISCONNECTED or STOPPED state.
		/// RetryDataReplication RetryDataReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> RetryDataReplicationAsync(RetryDataReplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RetryDataReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SourceServer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start replication to origin / target region - applies only to protected instances that originated in EC2. For recovery instances on target region - starts replication back to origin region. For failback instances on origin region - starts replication to target region to re-protect them.
		/// ReverseReplication ReverseReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReverseReplicationResponse> ReverseReplicationAsync(ReverseReplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ReverseReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReverseReplicationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiates a Job for launching the machine that is being failed back to from the specified Recovery Instance. This will run conversion on the failback client and will reboot your machine, thus completing the failback process.
		/// StartFailbackLaunch StartFailbackLaunch
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartFailbackLaunchResponse> StartFailbackLaunchAsync(StartFailbackLaunchPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StartFailbackLaunch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartFailbackLaunchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Launches Recovery Instances for the specified Source Servers. For each Source Server you may choose a point in time snapshot to launch from, or use an on demand snapshot.
		/// StartRecovery StartRecovery
		/// </summary>
		public async Task StartRecoveryAsync(StartRecoveryPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StartRecovery";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts replication for a stopped Source Server. This action would make the Source Server protected again and restart billing for it.
		/// StartReplication StartReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartReplicationResponse> StartReplicationAsync(StartReplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StartReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartReplicationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deploy VPC for the specified Source Network and modify launch templates to use this network. The VPC will be deployed using a dedicated CloudFormation stack.
		/// StartSourceNetworkRecovery StartSourceNetworkRecovery
		/// </summary>
		public async Task StartSourceNetworkRecoveryAsync(StartSourceNetworkRecoveryPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StartSourceNetworkRecovery";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts replication for a Source Network. This action would make the Source Network protected.
		/// StartSourceNetworkReplication StartSourceNetworkReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartSourceNetworkReplicationResponse> StartSourceNetworkReplicationAsync(StartSourceNetworkReplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StartSourceNetworkReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartSourceNetworkReplicationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops the failback process for a specified Recovery Instance. This changes the Failback State of the Recovery Instance back to FAILBACK_NOT_STARTED.
		/// StopFailback StopFailback
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopFailbackAsync(StopFailbackPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopFailback";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops replication for a Source Server. This action would make the Source Server unprotected, delete its existing snapshots and stop billing for it.
		/// StopReplication StopReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopReplicationResponse> StopReplicationAsync(StopReplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StopReplicationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops replication for a Source Network. This action would make the Source Network unprotected.
		/// StopSourceNetworkReplication StopSourceNetworkReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopSourceNetworkReplicationResponse> StopSourceNetworkReplicationAsync(StopSourceNetworkReplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopSourceNetworkReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StopSourceNetworkReplicationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiates a Job for terminating the EC2 resources associated with the specified Recovery Instances, and then will delete the Recovery Instances from the Elastic Disaster Recovery service.
		/// TerminateRecoveryInstances TerminateRecoveryInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TerminateRecoveryInstancesResponse> TerminateRecoveryInstancesAsync(TerminateRecoveryInstancesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TerminateRecoveryInstances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TerminateRecoveryInstancesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified set of tags from the specified set of Elastic Disaster Recovery resources.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">ARN of the resource for which tags are to be removed.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="tagKeys">Array of tags to be removed.</param>
		/// <returns>Success</returns>
		public async Task UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update the failback replication configuration of a Recovery Instance by ID.
		/// UpdateFailbackReplicationConfiguration UpdateFailbackReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateFailbackReplicationConfigurationAsync(UpdateFailbackReplicationConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateFailbackReplicationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a LaunchConfiguration by Source Server ID.
		/// UpdateLaunchConfiguration UpdateLaunchConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LaunchConfiguration> UpdateLaunchConfigurationAsync(UpdateLaunchConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateLaunchConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LaunchConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Launch Configuration Template by ID.
		/// UpdateLaunchConfigurationTemplate UpdateLaunchConfigurationTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateLaunchConfigurationTemplateResponse> UpdateLaunchConfigurationTemplateAsync(UpdateLaunchConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateLaunchConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateLaunchConfigurationTemplateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to update a ReplicationConfiguration by Source Server ID.
		/// UpdateReplicationConfiguration UpdateReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReplicationConfiguration> UpdateReplicationConfigurationAsync(UpdateReplicationConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateReplicationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReplicationConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a ReplicationConfigurationTemplate by ID.
		/// UpdateReplicationConfigurationTemplate UpdateReplicationConfigurationTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReplicationConfigurationTemplate> UpdateReplicationConfigurationTemplateAsync(UpdateReplicationConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateReplicationConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReplicationConfigurationTemplate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AssociateSourceNetworkStackPostBody
	{
		
		/// <summary>
		/// CloudFormation template to associate with a Source Network.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: ^[a-zA-Z][-a-zA-Z0-9]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cfnStackName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z][-a-zA-Z0-9]*$")]
		public string CfnStackName { get; set; }
		
		/// <summary>
		/// The Source Network ID to associate with CloudFormation template.
		/// Required
		/// Min length: 20
		/// Max length: 20
		/// Pattern: ^sn-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^sn-[0-9a-zA-Z]{17}$")]
		public string SourceNetworkID { get; set; }
	}
	
	public class CreateExtendedSourceServerPostBody
	{
		
		/// <summary>
		/// This defines the ARN of the source server in staging Account based on which you want to create an extended source server.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:(?:[0-9a-zA-Z_-]+:){3}([0-9]{12,}):source-server/(s-[0-9a-zA-Z]{17})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:(?:[0-9a-zA-Z_-]+:){3}([0-9]{12,}):source-server/(s-[0-9a-zA-Z]{17})$")]
		public string SourceServerArn { get; set; }
		
		/// <summary>
		/// A list of tags associated with the extended source server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateLaunchConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// Copy private IP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		/// <summary>
		/// Copy tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		/// <summary>
		/// S3 bucket ARN to export Source Network templates.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:.{16,2044}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportBucketArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.{16,2044}$")]
		public string ExportBucketArn { get; set; }
		
		/// <summary>
		/// Launch disposition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		/// <summary>
		/// Configuration of a machine's license.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public CreateLaunchConfigurationTemplatePostBodyLicensing Licensing { get; set; }
		
		/// <summary>
		/// Request to associate tags during creation of a Launch Configuration Template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Target instance type right-sizing method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	public class CreateLaunchConfigurationTemplatePostBodyLicensing
	{
		
		[System.Runtime.Serialization.DataMember(Name="osByol")]
		public System.Nullable<System.Boolean> OsByol { get; set; }
	}
	
	public class CreateReplicationConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public bool AssociateDefaultSecurityGroup { get; set; }
		
		/// <summary>
		/// Whether to allow the AWS replication agent to automatically replicate newly added disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoReplicateNewDisks")]
		public System.Nullable<System.Boolean> AutoReplicateNewDisks { get; set; }
		
		/// <summary>
		/// Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int BandwidthThrottling { get; set; }
		
		/// <summary>
		/// Whether to create a Public IP for the Recovery Instance by default.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public bool CreatePublicIP { get; set; }
		
		/// <summary>
		/// The data plane routing mechanism that will be used for replication.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		/// <summary>
		/// The Staging Disk EBS volume type to be used during replication.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		/// <summary>
		/// The type of EBS encryption to be used during replication.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		/// <summary>
		/// The ARN of the EBS encryption key to be used during replication.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:.{16,2044}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.{16,2044}$")]
		public string EbsEncryptionKeyArn { get; set; }
		
		/// <summary>
		/// The Point in time (PIT) policy to manage snapshots taken during replication.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pitPolicy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public PITPolicyRule[] PitPolicy { get; set; }
		
		/// <summary>
		/// The instance type to be used for the replication server.
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ReplicationServerInstanceType { get; set; }
		
		/// <summary>
		/// The security group IDs that will be used by the replication server.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		/// <summary>
		/// The subnet to be used by the replication staging area.
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// Pattern: ^subnet-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^subnet-[0-9a-fA-F]{8,}$")]
		public string StagingAreaSubnetId { get; set; }
		
		/// <summary>
		/// A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public System.Collections.Generic.Dictionary<string, string> StagingAreaTags { get; set; }
		
		/// <summary>
		/// A set of tags to be associated with the Replication Configuration Template resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Whether to use a dedicated Replication Server in the replication staging area.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public bool UseDedicatedReplicationServer { get; set; }
	}
	
	public class CreateSourceNetworkPostBody
	{
		
		/// <summary>
		/// Account containing the VPC to protect.
		/// Required
		/// Min length: 12
		/// Max length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originAccountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string OriginAccountID { get; set; }
		
		/// <summary>
		/// Region containing the VPC to protect.
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// Pattern: ^(us(-gov)?|ap|ca|cn|eu|sa|af|me)-(central|north|(north(?:east|west))|south|south(?:east|west)|east|west)-[0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originRegion")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(us(-gov)?|ap|ca|cn|eu|sa|af|me)-(central|north|(north(?:east|west))|south|south(?:east|west)|east|west)-[0-9]$")]
		public string OriginRegion { get; set; }
		
		/// <summary>
		/// A set of tags to be associated with the Source Network resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Which VPC ID to protect.
		/// Required
		/// Min length: 12
		/// Max length: 21
		/// Pattern: ^vpc-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^vpc-[0-9a-fA-F]{8,}$")]
		public string VpcID { get; set; }
	}
	
	public class DeleteJobPostBody
	{
		
		/// <summary>
		/// The ID of the Job to be deleted.
		/// Required
		/// Min length: 24
		/// Max length: 24
		/// Pattern: ^drsjob-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		[System.ComponentModel.DataAnnotations.MinLength(24)]
		[System.ComponentModel.DataAnnotations.MaxLength(24)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^drsjob-[0-9a-zA-Z]{17}$")]
		public string JobID { get; set; }
	}
	
	public class DeleteLaunchConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// The ID of the Launch Configuration Template to be deleted.
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// Pattern: ^lct-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^lct-[0-9a-zA-Z]{17}$")]
		public string LaunchConfigurationTemplateID { get; set; }
	}
	
	public class DeleteRecoveryInstancePostBody
	{
		
		/// <summary>
		/// The ID of the Recovery Instance to be deleted.
		/// Required
		/// Min length: 10
		/// Max length: 19
		/// Pattern: ^i-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^i-[0-9a-fA-F]{8,}$")]
		public string RecoveryInstanceID { get; set; }
	}
	
	public class DeleteReplicationConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// The ID of the Replication Configuration Template to be deleted.
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// Pattern: ^rct-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^rct-[0-9a-zA-Z]{17}$")]
		public string ReplicationConfigurationTemplateID { get; set; }
	}
	
	public class DeleteSourceNetworkPostBody
	{
		
		/// <summary>
		/// ID of the Source Network to delete.
		/// Required
		/// Min length: 20
		/// Max length: 20
		/// Pattern: ^sn-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^sn-[0-9a-zA-Z]{17}$")]
		public string SourceNetworkID { get; set; }
	}
	
	public class DeleteSourceServerPostBody
	{
		
		/// <summary>
		/// The ID of the Source Server to be deleted.
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class DescribeJobLogItemsPostBody
	{
		
		/// <summary>
		/// The ID of the Job for which Job log items will be retrieved.
		/// Required
		/// Min length: 24
		/// Max length: 24
		/// Pattern: ^drsjob-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		[System.ComponentModel.DataAnnotations.MinLength(24)]
		[System.ComponentModel.DataAnnotations.MaxLength(24)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^drsjob-[0-9a-zA-Z]{17}$")]
		public string JobID { get; set; }
		
		/// <summary>
		/// Maximum number of Job log items to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token of the next Job log items to retrieve.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class DescribeJobsPostBody
	{
		
		/// <summary>
		/// A set of filters by which to return Jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeJobsPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// Maximum number of Jobs to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token of the next Job to retrieve.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class DescribeJobsPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromDate")]
		public string FromDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobIDs")]
		public string[] JobIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toDate")]
		public string ToDate { get; set; }
	}
	
	public class DescribeLaunchConfigurationTemplatesPostBody
	{
		
		/// <summary>
		/// Request to filter Launch Configuration Templates list by Launch Configuration Template ID.
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] LaunchConfigurationTemplateIDs { get; set; }
		
		/// <summary>
		/// Maximum results to be returned in DescribeLaunchConfigurationTemplates.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token of the next Launch Configuration Template to retrieve.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class DescribeRecoveryInstancesPostBody
	{
		
		/// <summary>
		/// A set of filters by which to return Recovery Instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeRecoveryInstancesPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// Maximum number of Recovery Instances to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token of the next Recovery Instance to retrieve.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class DescribeRecoveryInstancesPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceIDs")]
		public string[] RecoveryInstanceIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		public string[] SourceServerIDs { get; set; }
	}
	
	public class DescribeRecoverySnapshotsPostBody
	{
		
		/// <summary>
		/// A set of filters by which to return Recovery Snapshots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeRecoverySnapshotsPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// Maximum number of Recovery Snapshots to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token of the next Recovery Snapshot to retrieve.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The sorted ordering by which to return Recovery Snapshots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public RecoverySnapshotsOrder Order { get; set; }
		
		/// <summary>
		/// Filter Recovery Snapshots by Source Server ID.
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class DescribeRecoverySnapshotsPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromDateTime")]
		public string FromDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toDateTime")]
		public string ToDateTime { get; set; }
	}
	
	public class DescribeReplicationConfigurationTemplatesPostBody
	{
		
		/// <summary>
		/// Maximum number of Replication Configuration Templates to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token of the next Replication Configuration Template to retrieve.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The IDs of the Replication Configuration Templates to retrieve. An empty list means all Replication Configuration Templates.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string[] ReplicationConfigurationTemplateIDs { get; set; }
	}
	
	public class DescribeSourceNetworksPostBody
	{
		
		/// <summary>
		/// A set of filters by which to return Source Networks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeSourceNetworksPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// Maximum number of Source Networks to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token of the next Source Networks to retrieve.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class DescribeSourceNetworksPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="originAccountID")]
		public string OriginAccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originRegion")]
		public string OriginRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkIDs")]
		public string[] SourceNetworkIDs { get; set; }
	}
	
	public class DescribeSourceServersPostBody
	{
		
		/// <summary>
		/// A set of filters by which to return Source Servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeSourceServersPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// Maximum number of Source Servers to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token of the next Source Server to retrieve.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class DescribeSourceServersPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="hardwareId")]
		public string HardwareId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		public string[] SourceServerIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAccountIDs")]
		public string[] StagingAccountIDs { get; set; }
	}
	
	public class DisconnectRecoveryInstancePostBody
	{
		
		/// <summary>
		/// The ID of the Recovery Instance to disconnect.
		/// Required
		/// Min length: 10
		/// Max length: 19
		/// Pattern: ^i-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^i-[0-9a-fA-F]{8,}$")]
		public string RecoveryInstanceID { get; set; }
	}
	
	public class DisconnectSourceServerPostBody
	{
		
		/// <summary>
		/// The ID of the Source Server to disconnect.
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class ExportSourceNetworkCfnTemplatePostBody
	{
		
		/// <summary>
		/// The Source Network ID to export its CloudFormation template to an S3 bucket.
		/// Required
		/// Min length: 20
		/// Max length: 20
		/// Pattern: ^sn-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^sn-[0-9a-zA-Z]{17}$")]
		public string SourceNetworkID { get; set; }
	}
	
	public class GetFailbackReplicationConfigurationPostBody
	{
		
		/// <summary>
		/// The ID of the Recovery Instance whose failback replication configuration should be returned.
		/// Required
		/// Min length: 10
		/// Max length: 19
		/// Pattern: ^i-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^i-[0-9a-fA-F]{8,}$")]
		public string RecoveryInstanceID { get; set; }
	}
	
	public class GetLaunchConfigurationPostBody
	{
		
		/// <summary>
		/// The ID of the Source Server that we want to retrieve a Launch Configuration for.
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class GetReplicationConfigurationPostBody
	{
		
		/// <summary>
		/// The ID of the Source Serve for this Replication Configuration.r
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class ListExtensibleSourceServersPostBody
	{
		
		/// <summary>
		/// The maximum number of extensible source servers to retrieve.
		/// Minimum: 1
		/// Maximum: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 300)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token of the next extensible source server to retrieve.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The Id of the staging Account to retrieve extensible source servers from.
		/// Required
		/// Min length: 12
		/// Max length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stagingAccountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string StagingAccountID { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// Array of tags to be added or updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class RetryDataReplicationPostBody
	{
		
		/// <summary>
		/// The ID of the Source Server whose data replication should be retried.
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class ReverseReplicationPostBody
	{
		
		/// <summary>
		/// The ID of the Recovery Instance that we want to reverse the replication for.
		/// Required
		/// Min length: 10
		/// Max length: 19
		/// Pattern: ^i-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^i-[0-9a-fA-F]{8,}$")]
		public string RecoveryInstanceID { get; set; }
	}
	
	public class StartFailbackLaunchPostBody
	{
		
		/// <summary>
		/// The IDs of the Recovery Instance whose failback launch we want to request.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string[] RecoveryInstanceIDs { get; set; }
		
		/// <summary>
		/// The tags to be associated with the failback launch Job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartRecoveryPostBody
	{
		
		/// <summary>
		/// Whether this Source Server Recovery operation is a drill or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDrill")]
		public System.Nullable<System.Boolean> IsDrill { get; set; }
		
		/// <summary>
		/// The Source Servers that we want to start a Recovery Job for.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServers")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public StartRecoveryRequestSourceServer[] SourceServers { get; set; }
		
		/// <summary>
		/// The tags to be associated with the Recovery Job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartReplicationPostBody
	{
		
		/// <summary>
		/// The ID of the Source Server to start replication for.
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class StartSourceNetworkRecoveryPostBody
	{
		
		/// <summary>
		/// Don't update existing CloudFormation Stack, recover the network using a new stack.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployAsNew")]
		public System.Nullable<System.Boolean> DeployAsNew { get; set; }
		
		/// <summary>
		/// The Source Networks that we want to start a Recovery Job for.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworks")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public StartSourceNetworkRecoveryRequestNetworkEntry[] SourceNetworks { get; set; }
		
		/// <summary>
		/// The tags to be associated with the Source Network recovery Job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartSourceNetworkReplicationPostBody
	{
		
		/// <summary>
		/// ID of the Source Network to replicate.
		/// Required
		/// Min length: 20
		/// Max length: 20
		/// Pattern: ^sn-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^sn-[0-9a-zA-Z]{17}$")]
		public string SourceNetworkID { get; set; }
	}
	
	public class StopFailbackPostBody
	{
		
		/// <summary>
		/// The ID of the Recovery Instance we want to stop failback for.
		/// Required
		/// Min length: 10
		/// Max length: 19
		/// Pattern: ^i-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^i-[0-9a-fA-F]{8,}$")]
		public string RecoveryInstanceID { get; set; }
	}
	
	public class StopReplicationPostBody
	{
		
		/// <summary>
		/// The ID of the Source Server to stop replication for.
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class StopSourceNetworkReplicationPostBody
	{
		
		/// <summary>
		/// ID of the Source Network to stop replication.
		/// Required
		/// Min length: 20
		/// Max length: 20
		/// Pattern: ^sn-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceNetworkID")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^sn-[0-9a-zA-Z]{17}$")]
		public string SourceNetworkID { get; set; }
	}
	
	public class TerminateRecoveryInstancesPostBody
	{
		
		/// <summary>
		/// The IDs of the Recovery Instances that should be terminated.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string[] RecoveryInstanceIDs { get; set; }
	}
	
	public class UpdateFailbackReplicationConfigurationPostBody
	{
		
		/// <summary>
		/// Configure bandwidth throttling for the outbound data transfer rate of the Recovery Instance in Mbps.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		/// <summary>
		/// The name of the Failback Replication Configuration.
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the Recovery Instance.
		/// Required
		/// Min length: 10
		/// Max length: 19
		/// Pattern: ^i-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recoveryInstanceID")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^i-[0-9a-fA-F]{8,}$")]
		public string RecoveryInstanceID { get; set; }
		
		/// <summary>
		/// Whether to use Private IP for the failback replication of the Recovery Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usePrivateIP")]
		public System.Nullable<System.Boolean> UsePrivateIP { get; set; }
	}
	
	public class UpdateLaunchConfigurationPostBody
	{
		
		/// <summary>
		/// Whether we should copy the Private IP of the Source Server to the Recovery Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		/// <summary>
		/// Whether we want to copy the tags of the Source Server to the EC2 machine of the Recovery Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		/// <summary>
		/// The state of the Recovery Instance in EC2 after the recovery operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		/// <summary>
		/// Configuration of a machine's license.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public UpdateLaunchConfigurationPostBodyLicensing Licensing { get; set; }
		
		/// <summary>
		/// The name of the launch configuration.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the Source Server that we want to retrieve a Launch Configuration for.
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
		
		/// <summary>
		/// Whether Elastic Disaster Recovery should try to automatically choose the instance type that best matches the OS, CPU, and RAM of your Source Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	public class UpdateLaunchConfigurationPostBodyLicensing
	{
		
		[System.Runtime.Serialization.DataMember(Name="osByol")]
		public System.Nullable<System.Boolean> OsByol { get; set; }
	}
	
	public class UpdateLaunchConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// Copy private IP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		/// <summary>
		/// Copy tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		/// <summary>
		/// S3 bucket ARN to export Source Network templates.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:.{16,2044}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportBucketArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.{16,2044}$")]
		public string ExportBucketArn { get; set; }
		
		/// <summary>
		/// Launch Configuration Template ID.
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// Pattern: ^lct-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^lct-[0-9a-zA-Z]{17}$")]
		public string LaunchConfigurationTemplateID { get; set; }
		
		/// <summary>
		/// Launch disposition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		/// <summary>
		/// Configuration of a machine's license.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public UpdateLaunchConfigurationTemplatePostBodyLicensing Licensing { get; set; }
		
		/// <summary>
		/// Target instance type right-sizing method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	public class UpdateLaunchConfigurationTemplatePostBodyLicensing
	{
		
		[System.Runtime.Serialization.DataMember(Name="osByol")]
		public System.Nullable<System.Boolean> OsByol { get; set; }
	}
	
	public class UpdateReplicationConfigurationPostBody
	{
		
		/// <summary>
		/// Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		/// <summary>
		/// Whether to allow the AWS replication agent to automatically replicate newly added disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoReplicateNewDisks")]
		public System.Nullable<System.Boolean> AutoReplicateNewDisks { get; set; }
		
		/// <summary>
		/// Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		/// <summary>
		/// Whether to create a Public IP for the Recovery Instance by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		/// <summary>
		/// The data plane routing mechanism that will be used for replication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		/// <summary>
		/// The Staging Disk EBS volume type to be used during replication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		/// <summary>
		/// The type of EBS encryption to be used during replication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		/// <summary>
		/// The ARN of the EBS encryption key to be used during replication.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:.{16,2044}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.{16,2044}$")]
		public string EbsEncryptionKeyArn { get; set; }
		
		/// <summary>
		/// The name of the Replication Configuration.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Name { get; set; }
		
		/// <summary>
		/// The Point in time (PIT) policy to manage snapshots taken during replication.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pitPolicy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public PITPolicyRule[] PitPolicy { get; set; }
		
		/// <summary>
		/// The configuration of the disks of the Source Server to be replicated.
		/// Minimum items: 0
		/// Maximum items: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicatedDisks")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public ReplicationConfigurationReplicatedDisk[] ReplicatedDisks { get; set; }
		
		/// <summary>
		/// The instance type to be used for the replication server.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ReplicationServerInstanceType { get; set; }
		
		/// <summary>
		/// The security group IDs that will be used by the replication server.
		/// Minimum items: 0
		/// Maximum items: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		/// <summary>
		/// The ID of the Source Server for this Replication Configuration.
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
		
		/// <summary>
		/// The subnet to be used by the replication staging area.
		/// Min length: 0
		/// Max length: 255
		/// Pattern: ^subnet-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^subnet-[0-9a-fA-F]{8,}$")]
		public string StagingAreaSubnetId { get; set; }
		
		/// <summary>
		/// A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public System.Collections.Generic.Dictionary<string, string> StagingAreaTags { get; set; }
		
		/// <summary>
		/// Whether to use a dedicated Replication Server in the replication staging area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
	}
	
	public class UpdateReplicationConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// The Replication Configuration Template ARN.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:.{16,2044}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.{16,2044}$")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		/// <summary>
		/// Whether to allow the AWS replication agent to automatically replicate newly added disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoReplicateNewDisks")]
		public System.Nullable<System.Boolean> AutoReplicateNewDisks { get; set; }
		
		/// <summary>
		/// Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		/// <summary>
		/// Whether to create a Public IP for the Recovery Instance by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		/// <summary>
		/// The data plane routing mechanism that will be used for replication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		/// <summary>
		/// The Staging Disk EBS volume type to be used during replication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		/// <summary>
		/// The type of EBS encryption to be used during replication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		/// <summary>
		/// The ARN of the EBS encryption key to be used during replication.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:.{16,2044}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.{16,2044}$")]
		public string EbsEncryptionKeyArn { get; set; }
		
		/// <summary>
		/// The Point in time (PIT) policy to manage snapshots taken during replication.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pitPolicy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public PITPolicyRule[] PitPolicy { get; set; }
		
		/// <summary>
		/// The Replication Configuration Template ID.
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// Pattern: ^rct-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^rct-[0-9a-zA-Z]{17}$")]
		public string ReplicationConfigurationTemplateID { get; set; }
		
		/// <summary>
		/// The instance type to be used for the replication server.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ReplicationServerInstanceType { get; set; }
		
		/// <summary>
		/// The security group IDs that will be used by the replication server.
		/// Minimum items: 0
		/// Maximum items: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		/// <summary>
		/// The subnet to be used by the replication staging area.
		/// Min length: 0
		/// Max length: 255
		/// Pattern: ^subnet-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^subnet-[0-9a-fA-F]{8,}$")]
		public string StagingAreaSubnetId { get; set; }
		
		/// <summary>
		/// A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public System.Collections.Generic.Dictionary<string, string> StagingAreaTags { get; set; }
		
		/// <summary>
		/// Whether to use a dedicated Replication Server in the replication staging area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
