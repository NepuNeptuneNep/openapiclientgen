//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Obsolete in favor of ApproximateReportedProgress and ApproximateSplitRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApproximateProgress
	{
		
		/// <summary>
		/// Obsolete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentComplete")]
		public System.Nullable<System.Single> PercentComplete { get; set; }
		
		/// <summary>
		/// Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Position Position { get; set; }
		
		/// <summary>
		/// Obsolete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remainingTime")]
		public string RemainingTime { get; set; }
	}
	
	/// <summary>
	/// Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Position
	{
		
		/// <summary>
		/// Position is a byte offset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="byteOffset")]
		public string ByteOffset { get; set; }
		
		/// <summary>
		/// A position that encapsulates an inner position and an index for the inner position. A ConcatPosition can be used by a reader of a source that encapsulates a set of other sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concatPosition")]
		public ConcatPosition ConcatPosition { get; set; }
		
		/// <summary>
		/// Position is past all other positions. Also useful for the end position of an unbounded range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Boolean> End { get; set; }
		
		/// <summary>
		/// Position is a string key, ordered lexicographically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Position is a record index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordIndex")]
		public string RecordIndex { get; set; }
		
		/// <summary>
		/// CloudPosition is a base64 encoded BatchShufflePosition (with FIXED sharding).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shufflePosition")]
		public string ShufflePosition { get; set; }
	}
	
	/// <summary>
	/// A position that encapsulates an inner position and an index for the inner position. A ConcatPosition can be used by a reader of a source that encapsulates a set of other sources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConcatPosition
	{
		
		/// <summary>
		/// Index of the inner source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Position Position { get; set; }
	}
	
	/// <summary>
	/// A progress measurement of a WorkItem by a worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApproximateReportedProgress
	{
		
		/// <summary>
		/// Represents the level of parallelism in a WorkItem's input, reported by the worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumedParallelism")]
		public ReportedParallelism ConsumedParallelism { get; set; }
		
		/// <summary>
		/// Completion as fraction of the input consumed, from 0.0 (beginning, nothing consumed), to 1.0 (end of the input, entire input consumed).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fractionConsumed")]
		public System.Nullable<System.Double> FractionConsumed { get; set; }
		
		/// <summary>
		/// Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Position Position { get; set; }
		
		/// <summary>
		/// Represents the level of parallelism in a WorkItem's input, reported by the worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remainingParallelism")]
		public ReportedParallelism RemainingParallelism { get; set; }
	}
	
	/// <summary>
	/// Represents the level of parallelism in a WorkItem's input, reported by the worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportedParallelism
	{
		
		/// <summary>
		/// Specifies whether the parallelism is infinite. If true, "value" is ignored. Infinite parallelism means the service will assume that the work item can always be split into more non-empty work items by dynamic splitting. This is a work-around for lack of support for infinity by the current JSON-based Java RPC stack.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isInfinite")]
		public System.Nullable<System.Boolean> IsInfinite { get; set; }
		
		/// <summary>
		/// Specifies the level of parallelism in case it is finite.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// A suggestion by the service to the worker to dynamically split the WorkItem.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApproximateSplitRequest
	{
		
		/// <summary>
		/// A fraction at which to split the work item, from 0.0 (beginning of the input) to 1.0 (end of the input).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fractionConsumed")]
		public System.Nullable<System.Double> FractionConsumed { get; set; }
		
		/// <summary>
		/// The fraction of the remainder of work to split the work item at, from 0.0 (split at the current position) to 1.0 (end of the input).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fractionOfRemainder")]
		public System.Nullable<System.Double> FractionOfRemainder { get; set; }
		
		/// <summary>
		/// Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Position Position { get; set; }
	}
	
	/// <summary>
	/// A structured message reporting an autoscaling decision made by the Dataflow service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoscalingEvent
	{
		
		/// <summary>
		/// The current number of workers the job has.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentNumWorkers")]
		public string CurrentNumWorkers { get; set; }
		
		/// <summary>
		/// A rich message format, including a human readable string, a key for identifying the message, and structured data associated with the message for programmatic consumption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public StructuredMessage Description { get; set; }
		
		/// <summary>
		/// The type of autoscaling event to report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public System.Nullable<AutoscalingEventEventType> EventType { get; set; }
		
		/// <summary>
		/// The target number of workers the worker pool wants to resize to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetNumWorkers")]
		public string TargetNumWorkers { get; set; }
		
		/// <summary>
		/// The time this event was emitted to indicate a new target or current num_workers value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
		
		/// <summary>
		/// A short and friendly name for the worker pool this event refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPool")]
		public string WorkerPool { get; set; }
	}
	
	/// <summary>
	/// A rich message format, including a human readable string, a key for identifying the message, and structured data associated with the message for programmatic consumption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructuredMessage
	{
		
		/// <summary>
		/// Identifier for this message type. Used by external systems to internationalize or personalize message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageKey")]
		public string MessageKey { get; set; }
		
		/// <summary>
		/// Human-readable version of message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageText")]
		public string MessageText { get; set; }
		
		/// <summary>
		/// The structured data associated with this message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public Parameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// Structured data associated with this message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Parameter
	{
		
		/// <summary>
		/// Key or name for this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value for this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoscalingEventEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_NUM_WORKERS_CHANGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENT_NUM_WORKERS_CHANGED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTUATION_FAILURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_CHANGE = 4,
	}
	
	/// <summary>
	/// Settings for WorkerPool autoscaling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoscalingSettings
	{
		
		/// <summary>
		/// The algorithm to use for autoscaling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public System.Nullable<AutoscalingSettingsAlgorithm> Algorithm { get; set; }
		
		/// <summary>
		/// The maximum number of workers to cap scaling at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxNumWorkers")]
		public System.Nullable<System.Int32> MaxNumWorkers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoscalingSettingsAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOSCALING_ALGORITHM_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOSCALING_ALGORITHM_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOSCALING_ALGORITHM_BASIC = 2,
	}
	
	/// <summary>
	/// Exponential buckets where the growth factor between buckets is `2**(2**-scale)`. e.g. for `scale=1` growth factor is `2**(2**(-1))=sqrt(2)`. `n` buckets will have the following boundaries. - 0th: [0, gf) - i in [1, n-1]: [gf^(i), gf^(i+1))
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Base2Exponent
	{
		
		/// <summary>
		/// Must be greater than 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfBuckets")]
		public System.Nullable<System.Int32> NumberOfBuckets { get; set; }
		
		/// <summary>
		/// Must be between -3 and 3. This forces the growth factor of the bucket boundaries to be between `2^(1/8)` and `256`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public System.Nullable<System.Int32> Scale { get; set; }
	}
	
	/// <summary>
	/// Metadata for a BigQuery connector used by the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BigQueryIODetails
	{
		
		/// <summary>
		/// Dataset accessed in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public string Dataset { get; set; }
		
		/// <summary>
		/// Project accessed in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Query used to access data in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// Table accessed in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public string Table { get; set; }
	}
	
	/// <summary>
	/// Metadata for a Cloud Bigtable connector used by the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BigTableIODetails
	{
		
		/// <summary>
		/// InstanceId accessed in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// ProjectId accessed in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// TableId accessed in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
	}
	
	/// <summary>
	/// `BucketOptions` describes the bucket boundaries used in the histogram.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BucketOptions
	{
		
		/// <summary>
		/// Exponential buckets where the growth factor between buckets is `2**(2**-scale)`. e.g. for `scale=1` growth factor is `2**(2**(-1))=sqrt(2)`. `n` buckets will have the following boundaries. - 0th: [0, gf) - i in [1, n-1]: [gf^(i), gf^(i+1))
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exponential")]
		public Base2Exponent Exponential { get; set; }
		
		/// <summary>
		/// Linear buckets with the following boundaries for indices in 0 to n-1. - i in [0, n-1]: [start + (i)*width, start + (i+1)*width)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linear")]
		public Linear Linear { get; set; }
	}
	
	/// <summary>
	/// Linear buckets with the following boundaries for indices in 0 to n-1. - i in [0, n-1]: [start + (i)*width, start + (i+1)*width)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Linear
	{
		
		/// <summary>
		/// Must be greater than 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfBuckets")]
		public System.Nullable<System.Int32> NumberOfBuckets { get; set; }
		
		/// <summary>
		/// Lower bound of the first bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Double> Start { get; set; }
		
		/// <summary>
		/// Distance between bucket boundaries. Must be greater than 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	/// <summary>
	/// Modeled after information exposed by /proc/stat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CPUTime
	{
		
		/// <summary>
		/// Average CPU utilization rate (% non-idle cpu / second) since previous sample.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// Timestamp of the measurement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Total active CPU time across all cores (ie., non-idle) in milliseconds since start-up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMs")]
		public string TotalMs { get; set; }
	}
	
	/// <summary>
	/// Description of an interstitial value between transforms in an execution stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentSource
	{
		
		/// <summary>
		/// Dataflow service generated name for this source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User name for the original user transform or collection with which this source is most closely associated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalTransformOrCollection")]
		public string OriginalTransformOrCollection { get; set; }
		
		/// <summary>
		/// Human-readable name for this transform; may be user or system generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// Description of a transform executed as part of an execution stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentTransform
	{
		
		/// <summary>
		/// Dataflow service generated name for this source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User name for the original user transform with which this transform is most closely associated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalTransform")]
		public string OriginalTransform { get; set; }
		
		/// <summary>
		/// Human-readable name for this transform; may be user or system generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// All configuration data for a particular Computation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComputationTopology
	{
		
		/// <summary>
		/// The ID of the computation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computationId")]
		public string ComputationId { get; set; }
		
		/// <summary>
		/// The inputs to the computation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public StreamLocation[] Inputs { get; set; }
		
		/// <summary>
		/// The key ranges processed by the computation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyRanges")]
		public KeyRangeLocation[] KeyRanges { get; set; }
		
		/// <summary>
		/// The outputs from the computation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public StreamLocation[] Outputs { get; set; }
		
		/// <summary>
		/// The state family values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateFamilies")]
		public StateFamilyConfig[] StateFamilies { get; set; }
		
		/// <summary>
		/// The system stage name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemStageName")]
		public string SystemStageName { get; set; }
	}
	
	/// <summary>
	/// Describes a stream of data, either as input to be processed or as output of a streaming Dataflow job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamLocation
	{
		
		/// <summary>
		/// Identifies the location of a custom souce.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customSourceLocation")]
		public CustomSourceLocation CustomSourceLocation { get; set; }
		
		/// <summary>
		/// Identifies a pubsub location to use for transferring data into or out of a streaming Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubLocation")]
		public PubsubLocation PubsubLocation { get; set; }
		
		/// <summary>
		/// Identifies the location of a streaming side input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sideInputLocation")]
		public StreamingSideInputLocation SideInputLocation { get; set; }
		
		/// <summary>
		/// Identifies the location of a streaming computation stage, for stage-to-stage communication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingStageLocation")]
		public StreamingStageLocation StreamingStageLocation { get; set; }
	}
	
	/// <summary>
	/// Identifies the location of a custom souce.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomSourceLocation
	{
		
		/// <summary>
		/// Whether this source is stateful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateful")]
		public System.Nullable<System.Boolean> Stateful { get; set; }
	}
	
	/// <summary>
	/// Identifies a pubsub location to use for transferring data into or out of a streaming Dataflow job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PubsubLocation
	{
		
		/// <summary>
		/// Indicates whether the pipeline allows late-arriving data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dropLateData")]
		public System.Nullable<System.Boolean> DropLateData { get; set; }
		
		/// <summary>
		/// If true, then this location represents dynamic topics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicDestinations")]
		public System.Nullable<System.Boolean> DynamicDestinations { get; set; }
		
		/// <summary>
		/// If set, contains a pubsub label from which to extract record ids. If left empty, record deduplication will be strictly best effort.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idLabel")]
		public string IdLabel { get; set; }
		
		/// <summary>
		/// A pubsub subscription, in the form of "pubsub.googleapis.com/subscriptions//"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public string Subscription { get; set; }
		
		/// <summary>
		/// If set, contains a pubsub label from which to extract record timestamps. If left empty, record timestamps will be generated upon arrival.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampLabel")]
		public string TimestampLabel { get; set; }
		
		/// <summary>
		/// A pubsub topic, in the form of "pubsub.googleapis.com/topics//"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
		
		/// <summary>
		/// If set, specifies the pubsub subscription that will be used for tracking custom time timestamps for watermark estimation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingSubscription")]
		public string TrackingSubscription { get; set; }
		
		/// <summary>
		/// If true, then the client has requested to get pubsub attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withAttributes")]
		public System.Nullable<System.Boolean> WithAttributes { get; set; }
	}
	
	/// <summary>
	/// Identifies the location of a streaming side input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingSideInputLocation
	{
		
		/// <summary>
		/// Identifies the state family where this side input is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateFamily")]
		public string StateFamily { get; set; }
		
		/// <summary>
		/// Identifies the particular side input within the streaming Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Identifies the location of a streaming computation stage, for stage-to-stage communication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingStageLocation
	{
		
		/// <summary>
		/// Identifies the particular stream within the streaming Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamId")]
		public string StreamId { get; set; }
	}
	
	/// <summary>
	/// Location information for a specific key-range of a sharded computation. Currently we only support UTF-8 character splits to simplify encoding into JSON.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyRangeLocation
	{
		
		/// <summary>
		/// The name of the data disk where data for this range is stored. This name is local to the Google Cloud Platform project and uniquely identifies the disk within that project, for example "myproject-1014-104817-4c2-harness-0-disk-1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisk")]
		public string DataDisk { get; set; }
		
		/// <summary>
		/// The physical location of this range assignment to be used for streaming computation cross-worker message delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryEndpoint")]
		public string DeliveryEndpoint { get; set; }
		
		/// <summary>
		/// DEPRECATED. The location of the persistent state for this range, as a persistent directory in the worker local filesystem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecatedPersistentDirectory")]
		public string DeprecatedPersistentDirectory { get; set; }
		
		/// <summary>
		/// The end (exclusive) of the key range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public string End { get; set; }
		
		/// <summary>
		/// The start (inclusive) of the key range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
	}
	
	/// <summary>
	/// State family configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StateFamilyConfig
	{
		
		/// <summary>
		/// If true, this family corresponds to a read operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRead")]
		public System.Nullable<System.Boolean> IsRead { get; set; }
		
		/// <summary>
		/// The state family value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateFamily")]
		public string StateFamily { get; set; }
	}
	
	/// <summary>
	/// Container Spec.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerSpec
	{
		
		/// <summary>
		/// The environment values to be set at runtime for flex template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultEnvironment")]
		public FlexTemplateRuntimeEnvironment DefaultEnvironment { get; set; }
		
		/// <summary>
		/// Name of the docker container image. E.g., gcr.io/project/some-image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Cloud Storage path to self-signed certificate of private registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageRepositoryCertPath")]
		public string ImageRepositoryCertPath { get; set; }
		
		/// <summary>
		/// Secret Manager secret id for password to authenticate to private registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageRepositoryPasswordSecretId")]
		public string ImageRepositoryPasswordSecretId { get; set; }
		
		/// <summary>
		/// Secret Manager secret id for username to authenticate to private registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageRepositoryUsernameSecretId")]
		public string ImageRepositoryUsernameSecretId { get; set; }
		
		/// <summary>
		/// Metadata describing a template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public TemplateMetadata Metadata { get; set; }
		
		/// <summary>
		/// SDK Information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkInfo")]
		public SDKInfo SdkInfo { get; set; }
	}
	
	/// <summary>
	/// The environment values to be set at runtime for flex template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlexTemplateRuntimeEnvironment
	{
		
		/// <summary>
		/// Additional experiment flags for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalExperiments")]
		public string[] AdditionalExperiments { get; set; }
		
		/// <summary>
		/// Additional user labels to be specified for the job. Keys and values must follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1kg", "count": "3" }.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalUserLabels")]
		public System.Collections.Generic.Dictionary<string, string> AdditionalUserLabels { get; set; }
		
		/// <summary>
		/// The algorithm to use for autoscaling
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscalingAlgorithm")]
		public AutoscalingSettingsAlgorithm AutoscalingAlgorithm { get; set; }
		
		/// <summary>
		/// Worker disk size, in gigabytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public System.Nullable<System.Int32> DiskSizeGb { get; set; }
		
		/// <summary>
		/// If true, when processing time is spent almost entirely on garbage collection (GC), saves a heap dump before ending the thread or process. If false, ends the thread or process without saving a heap dump. Does not save a heap dump when the Java Virtual Machine (JVM) has an out of memory error during processing. The location of the heap file is either echoed back to the user, or the user is given the opportunity to download the heap file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dumpHeapOnOom")]
		public System.Nullable<System.Boolean> DumpHeapOnOom { get; set; }
		
		/// <summary>
		/// If true serial port logging will be enabled for the launcher VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableLauncherVmSerialPortLogging")]
		public System.Nullable<System.Boolean> EnableLauncherVmSerialPortLogging { get; set; }
		
		/// <summary>
		/// Whether to enable Streaming Engine for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableStreamingEngine")]
		public System.Nullable<System.Boolean> EnableStreamingEngine { get; set; }
		
		/// <summary>
		/// Set FlexRS goal for the job. https://cloud.google.com/dataflow/docs/guides/flexrs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flexrsGoal")]
		public System.Nullable<FlexTemplateRuntimeEnvironmentFlexrsGoal> FlexrsGoal { get; set; }
		
		/// <summary>
		/// Configuration for VM IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipConfiguration")]
		public System.Nullable<FlexTemplateRuntimeEnvironmentIpConfiguration> IpConfiguration { get; set; }
		
		/// <summary>
		/// Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
		
		/// <summary>
		/// The machine type to use for launching the job. The default is n1-standard-1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launcherMachineType")]
		public string LauncherMachineType { get; set; }
		
		/// <summary>
		/// The machine type to use for the job. Defaults to the value from the template if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxWorkers")]
		public System.Nullable<System.Int32> MaxWorkers { get; set; }
		
		/// <summary>
		/// Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// The initial number of Google Compute Engine instances for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numWorkers")]
		public System.Nullable<System.Int32> NumWorkers { get; set; }
		
		/// <summary>
		/// Cloud Storage bucket (directory) to upload heap dumps to. Enabling this field implies that `dump_heap_on_oom` is set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saveHeapDumpsToGcsPath")]
		public string SaveHeapDumpsToGcsPath { get; set; }
		
		/// <summary>
		/// Docker registry location of container image to use for the 'worker harness. Default is the container for the version of the SDK. Note this field is only valid for portable pipelines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkContainerImage")]
		public string SdkContainerImage { get; set; }
		
		/// <summary>
		/// The email address of the service account to run the job as.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountEmail")]
		public string ServiceAccountEmail { get; set; }
		
		/// <summary>
		/// The Cloud Storage path for staging local files. Must be a valid Cloud Storage URL, beginning with `gs://`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stagingLocation")]
		public string StagingLocation { get; set; }
		
		/// <summary>
		/// Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
		
		/// <summary>
		/// The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempLocation")]
		public string TempLocation { get; set; }
		
		/// <summary>
		/// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerRegion")]
		public string WorkerRegion { get; set; }
		
		/// <summary>
		/// The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerZone")]
		public string WorkerZone { get; set; }
		
		/// <summary>
		/// The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FlexTemplateRuntimeEnvironmentFlexrsGoal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEXRS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEXRS_SPEED_OPTIMIZED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEXRS_COST_OPTIMIZED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FlexTemplateRuntimeEnvironmentIpConfiguration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKER_IP_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKER_IP_PUBLIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKER_IP_PRIVATE = 2,
	}
	
	/// <summary>
	/// Metadata describing a template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TemplateMetadata
	{
		
		/// <summary>
		/// Optional. A description of the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. The name of the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters for the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ParameterMetadata[] Parameters { get; set; }
	}
	
	/// <summary>
	/// Metadata for a specific parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParameterMetadata
	{
		
		/// <summary>
		/// Optional. Additional metadata for describing this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMetadata")]
		public System.Collections.Generic.Dictionary<string, string> CustomMetadata { get; set; }
		
		/// <summary>
		/// Optional. The default values will pre-populate the parameter with the given value from the proto. If default_value is left empty, the parameter will be populated with a default of the relevant type, e.g. false for a boolean.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Optional. The options shown when ENUM ParameterType is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumOptions")]
		public ParameterMetadataEnumOption[] EnumOptions { get; set; }
		
		/// <summary>
		/// Optional. Specifies a group name for this parameter to be rendered under. Group header text will be rendered exactly as specified in this field. Only considered when parent_name is NOT provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Required. The help text to display for the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpText")]
		public string HelpText { get; set; }
		
		/// <summary>
		/// Optional. Whether the parameter is optional. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOptional")]
		public System.Nullable<System.Boolean> IsOptional { get; set; }
		
		/// <summary>
		/// Required. The label to display for the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required. The name of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. The type of the parameter. Used for selecting input picker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paramType")]
		public System.Nullable<ParameterMetadataParamType> ParamType { get; set; }
		
		/// <summary>
		/// Optional. Specifies the name of the parent parameter. Used in conjunction with 'parent_trigger_values' to make this parameter conditional (will only be rendered conditionally). Should be mappable to a ParameterMetadata.name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentName")]
		public string ParentName { get; set; }
		
		/// <summary>
		/// Optional. The value(s) of the 'parent_name' parameter which will trigger this parameter to be shown. If left empty, ANY non-empty value in parent_name will trigger this parameter to be shown. Only considered when this parameter is conditional (when 'parent_name' has been provided).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentTriggerValues")]
		public string[] ParentTriggerValues { get; set; }
		
		/// <summary>
		/// Optional. Regexes that the parameter must match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regexes")]
		public string[] Regexes { get; set; }
	}
	
	/// <summary>
	/// ParameterMetadataEnumOption specifies the option shown in the enum form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParameterMetadataEnumOption
	{
		
		/// <summary>
		/// Optional. The description to display for the enum option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. The label to display for the enum option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required. The value of the enum option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParameterMetadataParamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCS_READ_BUCKET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCS_WRITE_BUCKET = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCS_READ_FILE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCS_WRITE_FILE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCS_READ_FOLDER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCS_WRITE_FOLDER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBSUB_TOPIC = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBSUB_SUBSCRIPTION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIGQUERY_TABLE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAVASCRIPT_UDF_FILE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_ACCOUNT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MACHINE_TYPE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS_KEY_NAME = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKER_REGION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKER_ZONE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENUM = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER = 19,
	}
	
	/// <summary>
	/// SDK Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SDKInfo
	{
		
		/// <summary>
		/// Required. The SDK Language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public System.Nullable<SDKInfoLanguage> Language { get; set; }
		
		/// <summary>
		/// Optional. The SDK version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SDKInfoLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAVA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYTHON = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GO = 3,
	}
	
	/// <summary>
	/// CounterMetadata includes all static non-name non-value counter attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CounterMetadata
	{
		
		/// <summary>
		/// Human-readable description of the counter semantics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Counter aggregation kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<CounterMetadataKind> Kind { get; set; }
		
		/// <summary>
		/// A string referring to the unit type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherUnits")]
		public string OtherUnits { get; set; }
		
		/// <summary>
		/// System defined Units, see above enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardUnits")]
		public System.Nullable<CounterMetadataStandardUnits> StandardUnits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CounterMetadataKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEAN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SET = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTRIBUTION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST_VALUE = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CounterMetadataStandardUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYTES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYTES_PER_SEC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MILLISECONDS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MICROSECONDS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NANOSECONDS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMESTAMP_MSEC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMESTAMP_USEC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMESTAMP_NSEC = 7,
	}
	
	/// <summary>
	/// Identifies a counter within a per-job namespace. Counters whose structured names are the same get merged into a single value for the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CounterStructuredName
	{
		
		/// <summary>
		/// Name of the optimized step being executed by the workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentStepName")]
		public string ComponentStepName { get; set; }
		
		/// <summary>
		/// Name of the stage. An execution step contains multiple component steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStepName")]
		public string ExecutionStepName { get; set; }
		
		/// <summary>
		/// Index of an input collection that's being read from/written to as a side input. The index identifies a step's side inputs starting by 1 (e.g. the first side input has input_index 1, the third has input_index 3). Side inputs are identified by a pair of (original_step_name, input_index). This field helps uniquely identify them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputIndex")]
		public System.Nullable<System.Int32> InputIndex { get; set; }
		
		/// <summary>
		/// Counter name. Not necessarily globally-unique, but unique within the context of the other fields. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// One of the standard Origins defined above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public System.Nullable<CounterStructuredNameOrigin> Origin { get; set; }
		
		/// <summary>
		/// A string containing a more specific namespace of the counter's origin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originNamespace")]
		public string OriginNamespace { get; set; }
		
		/// <summary>
		/// The step name requesting an operation, such as GBK. I.e. the ParDo causing a read/write from shuffle to occur, or a read from side inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalRequestingStepName")]
		public string OriginalRequestingStepName { get; set; }
		
		/// <summary>
		/// System generated name of the original step in the user's graph, before optimization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalStepName")]
		public string OriginalStepName { get; set; }
		
		/// <summary>
		/// Portion of this counter, either key or value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portion")]
		public System.Nullable<CounterStructuredNamePortion> Portion { get; set; }
		
		/// <summary>
		/// ID of a particular worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerId")]
		public string WorkerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CounterStructuredNameOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CounterStructuredNamePortion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE = 2,
	}
	
	/// <summary>
	/// A single message which encapsulates structured name and metadata for a given counter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CounterStructuredNameAndMetadata
	{
		
		/// <summary>
		/// CounterMetadata includes all static non-name non-value counter attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public CounterMetadata Metadata { get; set; }
		
		/// <summary>
		/// Identifies a counter within a per-job namespace. Counters whose structured names are the same get merged into a single value for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public CounterStructuredName Name { get; set; }
	}
	
	/// <summary>
	/// An update to a Counter sent from a worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CounterUpdate
	{
		
		/// <summary>
		/// Boolean value for And, Or.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolean")]
		public System.Nullable<System.Boolean> Boolean { get; set; }
		
		/// <summary>
		/// True if this counter is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this counter is reported as a delta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative")]
		public System.Nullable<System.Boolean> Cumulative { get; set; }
		
		/// <summary>
		/// A metric value representing a distribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distribution")]
		public DistributionUpdate Distribution { get; set; }
		
		/// <summary>
		/// Floating point value for Sum, Max, Min.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floatingPoint")]
		public System.Nullable<System.Double> FloatingPoint { get; set; }
		
		/// <summary>
		/// A metric value representing a list of floating point numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floatingPointList")]
		public FloatingPointList FloatingPointList { get; set; }
		
		/// <summary>
		/// A representation of a floating point mean metric contribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floatingPointMean")]
		public FloatingPointMean FloatingPointMean { get; set; }
		
		/// <summary>
		/// A representation of an int64, n, that is immune to precision loss when encoded in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integer")]
		public SplitInt64 Integer { get; set; }
		
		/// <summary>
		/// A metric value representing temporal values of a variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerGauge")]
		public IntegerGauge IntegerGauge { get; set; }
		
		/// <summary>
		/// A metric value representing a list of integers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerList")]
		public IntegerList IntegerList { get; set; }
		
		/// <summary>
		/// A representation of an integer mean metric contribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerMean")]
		public IntegerMean IntegerMean { get; set; }
		
		/// <summary>
		/// Value for internally-defined counters used by the Dataflow service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internal")]
		public object Internal { get; set; }
		
		/// <summary>
		/// Basic metadata about a counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAndKind")]
		public NameAndKind NameAndKind { get; set; }
		
		/// <summary>
		/// The service-generated short identifier for this counter. The short_id -> (name, metadata) mapping is constant for the lifetime of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortId")]
		public string ShortId { get; set; }
		
		/// <summary>
		/// A metric value representing a list of strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringList")]
		public StringList StringList { get; set; }
		
		/// <summary>
		/// A single message which encapsulates structured name and metadata for a given counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredNameAndMetadata")]
		public CounterStructuredNameAndMetadata StructuredNameAndMetadata { get; set; }
	}
	
	/// <summary>
	/// A metric value representing a distribution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistributionUpdate
	{
		
		/// <summary>
		/// A representation of an int64, n, that is immune to precision loss when encoded in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public SplitInt64 Count { get; set; }
		
		/// <summary>
		/// Histogram of value counts for a distribution. Buckets have an inclusive lower bound and exclusive upper bound and use "1,2,5 bucketing": The first bucket range is from [0,1) and all subsequent bucket boundaries are powers of ten multiplied by 1, 2, or 5. Thus, bucket boundaries are 0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, ... Negative values are not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogram")]
		public Histogram Histogram { get; set; }
		
		/// <summary>
		/// A representation of an int64, n, that is immune to precision loss when encoded in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public SplitInt64 Max { get; set; }
		
		/// <summary>
		/// A representation of an int64, n, that is immune to precision loss when encoded in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public SplitInt64 Min { get; set; }
		
		/// <summary>
		/// A representation of an int64, n, that is immune to precision loss when encoded in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sum")]
		public SplitInt64 Sum { get; set; }
		
		/// <summary>
		/// Use a double since the sum of squares is likely to overflow int64.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sumOfSquares")]
		public System.Nullable<System.Double> SumOfSquares { get; set; }
	}
	
	/// <summary>
	/// A representation of an int64, n, that is immune to precision loss when encoded in JSON.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SplitInt64
	{
		
		/// <summary>
		/// The high order bits, including the sign: n >> 32.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highBits")]
		public System.Nullable<System.Int32> HighBits { get; set; }
		
		/// <summary>
		/// The low order bits: n & 0xffffffff.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowBits")]
		public System.Nullable<System.UInt32> LowBits { get; set; }
	}
	
	/// <summary>
	/// Histogram of value counts for a distribution. Buckets have an inclusive lower bound and exclusive upper bound and use "1,2,5 bucketing": The first bucket range is from [0,1) and all subsequent bucket boundaries are powers of ten multiplied by 1, 2, or 5. Thus, bucket boundaries are 0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, ... Negative values are not supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Histogram
	{
		
		/// <summary>
		/// Counts of values in each bucket. For efficiency, prefix and trailing buckets with count = 0 are elided. Buckets can store the full range of values of an unsigned long, with ULLONG_MAX falling into the 59th bucket with range [1e19, 2e19).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketCounts")]
		public string[] BucketCounts { get; set; }
		
		/// <summary>
		/// Starting index of first stored bucket. The non-inclusive upper-bound of the ith bucket is given by: pow(10,(i-first_bucket_offset)/3) * (1,2,5)[(i-first_bucket_offset)%3]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstBucketOffset")]
		public System.Nullable<System.Int32> FirstBucketOffset { get; set; }
	}
	
	/// <summary>
	/// A metric value representing a list of floating point numbers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloatingPointList
	{
		
		/// <summary>
		/// Elements of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public double[] Elements { get; set; }
	}
	
	/// <summary>
	/// A representation of a floating point mean metric contribution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloatingPointMean
	{
		
		/// <summary>
		/// A representation of an int64, n, that is immune to precision loss when encoded in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public SplitInt64 Count { get; set; }
		
		/// <summary>
		/// The sum of all values being aggregated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sum")]
		public System.Nullable<System.Double> Sum { get; set; }
	}
	
	/// <summary>
	/// A metric value representing temporal values of a variable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegerGauge
	{
		
		/// <summary>
		/// The time at which this value was measured. Measured as msecs from epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// A representation of an int64, n, that is immune to precision loss when encoded in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SplitInt64 Value { get; set; }
	}
	
	/// <summary>
	/// A metric value representing a list of integers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegerList
	{
		
		/// <summary>
		/// Elements of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public SplitInt64[] Elements { get; set; }
	}
	
	/// <summary>
	/// A representation of an integer mean metric contribution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegerMean
	{
		
		/// <summary>
		/// A representation of an int64, n, that is immune to precision loss when encoded in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public SplitInt64 Count { get; set; }
		
		/// <summary>
		/// A representation of an int64, n, that is immune to precision loss when encoded in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sum")]
		public SplitInt64 Sum { get; set; }
	}
	
	/// <summary>
	/// Basic metadata about a counter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NameAndKind
	{
		
		/// <summary>
		/// Counter aggregation kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public CounterMetadataKind Kind { get; set; }
		
		/// <summary>
		/// Name of the counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A metric value representing a list of strings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringList
	{
		
		/// <summary>
		/// Elements of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public string[] Elements { get; set; }
	}
	
	/// <summary>
	/// A request to create a Cloud Dataflow job from a template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateJobFromTemplateRequest
	{
		
		/// <summary>
		/// The environment values to set at runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public RuntimeEnvironment Environment { get; set; }
		
		/// <summary>
		/// Required. A Cloud Storage path to the template from which to create the job. Must be a valid Cloud Storage URL, beginning with `gs://`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsPath")]
		public string GcsPath { get; set; }
		
		/// <summary>
		/// Required. The job name to use for the created job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobName")]
		public string JobName { get; set; }
		
		/// <summary>
		/// The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The runtime parameters to pass to the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
	}
	
	/// <summary>
	/// The environment values to set at runtime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeEnvironment
	{
		
		/// <summary>
		/// Optional. Additional experiment flags for the job, specified with the `--experiments` option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalExperiments")]
		public string[] AdditionalExperiments { get; set; }
		
		/// <summary>
		/// Optional. Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1kg", "count": "3" }.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalUserLabels")]
		public System.Collections.Generic.Dictionary<string, string> AdditionalUserLabels { get; set; }
		
		/// <summary>
		/// Optional. Whether to bypass the safety checks for the job's temporary directory. Use with caution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bypassTempDirValidation")]
		public System.Nullable<System.Boolean> BypassTempDirValidation { get; set; }
		
		/// <summary>
		/// Optional. The disk size, in gigabytes, to use on each remote Compute Engine worker instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public System.Nullable<System.Int32> DiskSizeGb { get; set; }
		
		/// <summary>
		/// Optional. Whether to enable Streaming Engine for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableStreamingEngine")]
		public System.Nullable<System.Boolean> EnableStreamingEngine { get; set; }
		
		/// <summary>
		/// Optional. Configuration for VM IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipConfiguration")]
		public FlexTemplateRuntimeEnvironmentIpConfiguration IpConfiguration { get; set; }
		
		/// <summary>
		/// Optional. Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
		
		/// <summary>
		/// Optional. The machine type to use for the job. Defaults to the value from the template if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// Optional. The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000. The default value is 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxWorkers")]
		public System.Nullable<System.Int32> MaxWorkers { get; set; }
		
		/// <summary>
		/// Optional. Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Optional. The initial number of Google Compute Engine instances for the job. The default value is 11.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numWorkers")]
		public System.Nullable<System.Int32> NumWorkers { get; set; }
		
		/// <summary>
		/// Optional. The email address of the service account to run the job as.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountEmail")]
		public string ServiceAccountEmail { get; set; }
		
		/// <summary>
		/// Optional. Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
		
		/// <summary>
		/// Required. The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempLocation")]
		public string TempLocation { get; set; }
		
		/// <summary>
		/// Required. The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerRegion")]
		public string WorkerRegion { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerZone")]
		public string WorkerZone { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// Data disk assignment for a given VM instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataDiskAssignment
	{
		
		/// <summary>
		/// Mounted data disks. The order is important a data disk's 0-based index in this list defines which persistent directory the disk is mounted to, for example the list of { "myproject-1014-104817-4c2-harness-0-disk-0" }, { "myproject-1014-104817-4c2-harness-0-disk-1" }.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisks")]
		public string[] DataDisks { get; set; }
		
		/// <summary>
		/// VM instance name the data disks mounted to, for example "myproject-1014-104817-4c2-harness-0".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmInstance")]
		public string VmInstance { get; set; }
	}
	
	/// <summary>
	/// Configuration options for sampling elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSamplingConfig
	{
		
		/// <summary>
		/// List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="behaviors")]
		public string[] Behaviors { get; set; }
	}
	
	/// <summary>
	/// Contains per-worker telemetry about the data sampling feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSamplingReport
	{
		
		/// <summary>
		/// Optional. Delta of bytes written to file from previous report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesWrittenDelta")]
		public string BytesWrittenDelta { get; set; }
		
		/// <summary>
		/// Optional. Delta of bytes sampled from previous report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elementsSampledBytes")]
		public string ElementsSampledBytes { get; set; }
		
		/// <summary>
		/// Optional. Delta of number of elements sampled from previous report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elementsSampledCount")]
		public string ElementsSampledCount { get; set; }
		
		/// <summary>
		/// Optional. Delta of number of samples taken from user code exceptions from previous report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exceptionsSampledCount")]
		public string ExceptionsSampledCount { get; set; }
		
		/// <summary>
		/// Optional. Delta of number of PCollections sampled from previous report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pcollectionsSampledCount")]
		public string PcollectionsSampledCount { get; set; }
		
		/// <summary>
		/// Optional. Delta of errors counts from persisting the samples from previous report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistenceErrorsCount")]
		public string PersistenceErrorsCount { get; set; }
		
		/// <summary>
		/// Optional. Delta of errors counts from retrieving, or translating the samples from previous report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translationErrorsCount")]
		public string TranslationErrorsCount { get; set; }
	}
	
	/// <summary>
	/// Summary statistics for a population of values. HistogramValue contains a sequence of buckets and gives a count of values that fall into each bucket. Bucket boundares are defined by a formula and bucket widths are either fixed or exponentially increasing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataflowHistogramValue
	{
		
		/// <summary>
		/// Optional. The number of values in each bucket of the histogram, as described in `bucket_options`. `bucket_counts` should contain N values, where N is the number of buckets specified in `bucket_options`. If `bucket_counts` has fewer than N values, the remaining values are assumed to be 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketCounts")]
		public string[] BucketCounts { get; set; }
		
		/// <summary>
		/// `BucketOptions` describes the bucket boundaries used in the histogram.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketOptions")]
		public BucketOptions BucketOptions { get; set; }
		
		/// <summary>
		/// Number of values recorded in this histogram.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Statistics for the underflow and overflow bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlierStats")]
		public OutlierStats OutlierStats { get; set; }
	}
	
	/// <summary>
	/// Statistics for the underflow and overflow bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutlierStats
	{
		
		/// <summary>
		/// Number of values that are larger than the upper bound of the largest bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overflowCount")]
		public string OverflowCount { get; set; }
		
		/// <summary>
		/// Mean of values in the overflow bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overflowMean")]
		public System.Nullable<System.Double> OverflowMean { get; set; }
		
		/// <summary>
		/// Number of values that are smaller than the lower bound of the smallest bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="underflowCount")]
		public string UnderflowCount { get; set; }
		
		/// <summary>
		/// Mean of values in the undeflow bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="underflowMean")]
		public System.Nullable<System.Double> UnderflowMean { get; set; }
	}
	
	/// <summary>
	/// Metadata for a Datastore connector used by the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastoreIODetails
	{
		
		/// <summary>
		/// Namespace used in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// ProjectId accessed in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// Describes any options that have an effect on the debugging of pipelines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DebugOptions
	{
		
		/// <summary>
		/// Configuration options for sampling elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSampling")]
		public DataSamplingConfig DataSampling { get; set; }
		
		/// <summary>
		/// When true, enables the logging of the literal hot key to the user's Cloud Logging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableHotKeyLogging")]
		public System.Nullable<System.Boolean> EnableHotKeyLogging { get; set; }
	}
	
	/// <summary>
	/// Response from deleting a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSnapshotResponse
	{
	}
	
	/// <summary>
	/// Specification of one of the bundles produced as a result of splitting a Source (e.g. when executing a SourceSplitRequest, or when splitting an active task using WorkItemStatus.dynamic_source_split), relative to the source being split.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedSource
	{
		
		/// <summary>
		/// What source to base the produced source on (if any).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="derivationMode")]
		public System.Nullable<DerivedSourceDerivationMode> DerivationMode { get; set; }
		
		/// <summary>
		/// A source that records can be read and decoded from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DerivedSourceDerivationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_DERIVATION_MODE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_DERIVATION_MODE_INDEPENDENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_DERIVATION_MODE_CHILD_OF_CURRENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_DERIVATION_MODE_SIBLING_OF_CURRENT = 3,
	}
	
	/// <summary>
	/// A source that records can be read and decoded from.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Source
	{
		
		/// <summary>
		/// While splitting, sources may specify the produced bundles as differences against another source, in order to save backend-side memory and allow bigger jobs. For details, see SourceSplitRequest. To support this use case, the full set of parameters of the source is logically obtained by taking the latest explicitly specified value of each parameter in the order: base_specs (later items win), spec (overrides anything in base_specs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseSpecs")]
		public string[] BaseSpecs { get; set; }
		
		/// <summary>
		/// The codec to use to decode data read from the source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codec")]
		public System.Collections.Generic.Dictionary<string, object> Codec { get; set; }
		
		/// <summary>
		/// Setting this value to true hints to the framework that the source doesn't need splitting, and using SourceSplitRequest on it would yield SOURCE_SPLIT_OUTCOME_USE_CURRENT. E.g. a file splitter may set this to true when splitting a single file into a set of byte ranges of appropriate size, and set this to false when splitting a filepattern into individual files. However, for efficiency, a file splitter may decide to produce file subranges directly from the filepattern to avoid a splitting round-trip. See SourceSplitRequest for an overview of the splitting process. This field is meaningful only in the Source objects populated by the user (e.g. when filling in a DerivedSource). Source objects supplied by the framework to the user don't have this field populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doesNotNeedSplitting")]
		public System.Nullable<System.Boolean> DoesNotNeedSplitting { get; set; }
		
		/// <summary>
		/// Metadata about a Source useful for automatically optimizing and tuning the pipeline, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public SourceMetadata Metadata { get; set; }
		
		/// <summary>
		/// The source to read from, plus its parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public System.Collections.Generic.Dictionary<string, object> Spec { get; set; }
	}
	
	/// <summary>
	/// Metadata about a Source useful for automatically optimizing and tuning the pipeline, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceMetadata
	{
		
		/// <summary>
		/// An estimate of the total size (in bytes) of the data that would be read from this source. This estimate is in terms of external storage size, before any decompression or other processing done by the reader.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedSizeBytes")]
		public string EstimatedSizeBytes { get; set; }
		
		/// <summary>
		/// Specifies that the size of this source is known to be infinite (this is a streaming source).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infinite")]
		public System.Nullable<System.Boolean> Infinite { get; set; }
		
		/// <summary>
		/// Whether this source is known to produce key/value pairs with the (encoded) keys in lexicographically sorted order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producesSortedKeys")]
		public System.Nullable<System.Boolean> ProducesSortedKeys { get; set; }
	}
	
	/// <summary>
	/// Describes the data disk used by a workflow job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Disk
	{
		
		/// <summary>
		/// Disk storage type, as defined by Google Compute Engine. This must be a disk type appropriate to the project and zone in which the workers will run. If unknown or unspecified, the service will attempt to choose a reasonable default. For example, the standard persistent disk type is a resource name typically ending in "pd-standard". If SSD persistent disks are available, the resource name typically ends with "pd-ssd". The actual valid values are defined the Google Compute Engine API, not by the Cloud Dataflow API; consult the Google Compute Engine documentation for more information about determining the set of available disk types for a particular project and zone. Google Compute Engine Disk types are local to a particular project in a particular zone, and so the resource name will typically look something like this: compute.googleapis.com/projects/project-id/zones/zone/diskTypes/pd-standard
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskType")]
		public string DiskType { get; set; }
		
		/// <summary>
		/// Directory in a VM where disk is mounted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPoint")]
		public string MountPoint { get; set; }
		
		/// <summary>
		/// Size of disk in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGb")]
		public System.Nullable<System.Int32> SizeGb { get; set; }
	}
	
	/// <summary>
	/// Data provided with a pipeline or transform to provide descriptive info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisplayData
	{
		
		/// <summary>
		/// Contains value if the data is of a boolean type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolValue")]
		public System.Nullable<System.Boolean> BoolValue { get; set; }
		
		/// <summary>
		/// Contains value if the data is of duration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationValue")]
		public string DurationValue { get; set; }
		
		/// <summary>
		/// Contains value if the data is of float type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floatValue")]
		public System.Nullable<System.Single> FloatValue { get; set; }
		
		/// <summary>
		/// Contains value if the data is of int64 type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="int64Value")]
		public string Int64Value { get; set; }
		
		/// <summary>
		/// Contains value if the data is of java class type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="javaClassValue")]
		public string JavaClassValue { get; set; }
		
		/// <summary>
		/// The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// An optional label to display in a dax UI for the element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortStrValue")]
		public string ShortStrValue { get; set; }
		
		/// <summary>
		/// Contains value if the data is of string type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strValue")]
		public string StrValue { get; set; }
		
		/// <summary>
		/// Contains value if the data is of timestamp type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampValue")]
		public string TimestampValue { get; set; }
		
		/// <summary>
		/// An optional full URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// When a task splits using WorkItemStatus.dynamic_source_split, this message describes the two parts of the split relative to the description of the current task's input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicSourceSplit
	{
		
		/// <summary>
		/// Specification of one of the bundles produced as a result of splitting a Source (e.g. when executing a SourceSplitRequest, or when splitting an active task using WorkItemStatus.dynamic_source_split), relative to the source being split.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public DerivedSource Primary { get; set; }
		
		/// <summary>
		/// Specification of one of the bundles produced as a result of splitting a Source (e.g. when executing a SourceSplitRequest, or when splitting an active task using WorkItemStatus.dynamic_source_split), relative to the source being split.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="residual")]
		public DerivedSource Residual { get; set; }
	}
	
	/// <summary>
	/// Describes the environment in which a Dataflow Job runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Environment
	{
		
		/// <summary>
		/// The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. "compute.googleapis.com".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterManagerApiService")]
		public string ClusterManagerApiService { get; set; }
		
		/// <summary>
		/// The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public string Dataset { get; set; }
		
		/// <summary>
		/// Describes any options that have an effect on the debugging of pipelines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
		
		/// <summary>
		/// The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="experiments")]
		public string[] Experiments { get; set; }
		
		/// <summary>
		/// Which Flexible Resource Scheduling mode to run in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flexResourceSchedulingGoal")]
		public FlexTemplateRuntimeEnvironmentFlexrsGoal FlexResourceSchedulingGoal { get; set; }
		
		/// <summary>
		/// Experimental settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalExperiments")]
		public System.Collections.Generic.Dictionary<string, object> InternalExperiments { get; set; }
		
		/// <summary>
		/// The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkPipelineOptions")]
		public System.Collections.Generic.Dictionary<string, object> SdkPipelineOptions { get; set; }
		
		/// <summary>
		/// Identity to run virtual machines as. Defaults to the default account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountEmail")]
		public string ServiceAccountEmail { get; set; }
		
		/// <summary>
		/// If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceKmsKeyName")]
		public string ServiceKmsKeyName { get; set; }
		
		/// <summary>
		/// The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceOptions")]
		public string[] ServiceOptions { get; set; }
		
		/// <summary>
		/// Output only. The shuffle mode used for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shuffleMode")]
		public System.Nullable<EnvironmentShuffleMode> ShuffleMode { get; set; }
		
		/// <summary>
		/// Optional. Specifies the Streaming Engine message processing guarantees. Reduces cost and latency but might result in duplicate messages committed to storage. Designed to run simple mapping streaming ETL jobs at the lowest cost. For example, Change Data Capture (CDC) to BigQuery is a canonical use case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingMode")]
		public System.Nullable<EnvironmentStreamingMode> StreamingMode { get; set; }
		
		/// <summary>
		/// The prefix of the resources the system should use for temporary storage. The system will append the suffix "/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempStoragePrefix")]
		public string TempStoragePrefix { get; set; }
		
		/// <summary>
		/// Output only. Whether the job uses the Streaming Engine resource-based billing model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useStreamingEngineResourceBasedBilling")]
		public System.Nullable<System.Boolean> UseStreamingEngineResourceBasedBilling { get; set; }
		
		/// <summary>
		/// A description of the process that generated the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgent")]
		public System.Collections.Generic.Dictionary<string, object> UserAgent { get; set; }
		
		/// <summary>
		/// A structure describing which components and their versions of the service are required in order to run the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Collections.Generic.Dictionary<string, object> Version { get; set; }
		
		/// <summary>
		/// The worker pools. At least one "harness" worker pool must be specified in order for the job to have workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPools")]
		public WorkerPool[] WorkerPools { get; set; }
		
		/// <summary>
		/// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerRegion")]
		public string WorkerRegion { get; set; }
		
		/// <summary>
		/// The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerZone")]
		public string WorkerZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnvironmentShuffleMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHUFFLE_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VM_BASED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_BASED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnvironmentStreamingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_MODE_EXACTLY_ONCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_MODE_AT_LEAST_ONCE = 2,
	}
	
	/// <summary>
	/// Describes one particular pool of Cloud Dataflow workers to be instantiated by the Cloud Dataflow service in order to perform the computations required by a job. Note that a workflow job may use multiple pools, in order to match the various computational requirements of the various stages of the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerPool
	{
		
		/// <summary>
		/// Settings for WorkerPool autoscaling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscalingSettings")]
		public AutoscalingSettings AutoscalingSettings { get; set; }
		
		/// <summary>
		/// Data disks that are used by a VM in this workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisks")]
		public Disk[] DataDisks { get; set; }
		
		/// <summary>
		/// The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultPackageSet")]
		public System.Nullable<WorkerPoolDefaultPackageSet> DefaultPackageSet { get; set; }
		
		/// <summary>
		/// Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public System.Nullable<System.Int32> DiskSizeGb { get; set; }
		
		/// <summary>
		/// Fully qualified source image for disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSourceImage")]
		public string DiskSourceImage { get; set; }
		
		/// <summary>
		/// Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskType")]
		public string DiskType { get; set; }
		
		/// <summary>
		/// Configuration for VM IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipConfiguration")]
		public FlexTemplateRuntimeEnvironmentIpConfiguration IpConfiguration { get; set; }
		
		/// <summary>
		/// The kind of the worker pool; currently only `harness` and `shuffle` are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Machine type (e.g. "n1-standard-1"). If empty or unspecified, the service will attempt to choose a reasonable default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// Metadata to set on the Google Compute Engine VMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numThreadsPerWorker")]
		public System.Nullable<System.Int32> NumThreadsPerWorker { get; set; }
		
		/// <summary>
		/// Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numWorkers")]
		public System.Nullable<System.Int32> NumWorkers { get; set; }
		
		/// <summary>
		/// The action to take on host maintenance, as defined by the Google Compute Engine API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onHostMaintenance")]
		public string OnHostMaintenance { get; set; }
		
		/// <summary>
		/// Packages to be installed on workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packages")]
		public Package[] Packages { get; set; }
		
		/// <summary>
		/// Extra arguments for this worker pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolArgs")]
		public System.Collections.Generic.Dictionary<string, object> PoolArgs { get; set; }
		
		/// <summary>
		/// Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkHarnessContainerImages")]
		public SdkHarnessContainerImage[] SdkHarnessContainerImages { get; set; }
		
		/// <summary>
		/// Subnetwork to which VMs will be assigned, if desired. Expected to be of the form "regions/REGION/subnetworks/SUBNETWORK".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
		
		/// <summary>
		/// Taskrunner configuration settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskrunnerSettings")]
		public TaskRunnerSettings TaskrunnerSettings { get; set; }
		
		/// <summary>
		/// Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teardownPolicy")]
		public System.Nullable<WorkerPoolTeardownPolicy> TeardownPolicy { get; set; }
		
		/// <summary>
		/// Required. Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerHarnessContainerImage")]
		public string WorkerHarnessContainerImage { get; set; }
		
		/// <summary>
		/// Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkerPoolDefaultPackageSet
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_PACKAGE_SET_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_PACKAGE_SET_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_PACKAGE_SET_JAVA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_PACKAGE_SET_PYTHON = 3,
	}
	
	/// <summary>
	/// The packages that must be installed in order for a worker to run the steps of the Cloud Dataflow job that will be assigned to its worker pool. This is the mechanism by which the Cloud Dataflow SDK causes code to be loaded onto the workers. For example, the Cloud Dataflow Java SDK might use this to install jars containing the user's code and all of the various dependencies (libraries, data files, etc.) required in order for that code to run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Package
	{
		
		/// <summary>
		/// The resource to read the package from. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket} bucket.storage.googleapis.com/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Defines an SDK harness container for executing Dataflow pipelines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SdkHarnessContainerImage
	{
		
		/// <summary>
		/// The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public string[] Capabilities { get; set; }
		
		/// <summary>
		/// A docker container image that resides in Google Container Registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImage")]
		public string ContainerImage { get; set; }
		
		/// <summary>
		/// Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useSingleCorePerContainer")]
		public System.Nullable<System.Boolean> UseSingleCorePerContainer { get; set; }
	}
	
	/// <summary>
	/// Taskrunner configuration settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskRunnerSettings
	{
		
		/// <summary>
		/// Whether to also send taskrunner log info to stderr.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alsologtostderr")]
		public System.Nullable<System.Boolean> Alsologtostderr { get; set; }
		
		/// <summary>
		/// The location on the worker for task-specific subdirectories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseTaskDir")]
		public string BaseTaskDir { get; set; }
		
		/// <summary>
		/// The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseUrl")]
		public string BaseUrl { get; set; }
		
		/// <summary>
		/// The file to store preprocessing commands in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandlinesFileName")]
		public string CommandlinesFileName { get; set; }
		
		/// <summary>
		/// Whether to continue taskrunner if an exception is hit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continueOnException")]
		public System.Nullable<System.Boolean> ContinueOnException { get; set; }
		
		/// <summary>
		/// The API version of endpoint, e.g. "v1b3"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataflowApiVersion")]
		public string DataflowApiVersion { get; set; }
		
		/// <summary>
		/// The command to launch the worker harness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="harnessCommand")]
		public string HarnessCommand { get; set; }
		
		/// <summary>
		/// The suggested backend language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageHint")]
		public string LanguageHint { get; set; }
		
		/// <summary>
		/// The directory on the VM to store logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logDir")]
		public string LogDir { get; set; }
		
		/// <summary>
		/// Whether to send taskrunner log info to Google Compute Engine VM serial console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logToSerialconsole")]
		public System.Nullable<System.Boolean> LogToSerialconsole { get; set; }
		
		/// <summary>
		/// Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logUploadLocation")]
		public string LogUploadLocation { get; set; }
		
		/// <summary>
		/// The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthScopes")]
		public string[] OauthScopes { get; set; }
		
		/// <summary>
		/// Provides data to pass through to the worker harness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parallelWorkerSettings")]
		public WorkerSettings ParallelWorkerSettings { get; set; }
		
		/// <summary>
		/// The streaming worker main class name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingWorkerMainClass")]
		public string StreamingWorkerMainClass { get; set; }
		
		/// <summary>
		/// The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. "wheel".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskGroup")]
		public string TaskGroup { get; set; }
		
		/// <summary>
		/// The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. "root".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskUser")]
		public string TaskUser { get; set; }
		
		/// <summary>
		/// The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempStoragePrefix")]
		public string TempStoragePrefix { get; set; }
		
		/// <summary>
		/// The ID string of the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
		
		/// <summary>
		/// The file to store the workflow in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflowFileName")]
		public string WorkflowFileName { get; set; }
	}
	
	/// <summary>
	/// Provides data to pass through to the worker harness.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerSettings
	{
		
		/// <summary>
		/// The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseUrl")]
		public string BaseUrl { get; set; }
		
		/// <summary>
		/// Whether to send work progress updates to the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingEnabled")]
		public System.Nullable<System.Boolean> ReportingEnabled { get; set; }
		
		/// <summary>
		/// The Cloud Dataflow service path relative to the root URL, for example, "dataflow/v1b3/projects".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicePath")]
		public string ServicePath { get; set; }
		
		/// <summary>
		/// The Shuffle service path relative to the root URL, for example, "shuffle/v1beta1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shuffleServicePath")]
		public string ShuffleServicePath { get; set; }
		
		/// <summary>
		/// The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempStoragePrefix")]
		public string TempStoragePrefix { get; set; }
		
		/// <summary>
		/// The ID of the worker running this pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerId")]
		public string WorkerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkerPoolTeardownPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEARDOWN_POLICY_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEARDOWN_ALWAYS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEARDOWN_ON_SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEARDOWN_NEVER = 3,
	}
	
	/// <summary>
	/// A message describing the state of a particular execution stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionStageState
	{
		
		/// <summary>
		/// The time at which the stage transitioned to this state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentStateTime")]
		public string CurrentStateTime { get; set; }
		
		/// <summary>
		/// The name of the execution stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStageName")]
		public string ExecutionStageName { get; set; }
		
		/// <summary>
		/// Executions stage states allow the same set of values as JobState.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStageState")]
		public System.Nullable<ExecutionStageStateExecutionStageState1> ExecutionStageState1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExecutionStageStateExecutionStageState1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_STOPPED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_DONE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_CANCELLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_UPDATED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_DRAINING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_DRAINED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_PENDING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_CANCELLING = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_QUEUED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_RESOURCE_CLEANING_UP = 12,
	}
	
	/// <summary>
	/// Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionStageSummary
	{
		
		/// <summary>
		/// Collections produced and consumed by component transforms of this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentSource")]
		public ComponentSource[] ComponentSource { get; set; }
		
		/// <summary>
		/// Transforms that comprise this execution stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTransform")]
		public ComponentTransform[] ComponentTransform { get; set; }
		
		/// <summary>
		/// Dataflow service generated id for this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Input sources for this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputSource")]
		public StageSource[] InputSource { get; set; }
		
		/// <summary>
		/// Type of transform this stage is executing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<ExecutionStageSummaryKind> Kind { get; set; }
		
		/// <summary>
		/// Dataflow service generated name for this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output sources for this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputSource")]
		public StageSource[] OutputSource { get; set; }
		
		/// <summary>
		/// Other stages that must complete before this stage can run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prerequisiteStage")]
		public string[] PrerequisiteStage { get; set; }
	}
	
	/// <summary>
	/// Description of an input or output of an execution stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StageSource
	{
		
		/// <summary>
		/// Dataflow service generated name for this source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User name for the original user transform or collection with which this source is most closely associated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalTransformOrCollection")]
		public string OriginalTransformOrCollection { get; set; }
		
		/// <summary>
		/// Size of the source, if measurable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeBytes")]
		public string SizeBytes { get; set; }
		
		/// <summary>
		/// Human-readable name for this source; may be user or system generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExecutionStageSummaryKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_KIND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAR_DO_KIND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUP_BY_KEY_KIND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLATTEN_KIND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_KIND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE_KIND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSTANT_KIND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLETON_KIND = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHUFFLE_KIND = 8,
	}
	
	/// <summary>
	/// Indicates which [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) failed to respond to a request for data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailedLocation
	{
		
		/// <summary>
		/// The name of the [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that failed to respond.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Metadata for a File connector used by the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileIODetails
	{
		
		/// <summary>
		/// File Pattern used to access files by the connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePattern")]
		public string FilePattern { get; set; }
	}
	
	/// <summary>
	/// An instruction that copies its inputs (zero or more) to its (single) output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlattenInstruction
	{
		
		/// <summary>
		/// Describes the inputs to the flatten instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public InstructionInput[] Inputs { get; set; }
	}
	
	/// <summary>
	/// An input of an instruction, as a reference to an output of a producer instruction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstructionInput
	{
		
		/// <summary>
		/// The output index (origin zero) within the producer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputNum")]
		public System.Nullable<System.Int32> OutputNum { get; set; }
		
		/// <summary>
		/// The index (origin zero) of the parallel instruction that produces the output to be consumed by this input. This index is relative to the list of instructions in this input's instruction's containing MapTask.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producerInstructionIndex")]
		public System.Nullable<System.Int32> ProducerInstructionIndex { get; set; }
	}
	
	/// <summary>
	/// Request to get updated debug configuration for component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDebugConfigRequest
	{
		
		/// <summary>
		/// The internal component id for which debug configuration is requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentId")]
		public string ComponentId { get; set; }
		
		/// <summary>
		/// The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The worker id, i.e., VM hostname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerId")]
		public string WorkerId { get; set; }
	}
	
	/// <summary>
	/// Response to a get debug configuration request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDebugConfigResponse
	{
		
		/// <summary>
		/// The encoded debug configuration for the requested component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
	}
	
	/// <summary>
	/// The response to a GetTemplate request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTemplateResponse
	{
		
		/// <summary>
		/// Metadata describing a template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public TemplateMetadata Metadata { get; set; }
		
		/// <summary>
		/// RuntimeMetadata describing a runtime environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeMetadata")]
		public RuntimeMetadata RuntimeMetadata { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		/// <summary>
		/// Template Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateType")]
		public System.Nullable<GetTemplateResponseTemplateType> TemplateType { get; set; }
	}
	
	/// <summary>
	/// RuntimeMetadata describing a runtime environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeMetadata
	{
		
		/// <summary>
		/// The parameters for the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ParameterMetadata[] Parameters { get; set; }
		
		/// <summary>
		/// SDK Information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkInfo")]
		public SDKInfo SdkInfo { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetTemplateResponseTemplateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGACY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEX = 2,
	}
	
	/// <summary>
	/// Information useful for debugging a hot key detection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HotKeyDebuggingInfo
	{
		
		/// <summary>
		/// Debugging information for each detected hot key. Keyed by a hash of the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedHotKeys")]
		public System.Collections.Generic.Dictionary<string, HotKeyInfo> DetectedHotKeys { get; set; }
	}
	
	/// <summary>
	/// Information about a hot key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HotKeyInfo
	{
		
		/// <summary>
		/// The age of the hot key measured from when it was first detected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotKeyAge")]
		public string HotKeyAge { get; set; }
		
		/// <summary>
		/// A detected hot key that is causing limited parallelism. This field will be populated only if the following flag is set to true: "--enable_hot_key_logging".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// If true, then the above key is truncated and cannot be deserialized. This occurs if the key above is populated and the key size is >5MB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyTruncated")]
		public System.Nullable<System.Boolean> KeyTruncated { get; set; }
	}
	
	/// <summary>
	/// Proto describing a hot key detected on a given WorkItem.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HotKeyDetection
	{
		
		/// <summary>
		/// The age of the hot key measured from when it was first detected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotKeyAge")]
		public string HotKeyAge { get; set; }
		
		/// <summary>
		/// System-defined name of the step containing this hot key. Unique across the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemName")]
		public string SystemName { get; set; }
		
		/// <summary>
		/// User-provided name of the step that contains this hot key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userStepName")]
		public string UserStepName { get; set; }
	}
	
	/// <summary>
	/// An output of an instruction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstructionOutput
	{
		
		/// <summary>
		/// The codec to use to encode data being written via this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codec")]
		public System.Collections.Generic.Dictionary<string, object> Codec { get; set; }
		
		/// <summary>
		/// The user-provided name of this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// For system-generated byte and mean byte metrics, certain instructions should only report the key size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onlyCountKeyBytes")]
		public System.Nullable<System.Boolean> OnlyCountKeyBytes { get; set; }
		
		/// <summary>
		/// For system-generated byte and mean byte metrics, certain instructions should only report the value size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onlyCountValueBytes")]
		public System.Nullable<System.Boolean> OnlyCountValueBytes { get; set; }
		
		/// <summary>
		/// System-defined name for this output in the original workflow graph. Outputs that do not contribute to an original instruction do not set this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalName")]
		public string OriginalName { get; set; }
		
		/// <summary>
		/// System-defined name of this output. Unique across the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemName")]
		public string SystemName { get; set; }
	}
	
	/// <summary>
	/// Defines a job to be run by the Cloud Dataflow service. Do not enter confidential information when you supply string values using the API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Job
	{
		
		/// <summary>
		/// The client's unique identifier of the job, re-used across retried attempts. If this field is set, the service will ensure its uniqueness. The request to create a job will fail if the service has knowledge of a previously submitted job with the same client's ID and job name. The caller may use this field to ensure idempotence of job creation across retried attempts to create a job. By default, the field is empty and, in that case, the service ignores it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientRequestId")]
		public string ClientRequestId { get; set; }
		
		/// <summary>
		/// The timestamp when the job was initially created. Immutable and set by the Cloud Dataflow service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// If this is specified, the job's initial state is populated from the given snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdFromSnapshotId")]
		public string CreatedFromSnapshotId { get; set; }
		
		/// <summary>
		/// The current state of the job. Jobs are created in the `JOB_STATE_STOPPED` state unless otherwise specified. A job in the `JOB_STATE_RUNNING` state may asynchronously enter a terminal state. After a job has reached a terminal state, no further state updates may be made. This field might be mutated by the Dataflow service; callers cannot mutate it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentState")]
		public ExecutionStageStateExecutionStageState1 CurrentState { get; set; }
		
		/// <summary>
		/// The timestamp associated with the current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentStateTime")]
		public string CurrentStateTime { get; set; }
		
		/// <summary>
		/// Describes the environment in which a Dataflow Job runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public Environment Environment { get; set; }
		
		/// <summary>
		/// Additional information about how a Cloud Dataflow job will be executed that isn't contained in the submitted job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionInfo")]
		public JobExecutionInfo ExecutionInfo { get; set; }
		
		/// <summary>
		/// The unique ID of this job. This field is set by the Dataflow service when the job is created, and is immutable for the life of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobMetadata")]
		public JobMetadata JobMetadata { get; set; }
		
		/// <summary>
		/// User-defined labels for this job. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \p{Ll}\p{Lo}{0,62} * Values must conform to regexp: [\p{Ll}\p{Lo}\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The user-specified Dataflow job name. Only one active job with a given name can exist in a project within one region at any given time. Jobs in different regions can have the same name. If a caller attempts to create a job with the same name as an active job that already exists, the attempt returns the existing job. The name must match the regular expression `[a-z]([-a-z0-9]{0,1022}[a-z0-9])?`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineDescription")]
		public PipelineDescription PipelineDescription { get; set; }
		
		/// <summary>
		/// The ID of the Google Cloud project that the job belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// If this job is an update of an existing job, this field is the job ID of the job it replaced. When sending a `CreateJobRequest`, you can update a job by specifying it here. The job named here is stopped, and its intermediate state is transferred to this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceJobId")]
		public string ReplaceJobId { get; set; }
		
		/// <summary>
		/// If another job is an update of this job (and thus, this job is in `JOB_STATE_UPDATED`), this field contains the ID of that job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replacedByJobId")]
		public string ReplacedByJobId { get; set; }
		
		/// <summary>
		/// The job's requested state. Applies to `UpdateJob` requests. Set `requested_state` with `UpdateJob` requests to switch between the states `JOB_STATE_STOPPED` and `JOB_STATE_RUNNING`. You can also use `UpdateJob` requests to change a job's state from `JOB_STATE_RUNNING` to `JOB_STATE_CANCELLED`, `JOB_STATE_DONE`, or `JOB_STATE_DRAINED`. These states irrevocably terminate the job if it hasn't already reached a terminal state. This field has no effect on `CreateJob` requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedState")]
		public ExecutionStageStateExecutionStageState1 RequestedState { get; set; }
		
		/// <summary>
		/// Additional job parameters that can only be updated during runtime using the projects.jobs.update method. These fields have no effect when specified during job creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeUpdatableParams")]
		public RuntimeUpdatableParams RuntimeUpdatableParams { get; set; }
		
		/// <summary>
		/// Output only. Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satisfiesPzi")]
		public System.Nullable<System.Boolean> SatisfiesPzi { get; set; }
		
		/// <summary>
		/// Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satisfiesPzs")]
		public System.Nullable<System.Boolean> SatisfiesPzs { get; set; }
		
		/// <summary>
		/// This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stageStates")]
		public ExecutionStageState[] StageStates { get; set; }
		
		/// <summary>
		/// The timestamp when the job was started (transitioned to JOB_STATE_PENDING). Flexible resource scheduling jobs are started with some delay after job creation, so start_time is unset before start and is updated when the job is started by the Cloud Dataflow service. For other jobs, start_time always equals to create_time and is immutable and set by the Cloud Dataflow service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Exactly one of step or steps_location should be specified. The top-level steps that constitute the entire job. Only retrieved with JOB_VIEW_ALL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public Step[] Steps { get; set; }
		
		/// <summary>
		/// The Cloud Storage location where the steps are stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepsLocation")]
		public string StepsLocation { get; set; }
		
		/// <summary>
		/// A set of files the system should be aware of that are used for temporary storage. These temporary files will be removed on job completion. No duplicates are allowed. No file patterns are supported. The supported files are: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempFiles")]
		public string[] TempFiles { get; set; }
		
		/// <summary>
		/// The map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformNameMapping")]
		public System.Collections.Generic.Dictionary<string, string> TransformNameMapping { get; set; }
		
		/// <summary>
		/// The type of Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<JobType> Type { get; set; }
	}
	
	/// <summary>
	/// Additional information about how a Cloud Dataflow job will be executed that isn't contained in the submitted job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobExecutionInfo
	{
		
		/// <summary>
		/// A mapping from each stage to the information about that stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stages")]
		public System.Collections.Generic.Dictionary<string, JobExecutionStageInfo> Stages { get; set; }
	}
	
	/// <summary>
	/// Contains information about how a particular google.dataflow.v1beta3.Step will be executed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobExecutionStageInfo
	{
		
		/// <summary>
		/// The steps associated with the execution stage. Note that stages may have several steps, and that a given step might be run by more than one stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepName")]
		public string[] StepName { get; set; }
	}
	
	/// <summary>
	/// Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobMetadata
	{
		
		/// <summary>
		/// Identification of a Cloud Bigtable source used in the Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigTableDetails")]
		public BigTableIODetails[] BigTableDetails { get; set; }
		
		/// <summary>
		/// Identification of a BigQuery source used in the Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigqueryDetails")]
		public BigQueryIODetails[] BigqueryDetails { get; set; }
		
		/// <summary>
		/// Identification of a Datastore source used in the Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datastoreDetails")]
		public DatastoreIODetails[] DatastoreDetails { get; set; }
		
		/// <summary>
		/// Identification of a File source used in the Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileDetails")]
		public FileIODetails[] FileDetails { get; set; }
		
		/// <summary>
		/// Identification of a Pub/Sub source used in the Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubDetails")]
		public PubSubIODetails[] PubsubDetails { get; set; }
		
		/// <summary>
		/// The version of the SDK used to run the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkVersion")]
		public SdkVersion SdkVersion { get; set; }
		
		/// <summary>
		/// Identification of a Spanner source used in the Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spannerDetails")]
		public SpannerIODetails[] SpannerDetails { get; set; }
		
		/// <summary>
		/// List of display properties to help UI filter jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDisplayProperties")]
		public System.Collections.Generic.Dictionary<string, string> UserDisplayProperties { get; set; }
	}
	
	/// <summary>
	/// Metadata for a Pub/Sub connector used by the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PubSubIODetails
	{
		
		/// <summary>
		/// Subscription used in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public string Subscription { get; set; }
		
		/// <summary>
		/// Topic accessed in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	/// <summary>
	/// The version of the SDK used to run the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SdkVersion
	{
		
		/// <summary>
		/// Output only. Known bugs found in this SDK version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bugs")]
		public SdkBug[] Bugs { get; set; }
		
		/// <summary>
		/// The support status for this SDK version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkSupportStatus")]
		public System.Nullable<SdkVersionSdkSupportStatus> SdkSupportStatus { get; set; }
		
		/// <summary>
		/// The version of the SDK used to run the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// A readable string describing the version of the SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionDisplayName")]
		public string VersionDisplayName { get; set; }
	}
	
	/// <summary>
	/// A bug found in the Dataflow SDK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SdkBug
	{
		
		/// <summary>
		/// Output only. How severe the SDK bug is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<SdkBugSeverity> Severity { get; set; }
		
		/// <summary>
		/// Output only. Describes the impact of this SDK bug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SdkBugType> Type { get; set; }
		
		/// <summary>
		/// Output only. Link to more information on the bug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SdkBugSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SdkBugType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATALOSS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SdkVersionSdkSupportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPPORTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STALE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED = 4,
	}
	
	/// <summary>
	/// Metadata for a Spanner connector used by the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpannerIODetails
	{
		
		/// <summary>
		/// DatabaseId accessed in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseId")]
		public string DatabaseId { get; set; }
		
		/// <summary>
		/// InstanceId accessed in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// ProjectId accessed in the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineDescription
	{
		
		/// <summary>
		/// Pipeline level display data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayData")]
		public DisplayData[] DisplayData { get; set; }
		
		/// <summary>
		/// Description of each stage of execution of the pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionPipelineStage")]
		public ExecutionStageSummary[] ExecutionPipelineStage { get; set; }
		
		/// <summary>
		/// Description of each transform in the pipeline and collections between them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalPipelineTransform")]
		public TransformSummary[] OriginalPipelineTransform { get; set; }
		
		/// <summary>
		/// A hash value of the submitted pipeline portable graph step names if exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepNamesHash")]
		public string StepNamesHash { get; set; }
	}
	
	/// <summary>
	/// Description of the type, names/ids, and input/outputs for a transform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransformSummary
	{
		
		/// <summary>
		/// Transform-specific display data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayData")]
		public DisplayData[] DisplayData { get; set; }
		
		/// <summary>
		/// SDK generated id of this transform instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// User names for all collection inputs to this transform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputCollectionName")]
		public string[] InputCollectionName { get; set; }
		
		/// <summary>
		/// Type of transform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public ExecutionStageSummaryKind Kind { get; set; }
		
		/// <summary>
		/// User provided name for this transform instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User names for all collection outputs to this transform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputCollectionName")]
		public string[] OutputCollectionName { get; set; }
	}
	
	/// <summary>
	/// Additional job parameters that can only be updated during runtime using the projects.jobs.update method. These fields have no effect when specified during job creation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeUpdatableParams
	{
		
		/// <summary>
		/// The maximum number of workers to cap autoscaling at. This field is currently only supported for Streaming Engine jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxNumWorkers")]
		public System.Nullable<System.Int32> MaxNumWorkers { get; set; }
		
		/// <summary>
		/// The minimum number of workers to scale down to. This field is currently only supported for Streaming Engine jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minNumWorkers")]
		public System.Nullable<System.Int32> MinNumWorkers { get; set; }
		
		/// <summary>
		/// Target worker utilization, compared against the aggregate utilization of the worker pool by autoscaler, to determine upscaling and downscaling when absent other constraints such as backlog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerUtilizationHint")]
		public System.Nullable<System.Double> WorkerUtilizationHint { get; set; }
	}
	
	/// <summary>
	/// Defines a particular step within a Cloud Dataflow job. A job consists of multiple steps, each of which performs some specific operation as part of the overall job. Data is typically passed from one step to another as part of the job. **Note:** The properties of this object are not stable and might change. Here's an example of a sequence of steps which together implement a Map-Reduce job: * Read a collection of data from some source, parsing the collection's elements. * Validate the elements. * Apply a user-defined function to map each element to some value and extract an element-specific key value. * Group elements with the same key into a single element with that key, transforming a multiply-keyed collection into a uniquely-keyed collection. * Write the elements out to some data sink. Note that the Cloud Dataflow service may be used to run many different types of jobs, not just Map-Reduce.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Step
	{
		
		/// <summary>
		/// The kind of step in the Cloud Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The name that identifies the step. This must be unique for each step with respect to all other steps in the Cloud Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Named properties associated with the step. Each kind of predefined step has its own required set of properties. Must be provided on Create. Only retrieved with JOB_VIEW_ALL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, object> Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_TYPE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_TYPE_BATCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_TYPE_STREAMING = 2,
	}
	
	/// <summary>
	/// Information about the execution of a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobExecutionDetails
	{
		
		/// <summary>
		/// If present, this response does not contain all requested tasks. To obtain the next page of results, repeat the request with page_token set to this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The stages of the job execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stages")]
		public StageSummary[] Stages { get; set; }
	}
	
	/// <summary>
	/// Information about a particular execution stage of a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StageSummary
	{
		
		/// <summary>
		/// End time of this stage. If the work item is completed, this is the actual end time of the stage. Otherwise, it is the predicted end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Metrics for this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public MetricUpdate[] Metrics { get; set; }
		
		/// <summary>
		/// Information about the progress of some component of job execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public ProgressTimeseries Progress { get; set; }
		
		/// <summary>
		/// ID of this stage
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stageId")]
		public string StageId { get; set; }
		
		/// <summary>
		/// Start time of this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// State of this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<StageSummaryState> State { get; set; }
		
		/// <summary>
		/// Summarized straggler identification details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stragglerSummary")]
		public StragglerSummary StragglerSummary { get; set; }
	}
	
	/// <summary>
	/// Describes the state of a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricUpdate
	{
		
		/// <summary>
		/// True if this metric is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this metric is reported as a delta that is not associated with any WorkItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative")]
		public System.Nullable<System.Boolean> Cumulative { get; set; }
		
		/// <summary>
		/// A struct value describing properties of a distribution of numeric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distribution")]
		public object Distribution { get; set; }
		
		/// <summary>
		/// A struct value describing properties of a Gauge. Metrics of gauge type show the value of a metric across time, and is aggregated based on the newest value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gauge")]
		public object Gauge { get; set; }
		
		/// <summary>
		/// Worker-computed aggregate value for internal use by the Dataflow service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internal")]
		public object Internal { get; set; }
		
		/// <summary>
		/// Metric aggregation kind. The possible metric aggregation kinds are "Sum", "Max", "Min", "Mean", "Set", "And", "Or", and "Distribution". The specified aggregation kind is case-insensitive. If omitted, this is not an aggregated value but instead a single metric sample value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Worker-computed aggregate value for the "Mean" aggregation kind. This holds the count of the aggregated values and is used in combination with mean_sum above to obtain the actual mean aggregate value. The only possible value type is Long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meanCount")]
		public object MeanCount { get; set; }
		
		/// <summary>
		/// Worker-computed aggregate value for the "Mean" aggregation kind. This holds the sum of the aggregated values and is used in combination with mean_count below to obtain the actual mean aggregate value. The only possible value types are Long and Double.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meanSum")]
		public object MeanSum { get; set; }
		
		/// <summary>
		/// Identifies a metric, by describing the source which generated the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public MetricStructuredName Name { get; set; }
		
		/// <summary>
		/// Worker-computed aggregate value for aggregation kinds "Sum", "Max", "Min", "And", and "Or". The possible value types are Long, Double, and Boolean.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scalar")]
		public object Scalar { get; set; }
		
		/// <summary>
		/// Worker-computed aggregate value for the "Set" aggregation kind. The only possible value type is a list of Values whose type can be Long, Double, or String, according to the metric's type. All Values in the list must be of the same type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="set")]
		public object Set { get; set; }
		
		/// <summary>
		/// Timestamp associated with the metric value. Optional when workers are reporting work progress; it will be filled in responses from the metrics API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Identifies a metric, by describing the source which generated the metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricStructuredName
	{
		
		/// <summary>
		/// Zero or more labeled fields which identify the part of the job this metric is associated with, such as the name of a step or collection. For example, built-in counters associated with steps will have context['step'] = . Counters associated with PCollections in the SDK will have context['pcollection'] = .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Collections.Generic.Dictionary<string, string> Context { get; set; }
		
		/// <summary>
		/// Worker-defined metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin (namespace) of metric name. May be blank for user-define metrics; will be "dataflow" for metrics defined by the Dataflow service or SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
	}
	
	/// <summary>
	/// Information about the progress of some component of job execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProgressTimeseries
	{
		
		/// <summary>
		/// The current progress of the component, in the range [0,1].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentProgress")]
		public System.Nullable<System.Double> CurrentProgress { get; set; }
		
		/// <summary>
		/// History of progress for the component. Points are sorted by time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataPoints")]
		public Point[] DataPoints { get; set; }
	}
	
	/// <summary>
	/// A point in the timeseries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point
	{
		
		/// <summary>
		/// The timestamp of the point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
		
		/// <summary>
		/// The value of the point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StageSummaryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_STATE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_STATE_NOT_STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_STATE_RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_STATE_SUCCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_STATE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_STATE_CANCELLED = 5,
	}
	
	/// <summary>
	/// Summarized straggler identification details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StragglerSummary
	{
		
		/// <summary>
		/// The most recent stragglers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentStragglers")]
		public Straggler[] RecentStragglers { get; set; }
		
		/// <summary>
		/// Aggregated counts of straggler causes, keyed by the string representation of the StragglerCause enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stragglerCauseCount")]
		public System.Collections.Generic.Dictionary<string, string> StragglerCauseCount { get; set; }
		
		/// <summary>
		/// The total count of stragglers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalStragglerCount")]
		public string TotalStragglerCount { get; set; }
	}
	
	/// <summary>
	/// Information for a straggler.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Straggler
	{
		
		/// <summary>
		/// Information useful for straggler identification and debugging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchStraggler")]
		public StragglerInfo BatchStraggler { get; set; }
		
		/// <summary>
		/// Information useful for streaming straggler identification and debugging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingStraggler")]
		public StreamingStragglerInfo StreamingStraggler { get; set; }
	}
	
	/// <summary>
	/// Information useful for straggler identification and debugging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StragglerInfo
	{
		
		/// <summary>
		/// The straggler causes, keyed by the string representation of the StragglerCause enum and contains specialized debugging information for each straggler cause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="causes")]
		public System.Collections.Generic.Dictionary<string, StragglerDebuggingInfo> Causes { get; set; }
		
		/// <summary>
		/// The time when the work item attempt became a straggler.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Information useful for debugging a straggler. Each type will provide specialized debugging information relevant for a particular cause. The StragglerDebuggingInfo will be 1:1 mapping to the StragglerCause enum.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StragglerDebuggingInfo
	{
		
		/// <summary>
		/// Information useful for debugging a hot key detection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotKey")]
		public HotKeyDebuggingInfo HotKey { get; set; }
	}
	
	/// <summary>
	/// Information useful for streaming straggler identification and debugging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingStragglerInfo
	{
		
		/// <summary>
		/// The event-time watermark lag at the time of the straggler detection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataWatermarkLag")]
		public string DataWatermarkLag { get; set; }
		
		/// <summary>
		/// End time of this straggler.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Start time of this straggler.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The system watermark lag at the time of the straggler detection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemWatermarkLag")]
		public string SystemWatermarkLag { get; set; }
		
		/// <summary>
		/// Name of the worker where the straggler was detected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerName")]
		public string WorkerName { get; set; }
	}
	
	/// <summary>
	/// A particular message pertaining to a Dataflow job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobMessage
	{
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Importance level of the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageImportance")]
		public System.Nullable<JobMessageMessageImportance> MessageImportance { get; set; }
		
		/// <summary>
		/// The text of the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageText")]
		public string MessageText { get; set; }
		
		/// <summary>
		/// The timestamp of the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobMessageMessageImportance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_MESSAGE_IMPORTANCE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_MESSAGE_DEBUG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_MESSAGE_DETAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_MESSAGE_BASIC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_MESSAGE_WARNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_MESSAGE_ERROR = 5,
	}
	
	/// <summary>
	/// JobMetrics contains a collection of metrics describing the detailed progress of a Dataflow job. Metrics correspond to user-defined and system-defined metrics in the job. For more information, see [Dataflow job metrics] (https://cloud.google.com/dataflow/docs/guides/using-monitoring-intf). This resource captures only the most recent values of each metric; time-series data can be queried for them (under the same metric names) from Cloud Monitoring.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobMetrics
	{
		
		/// <summary>
		/// Timestamp as of which metric values are current.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricTime")]
		public string MetricTime { get; set; }
		
		/// <summary>
		/// All metrics for this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public MetricUpdate[] Metrics { get; set; }
	}
	
	/// <summary>
	/// Data disk assignment information for a specific key-range of a sharded computation. Currently we only support UTF-8 character splits to simplify encoding into JSON.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyRangeDataDiskAssignment
	{
		
		/// <summary>
		/// The name of the data disk where data for this range is stored. This name is local to the Google Cloud Platform project and uniquely identifies the disk within that project, for example "myproject-1014-104817-4c2-harness-0-disk-1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisk")]
		public string DataDisk { get; set; }
		
		/// <summary>
		/// The end (exclusive) of the key range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public string End { get; set; }
		
		/// <summary>
		/// The start (inclusive) of the key range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
	}
	
	/// <summary>
	/// Launch FlexTemplate Parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchFlexTemplateParameter
	{
		
		/// <summary>
		/// Container Spec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerSpec")]
		public ContainerSpec ContainerSpec { get; set; }
		
		/// <summary>
		/// Cloud Storage path to a file with json serialized ContainerSpec as content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerSpecGcsPath")]
		public string ContainerSpecGcsPath { get; set; }
		
		/// <summary>
		/// The environment values to be set at runtime for flex template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public FlexTemplateRuntimeEnvironment Environment { get; set; }
		
		/// <summary>
		/// Required. The job name to use for the created job. For update job request, job name should be same as the existing running job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobName")]
		public string JobName { get; set; }
		
		/// <summary>
		/// Launch options for this flex template job. This is a common set of options across languages and templates. This should not be used to pass job parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchOptions")]
		public System.Collections.Generic.Dictionary<string, string> LaunchOptions { get; set; }
		
		/// <summary>
		/// The parameters for FlexTemplate. Ex. {"num_workers":"5"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		/// <summary>
		/// Use this to pass transform_name_mappings for streaming update jobs. Ex:{"oldTransformName":"newTransformName",...}'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformNameMappings")]
		public System.Collections.Generic.Dictionary<string, string> TransformNameMappings { get; set; }
		
		/// <summary>
		/// Set this to true if you are sending a request to update a running streaming job. When set, the job name should be the same as the running job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update")]
		public System.Nullable<System.Boolean> Update { get; set; }
	}
	
	/// <summary>
	/// A request to launch a Cloud Dataflow job from a FlexTemplate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchFlexTemplateRequest
	{
		
		/// <summary>
		/// Launch FlexTemplate Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchParameter")]
		public LaunchFlexTemplateParameter LaunchParameter { get; set; }
		
		/// <summary>
		/// If true, the request is validated but not actually executed. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateOnly")]
		public System.Nullable<System.Boolean> ValidateOnly { get; set; }
	}
	
	/// <summary>
	/// Response to the request to launch a job from Flex Template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchFlexTemplateResponse
	{
		
		/// <summary>
		/// Defines a job to be run by the Cloud Dataflow service. Do not enter confidential information when you supply string values using the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// Parameters to provide to the template being launched. Note that the [metadata in the pipeline code] (https://cloud.google.com/dataflow/docs/guides/templates/creating-templates#metadata) determines which runtime parameters are valid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchTemplateParameters
	{
		
		/// <summary>
		/// The environment values to set at runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public RuntimeEnvironment Environment { get; set; }
		
		/// <summary>
		/// Required. The job name to use for the created job. The name must match the regular expression `[a-z]([-a-z0-9]{0,1022}[a-z0-9])?`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobName")]
		public string JobName { get; set; }
		
		/// <summary>
		/// The runtime parameters to pass to the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		/// <summary>
		/// Only applicable when updating a pipeline. Map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformNameMapping")]
		public System.Collections.Generic.Dictionary<string, string> TransformNameMapping { get; set; }
		
		/// <summary>
		/// If set, replace the existing pipeline with the name specified by jobName with this pipeline, preserving state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update")]
		public System.Nullable<System.Boolean> Update { get; set; }
	}
	
	/// <summary>
	/// Response to the request to launch a template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchTemplateResponse
	{
		
		/// <summary>
		/// Defines a job to be run by the Cloud Dataflow service. Do not enter confidential information when you supply string values using the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// Request to lease WorkItems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LeaseWorkItemRequest
	{
		
		/// <summary>
		/// The current timestamp at the worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentWorkerTime")]
		public string CurrentWorkerTime { get; set; }
		
		/// <summary>
		/// The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The initial lease period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedLeaseDuration")]
		public string RequestedLeaseDuration { get; set; }
		
		/// <summary>
		/// Untranslated bag-of-bytes WorkRequest from UnifiedWorker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unifiedWorkerRequest")]
		public System.Collections.Generic.Dictionary<string, object> UnifiedWorkerRequest { get; set; }
		
		/// <summary>
		/// Filter for WorkItem type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workItemTypes")]
		public string[] WorkItemTypes { get; set; }
		
		/// <summary>
		/// Worker capabilities. WorkItems might be limited to workers with specific capabilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerCapabilities")]
		public string[] WorkerCapabilities { get; set; }
		
		/// <summary>
		/// Identifies the worker leasing work -- typically the ID of the virtual machine running the worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerId")]
		public string WorkerId { get; set; }
	}
	
	/// <summary>
	/// Response to a request to lease WorkItems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LeaseWorkItemResponse
	{
		
		/// <summary>
		/// Untranslated bag-of-bytes WorkResponse for UnifiedWorker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unifiedWorkerResponse")]
		public System.Collections.Generic.Dictionary<string, object> UnifiedWorkerResponse { get; set; }
		
		/// <summary>
		/// A list of the leased WorkItems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workItems")]
		public WorkItem[] WorkItems { get; set; }
	}
	
	/// <summary>
	/// WorkItem represents basic information about a WorkItem to be executed in the cloud.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkItem
	{
		
		/// <summary>
		/// Work item-specific configuration as an opaque blob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public string Configuration { get; set; }
		
		/// <summary>
		/// Identifies this WorkItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The initial index to use when reporting the status of the WorkItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialReportIndex")]
		public string InitialReportIndex { get; set; }
		
		/// <summary>
		/// Identifies the workflow job this WorkItem belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Time when the lease on this Work will expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseExpireTime")]
		public string LeaseExpireTime { get; set; }
		
		/// <summary>
		/// MapTask consists of an ordered set of instructions, each of which describes one particular low-level operation for the worker to perform in order to accomplish the MapTask's WorkItem. Each instruction must appear in the list before any instructions which depends on its output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapTask")]
		public MapTask MapTask { get; set; }
		
		/// <summary>
		/// Any required packages that need to be fetched in order to execute this WorkItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packages")]
		public Package[] Packages { get; set; }
		
		/// <summary>
		/// Identifies the cloud project this WorkItem belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Recommended reporting interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportStatusInterval")]
		public string ReportStatusInterval { get; set; }
		
		/// <summary>
		/// Describes a particular function to invoke.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seqMapTask")]
		public SeqMapTask SeqMapTask { get; set; }
		
		/// <summary>
		/// A task which consists of a shell command for the worker to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shellTask")]
		public ShellTask ShellTask { get; set; }
		
		/// <summary>
		/// A work item that represents the different operations that can be performed on a user-defined Source specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceOperationTask")]
		public SourceOperationRequest SourceOperationTask { get; set; }
		
		/// <summary>
		/// A task which describes what action should be performed for the specified streaming computation ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingComputationTask")]
		public StreamingComputationTask StreamingComputationTask { get; set; }
		
		/// <summary>
		/// A task that carries configuration information for streaming computations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingConfigTask")]
		public StreamingConfigTask StreamingConfigTask { get; set; }
		
		/// <summary>
		/// A task which initializes part of a streaming Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingSetupTask")]
		public StreamingSetupTask StreamingSetupTask { get; set; }
	}
	
	/// <summary>
	/// MapTask consists of an ordered set of instructions, each of which describes one particular low-level operation for the worker to perform in order to accomplish the MapTask's WorkItem. Each instruction must appear in the list before any instructions which depends on its output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MapTask
	{
		
		/// <summary>
		/// Counter prefix that can be used to prefix counters. Not currently used in Dataflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counterPrefix")]
		public string CounterPrefix { get; set; }
		
		/// <summary>
		/// The instructions in the MapTask.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instructions")]
		public ParallelInstruction[] Instructions { get; set; }
		
		/// <summary>
		/// System-defined name of the stage containing this MapTask. Unique across the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// System-defined name of this MapTask. Unique across the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemName")]
		public string SystemName { get; set; }
	}
	
	/// <summary>
	/// Describes a particular operation comprising a MapTask.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParallelInstruction
	{
		
		/// <summary>
		/// An instruction that copies its inputs (zero or more) to its (single) output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flatten")]
		public FlattenInstruction Flatten { get; set; }
		
		/// <summary>
		/// User-provided name of this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// System-defined name for the operation in the original workflow graph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalName")]
		public string OriginalName { get; set; }
		
		/// <summary>
		/// Describes the outputs of the instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public InstructionOutput[] Outputs { get; set; }
		
		/// <summary>
		/// An instruction that does a ParDo operation. Takes one main input and zero or more side inputs, and produces zero or more outputs. Runs user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parDo")]
		public ParDoInstruction ParDo { get; set; }
		
		/// <summary>
		/// An instruction that does a partial group-by-key. One input and one output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partialGroupByKey")]
		public PartialGroupByKeyInstruction PartialGroupByKey { get; set; }
		
		/// <summary>
		/// An instruction that reads records. Takes no inputs, produces one output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="read")]
		public ReadInstruction Read { get; set; }
		
		/// <summary>
		/// System-defined name of this operation. Unique across the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemName")]
		public string SystemName { get; set; }
		
		/// <summary>
		/// An instruction that writes records. Takes one input, produces no outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="write")]
		public WriteInstruction Write { get; set; }
	}
	
	/// <summary>
	/// An instruction that does a ParDo operation. Takes one main input and zero or more side inputs, and produces zero or more outputs. Runs user code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParDoInstruction
	{
		
		/// <summary>
		/// An input of an instruction, as a reference to an output of a producer instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public InstructionInput Input { get; set; }
		
		/// <summary>
		/// Information about each of the outputs, if user_fn is a MultiDoFn.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiOutputInfos")]
		public MultiOutputInfo[] MultiOutputInfos { get; set; }
		
		/// <summary>
		/// The number of outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numOutputs")]
		public System.Nullable<System.Int32> NumOutputs { get; set; }
		
		/// <summary>
		/// Zero or more side inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sideInputs")]
		public SideInputInfo[] SideInputs { get; set; }
		
		/// <summary>
		/// The user function to invoke.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userFn")]
		public System.Collections.Generic.Dictionary<string, object> UserFn { get; set; }
	}
	
	/// <summary>
	/// Information about an output of a multi-output DoFn.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultiOutputInfo
	{
		
		/// <summary>
		/// The id of the tag the user code will emit to this output by; this should correspond to the tag of some SideInputInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Information about a side input of a DoFn or an input of a SeqDoFn.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SideInputInfo
	{
		
		/// <summary>
		/// How to interpret the source element(s) as a side input value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Collections.Generic.Dictionary<string, object> Kind { get; set; }
		
		/// <summary>
		/// The source(s) to read element(s) from to get the value of this side input. If more than one source, then the elements are taken from the sources, in the specified order if order matters. At least one source is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public Source[] Sources { get; set; }
		
		/// <summary>
		/// The id of the tag the user code will access this side input by; this should correspond to the tag of some MultiOutputInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// An instruction that does a partial group-by-key. One input and one output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartialGroupByKeyInstruction
	{
		
		/// <summary>
		/// An input of an instruction, as a reference to an output of a producer instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public InstructionInput Input { get; set; }
		
		/// <summary>
		/// The codec to use for interpreting an element in the input PTable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputElementCodec")]
		public System.Collections.Generic.Dictionary<string, object> InputElementCodec { get; set; }
		
		/// <summary>
		/// If this instruction includes a combining function this is the name of the intermediate store between the GBK and the CombineValues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalCombineValuesInputStoreName")]
		public string OriginalCombineValuesInputStoreName { get; set; }
		
		/// <summary>
		/// If this instruction includes a combining function, this is the name of the CombineValues instruction lifted into this instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalCombineValuesStepName")]
		public string OriginalCombineValuesStepName { get; set; }
		
		/// <summary>
		/// Zero or more side inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sideInputs")]
		public SideInputInfo[] SideInputs { get; set; }
		
		/// <summary>
		/// The value combining function to invoke.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueCombiningFn")]
		public System.Collections.Generic.Dictionary<string, object> ValueCombiningFn { get; set; }
	}
	
	/// <summary>
	/// An instruction that reads records. Takes no inputs, produces one output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadInstruction
	{
		
		/// <summary>
		/// A source that records can be read and decoded from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	/// <summary>
	/// An instruction that writes records. Takes one input, produces no outputs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WriteInstruction
	{
		
		/// <summary>
		/// An input of an instruction, as a reference to an output of a producer instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public InstructionInput Input { get; set; }
		
		/// <summary>
		/// A sink that records can be encoded and written to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sink")]
		public Sink Sink { get; set; }
	}
	
	/// <summary>
	/// A sink that records can be encoded and written to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Sink
	{
		
		/// <summary>
		/// The codec to use to encode data written to the sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codec")]
		public System.Collections.Generic.Dictionary<string, object> Codec { get; set; }
		
		/// <summary>
		/// The sink to write to, plus its parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public System.Collections.Generic.Dictionary<string, object> Spec { get; set; }
	}
	
	/// <summary>
	/// Describes a particular function to invoke.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SeqMapTask
	{
		
		/// <summary>
		/// Information about each of the inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public SideInputInfo[] Inputs { get; set; }
		
		/// <summary>
		/// The user-provided name of the SeqDo operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Information about each of the outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputInfos")]
		public SeqMapTaskOutputInfo[] OutputInfos { get; set; }
		
		/// <summary>
		/// System-defined name of the stage containing the SeqDo operation. Unique across the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// System-defined name of the SeqDo operation. Unique across the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemName")]
		public string SystemName { get; set; }
		
		/// <summary>
		/// The user function to invoke.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userFn")]
		public System.Collections.Generic.Dictionary<string, object> UserFn { get; set; }
	}
	
	/// <summary>
	/// Information about an output of a SeqMapTask.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SeqMapTaskOutputInfo
	{
		
		/// <summary>
		/// A sink that records can be encoded and written to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sink")]
		public Sink Sink { get; set; }
		
		/// <summary>
		/// The id of the TupleTag the user code will tag the output value by.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// A task which consists of a shell command for the worker to execute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShellTask
	{
		
		/// <summary>
		/// The shell command to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string Command { get; set; }
		
		/// <summary>
		/// Exit code for the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
	}
	
	/// <summary>
	/// A work item that represents the different operations that can be performed on a user-defined Source specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceOperationRequest
	{
		
		/// <summary>
		/// A request to compute the SourceMetadata of a Source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="getMetadata")]
		public SourceGetMetadataRequest GetMetadata { get; set; }
		
		/// <summary>
		/// User-provided name of the Read instruction for this source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// System-defined name for the Read instruction for this source in the original workflow graph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalName")]
		public string OriginalName { get; set; }
		
		/// <summary>
		/// Represents the operation to split a high-level Source specification into bundles (parts for parallel processing). At a high level, splitting of a source into bundles happens as follows: SourceSplitRequest is applied to the source. If it returns SOURCE_SPLIT_OUTCOME_USE_CURRENT, no further splitting happens and the source is used "as is". Otherwise, splitting is applied recursively to each produced DerivedSource. As an optimization, for any Source, if its does_not_need_splitting is true, the framework assumes that splitting this source would return SOURCE_SPLIT_OUTCOME_USE_CURRENT, and doesn't initiate a SourceSplitRequest. This applies both to the initial source being split and to bundles produced from it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="split")]
		public SourceSplitRequest Split { get; set; }
		
		/// <summary>
		/// System-defined name of the stage containing the source operation. Unique across the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// System-defined name of the Read instruction for this source. Unique across the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemName")]
		public string SystemName { get; set; }
	}
	
	/// <summary>
	/// A request to compute the SourceMetadata of a Source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceGetMetadataRequest
	{
		
		/// <summary>
		/// A source that records can be read and decoded from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	/// <summary>
	/// Represents the operation to split a high-level Source specification into bundles (parts for parallel processing). At a high level, splitting of a source into bundles happens as follows: SourceSplitRequest is applied to the source. If it returns SOURCE_SPLIT_OUTCOME_USE_CURRENT, no further splitting happens and the source is used "as is". Otherwise, splitting is applied recursively to each produced DerivedSource. As an optimization, for any Source, if its does_not_need_splitting is true, the framework assumes that splitting this source would return SOURCE_SPLIT_OUTCOME_USE_CURRENT, and doesn't initiate a SourceSplitRequest. This applies both to the initial source being split and to bundles produced from it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceSplitRequest
	{
		
		/// <summary>
		/// Hints for splitting a Source into bundles (parts for parallel processing) using SourceSplitRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public SourceSplitOptions Options { get; set; }
		
		/// <summary>
		/// A source that records can be read and decoded from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	/// <summary>
	/// Hints for splitting a Source into bundles (parts for parallel processing) using SourceSplitRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceSplitOptions
	{
		
		/// <summary>
		/// The source should be split into a set of bundles where the estimated size of each is approximately this many bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredBundleSizeBytes")]
		public string DesiredBundleSizeBytes { get; set; }
		
		/// <summary>
		/// DEPRECATED in favor of desired_bundle_size_bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredShardSizeBytes")]
		public string DesiredShardSizeBytes { get; set; }
	}
	
	/// <summary>
	/// A task which describes what action should be performed for the specified streaming computation ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingComputationTask
	{
		
		/// <summary>
		/// Contains ranges of a streaming computation this task should apply to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computationRanges")]
		public StreamingComputationRanges[] ComputationRanges { get; set; }
		
		/// <summary>
		/// Describes the set of data disks this task should apply to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisks")]
		public MountedDataDisk[] DataDisks { get; set; }
		
		/// <summary>
		/// A type of streaming computation task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskType")]
		public System.Nullable<StreamingComputationTaskTaskType> TaskType { get; set; }
	}
	
	/// <summary>
	/// Describes full or partial data disk assignment information of the computation ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingComputationRanges
	{
		
		/// <summary>
		/// The ID of the computation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computationId")]
		public string ComputationId { get; set; }
		
		/// <summary>
		/// Data disk assignments for ranges from this computation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rangeAssignments")]
		public KeyRangeDataDiskAssignment[] RangeAssignments { get; set; }
	}
	
	/// <summary>
	/// Describes mounted data disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MountedDataDisk
	{
		
		/// <summary>
		/// The name of the data disk. This name is local to the Google Cloud Platform project and uniquely identifies the disk within that project, for example "myproject-1014-104817-4c2-harness-0-disk-1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisk")]
		public string DataDisk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingComputationTaskTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_COMPUTATION_TASK_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_COMPUTATION_TASK_STOP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_COMPUTATION_TASK_START = 2,
	}
	
	/// <summary>
	/// A task that carries configuration information for streaming computations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingConfigTask
	{
		
		/// <summary>
		/// Chunk size for commit streams from the harness to windmill.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitStreamChunkSizeBytes")]
		public string CommitStreamChunkSizeBytes { get; set; }
		
		/// <summary>
		/// Chunk size for get data streams from the harness to windmill.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="getDataStreamChunkSizeBytes")]
		public string GetDataStreamChunkSizeBytes { get; set; }
		
		/// <summary>
		/// Maximum size for work item commit supported windmill storage layer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxWorkItemCommitBytes")]
		public string MaxWorkItemCommitBytes { get; set; }
		
		/// <summary>
		/// Set of computation configuration information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingComputationConfigs")]
		public StreamingComputationConfig[] StreamingComputationConfigs { get; set; }
		
		/// <summary>
		/// Map from user step names to state families.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userStepToStateFamilyNameMap")]
		public System.Collections.Generic.Dictionary<string, string> UserStepToStateFamilyNameMap { get; set; }
		
		/// <summary>
		/// If present, the worker must use this endpoint to communicate with Windmill Service dispatchers, otherwise the worker must continue to use whatever endpoint it had been using.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windmillServiceEndpoint")]
		public string WindmillServiceEndpoint { get; set; }
		
		/// <summary>
		/// If present, the worker must use this port to communicate with Windmill Service dispatchers. Only applicable when windmill_service_endpoint is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windmillServicePort")]
		public string WindmillServicePort { get; set; }
	}
	
	/// <summary>
	/// Configuration information for a single streaming computation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingComputationConfig
	{
		
		/// <summary>
		/// Unique identifier for this computation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computationId")]
		public string ComputationId { get; set; }
		
		/// <summary>
		/// Instructions that comprise the computation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instructions")]
		public ParallelInstruction[] Instructions { get; set; }
		
		/// <summary>
		/// Stage name of this computation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// System defined name for this computation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemName")]
		public string SystemName { get; set; }
		
		/// <summary>
		/// Map from user name of stateful transforms in this stage to their state family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformUserNameToStateFamily")]
		public System.Collections.Generic.Dictionary<string, string> TransformUserNameToStateFamily { get; set; }
	}
	
	/// <summary>
	/// A task which initializes part of a streaming Dataflow job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingSetupTask
	{
		
		/// <summary>
		/// The user has requested drain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drain")]
		public System.Nullable<System.Boolean> Drain { get; set; }
		
		/// <summary>
		/// The TCP port on which the worker should listen for messages from other streaming computation workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiveWorkPort")]
		public System.Nullable<System.Int32> ReceiveWorkPort { get; set; }
		
		/// <summary>
		/// Streaming appliance snapshot configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotConfig")]
		public StreamingApplianceSnapshotConfig SnapshotConfig { get; set; }
		
		/// <summary>
		/// Global topology of the streaming Dataflow job, including all computations and their sharded locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingComputationTopology")]
		public TopologyConfig StreamingComputationTopology { get; set; }
		
		/// <summary>
		/// The TCP port used by the worker to communicate with the Dataflow worker harness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerHarnessPort")]
		public System.Nullable<System.Int32> WorkerHarnessPort { get; set; }
	}
	
	/// <summary>
	/// Streaming appliance snapshot configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingApplianceSnapshotConfig
	{
		
		/// <summary>
		/// Indicates which endpoint is used to import appliance state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importStateEndpoint")]
		public string ImportStateEndpoint { get; set; }
		
		/// <summary>
		/// If set, indicates the snapshot id for the snapshot being performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotId")]
		public string SnapshotId { get; set; }
	}
	
	/// <summary>
	/// Global topology of the streaming Dataflow job, including all computations and their sharded locations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TopologyConfig
	{
		
		/// <summary>
		/// The computations associated with a streaming Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computations")]
		public ComputationTopology[] Computations { get; set; }
		
		/// <summary>
		/// The disks assigned to a streaming Dataflow job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskAssignments")]
		public DataDiskAssignment[] DataDiskAssignments { get; set; }
		
		/// <summary>
		/// The size (in bits) of keys that will be assigned to source messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardingKeyBits")]
		public System.Nullable<System.Int32> ForwardingKeyBits { get; set; }
		
		/// <summary>
		/// Version number for persistent state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistentStateVersion")]
		public System.Nullable<System.Int32> PersistentStateVersion { get; set; }
		
		/// <summary>
		/// Maps user stage names to stable computation names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userStageToComputationNameMap")]
		public System.Collections.Generic.Dictionary<string, string> UserStageToComputationNameMap { get; set; }
	}
	
	/// <summary>
	/// Response to a request to list job messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListJobMessagesResponse
	{
		
		/// <summary>
		/// Autoscaling events in ascending timestamp order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscalingEvents")]
		public AutoscalingEvent[] AutoscalingEvents { get; set; }
		
		/// <summary>
		/// Messages in ascending timestamp order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobMessages")]
		public JobMessage[] JobMessages { get; set; }
		
		/// <summary>
		/// The token to obtain the next page of results if there are more.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response to a request to list Cloud Dataflow jobs in a project. This might be a partial response, depending on the page size in the ListJobsRequest. However, if the project does not have any jobs, an instance of ListJobsResponse is not returned and the requests's response body is empty {}.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListJobsResponse
	{
		
		/// <summary>
		/// Zero or more messages describing the [regional endpoints] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that failed to respond.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedLocation")]
		public FailedLocation[] FailedLocation { get; set; }
		
		/// <summary>
		/// A subset of the requested job information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public Job[] Jobs { get; set; }
		
		/// <summary>
		/// Set if there may be more results than fit in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// List of snapshots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSnapshotsResponse
	{
		
		/// <summary>
		/// Returned snapshots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshots")]
		public Snapshot[] Snapshots { get; set; }
	}
	
	/// <summary>
	/// Represents a snapshot of a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Snapshot
	{
		
		/// <summary>
		/// The time this snapshot was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// User specified description of the snapshot. Maybe empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The disk byte size of the snapshot. Only available for snapshots in READY state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeBytes")]
		public string DiskSizeBytes { get; set; }
		
		/// <summary>
		/// The unique ID of this snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The project this snapshot belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Pub/Sub snapshot metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubMetadata")]
		public PubsubSnapshotMetadata[] PubsubMetadata { get; set; }
		
		/// <summary>
		/// Cloud region where this snapshot lives in, e.g., "us-central1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// The job this snapshot was created from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceJobId")]
		public string SourceJobId { get; set; }
		
		/// <summary>
		/// State of the snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<SnapshotState> State { get; set; }
		
		/// <summary>
		/// The time after which this snapshot will be automatically deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
	}
	
	/// <summary>
	/// Represents a Pubsub snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PubsubSnapshotMetadata
	{
		
		/// <summary>
		/// The expire time of the Pubsub snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// The name of the Pubsub snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotName")]
		public string SnapshotName { get; set; }
		
		/// <summary>
		/// The name of the Pubsub topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicName")]
		public string TopicName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SnapshotState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_SNAPSHOT_STATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 5,
	}
	
	/// <summary>
	/// Information about the memory usage of a worker or a container within a worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MemInfo
	{
		
		/// <summary>
		/// Instantenous memory limit in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentLimitBytes")]
		public string CurrentLimitBytes { get; set; }
		
		/// <summary>
		/// Number of Out of Memory (OOM) events recorded since the previous measurement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentOoms")]
		public string CurrentOoms { get; set; }
		
		/// <summary>
		/// Instantenous memory (RSS) size in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentRssBytes")]
		public string CurrentRssBytes { get; set; }
		
		/// <summary>
		/// Timestamp of the measurement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Total memory (RSS) usage since start up in GB * ms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalGbMs")]
		public string TotalGbMs { get; set; }
	}
	
	/// <summary>
	/// The metric short id is returned to the user alongside an offset into ReportWorkItemStatusRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricShortId
	{
		
		/// <summary>
		/// The index of the corresponding metric in the ReportWorkItemStatusRequest. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricIndex")]
		public System.Nullable<System.Int32> MetricIndex { get; set; }
		
		/// <summary>
		/// The service-generated short identifier for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortId")]
		public string ShortId { get; set; }
	}
	
	/// <summary>
	/// The value of a metric along with its name and labels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricValue
	{
		
		/// <summary>
		/// Base name for this metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public string Metric { get; set; }
		
		/// <summary>
		/// Optional. Set of metric labels for this metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricLabels")]
		public System.Collections.Generic.Dictionary<string, string> MetricLabels { get; set; }
		
		/// <summary>
		/// Summary statistics for a population of values. HistogramValue contains a sequence of buckets and gives a count of values that fall into each bucket. Bucket boundares are defined by a formula and bucket widths are either fixed or exponentially increasing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueHistogram")]
		public DataflowHistogramValue ValueHistogram { get; set; }
		
		/// <summary>
		/// Integer value of this metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueInt64")]
		public string ValueInt64 { get; set; }
	}
	
	/// <summary>
	/// Metrics for a particular unfused step and namespace. A metric is uniquely identified by the `metrics_namespace`, `original_step`, `metric name` and `metric_labels`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PerStepNamespaceMetrics
	{
		
		/// <summary>
		/// Optional. Metrics that are recorded for this namespace and unfused step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValues")]
		public MetricValue[] MetricValues { get; set; }
		
		/// <summary>
		/// The namespace of these metrics on the worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricsNamespace")]
		public string MetricsNamespace { get; set; }
		
		/// <summary>
		/// The original system name of the unfused step that these metrics are reported from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalStep")]
		public string OriginalStep { get; set; }
	}
	
	/// <summary>
	/// Per worker metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PerWorkerMetrics
	{
		
		/// <summary>
		/// Optional. Metrics for a particular unfused step and namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perStepNamespaceMetrics")]
		public PerStepNamespaceMetrics[] PerStepNamespaceMetrics { get; set; }
	}
	
	/// <summary>
	/// Request to report the status of WorkItems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportWorkItemStatusRequest
	{
		
		/// <summary>
		/// The current timestamp at the worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentWorkerTime")]
		public string CurrentWorkerTime { get; set; }
		
		/// <summary>
		/// The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Untranslated bag-of-bytes WorkProgressUpdateRequest from UnifiedWorker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unifiedWorkerRequest")]
		public System.Collections.Generic.Dictionary<string, object> UnifiedWorkerRequest { get; set; }
		
		/// <summary>
		/// The order is unimportant, except that the order of the WorkItemServiceState messages in the ReportWorkItemStatusResponse corresponds to the order of WorkItemStatus messages here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workItemStatuses")]
		public WorkItemStatus[] WorkItemStatuses { get; set; }
		
		/// <summary>
		/// The ID of the worker reporting the WorkItem status. If this does not match the ID of the worker which the Dataflow service believes currently has the lease on the WorkItem, the report will be dropped (with an error response).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerId")]
		public string WorkerId { get; set; }
	}
	
	/// <summary>
	/// Conveys a worker's progress through the work described by a WorkItem.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkItemStatus
	{
		
		/// <summary>
		/// True if the WorkItem was completed (successfully or unsuccessfully).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		/// <summary>
		/// Worker output counters for this WorkItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counterUpdates")]
		public CounterUpdate[] CounterUpdates { get; set; }
		
		/// <summary>
		/// When a task splits using WorkItemStatus.dynamic_source_split, this message describes the two parts of the split relative to the description of the current task's input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicSourceSplit")]
		public DynamicSourceSplit DynamicSourceSplit { get; set; }
		
		/// <summary>
		/// Specifies errors which occurred during processing. If errors are provided, and completed = true, then the WorkItem is considered to have failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Status[] Errors { get; set; }
		
		/// <summary>
		/// DEPRECATED in favor of counter_updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricUpdates")]
		public MetricUpdate[] MetricUpdates { get; set; }
		
		/// <summary>
		/// Obsolete in favor of ApproximateReportedProgress and ApproximateSplitRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public ApproximateProgress Progress { get; set; }
		
		/// <summary>
		/// The report index. When a WorkItem is leased, the lease will contain an initial report index. When a WorkItem's status is reported to the system, the report should be sent with that report index, and the response will contain the index the worker should use for the next report. Reports received with unexpected index values will be rejected by the service. In order to preserve idempotency, the worker should not alter the contents of a report, even if the worker must submit the same report multiple times before getting back a response. The worker should not submit a subsequent report until the response for the previous report had been received from the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportIndex")]
		public string ReportIndex { get; set; }
		
		/// <summary>
		/// A progress measurement of a WorkItem by a worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportedProgress")]
		public ApproximateReportedProgress ReportedProgress { get; set; }
		
		/// <summary>
		/// Amount of time the worker requests for its lease.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedLeaseDuration")]
		public string RequestedLeaseDuration { get; set; }
		
		/// <summary>
		/// DEPRECATED in favor of DynamicSourceSplit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFork")]
		public SourceFork SourceFork { get; set; }
		
		/// <summary>
		/// The result of a SourceOperationRequest, specified in ReportWorkItemStatusRequest.source_operation when the work item is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceOperationResponse")]
		public SourceOperationResponse SourceOperationResponse { get; set; }
		
		/// <summary>
		/// Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopPosition")]
		public Position StopPosition { get; set; }
		
		/// <summary>
		/// Total time the worker spent being throttled by external systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalThrottlerWaitTimeSeconds")]
		public System.Nullable<System.Double> TotalThrottlerWaitTimeSeconds { get; set; }
		
		/// <summary>
		/// Identifies the WorkItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workItemId")]
		public string WorkItemId { get; set; }
	}
	
	/// <summary>
	/// DEPRECATED in favor of DynamicSourceSplit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceFork
	{
		
		/// <summary>
		/// DEPRECATED in favor of DerivedSource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public SourceSplitShard Primary { get; set; }
		
		/// <summary>
		/// Specification of one of the bundles produced as a result of splitting a Source (e.g. when executing a SourceSplitRequest, or when splitting an active task using WorkItemStatus.dynamic_source_split), relative to the source being split.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primarySource")]
		public DerivedSource PrimarySource { get; set; }
		
		/// <summary>
		/// DEPRECATED in favor of DerivedSource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="residual")]
		public SourceSplitShard Residual { get; set; }
		
		/// <summary>
		/// Specification of one of the bundles produced as a result of splitting a Source (e.g. when executing a SourceSplitRequest, or when splitting an active task using WorkItemStatus.dynamic_source_split), relative to the source being split.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="residualSource")]
		public DerivedSource ResidualSource { get; set; }
	}
	
	/// <summary>
	/// DEPRECATED in favor of DerivedSource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceSplitShard
	{
		
		/// <summary>
		/// DEPRECATED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="derivationMode")]
		public DerivedSourceDerivationMode DerivationMode { get; set; }
		
		/// <summary>
		/// A source that records can be read and decoded from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	/// <summary>
	/// The result of a SourceOperationRequest, specified in ReportWorkItemStatusRequest.source_operation when the work item is completed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceOperationResponse
	{
		
		/// <summary>
		/// The result of a SourceGetMetadataOperation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="getMetadata")]
		public SourceGetMetadataResponse GetMetadata { get; set; }
		
		/// <summary>
		/// The response to a SourceSplitRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="split")]
		public SourceSplitResponse Split { get; set; }
	}
	
	/// <summary>
	/// The result of a SourceGetMetadataOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceGetMetadataResponse
	{
		
		/// <summary>
		/// Metadata about a Source useful for automatically optimizing and tuning the pipeline, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public SourceMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// The response to a SourceSplitRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceSplitResponse
	{
		
		/// <summary>
		/// If outcome is SPLITTING_HAPPENED, then this is a list of bundles into which the source was split. Otherwise this field is ignored. This list can be empty, which means the source represents an empty input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundles")]
		public DerivedSource[] Bundles { get; set; }
		
		/// <summary>
		/// Indicates whether splitting happened and produced a list of bundles. If this is USE_CURRENT_SOURCE_AS_IS, the current source should be processed "as is" without splitting. "bundles" is ignored in this case. If this is SPLITTING_HAPPENED, then "bundles" contains a list of bundles into which the source was split.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outcome")]
		public System.Nullable<SourceSplitResponseOutcome> Outcome { get; set; }
		
		/// <summary>
		/// DEPRECATED in favor of bundles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shards")]
		public SourceSplitShard[] Shards { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SourceSplitResponseOutcome
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_SPLIT_OUTCOME_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_SPLIT_OUTCOME_USE_CURRENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED = 2,
	}
	
	/// <summary>
	/// Response from a request to report the status of WorkItems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportWorkItemStatusResponse
	{
		
		/// <summary>
		/// Untranslated bag-of-bytes WorkProgressUpdateResponse for UnifiedWorker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unifiedWorkerResponse")]
		public System.Collections.Generic.Dictionary<string, object> UnifiedWorkerResponse { get; set; }
		
		/// <summary>
		/// A set of messages indicating the service-side state for each WorkItem whose status was reported, in the same order as the WorkItemStatus messages in the ReportWorkItemStatusRequest which resulting in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workItemServiceStates")]
		public WorkItemServiceState[] WorkItemServiceStates { get; set; }
	}
	
	/// <summary>
	/// The Dataflow service's idea of the current state of a WorkItem being processed by a worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkItemServiceState
	{
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeWorkStatus")]
		public Status CompleteWorkStatus { get; set; }
		
		/// <summary>
		/// Other data returned by the service, specific to the particular worker harness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="harnessData")]
		public System.Collections.Generic.Dictionary<string, object> HarnessData { get; set; }
		
		/// <summary>
		/// Proto describing a hot key detected on a given WorkItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotKeyDetection")]
		public HotKeyDetection HotKeyDetection { get; set; }
		
		/// <summary>
		/// Time at which the current lease will expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseExpireTime")]
		public string LeaseExpireTime { get; set; }
		
		/// <summary>
		/// The short ids that workers should use in subsequent metric updates. Workers should strive to use short ids whenever possible, but it is ok to request the short_id again if a worker lost track of it (e.g. if the worker is recovering from a crash). NOTE: it is possible that the response may have short ids for a subset of the metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricShortId")]
		public MetricShortId[] MetricShortId { get; set; }
		
		/// <summary>
		/// The index value to use for the next report sent by the worker. Note: If the report call fails for whatever reason, the worker should reuse this index for subsequent report attempts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextReportIndex")]
		public string NextReportIndex { get; set; }
		
		/// <summary>
		/// New recommended reporting interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportStatusInterval")]
		public string ReportStatusInterval { get; set; }
		
		/// <summary>
		/// A suggestion by the service to the worker to dynamically split the WorkItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="splitRequest")]
		public ApproximateSplitRequest SplitRequest { get; set; }
		
		/// <summary>
		/// Obsolete in favor of ApproximateReportedProgress and ApproximateSplitRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedStopPoint")]
		public ApproximateProgress SuggestedStopPoint { get; set; }
		
		/// <summary>
		/// Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedStopPosition")]
		public Position SuggestedStopPosition { get; set; }
	}
	
	/// <summary>
	/// Worker metrics exported from workers. This contains resource utilization metrics accumulated from a variety of sources. For more information, see go/df-resource-signals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceUtilizationReport
	{
		
		/// <summary>
		/// Per container information. Key: container name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public System.Collections.Generic.Dictionary<string, ResourceUtilizationReport> Containers { get; set; }
		
		/// <summary>
		/// CPU utilization samples.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuTime")]
		public CPUTime[] CpuTime { get; set; }
		
		/// <summary>
		/// Memory utilization samples.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryInfo")]
		public MemInfo[] MemoryInfo { get; set; }
	}
	
	/// <summary>
	/// Service-side response to WorkerMessage reporting resource utilization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceUtilizationReportResponse
	{
	}
	
	/// <summary>
	/// Request to send encoded debug information. Next ID: 8
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendDebugCaptureRequest
	{
		
		/// <summary>
		/// The internal component id for which debug information is sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentId")]
		public string ComponentId { get; set; }
		
		/// <summary>
		/// The encoded debug information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Format for the data field above (id=5).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFormat")]
		public System.Nullable<SendDebugCaptureRequestDataFormat> DataFormat { get; set; }
		
		/// <summary>
		/// The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The worker id, i.e., VM hostname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerId")]
		public string WorkerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SendDebugCaptureRequestDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZLIB = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BROTLI = 4,
	}
	
	/// <summary>
	/// Response to a send capture request. nothing
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendDebugCaptureResponse
	{
	}
	
	/// <summary>
	/// A request for sending worker messages to the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendWorkerMessagesRequest
	{
		
		/// <summary>
		/// The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The WorkerMessages to send.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerMessages")]
		public WorkerMessage[] WorkerMessages { get; set; }
	}
	
	/// <summary>
	/// WorkerMessage provides information to the backend about a worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerMessage
	{
		
		/// <summary>
		/// Contains per-worker telemetry about the data sampling feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSamplingReport")]
		public DataSamplingReport DataSamplingReport { get; set; }
		
		/// <summary>
		/// Labels are used to group WorkerMessages. For example, a worker_message about a particular container might have the labels: { "JOB_ID": "2015-04-22", "WORKER_ID": "wordcount-vm-2015…" "CONTAINER_TYPE": "worker", "CONTAINER_ID": "ac1234def"} Label tags typically correspond to Label enum values. However, for ease of development other strings can be used as tags. LABEL_UNSPECIFIED should not be used here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Per worker metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perWorkerMetrics")]
		public PerWorkerMetrics PerWorkerMetrics { get; set; }
		
		/// <summary>
		/// Contains per-user worker telemetry used in streaming autoscaling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingScalingReport")]
		public StreamingScalingReport StreamingScalingReport { get; set; }
		
		/// <summary>
		/// The timestamp of the worker_message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
		
		/// <summary>
		/// WorkerHealthReport contains information about the health of a worker. The VM should be identified by the labels attached to the WorkerMessage that this health ping belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerHealthReport")]
		public WorkerHealthReport WorkerHealthReport { get; set; }
		
		/// <summary>
		/// A report of an event in a worker's lifecycle. The proto contains one event, because the worker is expected to asynchronously send each message immediately after the event. Due to this asynchrony, messages may arrive out of order (or missing), and it is up to the consumer to interpret. The timestamp of the event is in the enclosing WorkerMessage proto.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerLifecycleEvent")]
		public WorkerLifecycleEvent WorkerLifecycleEvent { get; set; }
		
		/// <summary>
		/// A message code is used to report status and error messages to the service. The message codes are intended to be machine readable. The service will take care of translating these into user understandable messages if necessary. Example use cases: 1. Worker processes reporting successful startup. 2. Worker processes reporting specific errors (e.g. package staging failure).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerMessageCode")]
		public WorkerMessageCode WorkerMessageCode { get; set; }
		
		/// <summary>
		/// Worker metrics exported from workers. This contains resource utilization metrics accumulated from a variety of sources. For more information, see go/df-resource-signals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerMetrics")]
		public ResourceUtilizationReport WorkerMetrics { get; set; }
		
		/// <summary>
		/// Shutdown notification from workers. This is to be sent by the shutdown script of the worker VM so that the backend knows that the VM is being shut down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerShutdownNotice")]
		public WorkerShutdownNotice WorkerShutdownNotice { get; set; }
		
		/// <summary>
		/// Contains information about the thread scaling information of a worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerThreadScalingReport")]
		public WorkerThreadScalingReport WorkerThreadScalingReport { get; set; }
	}
	
	/// <summary>
	/// Contains per-user worker telemetry used in streaming autoscaling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingScalingReport
	{
		
		/// <summary>
		/// Current acive bundle count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeBundleCount")]
		public System.Nullable<System.Int32> ActiveBundleCount { get; set; }
		
		/// <summary>
		/// Current acive thread count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeThreadCount")]
		public System.Nullable<System.Int32> ActiveThreadCount { get; set; }
		
		/// <summary>
		/// Maximum bundle count limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumBundleCount")]
		public System.Nullable<System.Int32> MaximumBundleCount { get; set; }
		
		/// <summary>
		/// Maximum bytes count limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumBytesCount")]
		public System.Nullable<System.Int32> MaximumBytesCount { get; set; }
		
		/// <summary>
		/// Maximum thread count limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumThreadCount")]
		public System.Nullable<System.Int32> MaximumThreadCount { get; set; }
		
		/// <summary>
		/// Current outstanding bytes count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outstandingBytesCount")]
		public System.Nullable<System.Int32> OutstandingBytesCount { get; set; }
	}
	
	/// <summary>
	/// WorkerHealthReport contains information about the health of a worker. The VM should be identified by the labels attached to the WorkerMessage that this health ping belongs to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerHealthReport
	{
		
		/// <summary>
		/// Message describing any unusual health reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// The pods running on the worker. See: http://kubernetes.io/v1.1/docs/api-reference/v1/definitions.html#_v1_pod This field is used by the worker to send the status of the indvidual containers running on each worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pods")]
		public string[] Pods { get; set; }
		
		/// <summary>
		/// The interval at which the worker is sending health reports. The default value of 0 should be interpreted as the field is not being explicitly set by the worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportInterval")]
		public string ReportInterval { get; set; }
		
		/// <summary>
		/// Code to describe a specific reason, if known, that a VM has reported broken state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmBrokenCode")]
		public string VmBrokenCode { get; set; }
		
		/// <summary>
		/// Whether the VM is in a permanently broken state. Broken VMs should be abandoned or deleted ASAP to avoid assigning or completing any work.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmIsBroken")]
		public System.Nullable<System.Boolean> VmIsBroken { get; set; }
		
		/// <summary>
		/// Whether the VM is currently healthy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmIsHealthy")]
		public System.Nullable<System.Boolean> VmIsHealthy { get; set; }
		
		/// <summary>
		/// The time the VM was booted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmStartupTime")]
		public string VmStartupTime { get; set; }
	}
	
	/// <summary>
	/// A report of an event in a worker's lifecycle. The proto contains one event, because the worker is expected to asynchronously send each message immediately after the event. Due to this asynchrony, messages may arrive out of order (or missing), and it is up to the consumer to interpret. The timestamp of the event is in the enclosing WorkerMessage proto.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerLifecycleEvent
	{
		
		/// <summary>
		/// The start time of this container. All events will report this so that events can be grouped together across container/VM restarts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerStartTime")]
		public string ContainerStartTime { get; set; }
		
		/// <summary>
		/// The event being reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public System.Nullable<WorkerLifecycleEventEvent> Event { get; set; }
		
		/// <summary>
		/// Other stats that can accompany an event. E.g. { "downloaded_bytes" : "123456" }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkerLifecycleEventEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_EVENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_START = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINER_START = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_UP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAGING_FILES_DOWNLOAD_START = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAGING_FILES_DOWNLOAD_FINISH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDK_INSTALL_START = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDK_INSTALL_FINISH = 7,
	}
	
	/// <summary>
	/// A message code is used to report status and error messages to the service. The message codes are intended to be machine readable. The service will take care of translating these into user understandable messages if necessary. Example use cases: 1. Worker processes reporting successful startup. 2. Worker processes reporting specific errors (e.g. package staging failure).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerMessageCode
	{
		
		/// <summary>
		/// The code is a string intended for consumption by a machine that identifies the type of message being sent. Examples: 1. "HARNESS_STARTED" might be used to indicate the worker harness has started. 2. "GCS_DOWNLOAD_ERROR" might be used to indicate an error downloading a Cloud Storage file as part of the boot process of one of the worker containers. This is a string and not an enum to make it easy to add new codes without waiting for an API change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Parameters contains specific information about the code. This is a struct to allow parameters of different types. Examples: 1. For a "HARNESS_STARTED" message parameters might provide the name of the worker and additional data like timing information. 2. For a "GCS_DOWNLOAD_ERROR" parameters might contain fields listing the Cloud Storage objects being downloaded and fields containing errors. In general complex data structures should be avoided. If a worker needs to send a specific and complicated data structure then please consider defining a new proto and adding it to the data oneof in WorkerMessageResponse. Conventions: Parameters should only be used for information that isn't typically passed as a label. hostname and other worker identifiers should almost always be passed as labels since they will be included on most messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
	}
	
	/// <summary>
	/// Shutdown notification from workers. This is to be sent by the shutdown script of the worker VM so that the backend knows that the VM is being shut down.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerShutdownNotice
	{
		
		/// <summary>
		/// The reason for the worker shutdown. Current possible values are: "UNKNOWN": shutdown reason is unknown. "PREEMPTION": shutdown reason is preemption. Other possible reasons may be added in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Contains information about the thread scaling information of a worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerThreadScalingReport
	{
		
		/// <summary>
		/// Current number of active threads in a worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentThreadCount")]
		public System.Nullable<System.Int32> CurrentThreadCount { get; set; }
	}
	
	/// <summary>
	/// The response to the worker messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendWorkerMessagesResponse
	{
		
		/// <summary>
		/// The servers response to the worker messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerMessageResponses")]
		public WorkerMessageResponse[] WorkerMessageResponses { get; set; }
	}
	
	/// <summary>
	/// A worker_message response allows the server to pass information to the sender.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerMessageResponse
	{
		
		/// <summary>
		/// WorkerHealthReportResponse contains information returned to the worker in response to a health ping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerHealthReportResponse")]
		public WorkerHealthReportResponse WorkerHealthReportResponse { get; set; }
		
		/// <summary>
		/// Service-side response to WorkerMessage reporting resource utilization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerMetricsResponse")]
		public ResourceUtilizationReportResponse WorkerMetricsResponse { get; set; }
		
		/// <summary>
		/// Service-side response to WorkerMessage issuing shutdown notice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerShutdownNoticeResponse")]
		public WorkerShutdownNoticeResponse WorkerShutdownNoticeResponse { get; set; }
		
		/// <summary>
		/// Contains the thread scaling recommendation for a worker from the backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerThreadScalingReportResponse")]
		public WorkerThreadScalingReportResponse WorkerThreadScalingReportResponse { get; set; }
	}
	
	/// <summary>
	/// WorkerHealthReportResponse contains information returned to the worker in response to a health ping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerHealthReportResponse
	{
		
		/// <summary>
		/// A positive value indicates the worker should change its reporting interval to the specified value. The default value of zero means no change in report rate is requested by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportInterval")]
		public string ReportInterval { get; set; }
	}
	
	/// <summary>
	/// Service-side response to WorkerMessage issuing shutdown notice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerShutdownNoticeResponse
	{
	}
	
	/// <summary>
	/// Contains the thread scaling recommendation for a worker from the backend.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerThreadScalingReportResponse
	{
		
		/// <summary>
		/// Recommended number of threads for a worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedThreadCount")]
		public System.Nullable<System.Int32> RecommendedThreadCount { get; set; }
	}
	
	/// <summary>
	/// Request to create a snapshot of a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SnapshotJobRequest
	{
		
		/// <summary>
		/// User specified description of the snapshot. Maybe empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The location that contains this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// If true, perform snapshots for sources which support this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotSources")]
		public System.Nullable<System.Boolean> SnapshotSources { get; set; }
		
		/// <summary>
		/// TTL for the snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
	}
	
	/// <summary>
	/// Information about the workers and work items within a stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StageExecutionDetails
	{
		
		/// <summary>
		/// If present, this response does not contain all requested tasks. To obtain the next page of results, repeat the request with page_token set to this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Workers that have done work on the stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workers")]
		public WorkerDetails[] Workers { get; set; }
	}
	
	/// <summary>
	/// Information about a worker
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerDetails
	{
		
		/// <summary>
		/// Work items processed by this worker, sorted by time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workItems")]
		public WorkItemDetails[] WorkItems { get; set; }
		
		/// <summary>
		/// Name of this worker
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerName")]
		public string WorkerName { get; set; }
	}
	
	/// <summary>
	/// Information about an individual work item execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkItemDetails
	{
		
		/// <summary>
		/// Attempt ID of this work item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attemptId")]
		public string AttemptId { get; set; }
		
		/// <summary>
		/// End time of this work item attempt. If the work item is completed, this is the actual end time of the work item. Otherwise, it is the predicted end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Metrics for this work item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public MetricUpdate[] Metrics { get; set; }
		
		/// <summary>
		/// Information about the progress of some component of job execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public ProgressTimeseries Progress { get; set; }
		
		/// <summary>
		/// Start time of this work item attempt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// State of this work item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public StageSummaryState State { get; set; }
		
		/// <summary>
		/// Information useful for straggler identification and debugging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stragglerInfo")]
		public StragglerInfo StragglerInfo { get; set; }
		
		/// <summary>
		/// Name of this work item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Send a worker_message to the service.
		/// Dataflow_projects_workerMessages v1b3/projects/{projectId}/WorkerMessages
		/// </summary>
		/// <param name="projectId">The project to send the WorkerMessages to.</param>
		/// <returns>Successful response</returns>
		public async Task<SendWorkerMessagesResponse> Dataflow_projects_workerMessagesAsync(string projectId, SendWorkerMessagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/WorkerMessages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendWorkerMessagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, because you can only get the list of jobs that are running in `us-central1`. `projects.locations.jobs.list` and `projects.jobs.list` support filtering the list of jobs by name. Filtering by name isn't supported by `projects.jobs.aggregated`.
		/// Dataflow_projects_jobs_list v1b3/projects/{projectId}/jobs
		/// </summary>
		/// <param name="projectId">The project which owns the jobs.</param>
		/// <param name="filter">The kind of filter to use.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.</param>
		/// <param name="name">Optional. The job name.</param>
		/// <param name="pageSize">If there are many jobs, limit response to at most this many. The actual number of jobs returned will be the lesser of max_responses and an unspecified server-defined limit.</param>
		/// <param name="pageToken">Set this to the 'next_page_token' field of a previous response to request additional results in a long list.</param>
		/// <param name="view">Deprecated. ListJobs always returns summaries now. Use GetJob for other JobViews.</param>
		/// <returns>Successful response</returns>
		public async Task<ListJobsResponse> Dataflow_projects_jobs_listAsync(string projectId, Dataflow_projects_jobs_listFilter filter, string location, string name, int pageSize, string pageToken, Dataflow_projects_jobs_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs&filter=" + filter+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`. Do not enter confidential information when you supply string values using the API.
		/// Dataflow_projects_jobs_create v1b3/projects/{projectId}/jobs
		/// </summary>
		/// <param name="projectId">The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.</param>
		/// <param name="replaceJobId">Deprecated. This field is now in the Job message.</param>
		/// <param name="view">The level of information requested in response.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataflow_projects_jobs_createAsync(string projectId, string location, string replaceJobId, Dataflow_projects_jobs_listView view, Job requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&replaceJobId=" + (replaceJobId==null? "" : System.Uri.EscapeDataString(replaceJobId))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`.
		/// Dataflow_projects_jobs_get v1b3/projects/{projectId}/jobs/{jobId}
		/// </summary>
		/// <param name="projectId">The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="jobId">The job ID.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.</param>
		/// <param name="view">The level of information requested in response.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataflow_projects_jobs_getAsync(string projectId, string jobId, string location, Dataflow_projects_jobs_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`.
		/// Dataflow_projects_jobs_update v1b3/projects/{projectId}/jobs/{jobId}
		/// </summary>
		/// <param name="projectId">The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="jobId">The job ID.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.</param>
		/// <param name="updateMask">The list of fields to update relative to Job. If empty, only RequestedJobState will be considered for update. If the FieldMask is not empty and RequestedJobState is none/empty, The fields specified in the update mask will be the only ones considered for update. If both RequestedJobState and update_mask are specified, an error will be returned as we cannot update both state and mask.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataflow_projects_jobs_updateAsync(string projectId, string jobId, string location, string updateMask, Job requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get encoded debug configuration for component. Not cacheable.
		/// Dataflow_projects_jobs_debug_getConfig v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig
		/// </summary>
		/// <param name="projectId">The project id.</param>
		/// <param name="jobId">The job id.</param>
		/// <returns>Successful response</returns>
		public async Task<GetDebugConfigResponse> Dataflow_projects_jobs_debug_getConfigAsync(string projectId, string jobId, GetDebugConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/debug/getConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDebugConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send encoded debug capture data for component.
		/// Dataflow_projects_jobs_debug_sendCapture v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture
		/// </summary>
		/// <param name="projectId">The project id.</param>
		/// <param name="jobId">The job id.</param>
		/// <returns>Successful response</returns>
		public async Task<SendDebugCaptureResponse> Dataflow_projects_jobs_debug_sendCaptureAsync(string projectId, string jobId, SendDebugCaptureRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/debug/sendCapture";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendDebugCaptureResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
		/// Dataflow_projects_jobs_messages_list v1b3/projects/{projectId}/jobs/{jobId}/messages
		/// </summary>
		/// <param name="projectId">A project id.</param>
		/// <param name="jobId">The job to get messages about.</param>
		/// <param name="endTime">Return only messages with timestamps < end_time. The default is now (i.e. return up to the latest messages available).</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.</param>
		/// <param name="minimumImportance">Filter to only get messages with importance >= level</param>
		/// <param name="pageSize">If specified, determines the maximum number of messages to return. If unspecified, the service may choose an appropriate default, or may return an arbitrarily large number of results.</param>
		/// <param name="pageToken">If supplied, this should be the value of next_page_token returned by an earlier call. This will cause the next page of results to be returned.</param>
		/// <param name="startTime">If specified, return only messages with timestamps >= start_time. The default is the job creation time (i.e. beginning of messages).</param>
		/// <returns>Successful response</returns>
		public async Task<ListJobMessagesResponse> Dataflow_projects_jobs_messages_listAsync(string projectId, string jobId, string endTime, string location, JobMessageMessageImportance minimumImportance, int pageSize, string pageToken, string startTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/messages&endTime=" + (endTime==null? "" : System.Uri.EscapeDataString(endTime))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&minimumImportance=" + minimumImportance+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startTime=" + (startTime==null? "" : System.Uri.EscapeDataString(startTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobMessagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
		/// Dataflow_projects_jobs_getMetrics v1b3/projects/{projectId}/jobs/{jobId}/metrics
		/// </summary>
		/// <param name="projectId">A project id.</param>
		/// <param name="jobId">The job to get metrics for.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.</param>
		/// <param name="startTime">Return only metric data that has changed since this time. Default is to return all information about all metrics for the job.</param>
		/// <returns>Successful response</returns>
		public async Task<JobMetrics> Dataflow_projects_jobs_getMetricsAsync(string projectId, string jobId, string location, string startTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/metrics&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&startTime=" + (startTime==null? "" : System.Uri.EscapeDataString(startTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobMetrics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Leases a dataflow WorkItem to run.
		/// Dataflow_projects_jobs_workItems_lease v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease
		/// </summary>
		/// <param name="projectId">Identifies the project this worker belongs to.</param>
		/// <param name="jobId">Identifies the workflow job this worker belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<LeaseWorkItemResponse> Dataflow_projects_jobs_workItems_leaseAsync(string projectId, string jobId, LeaseWorkItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/workItems:lease";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaseWorkItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reports the status of dataflow WorkItems leased by a worker.
		/// Dataflow_projects_jobs_workItems_reportStatus v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus
		/// </summary>
		/// <param name="projectId">The project which owns the WorkItem's job.</param>
		/// <param name="jobId">The job which the WorkItem is part of.</param>
		/// <returns>Successful response</returns>
		public async Task<ReportWorkItemStatusResponse> Dataflow_projects_jobs_workItems_reportStatusAsync(string projectId, string jobId, ReportWorkItemStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/workItems:reportStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWorkItemStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Snapshot the state of a streaming job.
		/// Dataflow_projects_jobs_snapshot v1b3/projects/{projectId}/jobs/{jobId}:snapshot
		/// </summary>
		/// <param name="projectId">The project which owns the job to be snapshotted.</param>
		/// <param name="jobId">The job to be snapshotted.</param>
		/// <returns>Successful response</returns>
		public async Task<Snapshot> Dataflow_projects_jobs_snapshotAsync(string projectId, string jobId, SnapshotJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+":snapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Snapshot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the jobs of a project across all regions. **Note:** This method doesn't support filtering the list of jobs by name.
		/// Dataflow_projects_jobs_aggregated v1b3/projects/{projectId}/jobs:aggregated
		/// </summary>
		/// <param name="projectId">The project which owns the jobs.</param>
		/// <param name="filter">The kind of filter to use.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.</param>
		/// <param name="name">Optional. The job name.</param>
		/// <param name="pageSize">If there are many jobs, limit response to at most this many. The actual number of jobs returned will be the lesser of max_responses and an unspecified server-defined limit.</param>
		/// <param name="pageToken">Set this to the 'next_page_token' field of a previous response to request additional results in a long list.</param>
		/// <param name="view">Deprecated. ListJobs always returns summaries now. Use GetJob for other JobViews.</param>
		/// <returns>Successful response</returns>
		public async Task<ListJobsResponse> Dataflow_projects_jobs_aggregatedAsync(string projectId, Dataflow_projects_jobs_listFilter filter, string location, string name, int pageSize, string pageToken, Dataflow_projects_jobs_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs:aggregated&filter=" + filter+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send a worker_message to the service.
		/// Dataflow_projects_locations_workerMessages v1b3/projects/{projectId}/locations/{location}/WorkerMessages
		/// </summary>
		/// <param name="projectId">The project to send the WorkerMessages to.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job.</param>
		/// <returns>Successful response</returns>
		public async Task<SendWorkerMessagesResponse> Dataflow_projects_locations_workerMessagesAsync(string projectId, string location, SendWorkerMessagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/WorkerMessages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendWorkerMessagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Launch a job with a FlexTemplate.
		/// Dataflow_projects_locations_flexTemplates_launch v1b3/projects/{projectId}/locations/{location}/flexTemplates:launch
		/// </summary>
		/// <param name="projectId">Required. The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="location">Required. The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request. E.g., us-central1, us-west1.</param>
		/// <returns>Successful response</returns>
		public async Task<LaunchFlexTemplateResponse> Dataflow_projects_locations_flexTemplates_launchAsync(string projectId, string location, LaunchFlexTemplateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/flexTemplates:launch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LaunchFlexTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, because you can only get the list of jobs that are running in `us-central1`. `projects.locations.jobs.list` and `projects.jobs.list` support filtering the list of jobs by name. Filtering by name isn't supported by `projects.jobs.aggregated`.
		/// Dataflow_projects_locations_jobs_list v1b3/projects/{projectId}/locations/{location}/jobs
		/// </summary>
		/// <param name="projectId">The project which owns the jobs.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.</param>
		/// <param name="filter">The kind of filter to use.</param>
		/// <param name="name">Optional. The job name.</param>
		/// <param name="pageSize">If there are many jobs, limit response to at most this many. The actual number of jobs returned will be the lesser of max_responses and an unspecified server-defined limit.</param>
		/// <param name="pageToken">Set this to the 'next_page_token' field of a previous response to request additional results in a long list.</param>
		/// <param name="view">Deprecated. ListJobs always returns summaries now. Use GetJob for other JobViews.</param>
		/// <returns>Successful response</returns>
		public async Task<ListJobsResponse> Dataflow_projects_locations_jobs_listAsync(string projectId, string location, Dataflow_projects_jobs_listFilter filter, string name, int pageSize, string pageToken, Dataflow_projects_jobs_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs&filter=" + filter+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`. Do not enter confidential information when you supply string values using the API.
		/// Dataflow_projects_locations_jobs_create v1b3/projects/{projectId}/locations/{location}/jobs
		/// </summary>
		/// <param name="projectId">The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.</param>
		/// <param name="replaceJobId">Deprecated. This field is now in the Job message.</param>
		/// <param name="view">The level of information requested in response.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataflow_projects_locations_jobs_createAsync(string projectId, string location, string replaceJobId, Dataflow_projects_jobs_listView view, Job requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs&replaceJobId=" + (replaceJobId==null? "" : System.Uri.EscapeDataString(replaceJobId))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`.
		/// Dataflow_projects_locations_jobs_get v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}
		/// </summary>
		/// <param name="projectId">The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.</param>
		/// <param name="jobId">The job ID.</param>
		/// <param name="view">The level of information requested in response.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataflow_projects_locations_jobs_getAsync(string projectId, string location, string jobId, Dataflow_projects_jobs_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`.
		/// Dataflow_projects_locations_jobs_update v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}
		/// </summary>
		/// <param name="projectId">The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.</param>
		/// <param name="jobId">The job ID.</param>
		/// <param name="updateMask">The list of fields to update relative to Job. If empty, only RequestedJobState will be considered for update. If the FieldMask is not empty and RequestedJobState is none/empty, The fields specified in the update mask will be the only ones considered for update. If both RequestedJobState and update_mask are specified, an error will be returned as we cannot update both state and mask.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataflow_projects_locations_jobs_updateAsync(string projectId, string location, string jobId, string updateMask, Job requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get encoded debug configuration for component. Not cacheable.
		/// Dataflow_projects_locations_jobs_debug_getConfig v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig
		/// </summary>
		/// <param name="projectId">The project id.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.</param>
		/// <param name="jobId">The job id.</param>
		/// <returns>Successful response</returns>
		public async Task<GetDebugConfigResponse> Dataflow_projects_locations_jobs_debug_getConfigAsync(string projectId, string location, string jobId, GetDebugConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/debug/getConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDebugConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send encoded debug capture data for component.
		/// Dataflow_projects_locations_jobs_debug_sendCapture v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture
		/// </summary>
		/// <param name="projectId">The project id.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.</param>
		/// <param name="jobId">The job id.</param>
		/// <returns>Successful response</returns>
		public async Task<SendDebugCaptureResponse> Dataflow_projects_locations_jobs_debug_sendCaptureAsync(string projectId, string location, string jobId, SendDebugCaptureRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/debug/sendCapture";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendDebugCaptureResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Request detailed information about the execution status of the job. EXPERIMENTAL. This API is subject to change or removal without notice.
		/// Dataflow_projects_locations_jobs_getExecutionDetails v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/executionDetails
		/// </summary>
		/// <param name="projectId">A project id.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.</param>
		/// <param name="jobId">The job to get execution details for.</param>
		/// <param name="pageSize">If specified, determines the maximum number of stages to return. If unspecified, the service may choose an appropriate default, or may return an arbitrarily large number of results.</param>
		/// <param name="pageToken">If supplied, this should be the value of next_page_token returned by an earlier call. This will cause the next page of results to be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<JobExecutionDetails> Dataflow_projects_locations_jobs_getExecutionDetailsAsync(string projectId, string location, string jobId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/executionDetails&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobExecutionDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
		/// Dataflow_projects_locations_jobs_messages_list v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages
		/// </summary>
		/// <param name="projectId">A project id.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.</param>
		/// <param name="jobId">The job to get messages about.</param>
		/// <param name="endTime">Return only messages with timestamps < end_time. The default is now (i.e. return up to the latest messages available).</param>
		/// <param name="minimumImportance">Filter to only get messages with importance >= level</param>
		/// <param name="pageSize">If specified, determines the maximum number of messages to return. If unspecified, the service may choose an appropriate default, or may return an arbitrarily large number of results.</param>
		/// <param name="pageToken">If supplied, this should be the value of next_page_token returned by an earlier call. This will cause the next page of results to be returned.</param>
		/// <param name="startTime">If specified, return only messages with timestamps >= start_time. The default is the job creation time (i.e. beginning of messages).</param>
		/// <returns>Successful response</returns>
		public async Task<ListJobMessagesResponse> Dataflow_projects_locations_jobs_messages_listAsync(string projectId, string location, string jobId, string endTime, JobMessageMessageImportance minimumImportance, int pageSize, string pageToken, string startTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/messages&endTime=" + (endTime==null? "" : System.Uri.EscapeDataString(endTime))+"&minimumImportance=" + minimumImportance+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startTime=" + (startTime==null? "" : System.Uri.EscapeDataString(startTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobMessagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
		/// Dataflow_projects_locations_jobs_getMetrics v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics
		/// </summary>
		/// <param name="projectId">A project id.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.</param>
		/// <param name="jobId">The job to get metrics for.</param>
		/// <param name="startTime">Return only metric data that has changed since this time. Default is to return all information about all metrics for the job.</param>
		/// <returns>Successful response</returns>
		public async Task<JobMetrics> Dataflow_projects_locations_jobs_getMetricsAsync(string projectId, string location, string jobId, string startTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/metrics&startTime=" + (startTime==null? "" : System.Uri.EscapeDataString(startTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobMetrics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists snapshots.
		/// Dataflow_projects_locations_jobs_snapshots_list v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/snapshots
		/// </summary>
		/// <param name="projectId">The project ID to list snapshots for.</param>
		/// <param name="location">The location to list snapshots in.</param>
		/// <param name="jobId">If specified, list snapshots created from this job.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSnapshotsResponse> Dataflow_projects_locations_jobs_snapshots_listAsync(string projectId, string location, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/snapshots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSnapshotsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request detailed information about the execution status of a stage of the job. EXPERIMENTAL. This API is subject to change or removal without notice.
		/// Dataflow_projects_locations_jobs_stages_getExecutionDetails v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/stages/{stageId}/executionDetails
		/// </summary>
		/// <param name="projectId">A project id.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.</param>
		/// <param name="jobId">The job to get execution details for.</param>
		/// <param name="stageId">The stage for which to fetch information.</param>
		/// <param name="endTime">Upper time bound of work items to include, by start time.</param>
		/// <param name="pageSize">If specified, determines the maximum number of work items to return. If unspecified, the service may choose an appropriate default, or may return an arbitrarily large number of results.</param>
		/// <param name="pageToken">If supplied, this should be the value of next_page_token returned by an earlier call. This will cause the next page of results to be returned.</param>
		/// <param name="startTime">Lower time bound of work items to include, by start time.</param>
		/// <returns>Successful response</returns>
		public async Task<StageExecutionDetails> Dataflow_projects_locations_jobs_stages_getExecutionDetailsAsync(string projectId, string location, string jobId, string stageId, string endTime, int pageSize, string pageToken, string startTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/stages/"+ (stageId==null? "" : System.Uri.EscapeDataString(stageId))+"/executionDetails&endTime=" + (endTime==null? "" : System.Uri.EscapeDataString(endTime))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startTime=" + (startTime==null? "" : System.Uri.EscapeDataString(startTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StageExecutionDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Leases a dataflow WorkItem to run.
		/// Dataflow_projects_locations_jobs_workItems_lease v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease
		/// </summary>
		/// <param name="projectId">Identifies the project this worker belongs to.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.</param>
		/// <param name="jobId">Identifies the workflow job this worker belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<LeaseWorkItemResponse> Dataflow_projects_locations_jobs_workItems_leaseAsync(string projectId, string location, string jobId, LeaseWorkItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/workItems:lease";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaseWorkItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reports the status of dataflow WorkItems leased by a worker.
		/// Dataflow_projects_locations_jobs_workItems_reportStatus v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus
		/// </summary>
		/// <param name="projectId">The project which owns the WorkItem's job.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.</param>
		/// <param name="jobId">The job which the WorkItem is part of.</param>
		/// <returns>Successful response</returns>
		public async Task<ReportWorkItemStatusResponse> Dataflow_projects_locations_jobs_workItems_reportStatusAsync(string projectId, string location, string jobId, ReportWorkItemStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/workItems:reportStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportWorkItemStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Snapshot the state of a streaming job.
		/// Dataflow_projects_locations_jobs_snapshot v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}:snapshot
		/// </summary>
		/// <param name="projectId">The project which owns the job to be snapshotted.</param>
		/// <param name="location">The location that contains this job.</param>
		/// <param name="jobId">The job to be snapshotted.</param>
		/// <returns>Successful response</returns>
		public async Task<Snapshot> Dataflow_projects_locations_jobs_snapshotAsync(string projectId, string location, string jobId, SnapshotJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+":snapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Snapshot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists snapshots.
		/// Dataflow_projects_locations_snapshots_list v1b3/projects/{projectId}/locations/{location}/snapshots
		/// </summary>
		/// <param name="projectId">The project ID to list snapshots for.</param>
		/// <param name="location">The location to list snapshots in.</param>
		/// <param name="jobId">If specified, list snapshots created from this job.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSnapshotsResponse> Dataflow_projects_locations_snapshots_listAsync(string projectId, string location, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/snapshots&jobId=" + (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSnapshotsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a snapshot.
		/// Dataflow_projects_locations_snapshots_delete v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}
		/// </summary>
		/// <param name="projectId">The ID of the Cloud Platform project that the snapshot belongs to.</param>
		/// <param name="location">The location that contains this snapshot.</param>
		/// <param name="snapshotId">The ID of the snapshot.</param>
		/// <returns>Successful response</returns>
		public async Task<DeleteSnapshotResponse> Dataflow_projects_locations_snapshots_deleteAsync(string projectId, string location, string snapshotId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/snapshots/"+ (snapshotId==null? "" : System.Uri.EscapeDataString(snapshotId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSnapshotResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a snapshot.
		/// Dataflow_projects_locations_snapshots_get v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}
		/// </summary>
		/// <param name="projectId">The ID of the Cloud Platform project that the snapshot belongs to.</param>
		/// <param name="location">The location that contains this snapshot.</param>
		/// <param name="snapshotId">The ID of the snapshot.</param>
		/// <returns>Successful response</returns>
		public async Task<Snapshot> Dataflow_projects_locations_snapshots_getAsync(string projectId, string location, string snapshotId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/snapshots/"+ (snapshotId==null? "" : System.Uri.EscapeDataString(snapshotId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Snapshot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API.
		/// Dataflow_projects_locations_templates_create v1b3/projects/{projectId}/locations/{location}/templates
		/// </summary>
		/// <param name="projectId">Required. The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataflow_projects_locations_templates_createAsync(string projectId, string location, CreateJobFromTemplateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the template associated with a template.
		/// Dataflow_projects_locations_templates_get v1b3/projects/{projectId}/locations/{location}/templates:get
		/// </summary>
		/// <param name="projectId">Required. The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.</param>
		/// <param name="gcsPath">Required. A Cloud Storage path to the template from which to create the job. Must be valid Cloud Storage URL, beginning with 'gs://'.</param>
		/// <param name="view">The view to retrieve. Defaults to METADATA_ONLY.</param>
		/// <returns>Successful response</returns>
		public async Task<GetTemplateResponse> Dataflow_projects_locations_templates_getAsync(string projectId, string location, string gcsPath, Dataflow_projects_locations_templates_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/templates:get&gcsPath=" + (gcsPath==null? "" : System.Uri.EscapeDataString(gcsPath))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Launch a template.
		/// Dataflow_projects_locations_templates_launch v1b3/projects/{projectId}/locations/{location}/templates:launch
		/// </summary>
		/// <param name="projectId">Required. The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.</param>
		/// <param name="dynamicTemplate_gcsPath">Path to dynamic template spec file on Cloud Storage. The file must be a Json serialized DynamicTemplateFieSpec object.</param>
		/// <param name="dynamicTemplate_stagingLocation">Cloud Storage path for staging dependencies. Must be a valid Cloud Storage URL, beginning with `gs://`.</param>
		/// <param name="gcsPath">A Cloud Storage path to the template from which to create the job. Must be valid Cloud Storage URL, beginning with 'gs://'.</param>
		/// <param name="validateOnly">If true, the request is validated but not actually executed. Defaults to false.</param>
		/// <returns>Successful response</returns>
		public async Task<LaunchTemplateResponse> Dataflow_projects_locations_templates_launchAsync(string projectId, string location, string dynamicTemplate_gcsPath, string dynamicTemplate_stagingLocation, string gcsPath, bool validateOnly, LaunchTemplateParameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/templates:launch&dynamicTemplate.gcsPath=" + (dynamicTemplate_gcsPath==null? "" : System.Uri.EscapeDataString(dynamicTemplate_gcsPath))+"&dynamicTemplate.stagingLocation=" + (dynamicTemplate_stagingLocation==null? "" : System.Uri.EscapeDataString(dynamicTemplate_stagingLocation))+"&gcsPath=" + (gcsPath==null? "" : System.Uri.EscapeDataString(gcsPath))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LaunchTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a snapshot.
		/// Dataflow_projects_deleteSnapshots v1b3/projects/{projectId}/snapshots
		/// </summary>
		/// <param name="projectId">The ID of the Cloud Platform project that the snapshot belongs to.</param>
		/// <param name="location">The location that contains this snapshot.</param>
		/// <param name="snapshotId">The ID of the snapshot.</param>
		/// <returns>Successful response</returns>
		public async Task<DeleteSnapshotResponse> Dataflow_projects_deleteSnapshotsAsync(string projectId, string location, string snapshotId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/snapshots&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&snapshotId=" + (snapshotId==null? "" : System.Uri.EscapeDataString(snapshotId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSnapshotResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists snapshots.
		/// Dataflow_projects_snapshots_list v1b3/projects/{projectId}/snapshots
		/// </summary>
		/// <param name="projectId">The project ID to list snapshots for.</param>
		/// <param name="jobId">If specified, list snapshots created from this job.</param>
		/// <param name="location">The location to list snapshots in.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSnapshotsResponse> Dataflow_projects_snapshots_listAsync(string projectId, string jobId, string location, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/snapshots&jobId=" + (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSnapshotsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a snapshot.
		/// Dataflow_projects_snapshots_get v1b3/projects/{projectId}/snapshots/{snapshotId}
		/// </summary>
		/// <param name="projectId">The ID of the Cloud Platform project that the snapshot belongs to.</param>
		/// <param name="snapshotId">The ID of the snapshot.</param>
		/// <param name="location">The location that contains this snapshot.</param>
		/// <returns>Successful response</returns>
		public async Task<Snapshot> Dataflow_projects_snapshots_getAsync(string projectId, string snapshotId, string location, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/snapshots/"+ (snapshotId==null? "" : System.Uri.EscapeDataString(snapshotId))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Snapshot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API.
		/// Dataflow_projects_templates_create v1b3/projects/{projectId}/templates
		/// </summary>
		/// <param name="projectId">Required. The ID of the Cloud Platform project that the job belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Dataflow_projects_templates_createAsync(string projectId, CreateJobFromTemplateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the template associated with a template.
		/// Dataflow_projects_templates_get v1b3/projects/{projectId}/templates:get
		/// </summary>
		/// <param name="projectId">Required. The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="gcsPath">Required. A Cloud Storage path to the template from which to create the job. Must be valid Cloud Storage URL, beginning with 'gs://'.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.</param>
		/// <param name="view">The view to retrieve. Defaults to METADATA_ONLY.</param>
		/// <returns>Successful response</returns>
		public async Task<GetTemplateResponse> Dataflow_projects_templates_getAsync(string projectId, string gcsPath, string location, Dataflow_projects_locations_templates_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/templates:get&gcsPath=" + (gcsPath==null? "" : System.Uri.EscapeDataString(gcsPath))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Launch a template.
		/// Dataflow_projects_templates_launch v1b3/projects/{projectId}/templates:launch
		/// </summary>
		/// <param name="projectId">Required. The ID of the Cloud Platform project that the job belongs to.</param>
		/// <param name="dynamicTemplate_gcsPath">Path to dynamic template spec file on Cloud Storage. The file must be a Json serialized DynamicTemplateFieSpec object.</param>
		/// <param name="dynamicTemplate_stagingLocation">Cloud Storage path for staging dependencies. Must be a valid Cloud Storage URL, beginning with `gs://`.</param>
		/// <param name="gcsPath">A Cloud Storage path to the template from which to create the job. Must be valid Cloud Storage URL, beginning with 'gs://'.</param>
		/// <param name="location">The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.</param>
		/// <param name="validateOnly">If true, the request is validated but not actually executed. Defaults to false.</param>
		/// <returns>Successful response</returns>
		public async Task<LaunchTemplateResponse> Dataflow_projects_templates_launchAsync(string projectId, string dynamicTemplate_gcsPath, string dynamicTemplate_stagingLocation, string gcsPath, string location, bool validateOnly, LaunchTemplateParameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1b3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/templates:launch&dynamicTemplate.gcsPath=" + (dynamicTemplate_gcsPath==null? "" : System.Uri.EscapeDataString(dynamicTemplate_gcsPath))+"&dynamicTemplate.stagingLocation=" + (dynamicTemplate_stagingLocation==null? "" : System.Uri.EscapeDataString(dynamicTemplate_stagingLocation))+"&gcsPath=" + (gcsPath==null? "" : System.Uri.EscapeDataString(gcsPath))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LaunchTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Dataflow_projects_jobs_listFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 3,
	}
	
	public enum Dataflow_projects_jobs_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_VIEW_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_VIEW_SUMMARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_VIEW_ALL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_VIEW_DESCRIPTION = 3,
	}
	
	public enum Dataflow_projects_locations_templates_getView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METADATA_ONLY = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
