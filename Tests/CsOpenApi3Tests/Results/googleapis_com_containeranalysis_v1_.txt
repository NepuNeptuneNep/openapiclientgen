//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An alias to a repo revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AliasContext
	{
		
		/// <summary>
		/// The alias kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<AliasContextKind> Kind { get; set; }
		
		/// <summary>
		/// The alias name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AliasContextKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOVABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 3,
	}
	
	/// <summary>
	/// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalysisCompleted
	{
		
		[System.Runtime.Serialization.DataMember(Name="analysisType")]
		public string[] AnalysisType { get; set; }
	}
	
	/// <summary>
	/// Artifact describes a build product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Artifact
	{
		
		/// <summary>
		/// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		/// <summary>
		/// Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="names")]
		public string[] Names { get; set; }
	}
	
	/// <summary>
	/// Assessment provides all information that is related to a single vulnerability for this product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Assessment
	{
		
		/// <summary>
		/// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cve")]
		public string Cve { get; set; }
		
		/// <summary>
		/// Contains information about the impact of this vulnerability, this will change with time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impacts")]
		public string[] Impacts { get; set; }
		
		/// <summary>
		/// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="justification")]
		public Justification Justification { get; set; }
		
		/// <summary>
		/// A detailed description of this Vex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longDescription")]
		public string LongDescription { get; set; }
		
		/// <summary>
		/// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedUris")]
		public RelatedUrl[] RelatedUris { get; set; }
		
		/// <summary>
		/// Specifies details on how to handle (and presumably, fix) a vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediations")]
		public Remediation[] Remediations { get; set; }
		
		/// <summary>
		/// A one sentence description of this Vex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortDescription")]
		public string ShortDescription { get; set; }
		
		/// <summary>
		/// Provides the state of this Vulnerability assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AssessmentState> State { get; set; }
		
		/// <summary>
		/// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerabilityId")]
		public string VulnerabilityId { get; set; }
	}
	
	/// <summary>
	/// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Justification
	{
		
		/// <summary>
		/// Additional details on why this justification was chosen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// The justification type for this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="justificationType")]
		public System.Nullable<JustificationJustificationType> JustificationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum JustificationJustificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JUSTIFICATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPONENT_NOT_PRESENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VULNERABLE_CODE_NOT_PRESENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VULNERABLE_CODE_NOT_IN_EXECUTE_PATH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLINE_MITIGATIONS_ALREADY_EXIST = 5,
	}
	
	/// <summary>
	/// Metadata for any related URL information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelatedUrl
	{
		
		/// <summary>
		/// Label to describe usage of the URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Specific URL associated with the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Specifies details on how to handle (and presumably, fix) a vulnerability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Remediation
	{
		
		/// <summary>
		/// Contains a comprehensive human-readable discussion of the remediation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// The type of remediation that can be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediationType")]
		public System.Nullable<RemediationRemediationType> RemediationType { get; set; }
		
		/// <summary>
		/// Metadata for any related URL information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediationUri")]
		public RelatedUrl RemediationUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RemediationRemediationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMEDIATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MITIGATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_FIX_PLANNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE_AVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VENDOR_FIX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKAROUND = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AssessmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFFECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AFFECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDER_INVESTIGATION = 4,
	}
	
	/// <summary>
	/// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttestationNote
	{
		
		/// <summary>
		/// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hint")]
		public Hint Hint { get; set; }
	}
	
	/// <summary>
	/// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Hint
	{
		
		/// <summary>
		/// Required. The human readable name of this attestation authority, for example "qa".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="humanReadableName")]
		public string HumanReadableName { get; set; }
	}
	
	/// <summary>
	/// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttestationOccurrence
	{
		
		/// <summary>
		/// One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwts")]
		public Jwt[] Jwts { get; set; }
		
		/// <summary>
		/// Required. The serialized payload that is verified by one or more `signatures`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serializedPayload")]
		public string SerializedPayload { get; set; }
		
		/// <summary>
		/// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatures")]
		public Signature[] Signatures { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Jwt
	{
		
		/// <summary>
		/// The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compactJwt")]
		public string CompactJwt { get; set; }
	}
	
	/// <summary>
	/// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Signature
	{
		
		/// <summary>
		/// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKeyId")]
		public string PublicKeyId { get; set; }
		
		/// <summary>
		/// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature1 { get; set; }
	}
	
	/// <summary>
	/// Request to create notes in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreateNotesRequest
	{
		
		/// <summary>
		/// Required. The notes to create. Max allowed length is 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public System.Collections.Generic.Dictionary<string, Note> Notes { get; set; }
	}
	
	/// <summary>
	/// A type of analysis that can be done for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Note
	{
		
		/// <summary>
		/// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attestation")]
		public AttestationNote Attestation { get; set; }
		
		/// <summary>
		/// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="build")]
		public BuildNote Build { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compliance")]
		public ComplianceNote Compliance { get; set; }
		
		/// <summary>
		/// Output only. The time this note was created. This field can be used as a filter in list requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// An artifact that can be deployed in some runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployment")]
		public DeploymentNote Deployment { get; set; }
		
		/// <summary>
		/// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discovery")]
		public DiscoveryNote Discovery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dsseAttestation")]
		public DSSEAttestationNote DsseAttestation { get; set; }
		
		/// <summary>
		/// Time of expiration for this note. Empty if note does not expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public string ExpirationTime { get; set; }
		
		/// <summary>
		/// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ImageNote Image { get; set; }
		
		/// <summary>
		/// Output only. The type of analysis. This field can be used as a filter in list requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public DiscoveryNoteAnalysisKind Kind { get; set; }
		
		/// <summary>
		/// A detailed description of this note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longDescription")]
		public string LongDescription { get; set; }
		
		/// <summary>
		/// Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// PackageNote represents a particular package version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package")]
		public PackageNote Package { get; set; }
		
		/// <summary>
		/// Other notes related to this note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedNoteNames")]
		public string[] RelatedNoteNames { get; set; }
		
		/// <summary>
		/// URLs associated with this note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedUrl")]
		public RelatedUrl[] RelatedUrl { get; set; }
		
		/// <summary>
		/// The note representing an SBOM reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sbomReference")]
		public SBOMReferenceNote SbomReference { get; set; }
		
		/// <summary>
		/// A one sentence description of this note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortDescription")]
		public string ShortDescription { get; set; }
		
		/// <summary>
		/// Output only. The time this note was last updated. This field can be used as a filter in list requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgrade")]
		public UpgradeNote Upgrade { get; set; }
		
		/// <summary>
		/// A security vulnerability that can be found in resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerability")]
		public VulnerabilityNote Vulnerability { get; set; }
		
		/// <summary>
		/// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerabilityAssessment")]
		public VulnerabilityAssessmentNote VulnerabilityAssessment { get; set; }
	}
	
	/// <summary>
	/// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildNote
	{
		
		/// <summary>
		/// Required. Immutable. Version of the builder which produced this build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builderVersion")]
		public string BuilderVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComplianceNote
	{
		
		/// <summary>
		/// A compliance check that is a CIS benchmark.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cisBenchmark")]
		public CisBenchmark CisBenchmark { get; set; }
		
		/// <summary>
		/// A description about this compliance check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A rationale for the existence of this compliance check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rationale")]
		public string Rationale { get; set; }
		
		/// <summary>
		/// A description of remediation steps if the compliance check fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediation")]
		public string Remediation { get; set; }
		
		/// <summary>
		/// Serialized scan instructions with a predefined format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scanInstructions")]
		public string ScanInstructions { get; set; }
		
		/// <summary>
		/// The title that identifies this compliance check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The OS and config versions the benchmark applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public ComplianceVersion[] Version { get; set; }
	}
	
	/// <summary>
	/// A compliance check that is a CIS benchmark.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CisBenchmark
	{
		
		[System.Runtime.Serialization.DataMember(Name="profileLevel")]
		public System.Nullable<System.Int32> ProfileLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<CisBenchmarkSeverity> Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CisBenchmarkSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINIMAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 5,
	}
	
	/// <summary>
	/// Describes the CIS benchmark version that is applicable to a given OS and os version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComplianceVersion
	{
		
		/// <summary>
		/// The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benchmarkDocument")]
		public string BenchmarkDocument { get; set; }
		
		/// <summary>
		/// The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeUri")]
		public string CpeUri { get; set; }
		
		/// <summary>
		/// The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// An artifact that can be deployed in some runtime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeploymentNote
	{
		
		/// <summary>
		/// Required. Resource URI for the artifact being deployed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string[] ResourceUri { get; set; }
	}
	
	/// <summary>
	/// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiscoveryNote
	{
		
		/// <summary>
		/// Required. Immutable. The kind of analysis that is handled by this discovery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysisKind")]
		public System.Nullable<DiscoveryNoteAnalysisKind> AnalysisKind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DiscoveryNoteAnalysisKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTE_KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VULNERABILITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACKAGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVERY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTESTATION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPGRADE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANCE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DSSE_ATTESTATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VULNERABILITY_ASSESSMENT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SBOM_REFERENCE = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DSSEAttestationNote
	{
		
		/// <summary>
		/// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hint")]
		public DSSEHint Hint { get; set; }
	}
	
	/// <summary>
	/// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DSSEHint
	{
		
		/// <summary>
		/// Required. The human readable name of this attestation authority, for example "cloudbuild-prod".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="humanReadableName")]
		public string HumanReadableName { get; set; }
	}
	
	/// <summary>
	/// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageNote
	{
		
		/// <summary>
		/// A set of properties that uniquely identify a given Docker image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public Fingerprint Fingerprint { get; set; }
		
		/// <summary>
		/// Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUrl")]
		public string ResourceUrl { get; set; }
	}
	
	/// <summary>
	/// A set of properties that uniquely identify a given Docker image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fingerprint
	{
		
		/// <summary>
		/// Required. The layer ID of the final layer in the Docker image's v1 representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="v1Name")]
		public string V1Name { get; set; }
		
		/// <summary>
		/// Required. The ordered list of v2 blobs that represent a given image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="v2Blob")]
		public string[] V2Blob { get; set; }
		
		/// <summary>
		/// Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="v2Name")]
		public string V2Name { get; set; }
	}
	
	/// <summary>
	/// PackageNote represents a particular package version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PackageNote
	{
		
		/// <summary>
		/// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public System.Nullable<PackageNoteArchitecture> Architecture { get; set; }
		
		/// <summary>
		/// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeUri")]
		public string CpeUri { get; set; }
		
		/// <summary>
		/// The description of this package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Hash value, typically a file digest, that allows unique identification a specific package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public Digest[] Digest { get; set; }
		
		/// <summary>
		/// Deprecated. The various channels by which a package is distributed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distribution")]
		public Distribution[] Distribution { get; set; }
		
		/// <summary>
		/// License information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public License License { get; set; }
		
		/// <summary>
		/// A freeform text denoting the maintainer of this package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintainer")]
		public string Maintainer { get; set; }
		
		/// <summary>
		/// Required. Immutable. The name of the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageType")]
		public string PackageType { get; set; }
		
		/// <summary>
		/// The homepage for this package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public Version Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PackageNoteArchitecture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHITECTURE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X86 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X64 = 2,
	}
	
	/// <summary>
	/// Digest information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Digest
	{
		
		/// <summary>
		/// `SHA1`, `SHA512` etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algo")]
		public string Algo { get; set; }
		
		/// <summary>
		/// Value of the digest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digestBytes")]
		public string DigestBytes { get; set; }
	}
	
	/// <summary>
	/// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Distribution
	{
		
		/// <summary>
		/// The CPU architecture for which packages in this distribution channel were built.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public PackageNoteArchitecture Architecture { get; set; }
		
		/// <summary>
		/// Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeUri")]
		public string CpeUri { get; set; }
		
		/// <summary>
		/// The distribution channel-specific description of this package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestVersion")]
		public Version LatestVersion { get; set; }
		
		/// <summary>
		/// A freeform string denoting the maintainer of this package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintainer")]
		public string Maintainer { get; set; }
		
		/// <summary>
		/// The distribution channel-specific homepage for this package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Version contains structured information about the version of a package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Version
	{
		
		/// <summary>
		/// Used to correct mistakes in the version numbering scheme.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="epoch")]
		public System.Nullable<System.Int32> Epoch { get; set; }
		
		/// <summary>
		/// Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusive")]
		public System.Nullable<System.Boolean> Inclusive { get; set; }
		
		/// <summary>
		/// Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<VersionKind> Kind { get; set; }
		
		/// <summary>
		/// Required only when version kind is NORMAL. The main part of the version name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The iteration of the package build from the above version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VersionKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERSION_KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINIMUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAXIMUM = 3,
	}
	
	/// <summary>
	/// License information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class License
	{
		
		/// <summary>
		/// Comments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
	}
	
	/// <summary>
	/// The note representing an SBOM reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SBOMReferenceNote
	{
		
		/// <summary>
		/// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpgradeNote
	{
		
		/// <summary>
		/// Metadata about the upgrade for each specific operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributions")]
		public UpgradeDistribution[] Distributions { get; set; }
		
		/// <summary>
		/// Required for non-Windows OS. The package this Upgrade is for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public Version Version { get; set; }
		
		/// <summary>
		/// Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsUpdate")]
		public WindowsUpdate WindowsUpdate { get; set; }
	}
	
	/// <summary>
	/// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpgradeDistribution
	{
		
		/// <summary>
		/// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public string Classification { get; set; }
		
		/// <summary>
		/// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeUri")]
		public string CpeUri { get; set; }
		
		/// <summary>
		/// The cve tied to this Upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cve")]
		public string[] Cve { get; set; }
		
		/// <summary>
		/// The severity as specified by the upstream operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
	}
	
	/// <summary>
	/// Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WindowsUpdate
	{
		
		/// <summary>
		/// The list of categories to which the update belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// The localized description of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The unique identifier of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public Identity Identity { get; set; }
		
		/// <summary>
		/// The Microsoft Knowledge Base article IDs that are associated with the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kbArticleIds")]
		public string[] KbArticleIds { get; set; }
		
		/// <summary>
		/// The last published timestamp of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPublishedTimestamp")]
		public string LastPublishedTimestamp { get; set; }
		
		/// <summary>
		/// The hyperlink to the support information for the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportUrl")]
		public string SupportUrl { get; set; }
		
		/// <summary>
		/// The localized title of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The category to which the update belongs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		/// <summary>
		/// The identifier of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		/// <summary>
		/// The localized name of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The unique identifier of the update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Identity
	{
		
		/// <summary>
		/// The revision number of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The revision independent identifier of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateId")]
		public string UpdateId { get; set; }
	}
	
	/// <summary>
	/// A security vulnerability that can be found in resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VulnerabilityNote
	{
		
		/// <summary>
		/// The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssScore")]
		public System.Nullable<System.Single> CvssScore { get; set; }
		
		/// <summary>
		/// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssV2")]
		public CVSS CvssV2 { get; set; }
		
		/// <summary>
		/// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssV3")]
		public CVSSv3 CvssV3 { get; set; }
		
		/// <summary>
		/// CVSS version used to populate cvss_score and severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssVersion")]
		public System.Nullable<VulnerabilityNoteCvssVersion> CvssVersion { get; set; }
		
		/// <summary>
		/// Details of all known distros and packages affected by this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public Detail[] Details { get; set; }
		
		/// <summary>
		/// The note provider assigned severity of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public CisBenchmarkSeverity Severity { get; set; }
		
		/// <summary>
		/// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUpdateTime")]
		public string SourceUpdateTime { get; set; }
		
		/// <summary>
		/// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsDetails")]
		public WindowsDetail[] WindowsDetails { get; set; }
	}
	
	/// <summary>
	/// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CVSS
	{
		
		[System.Runtime.Serialization.DataMember(Name="attackComplexity")]
		public System.Nullable<CVSSAttackComplexity> AttackComplexity { get; set; }
		
		/// <summary>
		/// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attackVector")]
		public System.Nullable<CVSSAttackVector> AttackVector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public System.Nullable<CVSSAuthentication> Authentication { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityImpact")]
		public System.Nullable<CVSSAvailabilityImpact> AvailabilityImpact { get; set; }
		
		/// <summary>
		/// The base score is a function of the base metric scores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseScore")]
		public System.Nullable<System.Single> BaseScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confidentialityImpact")]
		public CVSSAvailabilityImpact ConfidentialityImpact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exploitabilityScore")]
		public System.Nullable<System.Single> ExploitabilityScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="impactScore")]
		public System.Nullable<System.Single> ImpactScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integrityImpact")]
		public CVSSAvailabilityImpact IntegrityImpact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privilegesRequired")]
		public System.Nullable<CVSSPrivilegesRequired> PrivilegesRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<CVSSScope> Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userInteraction")]
		public System.Nullable<CVSSUserInteraction> UserInteraction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CVSSAttackComplexity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_HIGH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_MEDIUM = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CVSSAttackVector
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_NETWORK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_ADJACENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_LOCAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_PHYSICAL = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CVSSAuthentication
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_MULTIPLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_SINGLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_NONE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CVSSAvailabilityImpact
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_NONE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_PARTIAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_COMPLETE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CVSSPrivilegesRequired
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_HIGH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CVSSScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE_UNCHANGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE_CHANGED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CVSSUserInteraction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_INTERACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_INTERACTION_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_INTERACTION_REQUIRED = 2,
	}
	
	/// <summary>
	/// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CVSSv3
	{
		
		[System.Runtime.Serialization.DataMember(Name="attackComplexity")]
		public System.Nullable<CVSSv3AttackComplexity> AttackComplexity { get; set; }
		
		/// <summary>
		/// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attackVector")]
		public CVSSAttackVector AttackVector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityImpact")]
		public System.Nullable<CVSSv3AvailabilityImpact> AvailabilityImpact { get; set; }
		
		/// <summary>
		/// The base score is a function of the base metric scores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseScore")]
		public System.Nullable<System.Single> BaseScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confidentialityImpact")]
		public CVSSv3AvailabilityImpact ConfidentialityImpact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exploitabilityScore")]
		public System.Nullable<System.Single> ExploitabilityScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="impactScore")]
		public System.Nullable<System.Single> ImpactScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integrityImpact")]
		public CVSSv3AvailabilityImpact IntegrityImpact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privilegesRequired")]
		public CVSSPrivilegesRequired PrivilegesRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public CVSSScope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userInteraction")]
		public CVSSUserInteraction UserInteraction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CVSSv3AttackComplexity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_HIGH = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CVSSv3AvailabilityImpact
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_NONE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VulnerabilityNoteCvssVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CVSS_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CVSS_VERSION_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CVSS_VERSION_3 = 2,
	}
	
	/// <summary>
	/// A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Detail
	{
		
		/// <summary>
		/// Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedCpeUri")]
		public string AffectedCpeUri { get; set; }
		
		/// <summary>
		/// Required. The package this vulnerability affects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedPackage")]
		public string AffectedPackage { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedVersionEnd")]
		public Version AffectedVersionEnd { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedVersionStart")]
		public Version AffectedVersionStart { get; set; }
		
		/// <summary>
		/// A vendor-specific description of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedCpeUri")]
		public string FixedCpeUri { get; set; }
		
		/// <summary>
		/// The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPackage")]
		public string FixedPackage { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedVersion")]
		public Version FixedVersion { get; set; }
		
		/// <summary>
		/// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isObsolete")]
		public System.Nullable<System.Boolean> IsObsolete { get; set; }
		
		/// <summary>
		/// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageType")]
		public string PackageType { get; set; }
		
		/// <summary>
		/// The distro assigned severity of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severityName")]
		public string SeverityName { get; set; }
		
		/// <summary>
		/// The source from which the information in this Detail was obtained.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUpdateTime")]
		public string SourceUpdateTime { get; set; }
		
		/// <summary>
		/// The name of the vendor of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WindowsDetail
	{
		
		/// <summary>
		/// Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeUri")]
		public string CpeUri { get; set; }
		
		/// <summary>
		/// The description of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixingKbs")]
		public KnowledgeBase[] FixingKbs { get; set; }
		
		/// <summary>
		/// Required. The name of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KnowledgeBase
	{
		
		/// <summary>
		/// The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VulnerabilityAssessmentNote
	{
		
		/// <summary>
		/// Assessment provides all information that is related to a single vulnerability for this product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessment")]
		public Assessment Assessment { get; set; }
		
		/// <summary>
		/// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// A detailed description of this Vex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longDescription")]
		public string LongDescription { get; set; }
		
		/// <summary>
		/// Product contains information about a product and how to uniquely identify it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public Product Product { get; set; }
		
		/// <summary>
		/// Publisher contains information about the publisher of this Note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public Publisher Publisher { get; set; }
		
		/// <summary>
		/// A one sentence description of this Vex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortDescription")]
		public string ShortDescription { get; set; }
		
		/// <summary>
		/// The title of the note. E.g. `Vex-Debian-11.4`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Product contains information about a product and how to uniquely identify it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Product
	{
		
		/// <summary>
		/// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genericUri")]
		public string GenericUri { get; set; }
		
		/// <summary>
		/// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Publisher contains information about the publisher of this Note.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Publisher
	{
		
		/// <summary>
		/// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuingAuthority")]
		public string IssuingAuthority { get; set; }
		
		/// <summary>
		/// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherNamespace")]
		public string PublisherNamespace { get; set; }
	}
	
	/// <summary>
	/// Response for creating notes in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreateNotesResponse
	{
		
		/// <summary>
		/// The notes that were created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public Note[] Notes { get; set; }
	}
	
	/// <summary>
	/// Request to create occurrences in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreateOccurrencesRequest
	{
		
		/// <summary>
		/// Required. The occurrences to create. Max allowed length is 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrences")]
		public Occurrence[] Occurrences { get; set; }
	}
	
	/// <summary>
	/// An instance of an analysis type that has been found on a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Occurrence
	{
		
		/// <summary>
		/// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attestation")]
		public AttestationOccurrence Attestation { get; set; }
		
		/// <summary>
		/// Details of a build occurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="build")]
		public BuildOccurrence Build { get; set; }
		
		/// <summary>
		/// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compliance")]
		public ComplianceOccurrence Compliance { get; set; }
		
		/// <summary>
		/// Output only. The time this occurrence was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The period during which some deployable was active in a runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployment")]
		public DeploymentOccurrence Deployment { get; set; }
		
		/// <summary>
		/// Provides information about the analysis status of a discovered resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discovery")]
		public DiscoveryOccurrence Discovery { get; set; }
		
		/// <summary>
		/// Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dsseAttestation")]
		public DSSEAttestationOccurrence DsseAttestation { get; set; }
		
		/// <summary>
		/// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envelope")]
		public Envelope Envelope { get; set; }
		
		/// <summary>
		/// Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ImageOccurrence Image { get; set; }
		
		/// <summary>
		/// Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public DiscoveryNoteAnalysisKind Kind { get; set; }
		
		/// <summary>
		/// Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noteName")]
		public string NoteName { get; set; }
		
		/// <summary>
		/// Details on how a particular software package was installed on a system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package")]
		public PackageOccurrence Package { get; set; }
		
		/// <summary>
		/// A description of actions that can be taken to remedy the note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediation")]
		public string Remediation { get; set; }
		
		/// <summary>
		/// Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sbomReference")]
		public SBOMReferenceOccurrence SbomReference { get; set; }
		
		/// <summary>
		/// Output only. The time this occurrence was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgrade")]
		public UpgradeOccurrence Upgrade { get; set; }
		
		/// <summary>
		/// An occurrence of a severity vulnerability on a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerability")]
		public VulnerabilityOccurrence Vulnerability { get; set; }
	}
	
	/// <summary>
	/// Details of a build occurrence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildOccurrence
	{
		
		[System.Runtime.Serialization.DataMember(Name="inTotoSlsaProvenanceV1")]
		public InTotoSlsaProvenanceV1 InTotoSlsaProvenanceV1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intotoProvenance")]
		public InTotoProvenance IntotoProvenance { get; set; }
		
		/// <summary>
		/// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intotoStatement")]
		public InTotoStatement IntotoStatement { get; set; }
		
		/// <summary>
		/// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provenance")]
		public BuildProvenance Provenance { get; set; }
		
		/// <summary>
		/// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provenanceBytes")]
		public string ProvenanceBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InTotoSlsaProvenanceV1
	{
		
		/// <summary>
		/// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _type { get; set; }
		
		/// <summary>
		/// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicate")]
		public SlsaProvenanceV1 Predicate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="predicateType")]
		public string PredicateType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public Subject[] Subject { get; set; }
	}
	
	/// <summary>
	/// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlsaProvenanceV1
	{
		
		[System.Runtime.Serialization.DataMember(Name="buildDefinition")]
		public BuildDefinition BuildDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runDetails")]
		public RunDetails RunDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="buildType")]
		public string BuildType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalParameters")]
		public System.Collections.Generic.Dictionary<string, object> ExternalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internalParameters")]
		public System.Collections.Generic.Dictionary<string, object> InternalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolvedDependencies")]
		public ResourceDescriptor[] ResolvedDependencies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceDescriptor
	{
		
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, object> Annotations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloadLocation")]
		public string DownloadLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaType")]
		public string MediaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RunDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="builder")]
		public ProvenanceBuilder Builder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byproducts")]
		public ResourceDescriptor[] Byproducts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public BuildMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvenanceBuilder
	{
		
		[System.Runtime.Serialization.DataMember(Name="builderDependencies")]
		public ResourceDescriptor[] BuilderDependencies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Collections.Generic.Dictionary<string, string> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="finishedOn")]
		public string FinishedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invocationId")]
		public string InvocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedOn")]
		public string StartedOn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subject
	{
		
		/// <summary>
		/// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InTotoProvenance
	{
		
		[System.Runtime.Serialization.DataMember(Name="builderConfig")]
		public BuilderConfig BuilderConfig { get; set; }
		
		/// <summary>
		/// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public string[] Materials { get; set; }
		
		/// <summary>
		/// Other properties of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata Metadata { get; set; }
		
		/// <summary>
		/// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipe")]
		public Recipe Recipe { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuilderConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Other properties of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Metadata
	{
		
		/// <summary>
		/// The timestamp of when the build completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildFinishedOn")]
		public string BuildFinishedOn { get; set; }
		
		/// <summary>
		/// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildInvocationId")]
		public string BuildInvocationId { get; set; }
		
		/// <summary>
		/// The timestamp of when the build started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildStartedOn")]
		public string BuildStartedOn { get; set; }
		
		/// <summary>
		/// Indicates that the builder claims certain fields in this message to be complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeness")]
		public Completeness Completeness { get; set; }
		
		/// <summary>
		/// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reproducible")]
		public System.Nullable<System.Boolean> Reproducible { get; set; }
	}
	
	/// <summary>
	/// Indicates that the builder claims certain fields in this message to be complete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Completeness
	{
		
		/// <summary>
		/// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public System.Nullable<System.Boolean> Arguments { get; set; }
		
		/// <summary>
		/// If true, the builder claims that recipe.environment is claimed to be complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Nullable<System.Boolean> Environment { get; set; }
		
		/// <summary>
		/// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public System.Nullable<System.Boolean> Materials { get; set; }
	}
	
	/// <summary>
	/// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Recipe
	{
		
		/// <summary>
		/// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string[] Arguments { get; set; }
		
		/// <summary>
		/// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definedInMaterial")]
		public string DefinedInMaterial { get; set; }
		
		/// <summary>
		/// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryPoint")]
		public string EntryPoint { get; set; }
		
		/// <summary>
		/// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string[] Environment { get; set; }
		
		/// <summary>
		/// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InTotoStatement
	{
		
		/// <summary>
		/// Always `https://in-toto.io/Statement/v0.1`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _type { get; set; }
		
		/// <summary>
		/// `https://slsa.dev/provenance/v0.1` for SlsaProvenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicateType")]
		public string PredicateType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provenance")]
		public InTotoProvenance Provenance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slsaProvenance")]
		public SlsaProvenance SlsaProvenance { get; set; }
		
		/// <summary>
		/// See full explanation of fields at slsa.dev/provenance/v0.2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slsaProvenanceZeroTwo")]
		public SlsaProvenanceZeroTwo SlsaProvenanceZeroTwo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public Subject[] Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlsaProvenance
	{
		
		[System.Runtime.Serialization.DataMember(Name="builder")]
		public SlsaBuilder Builder { get; set; }
		
		/// <summary>
		/// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public Material[] Materials { get; set; }
		
		/// <summary>
		/// Other properties of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public SlsaMetadata Metadata { get; set; }
		
		/// <summary>
		/// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipe")]
		public SlsaRecipe Recipe { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlsaBuilder
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Material
	{
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Other properties of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlsaMetadata
	{
		
		/// <summary>
		/// The timestamp of when the build completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildFinishedOn")]
		public string BuildFinishedOn { get; set; }
		
		/// <summary>
		/// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildInvocationId")]
		public string BuildInvocationId { get; set; }
		
		/// <summary>
		/// The timestamp of when the build started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildStartedOn")]
		public string BuildStartedOn { get; set; }
		
		/// <summary>
		/// Indicates that the builder claims certain fields in this message to be complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeness")]
		public SlsaCompleteness Completeness { get; set; }
		
		/// <summary>
		/// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reproducible")]
		public System.Nullable<System.Boolean> Reproducible { get; set; }
	}
	
	/// <summary>
	/// Indicates that the builder claims certain fields in this message to be complete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlsaCompleteness
	{
		
		/// <summary>
		/// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public System.Nullable<System.Boolean> Arguments { get; set; }
		
		/// <summary>
		/// If true, the builder claims that recipe.environment is claimed to be complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Nullable<System.Boolean> Environment { get; set; }
		
		/// <summary>
		/// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public System.Nullable<System.Boolean> Materials { get; set; }
	}
	
	/// <summary>
	/// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlsaRecipe
	{
		
		/// <summary>
		/// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public System.Collections.Generic.Dictionary<string, object> Arguments { get; set; }
		
		/// <summary>
		/// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definedInMaterial")]
		public string DefinedInMaterial { get; set; }
		
		/// <summary>
		/// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryPoint")]
		public string EntryPoint { get; set; }
		
		/// <summary>
		/// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Collections.Generic.Dictionary<string, object> Environment { get; set; }
		
		/// <summary>
		/// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// See full explanation of fields at slsa.dev/provenance/v0.2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlsaProvenanceZeroTwo
	{
		
		[System.Runtime.Serialization.DataMember(Name="buildConfig")]
		public System.Collections.Generic.Dictionary<string, object> BuildConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildType")]
		public string BuildType { get; set; }
		
		/// <summary>
		/// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builder")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder Builder { get; set; }
		
		/// <summary>
		/// Identifies the event that kicked off the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invocation")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation Invocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial[] Materials { get; set; }
		
		/// <summary>
		/// Other properties of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Identifies the event that kicked off the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
	{
		
		/// <summary>
		/// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configSource")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource ConfigSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Collections.Generic.Dictionary<string, object> Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
	}
	
	/// <summary>
	/// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryPoint")]
		public string EntryPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial
	{
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Other properties of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="buildFinishedOn")]
		public string BuildFinishedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildInvocationId")]
		public string BuildInvocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildStartedOn")]
		public string BuildStartedOn { get; set; }
		
		/// <summary>
		/// Indicates that the builder claims certain fields in this message to be complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeness")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness Completeness { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reproducible")]
		public System.Nullable<System.Boolean> Reproducible { get; set; }
	}
	
	/// <summary>
	/// Indicates that the builder claims certain fields in this message to be complete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Nullable<System.Boolean> Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public System.Nullable<System.Boolean> Materials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Nullable<System.Boolean> Parameters { get; set; }
	}
	
	/// <summary>
	/// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildProvenance
	{
		
		/// <summary>
		/// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildOptions")]
		public System.Collections.Generic.Dictionary<string, string> BuildOptions { get; set; }
		
		/// <summary>
		/// Version string of the builder at the time this build was executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builderVersion")]
		public string BuilderVersion { get; set; }
		
		/// <summary>
		/// Output of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builtArtifacts")]
		public Artifact[] BuiltArtifacts { get; set; }
		
		/// <summary>
		/// Commands requested by the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commands")]
		public Command[] Commands { get; set; }
		
		/// <summary>
		/// Time at which the build was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// Time at which execution of the build was finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Required. Unique identifier of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// URI where any logs for this provenance were written.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logsUri")]
		public string LogsUri { get; set; }
		
		/// <summary>
		/// ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Source describes the location of the source used for the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceProvenance")]
		public Source SourceProvenance { get; set; }
		
		/// <summary>
		/// Time at which execution of the build was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Trigger identifier if the build was triggered automatically; empty if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerId")]
		public string TriggerId { get; set; }
	}
	
	/// <summary>
	/// Command describes a step performed as part of the build pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Command
	{
		
		/// <summary>
		/// Command-line arguments used when executing this command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Working directory (relative to project source root) used when running this command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Environment variables set before running this command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string[] Env { get; set; }
		
		/// <summary>
		/// Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID(s) of the command(s) that this command depends on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitFor")]
		public string[] WaitFor { get; set; }
	}
	
	/// <summary>
	/// Source describes the location of the source used for the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Source
	{
		
		/// <summary>
		/// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalContexts")]
		public SourceContext[] AdditionalContexts { get; set; }
		
		/// <summary>
		/// If provided, the input binary artifacts for the build came from this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactStorageSourceUri")]
		public string ArtifactStorageSourceUri { get; set; }
		
		/// <summary>
		/// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public SourceContext Context { get; set; }
		
		/// <summary>
		/// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public System.Collections.Generic.Dictionary<string, FileHashes> FileHashes { get; set; }
	}
	
	/// <summary>
	/// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceContext
	{
		
		/// <summary>
		/// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudRepo")]
		public CloudRepoSourceContext CloudRepo { get; set; }
		
		/// <summary>
		/// A SourceContext referring to a Gerrit project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gerrit")]
		public GerritSourceContext Gerrit { get; set; }
		
		/// <summary>
		/// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="git")]
		public GitSourceContext Git { get; set; }
		
		/// <summary>
		/// Labels with user defined metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
	}
	
	/// <summary>
	/// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudRepoSourceContext
	{
		
		/// <summary>
		/// An alias to a repo revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasContext")]
		public AliasContext AliasContext { get; set; }
		
		/// <summary>
		/// A unique identifier for a Cloud Repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoId")]
		public RepoId RepoId { get; set; }
		
		/// <summary>
		/// A revision ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// A unique identifier for a Cloud Repo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepoId
	{
		
		/// <summary>
		/// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectRepoId")]
		public ProjectRepoId ProjectRepoId { get; set; }
		
		/// <summary>
		/// A server-assigned, globally unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectRepoId
	{
		
		/// <summary>
		/// The ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The name of the repo. Leave empty for the default repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoName")]
		public string RepoName { get; set; }
	}
	
	/// <summary>
	/// A SourceContext referring to a Gerrit project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GerritSourceContext
	{
		
		/// <summary>
		/// An alias to a repo revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasContext")]
		public AliasContext AliasContext { get; set; }
		
		/// <summary>
		/// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gerritProject")]
		public string GerritProject { get; set; }
		
		/// <summary>
		/// The URI of a running Gerrit instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostUri")]
		public string HostUri { get; set; }
		
		/// <summary>
		/// A revision (commit) ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GitSourceContext
	{
		
		/// <summary>
		/// Git commit hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Git repository URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileHashes
	{
		
		/// <summary>
		/// Required. Collection of file hashes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHash")]
		public Hash[] FileHash { get; set; }
	}
	
	/// <summary>
	/// Container message for hash values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Hash
	{
		
		/// <summary>
		/// Required. The type of hash that was performed, e.g. "SHA-256".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required. The hash value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComplianceOccurrence
	{
		
		[System.Runtime.Serialization.DataMember(Name="nonComplianceReason")]
		public string NonComplianceReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonCompliantFiles")]
		public NonCompliantFile[] NonCompliantFiles { get; set; }
	}
	
	/// <summary>
	/// Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NonCompliantFile
	{
		
		/// <summary>
		/// Command to display the non-compliant files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayCommand")]
		public string DisplayCommand { get; set; }
		
		/// <summary>
		/// Empty if `display_command` is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Explains why a file is non compliant for a CIS check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// The period during which some deployable was active in a runtime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeploymentOccurrence
	{
		
		/// <summary>
		/// Address of the runtime element hosting this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Configuration used to create this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		/// <summary>
		/// Required. Beginning of the lifetime of this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployTime")]
		public string DeployTime { get; set; }
		
		/// <summary>
		/// Platform hosting this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public System.Nullable<DeploymentOccurrencePlatform> Platform { get; set; }
		
		/// <summary>
		/// Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string[] ResourceUri { get; set; }
		
		/// <summary>
		/// End of the lifetime of this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="undeployTime")]
		public string UndeployTime { get; set; }
		
		/// <summary>
		/// Identity of the user that triggered this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeploymentOccurrencePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GKE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 3,
	}
	
	/// <summary>
	/// Provides information about the analysis status of a discovered resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiscoveryOccurrence
	{
		
		/// <summary>
		/// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysisCompleted")]
		public AnalysisCompleted AnalysisCompleted { get; set; }
		
		/// <summary>
		/// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysisError")]
		public Status[] AnalysisError { get; set; }
		
		/// <summary>
		/// The status of discovery for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysisStatus")]
		public System.Nullable<DiscoveryOccurrenceAnalysisStatus> AnalysisStatus { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysisStatusError")]
		public Status AnalysisStatusError { get; set; }
		
		/// <summary>
		/// Output only. The time occurrences related to this discovery occurrence were archived.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveTime")]
		public string ArchiveTime { get; set; }
		
		/// <summary>
		/// Whether the resource is continuously analyzed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuousAnalysis")]
		public System.Nullable<DiscoveryOccurrenceContinuousAnalysis> ContinuousAnalysis { get; set; }
		
		/// <summary>
		/// The CPE of the resource being scanned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpe")]
		public string Cpe { get; set; }
		
		/// <summary>
		/// The last time this resource was scanned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastScanTime")]
		public string LastScanTime { get; set; }
		
		/// <summary>
		/// The status of an SBOM generation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sbomStatus")]
		public SBOMStatus SbomStatus { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DiscoveryOccurrenceAnalysisStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANALYSIS_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCANNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED_SUCCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED_FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED_UNSUPPORTED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DiscoveryOccurrenceContinuousAnalysis
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS_ANALYSIS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	/// <summary>
	/// The status of an SBOM generation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SBOMStatus
	{
		
		/// <summary>
		/// If there was an error generating an SBOM, this will indicate what that error was.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// The progress of the SBOM generation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sbomState")]
		public System.Nullable<SBOMStatusSbomState> SbomState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SBOMStatusSbomState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SBOM_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 2,
	}
	
	/// <summary>
	/// Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DSSEAttestationOccurrence
	{
		
		/// <summary>
		/// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envelope")]
		public Envelope Envelope { get; set; }
		
		/// <summary>
		/// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statement")]
		public InTotoStatement Statement { get; set; }
	}
	
	/// <summary>
	/// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Envelope
	{
		
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payloadType")]
		public string PayloadType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatures")]
		public EnvelopeSignature[] Signatures { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvelopeSignature
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sig")]
		public string Sig { get; set; }
	}
	
	/// <summary>
	/// Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageOccurrence
	{
		
		/// <summary>
		/// Output only. This contains the base image URL for the derived image occurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseResourceUrl")]
		public string BaseResourceUrl { get; set; }
		
		/// <summary>
		/// Output only. The number of layers by which this image differs from the associated image basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Int32> Distance { get; set; }
		
		/// <summary>
		/// A set of properties that uniquely identify a given Docker image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public Fingerprint Fingerprint { get; set; }
		
		/// <summary>
		/// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layerInfo")]
		public Layer[] LayerInfo { get; set; }
	}
	
	/// <summary>
	/// Layer holds metadata specific to a layer of a Docker image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Layer
	{
		
		/// <summary>
		/// The recovered arguments to the Dockerfile directive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string Arguments { get; set; }
		
		/// <summary>
		/// Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directive")]
		public string Directive { get; set; }
	}
	
	/// <summary>
	/// Details on how a particular software package was installed on a system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PackageOccurrence
	{
		
		/// <summary>
		/// Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public PackageNoteArchitecture Architecture { get; set; }
		
		/// <summary>
		/// Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeUri")]
		public string CpeUri { get; set; }
		
		/// <summary>
		/// License information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public License License { get; set; }
		
		/// <summary>
		/// All of the places within the filesystem versions of this package have been found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location[] Location { get; set; }
		
		/// <summary>
		/// Required. Output only. The name of the installed package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageType")]
		public string PackageType { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public Version Version { get; set; }
	}
	
	/// <summary>
	/// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeUri")]
		public string CpeUri { get; set; }
		
		/// <summary>
		/// The path from which we gathered that this package/version is installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public Version Version { get; set; }
	}
	
	/// <summary>
	/// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SBOMReferenceOccurrence
	{
		
		/// <summary>
		/// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public SbomReferenceIntotoPayload Payload { get; set; }
		
		/// <summary>
		/// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payloadType")]
		public string PayloadType { get; set; }
		
		/// <summary>
		/// The signatures over the payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatures")]
		public EnvelopeSignature[] Signatures { get; set; }
	}
	
	/// <summary>
	/// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SbomReferenceIntotoPayload
	{
		
		/// <summary>
		/// Identifier for the schema of the Statement.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _type { get; set; }
		
		/// <summary>
		/// A predicate which describes the SBOM being referenced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicate")]
		public SbomReferenceIntotoPredicate Predicate { get; set; }
		
		/// <summary>
		/// URI identifying the type of the Predicate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicateType")]
		public string PredicateType { get; set; }
		
		/// <summary>
		/// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public Subject[] Subject { get; set; }
	}
	
	/// <summary>
	/// A predicate which describes the SBOM being referenced.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SbomReferenceIntotoPredicate
	{
		
		/// <summary>
		/// A map of algorithm to digest of the contents of the SBOM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		/// <summary>
		/// The location of the SBOM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The mime type of the SBOM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The person or system referring this predicate to the consumer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referrerId")]
		public string ReferrerId { get; set; }
	}
	
	/// <summary>
	/// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpgradeOccurrence
	{
		
		/// <summary>
		/// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distribution")]
		public UpgradeDistribution Distribution { get; set; }
		
		/// <summary>
		/// Required for non-Windows OS. The package this Upgrade is for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parsedVersion")]
		public Version ParsedVersion { get; set; }
		
		/// <summary>
		/// Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsUpdate")]
		public WindowsUpdate WindowsUpdate { get; set; }
	}
	
	/// <summary>
	/// An occurrence of a severity vulnerability on a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VulnerabilityOccurrence
	{
		
		/// <summary>
		/// Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssScore")]
		public System.Nullable<System.Single> CvssScore { get; set; }
		
		/// <summary>
		/// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssV2")]
		public CVSS CvssV2 { get; set; }
		
		/// <summary>
		/// Output only. CVSS version used to populate cvss_score and severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssVersion")]
		public VulnerabilityNoteCvssVersion CvssVersion { get; set; }
		
		/// <summary>
		/// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssv3")]
		public CVSS Cvssv3 { get; set; }
		
		/// <summary>
		/// The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveSeverity")]
		public CisBenchmarkSeverity EffectiveSeverity { get; set; }
		
		/// <summary>
		/// Occurrence-specific extra details about the vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extraDetails")]
		public string ExtraDetails { get; set; }
		
		/// <summary>
		/// Output only. Whether at least one of the affected packages has a fix available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixAvailable")]
		public System.Nullable<System.Boolean> FixAvailable { get; set; }
		
		/// <summary>
		/// Output only. A detailed description of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longDescription")]
		public string LongDescription { get; set; }
		
		/// <summary>
		/// Required. The set of affected locations and their fixes (if available) within the associated resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageIssue")]
		public PackageIssue[] PackageIssue { get; set; }
		
		/// <summary>
		/// Output only. URLs related to this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedUrls")]
		public RelatedUrl[] RelatedUrls { get; set; }
		
		/// <summary>
		/// Output only. The note provider assigned severity of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public CisBenchmarkSeverity Severity { get; set; }
		
		/// <summary>
		/// Output only. A one sentence description of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortDescription")]
		public string ShortDescription { get; set; }
		
		/// <summary>
		/// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vexAssessment")]
		public VexAssessment VexAssessment { get; set; }
	}
	
	/// <summary>
	/// A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PackageIssue
	{
		
		/// <summary>
		/// Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedCpeUri")]
		public string AffectedCpeUri { get; set; }
		
		/// <summary>
		/// Required. The package this vulnerability was found in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedPackage")]
		public string AffectedPackage { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedVersion")]
		public Version AffectedVersion { get; set; }
		
		/// <summary>
		/// Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveSeverity")]
		public CisBenchmarkSeverity EffectiveSeverity { get; set; }
		
		/// <summary>
		/// The location at which this package was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileLocation")]
		public GrafeasV1FileLocation[] FileLocation { get; set; }
		
		/// <summary>
		/// Output only. Whether a fix is available for this package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixAvailable")]
		public System.Nullable<System.Boolean> FixAvailable { get; set; }
		
		/// <summary>
		/// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedCpeUri")]
		public string FixedCpeUri { get; set; }
		
		/// <summary>
		/// The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPackage")]
		public string FixedPackage { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedVersion")]
		public Version FixedVersion { get; set; }
		
		/// <summary>
		/// The type of package (e.g. OS, MAVEN, GO).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageType")]
		public string PackageType { get; set; }
	}
	
	/// <summary>
	/// Indicates the location at which a package was found.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GrafeasV1FileLocation
	{
		
		/// <summary>
		/// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
	}
	
	/// <summary>
	/// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VexAssessment
	{
		
		/// <summary>
		/// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cve")]
		public string Cve { get; set; }
		
		/// <summary>
		/// Contains information about the impact of this vulnerability, this will change with time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impacts")]
		public string[] Impacts { get; set; }
		
		/// <summary>
		/// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="justification")]
		public Justification Justification { get; set; }
		
		/// <summary>
		/// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noteName")]
		public string NoteName { get; set; }
		
		/// <summary>
		/// Holds a list of references associated with this vulnerability item and assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedUris")]
		public RelatedUrl[] RelatedUris { get; set; }
		
		/// <summary>
		/// Specifies details on how to handle (and presumably, fix) a vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediations")]
		public Remediation[] Remediations { get; set; }
		
		/// <summary>
		/// Provides the state of this Vulnerability assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public AssessmentState State { get; set; }
		
		/// <summary>
		/// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerabilityId")]
		public string VulnerabilityId { get; set; }
	}
	
	/// <summary>
	/// Response for creating occurrences in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreateOccurrencesResponse
	{
		
		/// <summary>
		/// The occurrences that were created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrences")]
		public Occurrence[] Occurrences { get; set; }
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A step in the build pipeline. Next ID: 21
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildStep
	{
		
		/// <summary>
		/// Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowExitCodes")]
		public int[] AllowExitCodes { get; set; }
		
		/// <summary>
		/// Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowFailure")]
		public System.Nullable<System.Boolean> AllowFailure { get; set; }
		
		/// <summary>
		/// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automapSubstitutions")]
		public System.Nullable<System.Boolean> AutomapSubstitutions { get; set; }
		
		/// <summary>
		/// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entrypoint")]
		public string Entrypoint { get; set; }
		
		/// <summary>
		/// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string[] Env { get; set; }
		
		/// <summary>
		/// Output only. Return code from running the step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase. Next ID: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullTiming")]
		public TimeSpan PullTiming { get; set; }
		
		/// <summary>
		/// A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretEnv")]
		public string[] SecretEnv { get; set; }
		
		/// <summary>
		/// Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BuildStepStatus> Status { get; set; }
		
		/// <summary>
		/// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase. Next ID: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public TimeSpan Timing { get; set; }
		
		/// <summary>
		/// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
		
		/// <summary>
		/// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitFor")]
		public string[] WaitFor { get; set; }
	}
	
	/// <summary>
	/// Start and end times for a build execution phase. Next ID: 3
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeSpan
	{
		
		/// <summary>
		/// End of time span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Start of time span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BuildStepStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 10,
	}
	
	/// <summary>
	/// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution. Next ID: 3
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Volume
	{
		
		/// <summary>
		/// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// ApprovalConfig describes configuration for manual approval of a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
	{
		
		/// <summary>
		/// Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalRequired")]
		public System.Nullable<System.Boolean> ApprovalRequired { get; set; }
	}
	
	/// <summary>
	/// ApprovalResult describes the decision and associated metadata of a manual approval of a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
	{
		
		/// <summary>
		/// Output only. The time when the approval decision was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalTime")]
		public string ApprovalTime { get; set; }
		
		/// <summary>
		/// Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approverAccount")]
		public string ApproverAccount { get; set; }
		
		/// <summary>
		/// Optional. An optional comment for this manual approval result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Required. The decision of this manual approval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decision")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResultDecision> Decision { get; set; }
		
		/// <summary>
		/// Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResultDecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECISION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
	}
	
	/// <summary>
	/// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
	{
		
		/// <summary>
		/// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		/// <summary>
		/// A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mavenArtifacts")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact[] MavenArtifacts { get; set; }
		
		/// <summary>
		/// A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="npmPackages")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage[] NpmPackages { get; set; }
		
		/// <summary>
		/// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects Objects { get; set; }
		
		/// <summary>
		/// A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonPackages")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage[] PythonPackages { get; set; }
	}
	
	/// <summary>
	/// A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact
	{
		
		/// <summary>
		/// Maven `artifactId` value used when uploading the artifact to Artifact Registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactId")]
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// Maven `groupId` value used when uploading the artifact to Artifact Registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// Maven `version` value used when uploading the artifact to Artifact Registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Npm package to upload to Artifact Registry upon successful completion of all build steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage
	{
		
		/// <summary>
		/// Path to the package.json. e.g. workspace/path/to/package
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packagePath")]
		public string PackagePath { get; set; }
		
		/// <summary>
		/// Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
	}
	
	/// <summary>
	/// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects
	{
		
		/// <summary>
		/// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Path globs used to match files in the build's workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan Timing { get; set; }
	}
	
	/// <summary>
	/// Start and end times for a build execution phase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
	{
		
		/// <summary>
		/// End of time span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Start of time span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage
	{
		
		/// <summary>
		/// Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
		
		/// <summary>
		/// Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
	}
	
	/// <summary>
	/// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1Build
	{
		
		/// <summary>
		/// BuildApproval describes a build's approval configuration, state, and result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approval")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval Approval { get; set; }
		
		/// <summary>
		/// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts Artifacts { get; set; }
		
		/// <summary>
		/// Secrets and secret environment variables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableSecrets")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets AvailableSecrets { get; set; }
		
		/// <summary>
		/// Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildTriggerId")]
		public string BuildTriggerId { get; set; }
		
		/// <summary>
		/// Output only. Time at which the request to create the build was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// A fatal problem encountered during the execution of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureInfo")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo FailureInfo { get; set; }
		
		/// <summary>
		/// Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishTime")]
		public string FinishTime { get; set; }
		
		/// <summary>
		/// Output only. Unique identifier of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		/// <summary>
		/// Output only. URL to logs for this build in Google Cloud Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logUrl")]
		public string LogUrl { get; set; }
		
		/// <summary>
		/// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logsBucket")]
		public string LogsBucket { get; set; }
		
		/// <summary>
		/// Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional arguments to enable specific features of builds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions Options { get; set; }
		
		/// <summary>
		/// Output only. ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queueTtl")]
		public string QueueTtl { get; set; }
		
		/// <summary>
		/// Artifacts created by the build pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1Results Results { get; set; }
		
		/// <summary>
		/// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1Secret[] Secrets { get; set; }
		
		/// <summary>
		/// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// Location of the source in a supported storage service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1Source Source { get; set; }
		
		/// <summary>
		/// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceProvenance")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance SourceProvenance { get; set; }
		
		/// <summary>
		/// Output only. Time at which execution of the build was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Output only. Status of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStatus> Status { get; set; }
		
		/// <summary>
		/// Output only. Customer-readable message about the current status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetail")]
		public string StatusDetail { get; set; }
		
		/// <summary>
		/// Required. The operations to be performed on the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep[] Steps { get; set; }
		
		/// <summary>
		/// Substitutions data for `Build` resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substitutions")]
		public System.Collections.Generic.Dictionary<string, string> Substitutions { get; set; }
		
		/// <summary>
		/// Tags for annotation of a `Build`. These are not docker tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
		
		/// <summary>
		/// Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public System.Collections.Generic.Dictionary<string, ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan> Timing { get; set; }
		
		/// <summary>
		/// Output only. Non-fatal problems encountered during the execution of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning[] Warnings { get; set; }
	}
	
	/// <summary>
	/// BuildApproval describes a build's approval configuration, state, and result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
	{
		
		/// <summary>
		/// ApprovalConfig describes configuration for manual approval of a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig Config { get; set; }
		
		/// <summary>
		/// ApprovalResult describes the decision and associated metadata of a manual approval of a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult Result { get; set; }
		
		/// <summary>
		/// Output only. The state of this build's approval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApprovalState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApprovalState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
	}
	
	/// <summary>
	/// Secrets and secret environment variables.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
	{
		
		/// <summary>
		/// Secrets encrypted with KMS key and the associated secret environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inline")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret[] Inline { get; set; }
		
		/// <summary>
		/// Secrets in Secret Manager and associated secret environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretManager")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret[] SecretManager { get; set; }
	}
	
	/// <summary>
	/// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret
	{
		
		/// <summary>
		/// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envMap")]
		public System.Collections.Generic.Dictionary<string, string> EnvMap { get; set; }
		
		/// <summary>
		/// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
	}
	
	/// <summary>
	/// Pairs a secret environment variable with a SecretVersion in Secret Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret
	{
		
		/// <summary>
		/// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string Env { get; set; }
		
		/// <summary>
		/// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
	}
	
	/// <summary>
	/// A fatal problem encountered during the execution of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
	{
		
		/// <summary>
		/// Explains the failure issue in more detail using hard-coded text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The name of the failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfoType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_IMAGE_NOT_FOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_NOT_AUTHORIZED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGGING_FAILURE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_BUILD_STEP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FETCH_SOURCE_FAILED = 6,
	}
	
	/// <summary>
	/// Optional arguments to enable specific features of builds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
	{
		
		/// <summary>
		/// Option to include built-in and custom substitutions as env variables for all build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automapSubstitutions")]
		public System.Nullable<System.Boolean> AutomapSubstitutions { get; set; }
		
		/// <summary>
		/// Optional. Option to specify how default logs buckets are setup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLogsBucketBehavior")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsDefaultLogsBucketBehavior> DefaultLogsBucketBehavior { get; set; }
		
		/// <summary>
		/// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public string DiskSizeGb { get; set; }
		
		/// <summary>
		/// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicSubstitutions")]
		public System.Nullable<System.Boolean> DynamicSubstitutions { get; set; }
		
		/// <summary>
		/// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string[] Env { get; set; }
		
		/// <summary>
		/// Option to define build log streaming behavior to Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logStreamingOption")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsLogStreamingOption> LogStreamingOption { get; set; }
		
		/// <summary>
		/// Option to specify the logging mode, which determines if and where build logs are stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logging")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsLogging> Logging { get; set; }
		
		/// <summary>
		/// Compute Engine machine type on which to run the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsMachineType> MachineType { get; set; }
		
		/// <summary>
		/// Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pool")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption Pool { get; set; }
		
		/// <summary>
		/// Requested verifiability options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedVerifyOption")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsRequestedVerifyOption> RequestedVerifyOption { get; set; }
		
		/// <summary>
		/// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretEnv")]
		public string[] SecretEnv { get; set; }
		
		/// <summary>
		/// Requested hash for SourceProvenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceProvenanceHash")]
		public string[] SourceProvenanceHash { get; set; }
		
		/// <summary>
		/// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substitutionOption")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsSubstitutionOption> SubstitutionOption { get; set; }
		
		/// <summary>
		/// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1Volume[] Volumes { get; set; }
		
		/// <summary>
		/// This field deprecated; please use `pool.name` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPool")]
		public string WorkerPool { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsDefaultLogsBucketBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGIONAL_USER_OWNED_BUCKET = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsLogStreamingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_OFF = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsLogging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGGING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGACY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCS_ONLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STACKDRIVER_ONLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_LOGGING_ONLY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsMachineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N1_HIGHCPU_8 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N1_HIGHCPU_32 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E2_HIGHCPU_8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E2_HIGHCPU_32 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E2_MEDIUM = 5,
	}
	
	/// <summary>
	/// Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
	{
		
		/// <summary>
		/// The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsRequestedVerifyOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_VERIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsSubstitutionOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUST_MATCH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_LOOSE = 1,
	}
	
	/// <summary>
	/// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
	{
		
		/// <summary>
		/// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Artifacts created by the build pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1Results
	{
		
		/// <summary>
		/// Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactManifest")]
		public string ArtifactManifest { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactTiming")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan ArtifactTiming { get; set; }
		
		/// <summary>
		/// List of build step digests, in the order corresponding to build step indices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildStepImages")]
		public string[] BuildStepImages { get; set; }
		
		/// <summary>
		/// List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 50KB of data is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildStepOutputs")]
		public string[] BuildStepOutputs { get; set; }
		
		/// <summary>
		/// Container images that were built as a part of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage[] Images { get; set; }
		
		/// <summary>
		/// Maven artifacts uploaded to Artifact Registry at the end of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mavenArtifacts")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact[] MavenArtifacts { get; set; }
		
		/// <summary>
		/// Npm packages uploaded to Artifact Registry at the end of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="npmPackages")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage[] NpmPackages { get; set; }
		
		/// <summary>
		/// Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numArtifacts")]
		public string NumArtifacts { get; set; }
		
		/// <summary>
		/// Python artifacts uploaded to Artifact Registry at the end of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonPackages")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage[] PythonPackages { get; set; }
	}
	
	/// <summary>
	/// An image built by the pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage
	{
		
		/// <summary>
		/// Docker Registry 2.0 digest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		/// <summary>
		/// Name used to push the container image to Google Container Registry, as presented to `docker push`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushTiming")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan PushTiming { get; set; }
	}
	
	/// <summary>
	/// A Maven artifact uploaded using the MavenArtifact directive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact
	{
		
		/// <summary>
		/// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes FileHashes { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushTiming")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan PushTiming { get; set; }
		
		/// <summary>
		/// URI of the uploaded artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
	{
		
		/// <summary>
		/// Collection of file hashes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHash")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1Hash[] FileHash { get; set; }
	}
	
	/// <summary>
	/// Container message for hash values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1Hash
	{
		
		/// <summary>
		/// The type of hash that was performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1HashType> Type { get; set; }
		
		/// <summary>
		/// The hash value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1HashType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA256 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD5 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA512 = 3,
	}
	
	/// <summary>
	/// An npm package uploaded to Artifact Registry using the NpmPackage directive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
	{
		
		/// <summary>
		/// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes FileHashes { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushTiming")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan PushTiming { get; set; }
		
		/// <summary>
		/// URI of the uploaded npm package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Artifact uploaded using the PythonPackage directive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage
	{
		
		/// <summary>
		/// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes FileHashes { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushTiming")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan PushTiming { get; set; }
		
		/// <summary>
		/// URI of the uploaded artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1Secret
	{
		
		/// <summary>
		/// Cloud KMS key name to use to decrypt these envs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
		
		/// <summary>
		/// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretEnv")]
		public System.Collections.Generic.Dictionary<string, string> SecretEnv { get; set; }
	}
	
	/// <summary>
	/// Location of the source in a supported storage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1Source
	{
		
		/// <summary>
		/// Location of the source in a 2nd-gen Google Cloud Build repository resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectedRepository")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository ConnectedRepository { get; set; }
		
		/// <summary>
		/// Location of the source in any accessible Git repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitSource")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource GitSource { get; set; }
		
		/// <summary>
		/// Location of the source in a Google Cloud Source Repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoSource")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource RepoSource { get; set; }
		
		/// <summary>
		/// Location of the source in an archive file in Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageSource")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource StorageSource { get; set; }
		
		/// <summary>
		/// Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageSourceManifest")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest StorageSourceManifest { get; set; }
	}
	
	/// <summary>
	/// Location of the source in a 2nd-gen Google Cloud Build repository resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository
	{
		
		/// <summary>
		/// Directory, relative to the source root, in which to run the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Required. Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
	}
	
	/// <summary>
	/// Location of the source in any accessible Git repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
	{
		
		/// <summary>
		/// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		/// <summary>
		/// Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Location of the source in a Google Cloud Source Repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
	{
		
		/// <summary>
		/// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Explicit commit SHA to build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitSha")]
		public string CommitSha { get; set; }
		
		/// <summary>
		/// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Only trigger a build if the revision regex does NOT match the revision regex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invertRegex")]
		public System.Nullable<System.Boolean> InvertRegex { get; set; }
		
		/// <summary>
		/// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Name of the Cloud Source Repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoName")]
		public string RepoName { get; set; }
		
		/// <summary>
		/// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substitutions")]
		public System.Collections.Generic.Dictionary<string, string> Substitutions { get; set; }
		
		/// <summary>
		/// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagName")]
		public string TagName { get; set; }
	}
	
	/// <summary>
	/// Location of the source in an archive file in Cloud Storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
	{
		
		/// <summary>
		/// Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		/// Optional. Option to specify the tool to fetch the source file for the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFetcher")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceSourceFetcher> SourceFetcher { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceSourceFetcher
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_FETCHER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GSUTIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCS_FETCHER = 2,
	}
	
	/// <summary>
	/// Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
	{
		
		/// <summary>
		/// Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// Cloud Storage object containing the source manifest. This object must be a JSON file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	/// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
	{
		
		/// <summary>
		/// Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public System.Collections.Generic.Dictionary<string, ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes> FileHashes { get; set; }
		
		/// <summary>
		/// Location of the source in a 2nd-gen Google Cloud Build repository resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedConnectedRepository")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository ResolvedConnectedRepository { get; set; }
		
		/// <summary>
		/// Location of the source in any accessible Git repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedGitSource")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource ResolvedGitSource { get; set; }
		
		/// <summary>
		/// Location of the source in a Google Cloud Source Repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedRepoSource")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource ResolvedRepoSource { get; set; }
		
		/// <summary>
		/// Location of the source in an archive file in Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedStorageSource")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource ResolvedStorageSource { get; set; }
		
		/// <summary>
		/// Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedStorageSourceManifest")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest ResolvedStorageSourceManifest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 9,
	}
	
	/// <summary>
	/// A step in the build pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep
	{
		
		/// <summary>
		/// Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowExitCodes")]
		public int[] AllowExitCodes { get; set; }
		
		/// <summary>
		/// Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowFailure")]
		public System.Nullable<System.Boolean> AllowFailure { get; set; }
		
		/// <summary>
		/// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automapSubstitutions")]
		public System.Nullable<System.Boolean> AutomapSubstitutions { get; set; }
		
		/// <summary>
		/// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entrypoint")]
		public string Entrypoint { get; set; }
		
		/// <summary>
		/// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string[] Env { get; set; }
		
		/// <summary>
		/// Output only. Return code from running the step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullTiming")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan PullTiming { get; set; }
		
		/// <summary>
		/// A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretEnv")]
		public string[] SecretEnv { get; set; }
		
		/// <summary>
		/// Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStatus Status { get; set; }
		
		/// <summary>
		/// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan Timing { get; set; }
		
		/// <summary>
		/// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public ContaineranalysisGoogleDevtoolsCloudbuildV1Volume[] Volumes { get; set; }
		
		/// <summary>
		/// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitFor")]
		public string[] WaitFor { get; set; }
	}
	
	/// <summary>
	/// A non-fatal problem encountered during the execution of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning
	{
		
		/// <summary>
		/// The priority for this warning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarningPriority> Priority { get; set; }
		
		/// <summary>
		/// Explanation of the warning generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarningPriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIORITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALERT = 3,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Per resource and severity counts of fixable and total vulnerabilities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FixableTotalByDigest
	{
		
		/// <summary>
		/// The number of fixable vulnerabilities associated with this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixableCount")]
		public string FixableCount { get; set; }
		
		/// <summary>
		/// The affected resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public CisBenchmarkSeverity Severity { get; set; }
		
		/// <summary>
		/// The total number of vulnerabilities associated with this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public string TotalCount { get; set; }
	}
	
	/// <summary>
	/// Request message for `GetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIamPolicyRequest
	{
		
		/// <summary>
		/// Encapsulates settings provided to GetIamPolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public GetPolicyOptions Options { get; set; }
	}
	
	/// <summary>
	/// Encapsulates settings provided to GetIamPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPolicyOptions
	{
		
		/// <summary>
		/// Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedPolicyVersion")]
		public System.Nullable<System.Int32> RequestedPolicyVersion { get; set; }
	}
	
	/// <summary>
	/// Metadata for all operations used and required for all operations that created by Container Analysis Providers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata
	{
		
		/// <summary>
		/// Output only. The time this operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time that this operation was marked completed or failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
	}
	
	/// <summary>
	/// Response for listing occurrences for a note.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNoteOccurrencesResponse
	{
		
		/// <summary>
		/// Token to provide to skip to a particular spot in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The occurrences attached to the specified note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrences")]
		public Occurrence[] Occurrences { get; set; }
	}
	
	/// <summary>
	/// Response for listing notes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNotesResponse
	{
		
		/// <summary>
		/// The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The notes requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public Note[] Notes { get; set; }
	}
	
	/// <summary>
	/// Response for listing occurrences.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOccurrencesResponse
	{
		
		/// <summary>
		/// The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The occurrences requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrences")]
		public Occurrence[] Occurrences { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Policy
	{
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// A summary of how many vulnerability occurrences there are per resource and severity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VulnerabilityOccurrencesSummary
	{
		
		/// <summary>
		/// A listing by resource of the number of fixable and total vulnerabilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public FixableTotalByDigest[] Counts { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource.
		/// Containeranalysis_projects_occurrences_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Containeranalysis_projects_occurrences_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified occurrence.
		/// Containeranalysis_projects_occurrences_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.</param>
		/// <returns>Successful response</returns>
		public async Task<Occurrence> Containeranalysis_projects_occurrences_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Occurrence>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified occurrence.
		/// Containeranalysis_projects_occurrences_patch v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.</param>
		/// <param name="updateMask">The fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Occurrence> Containeranalysis_projects_occurrences_patchAsync(string name, string updateMask, Occurrence requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Occurrence>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project.
		/// Containeranalysis_projects_occurrences_getNotes v1/{name}/notes
		/// </summary>
		/// <param name="name">Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.</param>
		/// <returns>Successful response</returns>
		public async Task<Note> Containeranalysis_projects_occurrences_getNotesAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/notes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Note>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note.
		/// Containeranalysis_projects_notes_occurrences_list v1/{name}/occurrences
		/// </summary>
		/// <param name="name">Required. The name of the note to list occurrences for in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.</param>
		/// <param name="filter">The filter expression.</param>
		/// <param name="pageSize">Number of occurrences to return in the list.</param>
		/// <param name="pageToken">Token to provide to skip to a particular spot in the list.</param>
		/// <returns>Successful response</returns>
		public async Task<ListNoteOccurrencesResponse> Containeranalysis_projects_notes_occurrences_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/occurrences&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListNoteOccurrencesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists notes for the specified project.
		/// Containeranalysis_projects_notes_list v1/{parent}/notes
		/// </summary>
		/// <param name="parent">Required. The name of the project to list notes for in the form of `projects/[PROJECT_ID]`.</param>
		/// <param name="filter">The filter expression.</param>
		/// <param name="pageSize">Number of notes to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20.</param>
		/// <param name="pageToken">Token to provide to skip to a particular spot in the list.</param>
		/// <returns>Successful response</returns>
		public async Task<ListNotesResponse> Containeranalysis_projects_notes_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/notes&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListNotesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new note.
		/// Containeranalysis_projects_notes_create v1/{parent}/notes
		/// </summary>
		/// <param name="parent">Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the note is to be created.</param>
		/// <param name="noteId">Required. The ID to use for this note.</param>
		/// <returns>Successful response</returns>
		public async Task<Note> Containeranalysis_projects_notes_createAsync(string parent, string noteId, Note requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/notes&noteId=" + (noteId==null? "" : System.Uri.EscapeDataString(noteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Note>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates new notes in batch.
		/// Containeranalysis_projects_notes_batchCreate v1/{parent}/notes:batchCreate
		/// </summary>
		/// <param name="parent">Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the notes are to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchCreateNotesResponse> Containeranalysis_projects_notes_batchCreateAsync(string parent, BatchCreateNotesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/notes:batchCreate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchCreateNotesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists occurrences for the specified project.
		/// Containeranalysis_projects_occurrences_list v1/{parent}/occurrences
		/// </summary>
		/// <param name="parent">Required. The name of the project to list occurrences for in the form of `projects/[PROJECT_ID]`.</param>
		/// <param name="filter">The filter expression.</param>
		/// <param name="pageSize">Number of occurrences to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20.</param>
		/// <param name="pageToken">Token to provide to skip to a particular spot in the list.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOccurrencesResponse> Containeranalysis_projects_occurrences_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/occurrences&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOccurrencesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new occurrence.
		/// Containeranalysis_projects_occurrences_create v1/{parent}/occurrences
		/// </summary>
		/// <param name="parent">Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrence is to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<Occurrence> Containeranalysis_projects_occurrences_createAsync(string parent, Occurrence requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/occurrences";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Occurrence>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates new occurrences in batch.
		/// Containeranalysis_projects_occurrences_batchCreate v1/{parent}/occurrences:batchCreate
		/// </summary>
		/// <param name="parent">Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrences are to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchCreateOccurrencesResponse> Containeranalysis_projects_occurrences_batchCreateAsync(string parent, BatchCreateOccurrencesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/occurrences:batchCreate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchCreateOccurrencesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a summary of the number and severity of occurrences.
		/// Containeranalysis_projects_occurrences_getVulnerabilitySummary v1/{parent}/occurrences:vulnerabilitySummary
		/// </summary>
		/// <param name="parent">Required. The name of the project to get a vulnerability summary for in the form of `projects/[PROJECT_ID]`.</param>
		/// <param name="filter">The filter expression.</param>
		/// <returns>Successful response</returns>
		public async Task<VulnerabilityOccurrencesSummary> Containeranalysis_projects_occurrences_getVulnerabilitySummaryAsync(string parent, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/occurrences:vulnerabilitySummary&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VulnerabilityOccurrencesSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
		/// Containeranalysis_projects_occurrences_getIamPolicy v1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Containeranalysis_projects_occurrences_getIamPolicyAsync(string resource, GetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
		/// Containeranalysis_projects_occurrences_setIamPolicy v1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Containeranalysis_projects_occurrences_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
		/// Containeranalysis_projects_occurrences_testIamPermissions v1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Containeranalysis_projects_occurrences_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestIamPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
