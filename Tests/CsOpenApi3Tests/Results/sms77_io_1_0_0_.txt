//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Carrier
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="network_code")]
		public string Network_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="network_type")]
		public System.Nullable<CarrierNetwork_type> Network_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CarrierNetwork_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fixed_line = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fixed_line_or_mobile = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mobile = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pager = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		personal_number = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premium_rate = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shared_cost = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		toll_free = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uan = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		voicemail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		voip = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Mnp
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="international_formatted")]
		public string International_formatted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPorted")]
		public System.Nullable<System.Boolean> IsPorted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mccmnc")]
		public string Mccmnc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="national_format")]
		public string National_format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Roaming
	{
		
		[System.Runtime.Serialization.DataMember(Name="roaming_country_code")]
		public string Roaming_country_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roaming_network_code")]
		public string Roaming_network_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roaming_network_name")]
		public string Roaming_network_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<RoamingStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RoamingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		roaming = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_roaming = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Analytics analytics
		/// </summary>
		/// <param name="start">Start date of the statistics in the format YYYY-MM-DD. By default, the date of 30 days ago is set.</param>
		/// <param name="end">End date of the statistics in the format YYYY-MM-DD. By default, the current day.</param>
		/// <param name="label">Shows only data of a specific label.</param>
		/// <param name="subaccounts">Receive the data only for the main account, all your (sub-)accounts or only for specific subaccounts.</param>
		/// <param name="group_by">Defines the grouping of the data.</param>
		/// <returns>OK</returns>
		public async Task<AnalyticsReturn> AnalyticsAsync(string start, string end, string label, string subaccounts, AnalyticsGroup_by group_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "analytics?start=" + (start==null? "" : System.Uri.EscapeDataString(start))+"&end=" + (end==null? "" : System.Uri.EscapeDataString(end))+"&label=" + (label==null? "" : System.Uri.EscapeDataString(label))+"&subaccounts=" + (subaccounts==null? "" : System.Uri.EscapeDataString(subaccounts))+"&group_by=" + group_by;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalyticsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Balance balance
		/// </summary>
		/// <returns>OK</returns>
		public async Task<float> BalanceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "balance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<float>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ContactsGet contacts
		/// </summary>
		/// <param name="action">Determines the action to execute.</param>
		/// <param name="json">Defines whether to return the response as JSON or CSV separated by semicolon.</param>
		/// <returns>OK (CSV)</returns>
		public async Task<string> ContactsGetAsync(ContactsGetAction action, ContactsGetJson json, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts?action=" + action+"&json="+json;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ContactsPOST contacts
		/// </summary>
		/// <param name="action">Determines the action to execute.</param>
		/// <param name="json">Defines whether to return the response as JSON or CSV separated by semicolon.</param>
		/// <param name="id">The contact ID for editing/deletion.</param>
		/// <param name="nick">The contacts name.</param>
		/// <param name="empfaenger">The contacts phone number.</param>
		/// <param name="email">The contacts email address.</param>
		/// <returns>OK</returns>
		public async Task<string> ContactsPOSTAsync(ContactsPOSTAction action, ContactsPOSTJson json, string id, string nick, string empfaenger, string email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts?action=" + action+"&json="+json+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&nick=" + (nick==null? "" : System.Uri.EscapeDataString(nick))+"&empfaenger=" + (empfaenger==null? "" : System.Uri.EscapeDataString(empfaenger))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// HooksGet hooks
		/// </summary>
		/// <param name="action">Determines the action to execute.</param>
		/// <returns>OK</returns>
		public async Task<HooksGetReturn> HooksGetAsync(ContactsGetAction action, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hooks?action=" + action;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HooksGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// HooksPOST hooks
		/// </summary>
		/// <param name="action">Determines the action to execute.</param>
		/// <param name="id">The Webhook ID you wish to unsubscribe.</param>
		/// <param name="target_url">Target URL of your Webhook.</param>
		/// <param name="event_type">Type of event for which you would like to receive a webhook.</param>
		/// <param name="request_method">Request method in which you want to receive the webhook.</param>
		/// <returns>Hook subscribed</returns>
		public async Task<HooksPOSTReturn> HooksPOSTAsync(HooksPOSTAction action, int id, string target_url, HooksPOSTEvent_type event_type, HooksPOSTRequest_method request_method, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hooks?action=" + action+"&id="+id+"&target_url=" + (target_url==null? "" : System.Uri.EscapeDataString(target_url))+"&event_type=" + event_type+"&request_method=" + request_method;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HooksPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lookup lookup
		/// </summary>
		/// <param name="type">Allowed values are "cnam", "format", "hlr" and "mnp".</param>
		/// <param name="number">The phone number to look up.</param>
		/// <param name="json">Determines whether the response shall be returned in JSON format. Does not work with type "format".</param>
		/// <returns>OK</returns>
		public async Task LookupAsync(string type, string[] number, string json, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup?type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&"+string.Join("&", number.Select(z => $"number={System.Uri.EscapeDataString(z.ToString())}"))+"&json=" + (json==null? "" : System.Uri.EscapeDataString(json));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// LookupCnam lookup/cnam
		/// </summary>
		/// <param name="number">The phone number to look up.</param>
		/// <returns>OK</returns>
		public async Task LookupCnamAsync(string[] number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/cnam?"+string.Join("&", number.Select(z => $"number={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// LookupFormat lookup/format
		/// </summary>
		/// <param name="number">The phone number to look up.</param>
		/// <returns>OK</returns>
		public async Task LookupFormatAsync(string[] number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/format?"+string.Join("&", number.Select(z => $"number={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// LookupHlr lookup/hlr
		/// </summary>
		/// <param name="number">The phone number to look up.</param>
		/// <returns>OK</returns>
		public async Task LookupHlrAsync(string[] number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/hlr?"+string.Join("&", number.Select(z => $"number={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// LookupMnp lookup/mnp
		/// </summary>
		/// <param name="number">The phone number to look up.</param>
		/// <param name="json">Determines whether the response shall be returned in JSON format.</param>
		/// <returns>OK</returns>
		public async Task LookupMnpAsync(string[] number, string json, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/mnp?"+string.Join("&", number.Select(z => $"number={System.Uri.EscapeDataString(z.ToString())}"))+"&json=" + (json==null? "" : System.Uri.EscapeDataString(json));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pricing pricing
		/// </summary>
		/// <param name="country">The countries ISO code to get pricings for. Allowed values are de, fr, at. Omit to show pricings for all channels.</param>
		/// <param name="format">Determines the response format. Allowed values are json and csv. The default value is json.</param>
		/// <returns>OK</returns>
		public async Task PricingAsync(string country, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pricing?country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sms sms
		/// </summary>
		/// <param name="text">The actual text message to send.</param>
		/// <param name="to">The recipient number or group name.</param>
		/// <param name="from">Set a custom sender name.</param>
		/// <param name="foreign_id">Identifier to return in callbacks.</param>
		/// <param name="label">A custom label.</param>
		/// <param name="udh">A custom User Data Header.</param>
		/// <param name="delay">Date/Time for delayed dispatch.</param>
		/// <param name="debug">Disable message sending.</param>
		/// <param name="no_reload">Enable sending of duplicated messages within 180 seconds.</param>
		/// <param name="unicode">Force unicode encoding. Reduces sms length to 70 chars.</param>
		/// <param name="flash">Send as flash.</param>
		/// <param name="utf8">Force UTF8 encoding.</param>
		/// <param name="details">Attach message details to response.</param>
		/// <param name="return_msg_id">Attach message ID to second row in a text response.</param>
		/// <param name="json">Return a detailed JSON response.</param>
		/// <param name="performance_tracking">Enable performance tracking for found URLs.</param>
		/// <returns>OK</returns>
		public async Task<SmsReturn> SmsAsync(
					string text, 
					string to, 
					string from, 
					string foreign_id, 
					string label, 
					string udh, 
					string delay, 
					SmsDebug debug, 
					SmsNo_reload no_reload, 
					SmsUnicode unicode, 
					SmsFlash flash, 
					SmsUtf8 utf8, 
					SmsDetails details, 
					SmsReturn_msg_id return_msg_id, 
					SmsJson json, 
					SmsPerformance_tracking performance_tracking, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to))+"&from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&foreign_id=" + (foreign_id==null? "" : System.Uri.EscapeDataString(foreign_id))+"&label=" + (label==null? "" : System.Uri.EscapeDataString(label))+"&udh=" + (udh==null? "" : System.Uri.EscapeDataString(udh))+"&delay=" + (delay==null? "" : System.Uri.EscapeDataString(delay))+"&debug="+debug+"&no_reload="+no_reload+"&unicode="+unicode+"&flash="+flash+"&utf8="+utf8+"&details="+details+"&return_msg_id="+return_msg_id+"&json="+json+"&performance_tracking="+performance_tracking;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SmsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Status status
		/// </summary>
		/// <param name="msg_id">The ID from the SMS.</param>
		/// <returns>OK</returns>
		public async Task<string> StatusAsync(string msg_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "status?msg_id=" + (msg_id==null? "" : System.Uri.EscapeDataString(msg_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(responseMessageStream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ValidateForVoice validate_for_voice
		/// </summary>
		/// <param name="number">Determines the recipient. Can only be a number, not a contact from your address book.</param>
		/// <param name="callback">The callback URL which gets queried right after validation.</param>
		/// <returns>OK</returns>
		public async Task<ValidateForVoiceReturn> ValidateForVoiceAsync(string number, string callback, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "validate_for_voice?number=" + (number==null? "" : System.Uri.EscapeDataString(number))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ValidateForVoiceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Voice voice
		/// </summary>
		/// <param name="to">Determines the receiver. Must be a valid phone number or contact from the address book.</param>
		/// <param name="text">The text to convert to a voice message. Accepts valid XML too.
		/// Max length: 10000
		// </param>
		/// <param name="xml">Decides whether the parameter "text" is plain text or XML. The default value is 0.</param>
		/// <param name="from">Sets the sender. Must be a verified sender. Use an inbound number of yours or one of ours.</param>
		/// <returns>OK</returns>
		public async Task<string> VoiceAsync(string to, string text, VoiceXml xml, string from, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice?to=" + (to==null? "" : System.Uri.EscapeDataString(to))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&xml="+xml+"&from=" + (from==null? "" : System.Uri.EscapeDataString(from));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(responseMessageStream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum AnalyticsGroup_by
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		label = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subaccount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		country = 3,
	}
	
	public class AnalyticsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="direct")]
		public System.Nullable<System.Int32> Direct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="economy")]
		public System.Nullable<System.Int32> Economy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hlr")]
		public System.Nullable<System.Int32> Hlr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inbound")]
		public System.Nullable<System.Int32> Inbound { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mnp")]
		public System.Nullable<System.Int32> Mnp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage_eur")]
		public System.Nullable<System.Single> Usage_eur { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public System.Nullable<System.Int32> Voice { get; set; }
	}
	
	public enum ContactsGetAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read = 0,
	}
	
	public enum ContactsGetJson
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum ContactsPOSTAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		del = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		write = 1,
	}
	
	public enum ContactsPOSTJson
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public class HooksGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="hooks")]
		public HooksGetReturnHooks[] HooksGetReturnHooks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class HooksGetReturnHooks
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public string Event_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request_method")]
		public string Request_method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_url")]
		public string Target_url { get; set; }
	}
	
	public enum HooksPOSTAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subscribe = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unsubscribe = 1,
	}
	
	public enum HooksPOSTEvent_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sms_mo = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dlr = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		voice_status = 3,
	}
	
	public enum HooksPOSTRequest_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 2,
	}
	
	public class HooksPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public enum SmsDebug
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
	}
	
	public enum SmsNo_reload
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
	}
	
	public enum SmsUnicode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
	}
	
	public enum SmsFlash
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
	}
	
	public enum SmsUtf8
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
	}
	
	public enum SmsDetails
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
	}
	
	public enum SmsReturn_msg_id
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
	}
	
	public enum SmsJson
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
	}
	
	public enum SmsPerformance_tracking
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
	}
	
	public class SmsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Single> Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debug")]
		public string Debug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public SmsReturnMessages[] SmsReturnMessages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sms_type")]
		public System.Nullable<SmsReturnSms_type> Sms_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_price")]
		public System.Nullable<System.Single> Total_price { get; set; }
	}
	
	public class SmsReturnMessages
	{
		
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error_text")]
		public string Error_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public string[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parts")]
		public System.Nullable<System.Int32> Parts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient")]
		public string Recipient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sender")]
		public string Sender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SmsReturnSms_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		economy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		direct = 1,
	}
	
	public class ValidateForVoiceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public enum VoiceXml
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
