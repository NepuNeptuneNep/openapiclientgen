//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateCustomVocabularyItemResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public FailedCustomVocabularyItem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public CustomVocabularyItem[] Resources { get; set; }
	}
	
	/// <summary>
	/// The unique failed custom vocabulary item from the custom vocabulary list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailedCustomVocabularyItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public ErrorCode ErrorCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_DOES_NOT_EXIST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_ALREADY_EXISTS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_SERVER_FAILURE = 3,
	}
	
	/// <summary>
	/// The unique custom vocabulary item from the custom vocabulary list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomVocabularyItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phrase")]
		public string Phrase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayAs")]
		public string DisplayAs { get; set; }
	}
	
	/// <summary>
	/// The new custom vocabulary item from the custom vocabulary list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewCustomVocabularyItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phrase")]
		public string Phrase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayAs")]
		public string DisplayAs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteCustomVocabularyItemResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public FailedCustomVocabularyItem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public CustomVocabularyItem[] Resources { get; set; }
	}
	
	/// <summary>
	/// The unique entry identifier for the custom vocabulary items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomVocabularyEntryId
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateCustomVocabularyItemResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public FailedCustomVocabularyItem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public CustomVocabularyItem[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildBotLocaleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleStatus")]
		public BotLocaleStatus BotLocaleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastBuildSubmittedDateTime")]
		public System.DateTimeOffset LastBuildSubmittedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotLocaleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Building = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Built = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadyExpressTesting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotBuilt = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Importing = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PreconditionFailedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBotResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPrivacy")]
		public DataPrivacy DataPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		public System.Nullable<System.Int32> IdleSessionTTLInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botStatus")]
		public BotStatus BotStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botTags")]
		public TagMap BotTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testBotAliasTags")]
		public TagMap TestBotAliasTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botType")]
		public BotType BotType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botMembers")]
		public BotMember[] BotMembers { get; set; }
	}
	
	/// <summary>
	/// By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataPrivacy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childDirected")]
		public bool ChildDirected { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Versioning = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Importing = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotNetwork = 1,
	}
	
	/// <summary>
	/// A bot that is a member of a network of bots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotMember
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botMemberId")]
		public string BotMemberId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botMemberName")]
		public string BotMemberName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botMemberAliasId")]
		public string BotMemberAliasId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botMemberAliasName")]
		public string BotMemberAliasName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botMemberVersion")]
		public string BotMemberVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBotAliasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasName")]
		public string BotAliasName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasLocaleSettings")]
		public BotAliasLocaleSettingsMap BotAliasLocaleSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLogSettings")]
		public ConversationLogSettings ConversationLogSettings { get; set; }
		
		/// <summary>
		/// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentimentAnalysisSettings")]
		public SentimentAnalysisSettings SentimentAnalysisSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasStatus")]
		public BotAliasStatus BotAliasStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotAliasLocaleSettingsMap
	{
	}
	
	/// <summary>
	/// Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationLogSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="textLogSettings")]
		public TextLogSetting[] TextLogSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="audioLogSettings")]
		public AudioLogSetting[] AudioLogSettings { get; set; }
	}
	
	/// <summary>
	/// Defines settings to enable text conversation logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextLogSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public TextLogDestination Destination { get; set; }
	}
	
	/// <summary>
	/// Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextLogDestination
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cloudWatch")]
		public CloudWatchLogGroupLogDestination CloudWatch { get; set; }
	}
	
	/// <summary>
	/// The Amazon CloudWatch Logs log group where the text and metadata logs are delivered. The log group must exist before you enable logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudWatchLogGroupLogDestination
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogGroupArn")]
		public string CloudWatchLogGroupArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logPrefix")]
		public string LogPrefix { get; set; }
	}
	
	/// <summary>
	/// Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioLogSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The location of audio log files collected when conversation logging is enabled for a bot.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public AudioLogDestination Destination { get; set; }
	}
	
	/// <summary>
	/// The location of audio log files collected when conversation logging is enabled for a bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioLogDestination
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public S3BucketLogDestination S3Bucket { get; set; }
	}
	
	/// <summary>
	/// Specifies an Amazon S3 bucket for logging audio conversations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3BucketLogDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3BucketArn")]
		public string S3BucketArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logPrefix")]
		public string LogPrefix { get; set; }
	}
	
	/// <summary>
	/// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SentimentAnalysisSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detectSentiment")]
		public bool DetectSentiment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotAliasStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot's locale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotAliasLocaleSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeHookSpecification")]
		public CodeHookSpecification CodeHookSpecification { get; set; }
	}
	
	/// <summary>
	/// Contains information about code hooks that Amazon Lex calls during a conversation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CodeHookSpecification
	{
		
		/// <summary>
		/// Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lambdaCodeHook")]
		public LambdaCodeHook LambdaCodeHook { get; set; }
	}
	
	/// <summary>
	/// Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaCodeHook
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lambdaARN")]
		public string LambdaARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="codeHookInterfaceVersion")]
		public string CodeHookInterfaceVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBotLocaleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeName")]
		public string LocaleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		public System.Nullable<System.Double> NluIntentConfidenceThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voiceSettings")]
		public VoiceSettings VoiceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleStatus")]
		public BotLocaleStatus BotLocaleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
	}
	
	/// <summary>
	/// Defines settings for using an Amazon Polly voice to communicate with a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VoiceSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="voiceId")]
		public string VoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engine")]
		public VoiceEngine Engine { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VoiceEngine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		neural = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBotVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersionLocaleSpecification")]
		public BotVersionLocaleSpecification BotVersionLocaleSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botStatus")]
		public BotStatus BotStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotVersionLocaleSpecification
	{
	}
	
	/// <summary>
	/// The version of a bot used for a bot locale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotVersionLocaleDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceBotVersion")]
		public string SourceBotVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateExportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="exportId")]
		public string ExportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceSpecification")]
		public ExportResourceSpecification ResourceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileFormat")]
		public ImportExportFileFormat FileFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportStatus")]
		public ExportStatus ExportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
	}
	
	/// <summary>
	/// Provides information about the bot or bot locale that you want to export. You can specify the <code>botExportSpecification</code> or the <code>botLocaleExportSpecification</code>, but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportResourceSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="botExportSpecification")]
		public BotExportSpecification BotExportSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleExportSpecification")]
		public BotLocaleExportSpecification BotLocaleExportSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customVocabularyExportSpecification")]
		public CustomVocabularyExportSpecification CustomVocabularyExportSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetExportSpecification")]
		public TestSetExportSpecification TestSetExportSpecification { get; set; }
	}
	
	/// <summary>
	/// Provides the identity of a the bot that was exported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotExportSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
	}
	
	/// <summary>
	/// Provides the bot locale parameters required for exporting a bot locale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotLocaleExportSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	/// <summary>
	/// Provides the parameters required for exporting a custom vocabulary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomVocabularyExportSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	/// <summary>
	/// Contains information about the test set that is exported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetExportSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="testSetId")]
		public string TestSetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportExportFileFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LexJson = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIntentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="intentId")]
		public string IntentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public SampleUtterance[] SampleUtterances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public DialogCodeHookSettings DialogCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentCodeHook")]
		public FulfillmentCodeHookSettings FulfillmentCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentConfirmationSetting")]
		public IntentConfirmationSetting IntentConfirmationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentClosingSetting")]
		public IntentClosingSetting IntentClosingSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		public InputContext[] InputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		public OutputContext[] OutputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public KendraConfiguration KendraConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initialResponseSetting")]
		public InitialResponseSetting InitialResponseSetting { get; set; }
	}
	
	/// <summary>
	/// A sample utterance that invokes an intent or respond to a slot elicitation prompt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SampleUtterance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="utterance")]
		public string Utterance { get; set; }
	}
	
	/// <summary>
	/// Settings that determine the Lambda function that Amazon Lex uses for processing user responses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DialogCodeHookSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	/// <summary>
	/// Determines if a Lambda function should be invoked for a specific intent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FulfillmentCodeHookSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postFulfillmentStatusSpecification")]
		public PostFulfillmentStatusSpecification PostFulfillmentStatusSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentUpdatesSpecification")]
		public FulfillmentUpdatesSpecification FulfillmentUpdatesSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
	}
	
	/// <summary>
	/// Provides a setting that determines whether the post-fulfillment response is sent to the user. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete">https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete</a> 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostFulfillmentStatusSpecification
	{
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successResponse")]
		public ResponseSpecification SuccessResponse { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureResponse")]
		public ResponseSpecification FailureResponse { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutResponse")]
		public ResponseSpecification TimeoutResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successNextStep")]
		public DialogState SuccessNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successConditional")]
		public ConditionalSpecification SuccessConditional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureNextStep")]
		public DialogState FailureNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureConditional")]
		public ConditionalSpecification FailureConditional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutNextStep")]
		public DialogState TimeoutNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutConditional")]
		public ConditionalSpecification TimeoutConditional { get; set; }
	}
	
	/// <summary>
	/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponseSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageGroups")]
		public MessageGroup[] MessageGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowInterrupt")]
		public System.Nullable<System.Boolean> AllowInterrupt { get; set; }
	}
	
	/// <summary>
	/// Provides one or more messages that Amazon Lex should send to the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageGroup
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public Message[] Variations { get; set; }
	}
	
	/// <summary>
	/// The object that provides message text and its type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message
	{
		
		[System.Runtime.Serialization.DataMember(Name="plainTextMessage")]
		public PlainTextMessage PlainTextMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customPayload")]
		public CustomPayload CustomPayload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssmlMessage")]
		public SSMLMessage SsmlMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageResponseCard")]
		public ImageResponseCard ImageResponseCard { get; set; }
	}
	
	/// <summary>
	/// Defines an ASCII text message to send to the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlainTextMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A custom response string that Amazon Lex sends to your application. You define the content and structure the string.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomPayload
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Defines a Speech Synthesis Markup Language (SSML) prompt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SSMLMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p> <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageResponseCard
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buttons")]
		public Button[] Buttons { get; set; }
	}
	
	/// <summary>
	/// Describes a button to use on a response card used to gather slot values from a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Button
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The current state of the conversation with the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DialogState
	{
		
		/// <summary>
		/// Defines the action that the bot executes at runtime when the conversation reaches this step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialogAction")]
		public DialogAction DialogAction { get; set; }
		
		/// <summary>
		/// Override settings to configure the intent state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intent")]
		public IntentOverride Intent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionAttributes")]
		public StringMap SessionAttributes { get; set; }
	}
	
	/// <summary>
	/// Defines the action that the bot executes at runtime when the conversation reaches this step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DialogAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DialogActionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotToElicit")]
		public string SlotToElicit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppressNextMessage")]
		public System.Nullable<System.Boolean> SuppressNextMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DialogActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElicitIntent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartIntent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElicitSlot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EvaluateConditional = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvokeDialogCodeHook = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfirmIntent = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FulfillIntent = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloseIntent = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EndConversation = 8,
	}
	
	/// <summary>
	/// Override settings to configure the intent state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentOverride
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public SlotValueOverrideMap Slots { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotValueOverrideMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringMap
	{
	}
	
	/// <summary>
	/// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConditionalSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="conditionalBranches")]
		public ConditionalBranch[] ConditionalBranches { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultBranch")]
		public DefaultConditionalBranch DefaultBranch { get; set; }
	}
	
	/// <summary>
	/// A set of actions that Amazon Lex should run if the condition is matched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConditionalBranch
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Condition Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextStep")]
		public DialogState NextStep { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public ResponseSpecification Response { get; set; }
	}
	
	/// <summary>
	/// Provides an expression that evaluates to true or false. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Condition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expressionString")]
		public string ExpressionString { get; set; }
	}
	
	/// <summary>
	/// A set of actions that Amazon Lex should run if none of the other conditions are met.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefaultConditionalBranch
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextStep")]
		public DialogState NextStep { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public ResponseSpecification Response { get; set; }
	}
	
	/// <summary>
	/// Provides information for updating the user on the progress of fulfilling an intent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FulfillmentUpdatesSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startResponse")]
		public FulfillmentStartResponseSpecification StartResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateResponse")]
		public FulfillmentUpdateResponseSpecification UpdateResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutInSeconds")]
		public System.Nullable<System.Int32> TimeoutInSeconds { get; set; }
	}
	
	/// <summary>
	/// Provides settings for a message that is sent to the user when a fulfillment Lambda function starts running.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FulfillmentStartResponseSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delayInSeconds")]
		public int DelayInSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageGroups")]
		public MessageGroup[] MessageGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowInterrupt")]
		public System.Nullable<System.Boolean> AllowInterrupt { get; set; }
	}
	
	/// <summary>
	/// Provides settings for a message that is sent periodically to the user while a fulfillment Lambda function is running.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FulfillmentUpdateResponseSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequencyInSeconds")]
		public int FrequencyInSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageGroups")]
		public MessageGroup[] MessageGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowInterrupt")]
		public System.Nullable<System.Boolean> AllowInterrupt { get; set; }
	}
	
	/// <summary>
	/// Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentConfirmationSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="promptSpecification")]
		public PromptSpecification PromptSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="declinationResponse")]
		public ResponseSpecification DeclinationResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmationResponse")]
		public ResponseSpecification ConfirmationResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationNextStep")]
		public DialogState ConfirmationNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationConditional")]
		public ConditionalSpecification ConfirmationConditional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="declinationNextStep")]
		public DialogState DeclinationNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="declinationConditional")]
		public ConditionalSpecification DeclinationConditional { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureResponse")]
		public ResponseSpecification FailureResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureNextStep")]
		public DialogState FailureNextStep { get; set; }
		
		/// <summary>
		/// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureConditional")]
		public ConditionalSpecification FailureConditional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeHook")]
		public DialogCodeHookInvocationSetting CodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elicitationCodeHook")]
		public ElicitationCodeHookInvocationSetting ElicitationCodeHook { get; set; }
	}
	
	/// <summary>
	/// Specifies a list of message groups that Amazon Lex sends to a user to elicit a response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PromptSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageGroups")]
		public MessageGroup[] MessageGroups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxRetries")]
		public int MaxRetries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowInterrupt")]
		public System.Nullable<System.Boolean> AllowInterrupt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageSelectionStrategy")]
		public MessageSelectionStrategy MessageSelectionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="promptAttemptsSpecification")]
		public PromptAttemptsSpecificationMap PromptAttemptsSpecification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageSelectionStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Random = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ordered = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PromptAttemptsSpecificationMap
	{
	}
	
	/// <summary>
	/// Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DialogCodeHookInvocationSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableCodeHookInvocation")]
		public bool EnableCodeHookInvocation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invocationLabel")]
		public string InvocationLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postCodeHookSpecification")]
		public PostDialogCodeHookInvocationSpecification PostCodeHookSpecification { get; set; }
	}
	
	/// <summary>
	/// Specifies next steps to run after the dialog code hook finishes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostDialogCodeHookInvocationSpecification
	{
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successResponse")]
		public ResponseSpecification SuccessResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successNextStep")]
		public DialogState SuccessNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successConditional")]
		public ConditionalSpecification SuccessConditional { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureResponse")]
		public ResponseSpecification FailureResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureNextStep")]
		public DialogState FailureNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureConditional")]
		public ConditionalSpecification FailureConditional { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutResponse")]
		public ResponseSpecification TimeoutResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutNextStep")]
		public DialogState TimeoutNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutConditional")]
		public ConditionalSpecification TimeoutConditional { get; set; }
	}
	
	/// <summary>
	/// Settings that specify the dialog code hook that is called by Amazon Lex between eliciting slot values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ElicitationCodeHookInvocationSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableCodeHookInvocation")]
		public bool EnableCodeHookInvocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invocationLabel")]
		public string InvocationLabel { get; set; }
	}
	
	/// <summary>
	/// Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentClosingSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="closingResponse")]
		public ResponseSpecification ClosingResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextStep")]
		public DialogState NextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conditional")]
		public ConditionalSpecification Conditional { get; set; }
	}
	
	/// <summary>
	/// A context that must be active for an intent to be selected by Amazon Lex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputContext
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes a session context that is activated when an intent is fulfilled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputContext
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeToLiveInSeconds")]
		public int TimeToLiveInSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turnsToLive")]
		public int TurnsToLive { get; set; }
	}
	
	/// <summary>
	/// Provides configuration information for the <code>AMAZON.KendraSearchIntent</code> intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KendraConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kendraIndex")]
		public string KendraIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryFilterStringEnabled")]
		public System.Nullable<System.Boolean> QueryFilterStringEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryFilterString")]
		public string QueryFilterString { get; set; }
	}
	
	/// <summary>
	/// Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InitialResponseSetting
	{
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialResponse")]
		public ResponseSpecification InitialResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextStep")]
		public DialogState NextStep { get; set; }
		
		/// <summary>
		/// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditional")]
		public ConditionalSpecification Conditional { get; set; }
		
		/// <summary>
		/// Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeHook")]
		public DialogCodeHookInvocationSetting CodeHook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateResourcePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateResourcePolicyStatementResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// The IAM principal that you allowing or denying access to an Amazon Lex action. You must provide a <code>service</code> or an <code>arn</code>, but not both in the same statement. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html"> AWS JSON policy elements: Principal </a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Principal
	{
		
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConditionKeyValueMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSlotResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotId")]
		public string SlotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		public string SlotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueElicitationSetting")]
		public SlotValueElicitationSetting ValueElicitationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="obfuscationSetting")]
		public ObfuscationSetting ObfuscationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentId")]
		public string IntentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multipleValuesSetting")]
		public MultipleValuesSetting MultipleValuesSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSlotSetting")]
		public SubSlotSetting SubSlotSetting { get; set; }
	}
	
	/// <summary>
	/// Specifies the elicitation setting details eliciting a slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotValueElicitationSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultValueSpecification")]
		public SlotDefaultValueSpecification DefaultValueSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotConstraint")]
		public SlotConstraint SlotConstraint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="promptSpecification")]
		public PromptSpecification PromptSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public SampleUtterance[] SampleUtterances { get; set; }
		
		/// <summary>
		/// Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitAndContinueSpecification")]
		public WaitAndContinueSpecification WaitAndContinueSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotCaptureSetting")]
		public SlotCaptureSetting SlotCaptureSetting { get; set; }
	}
	
	/// <summary>
	/// Defines a list of values that Amazon Lex should use as the default value for a slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotDefaultValueSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultValueList")]
		public SlotDefaultValue[] DefaultValueList { get; set; }
	}
	
	/// <summary>
	/// Specifies the default value to use when a user doesn't provide a value for a slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotDefaultValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotConstraint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Optional = 1,
	}
	
	/// <summary>
	/// Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WaitAndContinueSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waitingResponse")]
		public ResponseSpecification WaitingResponse { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="continueResponse")]
		public ResponseSpecification ContinueResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stillWaitingResponse")]
		public StillWaitingResponseSpecification StillWaitingResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
	}
	
	/// <summary>
	/// Defines the messages that Amazon Lex sends to a user to remind them that the bot is waiting for a response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StillWaitingResponseSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageGroups")]
		public MessageGroup[] MessageGroups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequencyInSeconds")]
		public int FrequencyInSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeoutInSeconds")]
		public int TimeoutInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowInterrupt")]
		public System.Nullable<System.Boolean> AllowInterrupt { get; set; }
	}
	
	/// <summary>
	/// Settings used when Amazon Lex successfully captures a slot value from a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotCaptureSetting
	{
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captureResponse")]
		public ResponseSpecification CaptureResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="captureNextStep")]
		public DialogState CaptureNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="captureConditional")]
		public ConditionalSpecification CaptureConditional { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureResponse")]
		public ResponseSpecification FailureResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureNextStep")]
		public DialogState FailureNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureConditional")]
		public ConditionalSpecification FailureConditional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeHook")]
		public DialogCodeHookInvocationSetting CodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elicitationCodeHook")]
		public ElicitationCodeHookInvocationSetting ElicitationCodeHook { get; set; }
	}
	
	/// <summary>
	/// Determines whether Amazon Lex obscures slot values in conversation logs. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObfuscationSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="obfuscationSettingType")]
		public ObfuscationSettingType ObfuscationSettingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ObfuscationSettingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DefaultObfuscation = 1,
	}
	
	/// <summary>
	/// Indicates whether a slot can return multiple values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultipleValuesSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowMultipleValues")]
		public System.Nullable<System.Boolean> AllowMultipleValues { get; set; }
	}
	
	/// <summary>
	/// Specifications for the constituent sub slots and the expression for the composite slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubSlotSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotSpecifications")]
		public SubSlotSpecificationMap SlotSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubSlotSpecificationMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSlotTypeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeName")]
		public string SlotTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeValues")]
		public SlotTypeValue[] SlotTypeValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueSelectionSetting")]
		public SlotValueSelectionSetting ValueSelectionSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalSourceSetting")]
		public ExternalSourceSetting ExternalSourceSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compositeSlotTypeSetting")]
		public CompositeSlotTypeSetting CompositeSlotTypeSetting { get; set; }
	}
	
	/// <summary>
	/// Each slot type can have a set of values. Each <code>SlotTypeValue</code> represents a value that the slot type can take.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotTypeValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="sampleValue")]
		public SampleValue SampleValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="synonyms")]
		public SampleValue[] Synonyms { get; set; }
	}
	
	/// <summary>
	/// Defines one of the values for a slot type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SampleValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Contains settings used by Amazon Lex to select a slot value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotValueSelectionSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resolutionStrategy")]
		public SlotValueResolutionStrategy ResolutionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regexFilter")]
		public SlotValueRegexFilter RegexFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="advancedRecognitionSetting")]
		public AdvancedRecognitionSetting AdvancedRecognitionSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotValueResolutionStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OriginalValue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TopResolution = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Concatenation = 2,
	}
	
	/// <summary>
	/// Provides a regular expression used to validate the value of a slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotValueRegexFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
	}
	
	/// <summary>
	/// Provides settings that enable advanced recognition settings for slot values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvancedRecognitionSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioRecognitionStrategy")]
		public AudioRecognitionStrategy AudioRecognitionStrategy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioRecognitionStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UseSlotValuesAsCustomVocabulary = 0,
	}
	
	/// <summary>
	/// Provides information about the external source of the slot type's definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalSourceSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="grammarSlotTypeSetting")]
		public GrammarSlotTypeSetting GrammarSlotTypeSetting { get; set; }
	}
	
	/// <summary>
	/// Settings requried for a slot type based on a grammar that you provide.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrammarSlotTypeSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public GrammarSlotTypeSource Source { get; set; }
	}
	
	/// <summary>
	/// Describes the Amazon S3 bucket name and location for the grammar that is the source for the slot type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrammarSlotTypeSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3BucketName")]
		public string S3BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3ObjectKey")]
		public string S3ObjectKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
	}
	
	/// <summary>
	/// A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompositeSlotTypeSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="subSlots")]
		public SubSlotTypeComposition[] SubSlots { get; set; }
	}
	
	/// <summary>
	/// Subslot type composition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubSlotTypeComposition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTestSetDiscrepancyReportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testSetDiscrepancyReportId")]
		public string TestSetDiscrepancyReportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetId")]
		public string TestSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TestSetDiscrepancyReportResourceTarget Target { get; set; }
	}
	
	/// <summary>
	/// Contains information about the resource used for the test set discrepancy report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetDiscrepancyReportResourceTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasTarget")]
		public TestSetDiscrepancyReportBotAliasTarget BotAliasTarget { get; set; }
	}
	
	/// <summary>
	/// Contains information about the bot alias used for the test set discrepancy report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetDiscrepancyReportBotAliasTarget
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUploadUrlResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="importId")]
		public string ImportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uploadUrl")]
		public string UploadUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botStatus")]
		public BotStatus BotStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotAliasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasStatus")]
		public BotAliasStatus BotAliasStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotLocaleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleStatus")]
		public BotLocaleStatus BotLocaleStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botStatus")]
		public BotStatus BotStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteCustomVocabularyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customVocabularyStatus")]
		public CustomVocabularyStatus CustomVocabularyStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomVocabularyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exporting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Importing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteExportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="exportId")]
		public string ExportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportStatus")]
		public ExportStatus ExportStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteImportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="importId")]
		public string ImportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importStatus")]
		public ExportStatus ImportStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcePolicyStatementResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUtterancesResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBotResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPrivacy")]
		public DataPrivacy DataPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		public System.Nullable<System.Int32> IdleSessionTTLInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botStatus")]
		public BotStatus BotStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botType")]
		public BotType BotType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botMembers")]
		public BotMember[] BotMembers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReasons")]
		public string[] FailureReasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBotAliasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasName")]
		public string BotAliasName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasLocaleSettings")]
		public BotAliasLocaleSettingsMap BotAliasLocaleSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLogSettings")]
		public ConversationLogSettings ConversationLogSettings { get; set; }
		
		/// <summary>
		/// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentimentAnalysisSettings")]
		public SentimentAnalysisSettings SentimentAnalysisSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasHistoryEvents")]
		public BotAliasHistoryEvent[] BotAliasHistoryEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasStatus")]
		public BotAliasStatus BotAliasStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentBotNetworks")]
		public ParentBotNetwork[] ParentBotNetworks { get; set; }
	}
	
	/// <summary>
	/// Provides a record of an event that affects a bot alias. For example, when the version of a bot that the alias points to changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotAliasHistoryEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.DateTimeOffset StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.DateTimeOffset EndDate { get; set; }
	}
	
	/// <summary>
	/// A network of bots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParentBotNetwork
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBotLocaleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeName")]
		public string LocaleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		public System.Nullable<System.Double> NluIntentConfidenceThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voiceSettings")]
		public VoiceSettings VoiceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentsCount")]
		public System.Nullable<System.Int32> IntentsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypesCount")]
		public System.Nullable<System.Int32> SlotTypesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleStatus")]
		public BotLocaleStatus BotLocaleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReasons")]
		public string[] FailureReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastBuildSubmittedDateTime")]
		public System.DateTimeOffset LastBuildSubmittedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleHistoryEvents")]
		public BotLocaleHistoryEvent[] BotLocaleHistoryEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recommendedActions")]
		public string[] RecommendedActions { get; set; }
	}
	
	/// <summary>
	/// Provides information about an event that occurred affecting the bot locale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotLocaleHistoryEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event")]
		public string Event { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.DateTimeOffset EventDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBotRecommendationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationStatus")]
		public BotRecommendationStatus BotRecommendationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationId")]
		public string BotRecommendationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReasons")]
		public string[] FailureReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transcriptSourceSetting")]
		public TranscriptSourceSetting TranscriptSourceSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionSetting")]
		public EncryptionSetting EncryptionSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationResults")]
		public BotRecommendationResults BotRecommendationResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotRecommendationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Downloading = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 8,
	}
	
	/// <summary>
	/// Indicates the setting of the location where the transcript is stored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TranscriptSourceSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketTranscriptSource")]
		public S3BucketTranscriptSource S3BucketTranscriptSource { get; set; }
	}
	
	/// <summary>
	/// The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3BucketTranscriptSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3BucketName")]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pathFormat")]
		public PathFormat PathFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transcriptFormat")]
		public TranscriptFormat TranscriptFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transcriptFilter")]
		public TranscriptFilter TranscriptFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
	}
	
	/// <summary>
	/// The object that contains a path format that will be applied when Amazon Lex reads the transcript file in the bucket you provide. Specify this object if you only want Lex to read a subset of files in your Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathFormat
	{
		
		[System.Runtime.Serialization.DataMember(Name="objectPrefixes")]
		public string[] ObjectPrefixes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TranscriptFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lex = 0,
	}
	
	/// <summary>
	/// The object representing the filter that Amazon Lex will use to select the appropriate transcript.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TranscriptFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="lexTranscriptFilter")]
		public LexTranscriptFilter LexTranscriptFilter { get; set; }
	}
	
	/// <summary>
	/// The object that contains transcript filter details that are associated with a bot recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LexTranscriptFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateRangeFilter")]
		public DateRangeFilter DateRangeFilter { get; set; }
	}
	
	/// <summary>
	/// The object used for specifying the data range that the customer wants Amazon Lex to read through in the input transcripts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateRangeFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
	}
	
	/// <summary>
	/// The object representing the passwords that were used to encrypt the data related to the bot recommendation, as well as the KMS key ARN used to encrypt the associated metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleExportPassword")]
		public string BotLocaleExportPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedTranscriptsPassword")]
		public string AssociatedTranscriptsPassword { get; set; }
	}
	
	/// <summary>
	/// The object representing the URL of the bot definition, the URL of the associated transcript, and a statistical summary of the bot recommendation results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotRecommendationResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleExportUrl")]
		public string BotLocaleExportUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedTranscriptsUrl")]
		public string AssociatedTranscriptsUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public BotRecommendationResultStatistics Statistics { get; set; }
	}
	
	/// <summary>
	/// A statistical summary of the bot recommendation results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotRecommendationResultStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="intents")]
		public IntentStatistics Intents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypes")]
		public SlotTypeStatistics SlotTypes { get; set; }
	}
	
	/// <summary>
	/// The object that contains the statistical summary of recommended intents associated with the bot recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="discoveredIntentCount")]
		public System.Nullable<System.Int32> DiscoveredIntentCount { get; set; }
	}
	
	/// <summary>
	/// The object that contains the statistical summary of the recommended slot type associated with the bot recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotTypeStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="discoveredSlotTypeCount")]
		public System.Nullable<System.Int32> DiscoveredSlotTypeCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBotVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPrivacy")]
		public DataPrivacy DataPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		public System.Nullable<System.Int32> IdleSessionTTLInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botStatus")]
		public BotStatus BotStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReasons")]
		public string[] FailureReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentBotNetworks")]
		public ParentBotNetwork[] ParentBotNetworks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botType")]
		public BotType BotType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botMembers")]
		public BotMember[] BotMembers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeCustomVocabularyMetadataResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customVocabularyStatus")]
		public CustomVocabularyStatus CustomVocabularyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeExportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="exportId")]
		public string ExportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceSpecification")]
		public ExportResourceSpecification ResourceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileFormat")]
		public ImportExportFileFormat FileFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportStatus")]
		public ExportStatus ExportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReasons")]
		public string[] FailureReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeImportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="importId")]
		public string ImportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceSpecification")]
		public ImportResourceSpecification ResourceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importedResourceId")]
		public string ImportedResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importedResourceName")]
		public string ImportedResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeStrategy")]
		public MergeStrategy MergeStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importStatus")]
		public ExportStatus ImportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReasons")]
		public string[] FailureReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	/// <summary>
	/// Provides information about the bot or bot locale that you want to import. You can specify the <code>botImportSpecification</code> or the <code>botLocaleImportSpecification</code>, but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportResourceSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="botImportSpecification")]
		public BotImportSpecification BotImportSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleImportSpecification")]
		public BotLocaleImportSpecification BotLocaleImportSpecification { get; set; }
		
		/// <summary>
		/// Provides the parameters required for importing a custom vocabulary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customVocabularyImportSpecification")]
		public CustomVocabularyImportSpecification CustomVocabularyImportSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetImportResourceSpecification")]
		public TestSetImportResourceSpecification TestSetImportResourceSpecification { get; set; }
	}
	
	/// <summary>
	/// Provides the bot parameters required for importing a bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotImportSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataPrivacy")]
		public DataPrivacy DataPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		public System.Nullable<System.Int32> IdleSessionTTLInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botTags")]
		public TagMap BotTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testBotAliasTags")]
		public TagMap TestBotAliasTags { get; set; }
	}
	
	/// <summary>
	/// Provides the bot locale parameters required for importing a bot locale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotLocaleImportSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		public System.Nullable<System.Double> NluIntentConfidenceThreshold { get; set; }
		
		/// <summary>
		/// Defines settings for using an Amazon Polly voice to communicate with a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voiceSettings")]
		public VoiceSettings VoiceSettings { get; set; }
	}
	
	/// <summary>
	/// Provides the parameters required for importing a custom vocabulary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomVocabularyImportSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	/// <summary>
	/// Contains information about the test set that is imported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetImportResourceSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		public string TestSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageLocation")]
		public TestSetStorageLocation StorageLocation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="importInputLocation")]
		public TestSetImportInputLocation ImportInputLocation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modality")]
		public TestSetModality Modality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetTags")]
		public TagMap TestSetTags { get; set; }
	}
	
	/// <summary>
	/// Contains information about the location in which the test set is stored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetStorageLocation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3BucketName")]
		public string S3BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Path")]
		public string S3Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
	}
	
	/// <summary>
	/// Contains information about the Amazon S3 location from which the test set is imported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetImportInputLocation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3BucketName")]
		public string S3BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Path")]
		public string S3Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestSetModality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Audio = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MergeStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Overwrite = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailOnConflict = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Append = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeIntentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="intentId")]
		public string IntentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public SampleUtterance[] SampleUtterances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public DialogCodeHookSettings DialogCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentCodeHook")]
		public FulfillmentCodeHookSettings FulfillmentCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotPriorities")]
		public SlotPriority[] SlotPriorities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentConfirmationSetting")]
		public IntentConfirmationSetting IntentConfirmationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentClosingSetting")]
		public IntentClosingSetting IntentClosingSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		public InputContext[] InputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		public OutputContext[] OutputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public KendraConfiguration KendraConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initialResponseSetting")]
		public InitialResponseSetting InitialResponseSetting { get; set; }
	}
	
	/// <summary>
	/// Sets the priority that Amazon Lex should use when eliciting slot values from a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotPriority
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public int Priority { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotId")]
		public string SlotId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeResourcePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSlotResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotId")]
		public string SlotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		public string SlotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueElicitationSetting")]
		public SlotValueElicitationSetting ValueElicitationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="obfuscationSetting")]
		public ObfuscationSetting ObfuscationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentId")]
		public string IntentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multipleValuesSetting")]
		public MultipleValuesSetting MultipleValuesSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSlotSetting")]
		public SubSlotSetting SubSlotSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSlotTypeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeName")]
		public string SlotTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeValues")]
		public SlotTypeValue[] SlotTypeValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueSelectionSetting")]
		public SlotValueSelectionSetting ValueSelectionSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Provides information about the external source of the slot type's definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalSourceSetting")]
		public ExternalSourceSetting ExternalSourceSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compositeSlotTypeSetting")]
		public CompositeSlotTypeSetting CompositeSlotTypeSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTestExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testExecutionId")]
		public string TestExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testExecutionStatus")]
		public TestExecutionStatus TestExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetId")]
		public string TestSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		public string TestSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TestExecutionTarget Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiMode")]
		public TestExecutionApiMode ApiMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testExecutionModality")]
		public TestSetModality TestExecutionModality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReasons")]
		public string[] FailureReasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Waiting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 6,
	}
	
	/// <summary>
	/// Contains information about the bot used for the test execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestExecutionTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasTarget")]
		public BotAliasTestExecutionTarget BotAliasTarget { get; set; }
	}
	
	/// <summary>
	/// The target Amazon S3 location for the test set execution using a bot alias.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotAliasTestExecutionTarget
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestExecutionApiMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Streaming = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonStreaming = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTestSetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testSetId")]
		public string TestSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		public string TestSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modality")]
		public TestSetModality Modality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TestSetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numTurns")]
		public System.Nullable<System.Int32> NumTurns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageLocation")]
		public TestSetStorageLocation StorageLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestSetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Importing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingAnnotation = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ValidationError = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTestSetDiscrepancyReportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testSetDiscrepancyReportId")]
		public string TestSetDiscrepancyReportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetId")]
		public string TestSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TestSetDiscrepancyReportResourceTarget Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetDiscrepancyReportStatus")]
		public TestSetDiscrepancyReportStatus TestSetDiscrepancyReportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDataTime")]
		public System.DateTimeOffset LastUpdatedDataTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetDiscrepancyTopErrors")]
		public TestSetDiscrepancyErrors TestSetDiscrepancyTopErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetDiscrepancyRawOutputUrl")]
		public string TestSetDiscrepancyRawOutputUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReasons")]
		public string[] FailureReasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestSetDiscrepancyReportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	/// <summary>
	/// Contains details about the errors in the test set discrepancy report
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetDiscrepancyErrors
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentDiscrepancies")]
		public TestSetIntentDiscrepancyItem[] IntentDiscrepancies { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotDiscrepancies")]
		public TestSetSlotDiscrepancyItem[] SlotDiscrepancies { get; set; }
	}
	
	/// <summary>
	/// Contains information about discrepancy in an intent information between the test set and the bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetIntentDiscrepancyItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Contains information about discrepancy in a slot information between the test set and the bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetSlotDiscrepancyItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		public string SlotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTestSetGenerationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testSetGenerationId")]
		public string TestSetGenerationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetGenerationStatus")]
		public TestSetGenerationStatus TestSetGenerationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReasons")]
		public string[] FailureReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetId")]
		public string TestSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		public string TestSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageLocation")]
		public TestSetStorageLocation StorageLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generationDataSource")]
		public TestSetGenerationDataSource GenerationDataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestSetGenerationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Generating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 3,
	}
	
	/// <summary>
	/// Contains information about the data source from which the test set is generated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetGenerationDataSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="conversationLogsDataSource")]
		public ConversationLogsDataSource ConversationLogsDataSource { get; set; }
	}
	
	/// <summary>
	/// The data source that uses conversation logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationLogsDataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ConversationLogsDataSourceFilterBy Filter { get; set; }
	}
	
	/// <summary>
	/// The selected data source to filter the conversation log.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationLogsDataSourceFilterBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputMode")]
		public ConversationLogsInputModeFilter InputMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConversationLogsInputModeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Speech = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Text = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTestExecutionArtifactsUrlResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testExecutionId")]
		public string TestExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloadArtifactsUrl")]
		public string DownloadArtifactsUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAggregatedUtterancesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationDuration")]
		public UtteranceAggregationDuration AggregationDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationWindowStartTime")]
		public System.DateTimeOffset AggregationWindowStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationWindowEndTime")]
		public System.DateTimeOffset AggregationWindowEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationLastRefreshedDateTime")]
		public System.DateTimeOffset AggregationLastRefreshedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregatedUtterancesSummaries")]
		public AggregatedUtterancesSummary[] AggregatedUtterancesSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides parameters for setting the time window and duration for aggregating utterance data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UtteranceAggregationDuration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relativeAggregationDuration")]
		public RelativeAggregationDuration RelativeAggregationDuration { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies the time window that utterance statistics are returned for. The time window is always relative to the last time that the that utterances were aggregated. For example, if the <code>ListAggregatedUtterances</code> operation is called at 1600, the time window is set to 1 hour, and the last refresh time was 1530, only utterances made between 1430 and 1530 are returned.</p> <p>You can choose the time window that statistics should be returned for.</p> <ul> <li> <p> <b>Hours</b> - You can request utterance statistics for 1, 3, 6, 12, or 24 hour time windows. Statistics are refreshed every half hour for 1 hour time windows, and hourly for the other time windows.</p> </li> <li> <p> <b>Days</b> - You can request utterance statistics for 3 days. Statistics are refreshed every 6 hours.</p> </li> <li> <p> <b>Weeks</b> - You can see statistics for one or two weeks. Statistics are refreshed every 12 hours for one week time windows, and once per day for two week time windows.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelativeAggregationDuration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeDimension")]
		public TimeDimension TimeDimension { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeValue")]
		public int TimeValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TimeDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hours = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Days = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weeks = 2,
	}
	
	/// <summary>
	/// Provides summary information for aggregated utterances. The <code>ListAggregatedUtterances</code> operations combines all instances of the same utterance into a single aggregated summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AggregatedUtterancesSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="utterance")]
		public string Utterance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hitCount")]
		public System.Nullable<System.Int32> HitCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="missedCount")]
		public System.Nullable<System.Int32> MissedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utteranceFirstRecordedInAggregationDuration")]
		public System.DateTimeOffset UtteranceFirstRecordedInAggregationDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utteranceLastRecordedInAggregationDuration")]
		public System.DateTimeOffset UtteranceLastRecordedInAggregationDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containsDataFromDeletedResources")]
		public System.Nullable<System.Boolean> ContainsDataFromDeletedResources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AggregatedUtterancesSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HitCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MissedCount = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	/// <summary>
	/// Filters responses returned by the <code>ListAggregatedUtterances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AggregatedUtterancesFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AggregatedUtterancesFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AggregatedUtterancesFilterOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AggregatedUtterancesFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Utterance = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AggregatedUtterancesFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBotAliasesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasSummaries")]
		public BotAliasSummary[] BotAliasSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
	}
	
	/// <summary>
	/// Summary information about bot aliases returned from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotAliases.html">ListBotAliases</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotAliasSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasName")]
		public string BotAliasName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasStatus")]
		public BotAliasStatus BotAliasStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBotLocalesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleSummaries")]
		public BotLocaleSummary[] BotLocaleSummaries { get; set; }
	}
	
	/// <summary>
	/// Summary information about bot locales returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotLocales.html">ListBotLocales</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotLocaleSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeName")]
		public string LocaleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleStatus")]
		public BotLocaleStatus BotLocaleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastBuildSubmittedDateTime")]
		public System.DateTimeOffset LastBuildSubmittedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotLocaleSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotLocaleName = 0,
	}
	
	/// <summary>
	/// Filters responses returned by the <code>ListBotLocales</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotLocaleFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public BotLocaleSortAttribute Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AggregatedUtterancesFilterOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBotRecommendationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationSummaries")]
		public BotRecommendationSummary[] BotRecommendationSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of the bot recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotRecommendationSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botRecommendationStatus")]
		public BotRecommendationStatus BotRecommendationStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botRecommendationId")]
		public string BotRecommendationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBotVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersionSummaries")]
		public BotVersionSummary[] BotVersionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a bot version returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotVersions.html">ListBotVersions</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotVersionSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botStatus")]
		public BotStatus BotStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotVersionSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotVersion = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBotsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botSummaries")]
		public BotSummary[] BotSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a bot returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBots.html">ListBots</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botStatus")]
		public BotStatus BotStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestBotVersion")]
		public string LatestBotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botType")]
		public BotType BotType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotName = 0,
	}
	
	/// <summary>
	/// Filters the responses returned by the <code>ListBots</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public BotFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public BotFilterOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotType = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBuiltInIntentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="builtInIntentSummaries")]
		public BuiltInIntentSummary[] BuiltInIntentSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about a built-in intent for the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBuiltInIntents.html"> ListBuiltInIntents </a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuiltInIntentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="intentSignature")]
		public string IntentSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuiltInIntentSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentSignature = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBuiltInSlotTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="builtInSlotTypeSummaries")]
		public BuiltInSlotTypeSummary[] BuiltInSlotTypeSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about a built-in slot type for the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBuiltInSlotTypes.html"> ListBuiltInSlotTypes </a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuiltInSlotTypeSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeSignature")]
		public string SlotTypeSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuiltInSlotTypeSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SlotTypeSignature = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCustomVocabularyItemsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customVocabularyItems")]
		public CustomVocabularyItem[] CustomVocabularyItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExportsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportSummaries")]
		public ExportSummary[] ExportSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about an export in an export list. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="exportId")]
		public string ExportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceSpecification")]
		public ExportResourceSpecification ResourceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileFormat")]
		public ImportExportFileFormat FileFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportStatus")]
		public ExportStatus ExportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExportSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastUpdatedDateTime = 0,
	}
	
	/// <summary>
	/// Filters the response form the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListExports.html">ListExports</a> operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public ExportFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AggregatedUtterancesFilterOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExportFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportResourceType = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListImportsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importSummaries")]
		public ImportSummary[] ImportSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about an import in an import list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="importId")]
		public string ImportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importedResourceId")]
		public string ImportedResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importedResourceName")]
		public string ImportedResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importStatus")]
		public ExportStatus ImportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeStrategy")]
		public MergeStrategy MergeStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importedResourceType")]
		public ImportResourceType ImportedResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotLocale = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomVocabulary = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TestSet = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastUpdatedDateTime = 0,
	}
	
	/// <summary>
	/// Filters the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListImports.html">ListImports</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public ImportFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AggregatedUtterancesFilterOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImportResourceType = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIntentMetricsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AnalyticsIntentResult[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object containing the results for the intent metrics you requested and the bin and/or group(s) they refer to, if applicable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="binKeys")]
		public AnalyticsBinKey[] BinKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupByKeys")]
		public AnalyticsIntentGroupByKey[] GroupByKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricsResults")]
		public AnalyticsIntentMetricResult[] MetricsResults { get; set; }
	}
	
	/// <summary>
	/// An object containing the criterion by which to bin the results and the value that defines that bin.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsBinKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsBinByName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsBinByName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConversationStartTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UtteranceTimestamp = 1,
	}
	
	/// <summary>
	/// Contains the category by which the intent analytics were grouped and a member of that category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentGroupByKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsIntentField Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsIntentField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentEndState = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentLevel = 2,
	}
	
	/// <summary>
	/// An object containing the results for the intent metric you requested.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentMetricResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsIntentMetricName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistic")]
		public AnalyticsMetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsIntentMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Switched = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dropped = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsMetricStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Avg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Max = 2,
	}
	
	/// <summary>
	/// Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the intents in the bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentMetric
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsIntentMetricName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistic")]
		public AnalyticsMetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	/// <summary>
	/// Contains the time metric, interval, and method by which to bin the analytics data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsBinBySpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsBinByName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public AnalyticsInterval Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneHour = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneDay = 1,
	}
	
	/// <summary>
	/// Contains the category by which to group the intents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentGroupBySpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsIntentField Name { get; set; }
	}
	
	/// <summary>
	/// <p>Contains fields describing a condition by which to filter the intents. The expression may be understood as <code>name</code> <code>operator</code> <code>values</code>. For example:</p> <ul> <li> <p> <code>IntentName CO Book</code> – The intent name contains the string "Book."</p> </li> <li> <p> <code>BotVersion EQ 2</code> – The bot version is equal to two.</p> </li> </ul> <p>The operators that each filter supports are listed below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>IntentName</code> – <code>EQ</code>, <code>CO</code>.</p> </li> <li> <p> <code>IntentEndState</code> – <code>EQ</code>, <code>CO</code>.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsIntentFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AnalyticsFilterOperator Operator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsIntentFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotAliasId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotVersion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocaleId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Modality = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Channel = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SessionId = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OriginatingRequestId = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentName = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentEndState = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIntentPathsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodeSummaries")]
		public AnalyticsIntentNodeSummary[] NodeSummaries { get; set; }
	}
	
	/// <summary>
	/// An object containing information about the requested path.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentNodeSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentPath")]
		public string IntentPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentCount")]
		public System.Nullable<System.Int32> IntentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentLevel")]
		public System.Nullable<System.Int32> IntentLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeType")]
		public AnalyticsNodeType NodeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsNodeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inner = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exit = 1,
	}
	
	/// <summary>
	/// <p>Contains fields describing a condition by which to filter the paths. The expression may be understood as <code>name</code> <code>operator</code> <code>values</code>. For example:</p> <ul> <li> <p> <code>LocaleId EQ en</code> – The locale is "en".</p> </li> <li> <p> <code>BotVersion EQ 2</code> – The bot version is equal to two.</p> </li> </ul> <p>The operators that each filter supports are listed below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsPathFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsCommonFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AnalyticsFilterOperator Operator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsCommonFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotAliasId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotVersion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocaleId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Modality = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Channel = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIntentStageMetricsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AnalyticsIntentStageResult[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object containing the results for the intent stage metrics you requested and the bin and/or group they refer to, if applicable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentStageResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="binKeys")]
		public AnalyticsBinKey[] BinKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupByKeys")]
		public AnalyticsIntentStageGroupByKey[] GroupByKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricsResults")]
		public AnalyticsIntentStageMetricResult[] MetricsResults { get; set; }
	}
	
	/// <summary>
	/// Contains the category by which the intent stage analytics and the values for that category were grouped.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentStageGroupByKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsIntentStageField Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsIntentStageField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentStageName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SwitchedToIntent = 1,
	}
	
	/// <summary>
	/// An object containing the results for an intent stage metric you requested.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentStageMetricResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsIntentStageMetricName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistic")]
		public AnalyticsMetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsIntentStageMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dropped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Retry = 4,
	}
	
	/// <summary>
	/// Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the intent stages across the user sessions with the bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentStageMetric
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsIntentStageMetricName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistic")]
		public AnalyticsMetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	/// <summary>
	/// Contains the category by which to group the intent stages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentStageGroupBySpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsIntentStageField Name { get; set; }
	}
	
	/// <summary>
	/// <p>Contains fields describing a condition by which to filter the intent stages. The expression may be understood as <code>name</code> <code>operator</code> <code>values</code>. For example:</p> <ul> <li> <p> <code>IntentName CO Book</code> – The intent name contains the string "Book."</p> </li> <li> <p> <code>BotVersion EQ 2</code> – The bot version is equal to two.</p> </li> </ul> <p>The operators that each filter supports are listed below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>IntentName</code> – <code>EQ</code>, <code>CO</code>.</p> </li> <li> <p> <code>IntentStageName</code> – <code>EQ</code>, <code>CO</code>.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsIntentStageFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsIntentStageFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AnalyticsFilterOperator Operator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsIntentStageFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotAliasId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotVersion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocaleId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Modality = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Channel = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SessionId = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OriginatingRequestId = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentName = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentStageName = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIntentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentSummaries")]
		public IntentSummary[] IntentSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about an intent returned by the <code>ListIntents</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="intentId")]
		public string IntentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		public InputContext[] InputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		public OutputContext[] OutputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntentSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastUpdatedDateTime = 1,
	}
	
	/// <summary>
	/// Filters the response from the <code>ListIntents</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public IntentFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AggregatedUtterancesFilterOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntentFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentName = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecommendedIntentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationId")]
		public string BotRecommendationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summaryList")]
		public RecommendedIntentSummary[] SummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that contains a summary of a recommended intent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecommendedIntentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="intentId")]
		public string IntentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterancesCount")]
		public System.Nullable<System.Int32> SampleUtterancesCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSessionAnalyticsDataResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessions")]
		public SessionSpecification[] Sessions { get; set; }
	}
	
	/// <summary>
	/// An object containing information about a specific session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SessionSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationStartTime")]
		public System.DateTimeOffset ConversationStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationEndTime")]
		public System.DateTimeOffset ConversationEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationDurationSeconds")]
		public System.Nullable<System.Int32> ConversationDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationEndState")]
		public ConversationEndState ConversationEndState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public AnalyticsModality Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfTurns")]
		public System.Nullable<System.Int32> NumberOfTurns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invokedIntentSamples")]
		public InvokedIntentSample[] InvokedIntentSamples { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originatingRequestId")]
		public string OriginatingRequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConversationEndState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dropped = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsModality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Speech = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Text = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DTMF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MultiMode = 3,
	}
	
	/// <summary>
	/// An object containing the name of an intent that was invoked.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvokedIntentSample
	{
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsSessionSortByName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConversationStartTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberOfTurns = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Duration = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	/// <summary>
	/// <p>Contains fields describing a condition by which to filter the sessions. The expression may be understood as <code>name</code> <code>operator</code> <code>values</code>. For example:</p> <ul> <li> <p> <code>LocaleId EQ en</code> – The locale is "en".</p> </li> <li> <p> <code>Duration GT 200</code> – The duration is greater than 200 seconds.</p> </li> </ul> <p>The operators that each filter supports are listed below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Duration</code> – <code>EQ</code>, <code>GT</code>, <code>LT</code>.</p> </li> <li> <p> <code>conversationEndState</code> – <code>EQ</code>, <code>CO</code>.</p> </li> <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>IntentPath</code> – <code>EQ</code>.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsSessionFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsSessionFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AnalyticsFilterOperator Operator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsSessionFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotAliasId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotVersion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocaleId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Modality = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Channel = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Duration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConversationEndState = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SessionId = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OriginatingRequestId = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentPath = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSessionMetricsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AnalyticsSessionResult[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object containing the results for the session metrics you requested and the bin and/or group(s) they refer to, if applicable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsSessionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="binKeys")]
		public AnalyticsBinKey[] BinKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupByKeys")]
		public AnalyticsSessionGroupByKey[] GroupByKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricsResults")]
		public AnalyticsSessionMetricResult[] MetricsResults { get; set; }
	}
	
	/// <summary>
	/// Contains the category by which the session analytics were grouped and a member of that category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsSessionGroupByKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsSessionField Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsSessionField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConversationEndState = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocaleId = 1,
	}
	
	/// <summary>
	/// An object containing the results for a session metric you requested.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsSessionMetricResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsSessionMetricName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistic")]
		public AnalyticsMetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsSessionMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dropped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Duration = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TurnsPerConversation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Concurrency = 6,
	}
	
	/// <summary>
	/// Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the user sessions with the bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsSessionMetric
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsSessionMetricName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistic")]
		public AnalyticsMetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	/// <summary>
	/// Contains the category by which to group the sessions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsSessionGroupBySpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsSessionField Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSlotTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeSummaries")]
		public SlotTypeSummary[] SlotTypeSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about a slot type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotTypeSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeName")]
		public string SlotTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeCategory")]
		public SlotTypeCategory SlotTypeCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotTypeCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Extended = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExternalGrammar = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Composite = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotTypeSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SlotTypeName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastUpdatedDateTime = 1,
	}
	
	/// <summary>
	/// Filters the response from the <code>ListSlotTypes</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotTypeFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public SlotTypeFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AggregatedUtterancesFilterOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotTypeFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SlotTypeName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExternalSourceType = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSlotsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentId")]
		public string IntentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotSummaries")]
		public SlotSummary[] SlotSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a slot, a value that the bot elicits from the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotId")]
		public string SlotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		public string SlotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotConstraint")]
		public SlotConstraint SlotConstraint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueElicitationPromptSpecification")]
		public PromptSpecification ValueElicitationPromptSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SlotName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastUpdatedDateTime = 1,
	}
	
	/// <summary>
	/// Filters the response from the <code>ListSlots</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public SlotFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AggregatedUtterancesFilterOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SlotName = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTestExecutionResultItemsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testExecutionResults")]
		public TestExecutionResultItems TestExecutionResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains the results of the test execution, grouped by type of results. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/test-results-details-test-set.html">Test result details"&gt;Test results details</a> for details about different types of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestExecutionResultItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="overallTestResults")]
		public OverallTestResults OverallTestResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLevelTestResults")]
		public ConversationLevelTestResults ConversationLevelTestResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentClassificationTestResults")]
		public IntentClassificationTestResults IntentClassificationTestResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentLevelSlotResolutionTestResults")]
		public IntentLevelSlotResolutionTestResults IntentLevelSlotResolutionTestResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utteranceLevelTestResults")]
		public UtteranceLevelTestResults UtteranceLevelTestResults { get; set; }
	}
	
	/// <summary>
	/// Information about the overall test results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OverallTestResults
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public OverallTestResultItem[] Items { get; set; }
	}
	
	/// <summary>
	/// Information about the overall results for a test execution result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OverallTestResultItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="multiTurnConversation")]
		public bool MultiTurnConversation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalResultCount")]
		public int TotalResultCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speechTranscriptionResultCounts")]
		public TestResultMatchStatusCountMap SpeechTranscriptionResultCounts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endToEndResultCounts")]
		public TestResultMatchStatusCountMap EndToEndResultCounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestResultMatchStatusCountMap
	{
	}
	
	/// <summary>
	/// The test set results data at the conversation level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationLevelTestResults
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ConversationLevelTestResultItem[] Items { get; set; }
	}
	
	/// <summary>
	/// The test result evaluation item at the conversation level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationLevelTestResultItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="conversationId")]
		public string ConversationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endToEndResult")]
		public TestResultMatchStatus EndToEndResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speechTranscriptionResult")]
		public TestResultMatchStatus SpeechTranscriptionResult { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentClassificationResults")]
		public ConversationLevelIntentClassificationResultItem[] IntentClassificationResults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotResolutionResults")]
		public ConversationLevelSlotResolutionResultItem[] SlotResolutionResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestResultMatchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Matched = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mismatched = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExecutionError = 2,
	}
	
	/// <summary>
	/// The item listing the evaluation of intent level success or failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationLevelIntentClassificationResultItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchResult")]
		public TestResultMatchStatus MatchResult { get; set; }
	}
	
	/// <summary>
	/// The slots used for the slot resolution in the conversation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationLevelSlotResolutionResultItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		public string SlotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchResult")]
		public TestResultMatchStatus MatchResult { get; set; }
	}
	
	/// <summary>
	/// Information for the results of the intent classification test. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentClassificationTestResults
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public IntentClassificationTestResultItem[] Items { get; set; }
	}
	
	/// <summary>
	/// Information for an intent that is classified by the test workbench.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentClassificationTestResultItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="multiTurnConversation")]
		public bool MultiTurnConversation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resultCounts")]
		public IntentClassificationTestResultItemCounts ResultCounts { get; set; }
	}
	
	/// <summary>
	/// The number of items in the intent classification test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentClassificationTestResultItemCounts
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalResultCount")]
		public int TotalResultCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speechTranscriptionResultCounts")]
		public TestResultMatchStatusCountMap SpeechTranscriptionResultCounts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentMatchResultCounts")]
		public TestResultMatchStatusCountMap IntentMatchResultCounts { get; set; }
	}
	
	/// <summary>
	/// Indicates the success or failure of slots at the intent level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentLevelSlotResolutionTestResults
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public IntentLevelSlotResolutionTestResultItem[] Items { get; set; }
	}
	
	/// <summary>
	/// Information about intent-level slot resolution in a test result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentLevelSlotResolutionTestResultItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="multiTurnConversation")]
		public bool MultiTurnConversation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotResolutionResults")]
		public SlotResolutionTestResultItem[] SlotResolutionResults { get; set; }
	}
	
	/// <summary>
	/// Information about the success and failure rate of slot resolution in the results of a test execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotResolutionTestResultItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		public string SlotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resultCounts")]
		public SlotResolutionTestResultItemCounts ResultCounts { get; set; }
	}
	
	/// <summary>
	/// Information about the counts for a slot resolution in the results of a test execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotResolutionTestResultItemCounts
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalResultCount")]
		public int TotalResultCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speechTranscriptionResultCounts")]
		public TestResultMatchStatusCountMap SpeechTranscriptionResultCounts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotMatchResultCounts")]
		public TestResultMatchStatusCountMap SlotMatchResultCounts { get; set; }
	}
	
	/// <summary>
	/// Contains information about the utterances in the results of the test set execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UtteranceLevelTestResults
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UtteranceLevelTestResultItem[] Items { get; set; }
	}
	
	/// <summary>
	/// Contains information about multiple utterances in the results of a test set execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UtteranceLevelTestResultItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recordNumber")]
		public int RecordNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationId")]
		public string ConversationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turnResult")]
		public TestSetTurnResult TurnResult { get; set; }
	}
	
	/// <summary>
	/// Contains information about the results of the analysis of a turn in the test set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetTurnResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="agent")]
		public AgentTurnResult Agent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserTurnResult User { get; set; }
	}
	
	/// <summary>
	/// The information about the agent turn in a test set execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentTurnResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expectedAgentPrompt")]
		public string ExpectedAgentPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actualAgentPrompt")]
		public string ActualAgentPrompt { get; set; }
		
		/// <summary>
		/// Details about an error in an execution of a test set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public ExecutionErrorDetails ErrorDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actualElicitedSlot")]
		public string ActualElicitedSlot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actualIntent")]
		public string ActualIntent { get; set; }
	}
	
	/// <summary>
	/// Details about an error in an execution of a test set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionErrorDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Contains the results for the user turn by the test execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserTurnResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public UserTurnInputSpecification Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expectedOutput")]
		public UserTurnOutputSpecification ExpectedOutput { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actualOutput")]
		public UserTurnOutputSpecification ActualOutput { get; set; }
		
		/// <summary>
		/// Details about an error in an execution of a test set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public ExecutionErrorDetails ErrorDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endToEndResult")]
		public TestResultMatchStatus EndToEndResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentMatchResult")]
		public TestResultMatchStatus IntentMatchResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotMatchResult")]
		public TestResultMatchStatus SlotMatchResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speechTranscriptionResult")]
		public TestResultMatchStatus SpeechTranscriptionResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLevelResult")]
		public ConversationLevelResultDetail ConversationLevelResult { get; set; }
	}
	
	/// <summary>
	/// Contains information about the user messages in the turn in the input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserTurnInputSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="utteranceInput")]
		public UtteranceInputSpecification UtteranceInput { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public StringMap RequestAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionState")]
		public InputSessionStateSpecification SessionState { get; set; }
	}
	
	/// <summary>
	/// Contains information about input of an utterance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UtteranceInputSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="textInput")]
		public string TextInput { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="audioInput")]
		public UtteranceAudioInputSpecification AudioInput { get; set; }
	}
	
	/// <summary>
	/// Contains information about the audio for an utterance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UtteranceAudioInputSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audioFileS3Location")]
		public string AudioFileS3Location { get; set; }
	}
	
	/// <summary>
	/// Specifications for the current state of the dialog between the user and the bot in the test set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputSessionStateSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessionAttributes")]
		public StringMap SessionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeContexts")]
		public ActiveContext[] ActiveContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeHints")]
		public RuntimeHints RuntimeHints { get; set; }
	}
	
	/// <summary>
	/// The active context used in the test execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveContext
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// <p>You can provide Amazon Lex with hints to the phrases that a customer is likely to use for a slot. When a slot with hints is resolved, the phrases in the runtime hints are preferred in the resolution. You can provide hints for a maximum of 100 intents. You can provide a maximum of 100 slots.</p> <p>Before you can use runtime hints with an existing bot, you must first rebuild the bot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html">Using runtime hints to improve recognition of slot values</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeHints
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotHints")]
		public SlotHintsIntentMap SlotHints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotHintsIntentMap
	{
	}
	
	/// <summary>
	/// Contains results that are output for the user turn by the test execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserTurnOutputSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intent")]
		public UserTurnIntentOutput Intent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeContexts")]
		public ActiveContext[] ActiveContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transcript")]
		public string Transcript { get; set; }
	}
	
	/// <summary>
	/// Contains information about the intent that is output for the turn by the test execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserTurnIntentOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public UserTurnSlotOutputMap Slots { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserTurnSlotOutputMap
	{
	}
	
	/// <summary>
	/// The conversation level details of the conversation used in the test set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationLevelResultDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endToEndResult")]
		public TestResultMatchStatus EndToEndResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speechTranscriptionResult")]
		public TestResultMatchStatus SpeechTranscriptionResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestResultTypeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OverallTestResults = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConversationLevelTestResults = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentClassificationTestResults = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SlotResolutionTestResults = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UtteranceLevelResults = 4,
	}
	
	/// <summary>
	/// The selection to filter the test set results data at the conversation level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationLevelTestResultsFilterBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="endToEndResult")]
		public TestResultMatchStatus EndToEndResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTestExecutionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testExecutions")]
		public TestExecutionSummary[] TestExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summarizes metadata about the test execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestExecutionSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="testExecutionId")]
		public string TestExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testExecutionStatus")]
		public TestExecutionStatus TestExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetId")]
		public string TestSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		public string TestSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TestExecutionTarget Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiMode")]
		public TestExecutionApiMode ApiMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testExecutionModality")]
		public TestSetModality TestExecutionModality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestExecutionSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TestSetName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationDateTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTestSetRecordsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testSetRecords")]
		public TestSetTurnRecord[] TestSetRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a turn in a test set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetTurnRecord
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recordNumber")]
		public int RecordNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationId")]
		public string ConversationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="turnNumber")]
		public System.Nullable<System.Int32> TurnNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turnSpecification")]
		public TurnSpecification TurnSpecification { get; set; }
	}
	
	/// <summary>
	/// Contains information about the messages in the turn.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TurnSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="agentTurn")]
		public AgentTurnSpecification AgentTurn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userTurn")]
		public UserTurnSpecification UserTurn { get; set; }
	}
	
	/// <summary>
	/// The specification of an agent turn.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentTurnSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="agentPrompt")]
		public string AgentPrompt { get; set; }
	}
	
	/// <summary>
	/// Contains information about the expected and input values for the user turn.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserTurnSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input")]
		public UserTurnInputSpecification Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expected")]
		public UserTurnOutputSpecification Expected { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTestSetsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testSets")]
		public TestSetSummary[] TestSets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains summary information about the test set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="testSetId")]
		public string TestSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		public string TestSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modality")]
		public TestSetModality Modality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TestSetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numTurns")]
		public System.Nullable<System.Int32> NumTurns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageLocation")]
		public TestSetStorageLocation StorageLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestSetSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TestSetName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastUpdatedDateTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUtteranceAnalyticsDataResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utterances")]
		public UtteranceSpecification[] Utterances { get; set; }
	}
	
	/// <summary>
	/// An object containing information about a specific utterance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UtteranceSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public AnalyticsModality Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationStartTime")]
		public System.DateTimeOffset ConversationStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationEndTime")]
		public System.DateTimeOffset ConversationEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utterance")]
		public string Utterance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utteranceTimestamp")]
		public System.DateTimeOffset UtteranceTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="audioVoiceDurationMillis")]
		public System.Nullable<System.Int32> AudioVoiceDurationMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utteranceUnderstood")]
		public System.Nullable<System.Boolean> UtteranceUnderstood { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputType")]
		public string InputType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputType")]
		public string OutputType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedIntentName")]
		public string AssociatedIntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedSlotName")]
		public string AssociatedSlotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentState")]
		public IntentState IntentState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogActionType")]
		public string DialogActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botResponseAudioVoiceId")]
		public string BotResponseAudioVoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotsFilledInSession")]
		public string SlotsFilledInSession { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utteranceRequestId")]
		public string UtteranceRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botResponses")]
		public UtteranceBotResponse[] BotResponses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fulfilled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadyForFulfillment = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Waiting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FulfillmentInProgress = 5,
	}
	
	/// <summary>
	/// An object that contains a response to the utterance from the bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UtteranceBotResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public UtteranceContentType ContentType { get; set; }
		
		/// <summary>
		/// <p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p> <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageResponseCard")]
		public ImageResponseCard ImageResponseCard { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UtteranceContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlainText = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomPayload = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSML = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImageResponseCard = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsUtteranceSortByName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UtteranceTimestamp = 0,
	}
	
	/// <summary>
	/// <p>Contains fields describing a condition by which to filter the utterances. The expression may be understood as <code>name</code> <code>operator</code> <code>values</code>. For example:</p> <ul> <li> <p> <code>LocaleId EQ Book</code> – The locale is the string "en".</p> </li> <li> <p> <code>UtteranceText CO help</code> – The text of the utterance contains the string "help".</p> </li> </ul> <p>The operators that each filter supports are listed below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>UtteranceState</code> – <code>EQ</code>.</p> </li> <li> <p> <code>UtteranceText</code> – <code>EQ</code>, <code>CO</code>.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsUtteranceFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsUtteranceFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public AnalyticsFilterOperator Operator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsUtteranceFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotAliasId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotVersion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocaleId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Modality = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Channel = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SessionId = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OriginatingRequestId = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UtteranceState = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UtteranceText = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUtteranceMetricsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AnalyticsUtteranceResult[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object containing the results for the utterance metrics you requested and the bin and/or group(s) they refer to, if applicable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsUtteranceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="binKeys")]
		public AnalyticsBinKey[] BinKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupByKeys")]
		public AnalyticsUtteranceGroupByKey[] GroupByKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricsResults")]
		public AnalyticsUtteranceMetricResult[] MetricsResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributeResults")]
		public AnalyticsUtteranceAttributeResult[] AttributeResults { get; set; }
	}
	
	/// <summary>
	/// Contains the category by which the utterance analytics were grouped and the values for that category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsUtteranceGroupByKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsUtteranceField Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsUtteranceField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UtteranceText = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UtteranceState = 1,
	}
	
	/// <summary>
	/// An object containing the results for the utterance metric you requested.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsUtteranceMetricResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsUtteranceMetricName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistic")]
		public AnalyticsMetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsUtteranceMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Missed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Detected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UtteranceTimestamp = 3,
	}
	
	/// <summary>
	/// An object containing the intent that the bot mapped the utterance to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsUtteranceAttributeResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastUsedIntent")]
		public string LastUsedIntent { get; set; }
	}
	
	/// <summary>
	/// Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the utterances across the user sessions with the bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsUtteranceMetric
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsUtteranceMetricName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistic")]
		public AnalyticsMetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	/// <summary>
	/// Contains the category by which to group the utterances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsUtteranceGroupBySpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsUtteranceField Name { get; set; }
	}
	
	/// <summary>
	/// An object that specifies the last used intent at the time of the utterance as an attribute to return.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyticsUtteranceAttribute
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsUtteranceAttributeName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsUtteranceAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastUsedIntent = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchAssociatedTranscriptsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationId")]
		public string BotRecommendationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextIndex")]
		public System.Nullable<System.Int32> NextIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedTranscripts")]
		public AssociatedTranscript[] AssociatedTranscripts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	/// <summary>
	/// The object containing information that associates the recommended intent/slot type with a conversation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedTranscript
	{
		
		[System.Runtime.Serialization.DataMember(Name="transcript")]
		public string Transcript { get; set; }
	}
	
	/// <summary>
	/// Filters to search for the associated transcript.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedTranscriptFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AssociatedTranscriptFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AssociatedTranscriptFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntentId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SlotTypeId = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBotRecommendationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationStatus")]
		public BotRecommendationStatus BotRecommendationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationId")]
		public string BotRecommendationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transcriptSourceSetting")]
		public TranscriptSourceSetting TranscriptSourceSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionSetting")]
		public EncryptionSetting EncryptionSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartImportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="importId")]
		public string ImportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceSpecification")]
		public ImportResourceSpecification ResourceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeStrategy")]
		public MergeStrategy MergeStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importStatus")]
		public ExportStatus ImportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTestExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testExecutionId")]
		public string TestExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetId")]
		public string TestSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TestExecutionTarget Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiMode")]
		public TestExecutionApiMode ApiMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testExecutionModality")]
		public TestSetModality TestExecutionModality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTestSetGenerationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testSetGenerationId")]
		public string TestSetGenerationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetGenerationStatus")]
		public TestSetGenerationStatus TestSetGenerationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		public string TestSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageLocation")]
		public TestSetStorageLocation StorageLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generationDataSource")]
		public TestSetGenerationDataSource GenerationDataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetTags")]
		public TagMap TestSetTags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopBotRecommendationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationStatus")]
		public BotRecommendationStatus BotRecommendationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationId")]
		public string BotRecommendationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBotResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPrivacy")]
		public DataPrivacy DataPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		public System.Nullable<System.Int32> IdleSessionTTLInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botStatus")]
		public BotStatus BotStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botType")]
		public BotType BotType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botMembers")]
		public BotMember[] BotMembers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBotAliasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasName")]
		public string BotAliasName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasLocaleSettings")]
		public BotAliasLocaleSettingsMap BotAliasLocaleSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLogSettings")]
		public ConversationLogSettings ConversationLogSettings { get; set; }
		
		/// <summary>
		/// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentimentAnalysisSettings")]
		public SentimentAnalysisSettings SentimentAnalysisSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasStatus")]
		public BotAliasStatus BotAliasStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBotLocaleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeName")]
		public string LocaleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		public System.Nullable<System.Double> NluIntentConfidenceThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voiceSettings")]
		public VoiceSettings VoiceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleStatus")]
		public BotLocaleStatus BotLocaleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReasons")]
		public string[] FailureReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recommendedActions")]
		public string[] RecommendedActions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBotRecommendationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationStatus")]
		public BotRecommendationStatus BotRecommendationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botRecommendationId")]
		public string BotRecommendationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transcriptSourceSetting")]
		public TranscriptSourceSetting TranscriptSourceSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionSetting")]
		public EncryptionSetting EncryptionSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateExportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="exportId")]
		public string ExportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceSpecification")]
		public ExportResourceSpecification ResourceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileFormat")]
		public ImportExportFileFormat FileFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportStatus")]
		public ExportStatus ExportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateIntentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="intentId")]
		public string IntentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public SampleUtterance[] SampleUtterances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public DialogCodeHookSettings DialogCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentCodeHook")]
		public FulfillmentCodeHookSettings FulfillmentCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotPriorities")]
		public SlotPriority[] SlotPriorities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentConfirmationSetting")]
		public IntentConfirmationSetting IntentConfirmationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentClosingSetting")]
		public IntentClosingSetting IntentClosingSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		public InputContext[] InputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		public OutputContext[] OutputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public KendraConfiguration KendraConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initialResponseSetting")]
		public InitialResponseSetting InitialResponseSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateResourcePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSlotResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotId")]
		public string SlotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		public string SlotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueElicitationSetting")]
		public SlotValueElicitationSetting ValueElicitationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="obfuscationSetting")]
		public ObfuscationSetting ObfuscationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentId")]
		public string IntentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multipleValuesSetting")]
		public MultipleValuesSetting MultipleValuesSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSlotSetting")]
		public SubSlotSetting SubSlotSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSlotTypeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeName")]
		public string SlotTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeValues")]
		public SlotTypeValue[] SlotTypeValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueSelectionSetting")]
		public SlotValueSelectionSetting ValueSelectionSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Provides information about the external source of the slot type's definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalSourceSetting")]
		public ExternalSourceSetting ExternalSourceSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compositeSlotTypeSetting")]
		public CompositeSlotTypeSetting CompositeSlotTypeSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTestSetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="testSetId")]
		public string TestSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		public string TestSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modality")]
		public TestSetModality Modality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TestSetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numTurns")]
		public System.Nullable<System.Int32> NumTurns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageLocation")]
		public TestSetStorageLocation StorageLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.DateTimeOffset LastUpdatedDateTime { get; set; }
	}
	
	/// <summary>
	/// Specifies attributes for sorting a list of utterances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AggregatedUtterancesSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public AggregatedUtterancesSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	/// <summary>
	/// Specifies the allowed input types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AllowedInputTypes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowAudioInput")]
		public bool AllowAudioInput { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowDTMFInput")]
		public bool AllowDTMFInput { get; set; }
	}
	
	/// <summary>
	/// Specifies the audio input specifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxLengthMs")]
		public int MaxLengthMs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTimeoutMs")]
		public int EndTimeoutMs { get; set; }
	}
	
	/// <summary>
	/// Specifies the DTMF input specifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DTMFSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxLength")]
		public int MaxLength { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTimeoutMs")]
		public int EndTimeoutMs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deletionCharacter")]
		public string DeletionCharacter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endCharacter")]
		public string EndCharacter { get; set; }
	}
	
	/// <summary>
	/// Specifies the audio and DTMF input specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioAndDTMFInputSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTimeoutMs")]
		public int StartTimeoutMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="audioSpecification")]
		public AudioSpecification AudioSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dtmfSpecification")]
		public DTMFSpecification DtmfSpecification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateCustomVocabularyItemRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customVocabularyItemList")]
		public NewCustomVocabularyItem[] CustomVocabularyItemList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteCustomVocabularyItemRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customVocabularyItemList")]
		public CustomVocabularyEntryId[] CustomVocabularyItemList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateCustomVocabularyItemRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customVocabularyItemList")]
		public CustomVocabularyItem[] CustomVocabularyItemList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotLocaleFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BotLocaleName = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BotLocaleFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 1,
	}
	
	/// <summary>
	/// Specifies attributes for sorting a list of bot locales.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotLocaleSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public BotLocaleSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	/// <summary>
	/// Specifies attributes for sorting a list of bots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public BotSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	/// <summary>
	/// Specifies attributes for sorting a list of bot versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotVersionSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public BotVersionSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildBotLocaleRequest
	{
	}
	
	/// <summary>
	/// Specifies attributes for sorting a list of built-in intents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuiltInIntentSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public BuiltInIntentSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	/// <summary>
	/// Specifies attributes for sorting a list of built-in slot types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuiltInSlotTypeSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public BuiltInSlotTypeSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConditionMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBotAliasRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botAliasName")]
		public string BotAliasName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasLocaleSettings")]
		public BotAliasLocaleSettingsMap BotAliasLocaleSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLogSettings")]
		public ConversationLogSettings ConversationLogSettings { get; set; }
		
		/// <summary>
		/// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentimentAnalysisSettings")]
		public SentimentAnalysisSettings SentimentAnalysisSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBotLocaleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		public double NluIntentConfidenceThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voiceSettings")]
		public VoiceSettings VoiceSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataPrivacy")]
		public DataPrivacy DataPrivacy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		public int IdleSessionTTLInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botTags")]
		public TagMap BotTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testBotAliasTags")]
		public TagMap TestBotAliasTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botType")]
		public BotType BotType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botMembers")]
		public BotMember[] BotMembers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBotVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botVersionLocaleSpecification")]
		public BotVersionLocaleSpecification BotVersionLocaleSpecification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateExportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceSpecification")]
		public ExportResourceSpecification ResourceSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileFormat")]
		public ImportExportFileFormat FileFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filePassword")]
		public string FilePassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIntentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public SampleUtterance[] SampleUtterances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public DialogCodeHookSettings DialogCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentCodeHook")]
		public FulfillmentCodeHookSettings FulfillmentCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentConfirmationSetting")]
		public IntentConfirmationSetting IntentConfirmationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentClosingSetting")]
		public IntentClosingSetting IntentClosingSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		public InputContext[] InputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		public OutputContext[] OutputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public KendraConfiguration KendraConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initialResponseSetting")]
		public InitialResponseSetting InitialResponseSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateResourcePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Effect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deny = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateResourcePolicyStatementRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statementId")]
		public string StatementId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effect")]
		public Effect Effect { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public Principal[] Principal { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string[] Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public ConditionMap Condition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSlotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		public string SlotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valueElicitationSetting")]
		public SlotValueElicitationSetting ValueElicitationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="obfuscationSetting")]
		public ObfuscationSetting ObfuscationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multipleValuesSetting")]
		public MultipleValuesSetting MultipleValuesSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSlotSetting")]
		public SubSlotSetting SubSlotSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSlotTypeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotTypeName")]
		public string SlotTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeValues")]
		public SlotTypeValue[] SlotTypeValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueSelectionSetting")]
		public SlotValueSelectionSetting ValueSelectionSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalSourceSetting")]
		public ExternalSourceSetting ExternalSourceSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compositeSlotTypeSetting")]
		public CompositeSlotTypeSetting CompositeSlotTypeSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTestSetDiscrepancyReportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TestSetDiscrepancyReportResourceTarget Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUploadUrlRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotAliasRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotLocaleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteCustomVocabularyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteExportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteImportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIntentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcePolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcePolicyStatementRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSlotRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSlotTypeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTestSetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUtterancesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBotAliasRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBotLocaleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBotRecommendationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBotRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBotVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeCustomVocabularyMetadataRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeExportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeImportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeIntentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeResourcePolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSlotRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSlotTypeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTestExecutionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestExecutionModality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Audio = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTestSetDiscrepancyReportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTestSetGenerationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTestSetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExportFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 1,
	}
	
	/// <summary>
	/// Provides information about sorting a list of exports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public ExportSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTestExecutionArtifactsUrlRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 1,
	}
	
	/// <summary>
	/// Provides information for sorting a list of imports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public ExportSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntentFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 1,
	}
	
	/// <summary>
	/// Specifies attributes for sorting a list of intents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public IntentSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAggregatedUtterancesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationDuration")]
		public UtteranceAggregationDuration AggregationDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public AggregatedUtterancesSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public AggregatedUtterancesFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBotAliasesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBotLocalesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public BotLocaleSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public BotLocaleFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBotRecommendationsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBotVersionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public BotVersionSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBotsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public BotSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public BotFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBuiltInIntentsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public BuiltInIntentSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBuiltInSlotTypesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public BuiltInSlotTypeSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCustomVocabularyItemsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExportsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ExportSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ExportFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListImportsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ImportSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ImportFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIntentMetricsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public AnalyticsIntentMetric[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="binBy")]
		public AnalyticsBinBySpecification[] BinBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupBy")]
		public AnalyticsIntentGroupBySpecification[] GroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public AnalyticsIntentFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIntentPathsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentPath")]
		public string IntentPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public AnalyticsPathFilter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIntentStageMetricsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public AnalyticsIntentStageMetric[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="binBy")]
		public AnalyticsBinBySpecification[] BinBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupBy")]
		public AnalyticsIntentStageGroupBySpecification[] GroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public AnalyticsIntentStageFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIntentsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public IntentSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public IntentFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecommendedIntentsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// An object specifying the measure and method by which to sort the session analytics data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SessionDataSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsSessionSortByName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSessionAnalyticsDataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public SessionDataSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public AnalyticsSessionFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSessionMetricsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public AnalyticsSessionMetric[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="binBy")]
		public AnalyticsBinBySpecification[] BinBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupBy")]
		public AnalyticsSessionGroupBySpecification[] GroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public AnalyticsSessionFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Specifies attributes for sorting a list of slot types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotTypeSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public SlotTypeSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSlotTypesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public SlotTypeSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public SlotTypeFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Specifies attributes for sorting a list of bots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public SlotSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSlotsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public SlotSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public SlotFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	/// <summary>
	/// Contains information about the method by which to filter the results of the test execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestExecutionResultFilterBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resultTypeFilter")]
		public TestResultTypeFilter ResultTypeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLevelTestResultsFilterBy")]
		public ConversationLevelTestResultsFilterBy ConversationLevelTestResultsFilterBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTestExecutionResultItemsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resultFilterBy")]
		public TestExecutionResultFilterBy ResultFilterBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about the method by which to sort the instances of test executions you have carried out.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestExecutionSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public TestExecutionSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTestExecutionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public TestExecutionSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTestSetRecordsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about the methods by which to sort the test set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public TestSetSortAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTestSetsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public TestSetSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object specifying the measure and method by which to sort the utterance data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UtteranceDataSortBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsUtteranceSortByName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUtteranceAnalyticsDataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public UtteranceDataSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public AnalyticsUtteranceFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUtteranceMetricsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public AnalyticsUtteranceMetric[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="binBy")]
		public AnalyticsBinBySpecification[] BinBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupBy")]
		public AnalyticsUtteranceGroupBySpecification[] GroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public AnalyticsUtteranceAttribute[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public AnalyticsUtteranceFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The attempt name of attempts of a prompt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PromptAttempt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Retry1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Retry2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Retry3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Retry4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Retry5 = 5,
	}
	
	/// <summary>
	/// Specifies the text input specifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextInputSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTimeoutMs")]
		public int StartTimeoutMs { get; set; }
	}
	
	/// <summary>
	/// Specifies the settings on a prompt attempt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PromptAttemptSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowInterrupt")]
		public System.Nullable<System.Boolean> AllowInterrupt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowedInputTypes")]
		public AllowedInputTypes AllowedInputTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="audioAndDTMFInputSpecification")]
		public AudioAndDTMFInputSpecification AudioAndDTMFInputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textInputSpecification")]
		public TextInputSpecification TextInputSpecification { get; set; }
	}
	
	/// <summary>
	/// Provides the phrase that Amazon Lex should look for in the user's input to the bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeHintValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phrase")]
		public string Phrase { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotHintsSlotMap
	{
	}
	
	/// <summary>
	/// Provides an array of phrases that should be given preference when resolving values for a slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeHintDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="runtimeHintValues")]
		public RuntimeHintValue[] RuntimeHintValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSlotHints")]
		public SlotHintsSlotMap SubSlotHints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchAssociatedTranscriptsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="searchOrder")]
		public SortOrder SearchOrder { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public AssociatedTranscriptFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextIndex")]
		public System.Nullable<System.Int32> NextIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scalar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		List = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotTypeFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 1,
	}
	
	/// <summary>
	/// The value to set in a slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="interpretedValue")]
		public string InterpretedValue { get; set; }
	}
	
	/// <summary>
	/// The slot values that Amazon Lex uses when it sets slot values in a dialog step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotValueOverride
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SlotValue Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public SlotValueOverride[] Values { get; set; }
	}
	
	/// <summary>
	/// <p>Subslot elicitation settings.</p> <p> <code>DefaultValueSpecification</code> is a list of default values for a constituent sub slot in a composite slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values. This is similar to <code>DefaultValueSpecification</code> for slots.</p> <p> <code>PromptSpecification</code> is the prompt that Amazon Lex uses to elicit the sub slot value from the user. This is similar to <code>PromptSpecification</code> for slots.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubSlotValueElicitationSetting
	{
		
		/// <summary>
		/// Defines a list of values that Amazon Lex should use as the default value for a slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValueSpecification")]
		public SlotDefaultValueSpecification DefaultValueSpecification { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex sends to a user to elicit a response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="promptSpecification")]
		public PromptSpecification PromptSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public SampleUtterance[] SampleUtterances { get; set; }
		
		/// <summary>
		/// Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitAndContinueSpecification")]
		public WaitAndContinueSpecification WaitAndContinueSpecification { get; set; }
	}
	
	/// <summary>
	/// Subslot specifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Specifications
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valueElicitationSetting")]
		public SubSlotValueElicitationSetting ValueElicitationSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBotRecommendationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transcriptSourceSetting")]
		public TranscriptSourceSetting TranscriptSourceSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionSetting")]
		public EncryptionSetting EncryptionSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartImportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="importId")]
		public string ImportId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceSpecification")]
		public ImportResourceSpecification ResourceSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mergeStrategy")]
		public MergeStrategy MergeStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filePassword")]
		public string FilePassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTestExecutionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TestExecutionTarget Target { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiMode")]
		public TestExecutionApiMode ApiMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testExecutionModality")]
		public TestSetModality TestExecutionModality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTestSetGenerationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		public string TestSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageLocation")]
		public TestSetStorageLocation StorageLocation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="generationDataSource")]
		public TestSetGenerationDataSource GenerationDataSource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetTags")]
		public TagMap TestSetTags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopBotRecommendationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBotAliasRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botAliasName")]
		public string BotAliasName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasLocaleSettings")]
		public BotAliasLocaleSettingsMap BotAliasLocaleSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLogSettings")]
		public ConversationLogSettings ConversationLogSettings { get; set; }
		
		/// <summary>
		/// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentimentAnalysisSettings")]
		public SentimentAnalysisSettings SentimentAnalysisSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBotLocaleRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		public double NluIntentConfidenceThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voiceSettings")]
		public VoiceSettings VoiceSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBotRecommendationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionSetting")]
		public EncryptionSetting EncryptionSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataPrivacy")]
		public DataPrivacy DataPrivacy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		public int IdleSessionTTLInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botType")]
		public BotType BotType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botMembers")]
		public BotMember[] BotMembers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateExportRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filePassword")]
		public string FilePassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateIntentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public SampleUtterance[] SampleUtterances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public DialogCodeHookSettings DialogCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentCodeHook")]
		public FulfillmentCodeHookSettings FulfillmentCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotPriorities")]
		public SlotPriority[] SlotPriorities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentConfirmationSetting")]
		public IntentConfirmationSetting IntentConfirmationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentClosingSetting")]
		public IntentClosingSetting IntentClosingSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		public InputContext[] InputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		public OutputContext[] OutputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public KendraConfiguration KendraConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initialResponseSetting")]
		public InitialResponseSetting InitialResponseSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateResourcePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSlotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		public string SlotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		public string SlotTypeId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valueElicitationSetting")]
		public SlotValueElicitationSetting ValueElicitationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="obfuscationSetting")]
		public ObfuscationSetting ObfuscationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multipleValuesSetting")]
		public MultipleValuesSetting MultipleValuesSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSlotSetting")]
		public SubSlotSetting SubSlotSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSlotTypeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotTypeName")]
		public string SlotTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeValues")]
		public SlotTypeValue[] SlotTypeValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueSelectionSetting")]
		public SlotValueSelectionSetting ValueSelectionSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		/// <summary>
		/// Provides information about the external source of the slot type's definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalSourceSetting")]
		public ExternalSourceSetting ExternalSourceSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compositeSlotTypeSetting")]
		public CompositeSlotTypeSetting CompositeSlotTypeSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTestSetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		public string TestSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Contains information about a slot output by the test set execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserTurnSlotOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public UserTurnSlotOutput[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSlots")]
		public UserTurnSlotOutputMap SubSlots { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create a batch of custom vocabulary items for a given bot locale's custom vocabulary.
		/// BatchCreateCustomVocabularyItem bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchcreate
		/// </summary>
		/// <param name="botId">The identifier of the bot associated with this custom vocabulary.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The identifier of the version of the bot associated with this custom vocabulary.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html"> Supported Languages </a>.</param>
		/// <returns>Success</returns>
		public async Task<BatchCreateCustomVocabularyItemResponse> BatchCreateCustomVocabularyItemAsync(string botId, string botVersion, string localeId, BatchCreateCustomVocabularyItemPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/customvocabulary/DEFAULT/batchcreate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchCreateCustomVocabularyItemResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a batch of custom vocabulary items for a given bot locale's custom vocabulary.
		/// BatchDeleteCustomVocabularyItem bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchdelete
		/// </summary>
		/// <param name="botId">The identifier of the bot associated with this custom vocabulary.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The identifier of the version of the bot associated with this custom vocabulary.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html"> Supported Languages </a>.</param>
		/// <returns>Success</returns>
		public async Task<BatchDeleteCustomVocabularyItemResponse> BatchDeleteCustomVocabularyItemAsync(string botId, string botVersion, string localeId, BatchDeleteCustomVocabularyItemPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/customvocabulary/DEFAULT/batchdelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchDeleteCustomVocabularyItemResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a batch of custom vocabulary items for a given bot locale's custom vocabulary.
		/// BatchUpdateCustomVocabularyItem bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchupdate
		/// </summary>
		/// <param name="botId">The identifier of the bot associated with this custom vocabulary
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The identifier of the version of the bot associated with this custom vocabulary.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html"> Supported Languages </a>.</param>
		/// <returns>Success</returns>
		public async Task<BatchUpdateCustomVocabularyItemResponse> BatchUpdateCustomVocabularyItemAsync(string botId, string botVersion, string localeId, BatchUpdateCustomVocabularyItemPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/customvocabulary/DEFAULT/batchupdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchUpdateCustomVocabularyItemResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Builds a bot, its intents, and its slot types into a specific locale. A bot can be built into multiple locales. At runtime the locale is used to choose a specific build of the bot.
		/// BuildBotLocale bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/
		/// </summary>
		/// <param name="botId">The identifier of the bot to build. The identifier is returned in the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html">CreateBot</a> operation.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot to build. This can only be the draft version of the bot.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		public async Task BuildBotLocaleAsync(string botId, string botVersion, string localeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes a locale from a bot.</p> <p>When you delete a locale, all intents, slots, and slot types defined for the locale are also deleted.</p>
		/// DeleteBotLocale bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot that contains the locale.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot that contains the locale. 
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale that will be deleted. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		public async Task DeleteBotLocaleAsync(string botId, string botVersion, string localeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the settings that a bot has for a specific locale.
		/// DescribeBotLocale bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/
		/// </summary>
		/// <param name="botId">The identifier of the bot associated with the locale.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot associated with the locale.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The unique identifier of the locale to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>. </param>
		/// <returns>Success</returns>
		public async Task<DescribeBotLocaleResponse> DescribeBotLocaleAsync(string botId, string botVersion, string localeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeBotLocaleResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings that a bot has for a specific locale.
		/// UpdateBotLocale bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot that contains the locale.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot that contains the locale to be updated. The version can only be the <code>DRAFT</code> version.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale to update. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		public async Task UpdateBotLocaleAsync(string botId, string botVersion, string localeId, UpdateBotLocalePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Amazon Lex conversational bot.
		/// CreateBot bots/
		/// </summary>
		public async Task CreateBotAsync(CreateBotPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of available bots.
		/// ListBots bots/
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBotsResponse> ListBotsAsync(string maxResults, string nextToken, ListBotsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBotsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an alias for the specified version of a bot. Use an alias to enable you to change the version of a bot without updating applications that use the bot.</p> <p>For example, you can create an alias called "PROD" that your applications use to call the Amazon Lex bot. </p>
		/// CreateBotAlias bots/{botId}/botaliases/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot that the alias applies to.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task CreateBotAliasAsync(string botId, CreateBotAliasPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botaliases/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of aliases for the specified bot.
		/// ListBotAliases bots/{botId}/botaliases/
		/// </summary>
		/// <param name="botId">The identifier of the bot to list aliases for.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBotAliasesResponse> ListBotAliasesAsync(string botId, string maxResults, string nextToken, ListBotAliasesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botaliases/&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBotAliasesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a locale in the bot. The locale contains the intents and slot types that the bot uses in conversations with users in the specified language and locale. You must add a locale to a bot before you can add intents and slot types to the bot.
		/// CreateBotLocale bots/{botId}/botversions/{botVersion}/botlocales/
		/// </summary>
		/// <param name="botId">The identifier of the bot to create the locale for.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot to create the locale for. This can only be the draft version of the bot.
		/// Min length: 5
		/// Max length: 5
		// </param>
		public async Task CreateBotLocaleAsync(string botId, string botVersion, CreateBotLocalePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of locales for the specified bot.
		/// ListBotLocales bots/{botId}/botversions/{botVersion}/botlocales/
		/// </summary>
		/// <param name="botId">The identifier of the bot to list locales for.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot to list locales for.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBotLocalesResponse> ListBotLocalesAsync(string botId, string botVersion, string maxResults, string nextToken, ListBotLocalesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBotLocalesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new version of the bot based on the <code>DRAFT</code> version. If the <code>DRAFT</code> version of this resource hasn't changed since you created the last version, Amazon Lex doesn't create a new version, it returns the last created version.</p> <p>When you create the first version of a bot, Amazon Lex sets the version to 1. Subsequent versions increment by 1.</p>
		/// CreateBotVersion bots/{botId}/botversions/
		/// </summary>
		/// <param name="botId">The identifier of the bot to create the version for.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task CreateBotVersionAsync(string botId, CreateBotVersionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about all of the versions of a bot.</p> <p>The <code>ListBotVersions</code> operation returns a summary of each version of a bot. For example, if a bot has three numbered versions, the <code>ListBotVersions</code> operation returns for summaries, one for each numbered version and one for the <code>DRAFT</code> version.</p> <p>The <code>ListBotVersions</code> operation always returns at least one version, the <code>DRAFT</code> version.</p>
		/// ListBotVersions bots/{botId}/botversions/
		/// </summary>
		/// <param name="botId">The identifier of the bot to list versions for.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBotVersionsResponse> ListBotVersionsAsync(string botId, string maxResults, string nextToken, ListBotVersionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBotVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a zip archive containing the contents of a bot or a bot locale. The archive contains a directory structure that contains JSON files that define the bot.</p> <p>You can create an archive that contains the complete definition of a bot, or you can specify that the archive contain only the definition of a single bot locale.</p> <p>For more information about exporting bots, and about the structure of the export archive, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/importing-exporting.html"> Importing and exporting bots </a> </p>
		/// CreateExport exports/
		/// </summary>
		public async Task CreateExportAsync(CreateExportPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "exports/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the exports for a bot, bot locale, or custom vocabulary. Exports are kept in the list for 7 days.
		/// ListExports exports/
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListExportsResponse> ListExportsAsync(string maxResults, string nextToken, ListExportsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "exports/?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListExportsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an intent.</p> <p>To define the interaction between the user and your bot, you define one or more intents. For example, for a pizza ordering bot you would create an <code>OrderPizza</code> intent.</p> <p>When you create an intent, you must provide a name. You can optionally provide the following:</p> <ul> <li> <p>Sample utterances. For example, "I want to order a pizza" and "Can I order a pizza." You can't provide utterances for built-in intents.</p> </li> <li> <p>Information to be gathered. You specify slots for the information that you bot requests from the user. You can specify standard slot types, such as date and time, or custom slot types for your application.</p> </li> <li> <p>How the intent is fulfilled. You can provide a Lambda function or configure the intent to return the intent information to your client application. If you use a Lambda function, Amazon Lex invokes the function when all of the intent information is available.</p> </li> <li> <p>A confirmation prompt to send to the user to confirm an intent. For example, "Shall I order your pizza?"</p> </li> <li> <p>A conclusion statement to send to the user after the intent is fulfilled. For example, "I ordered your pizza."</p> </li> <li> <p>A follow-up prompt that asks the user for additional activity. For example, "Do you want a drink with your pizza?"</p> </li> </ul>
		/// CreateIntent bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/
		/// </summary>
		/// <param name="botId">The identifier of the bot associated with this intent.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot associated with this intent.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <returns>Success</returns>
		public async Task<CreateIntentResponse> CreateIntentAsync(string botId, string botVersion, string localeId, CreateIntentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/intents/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateIntentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of intents that meet the specified criteria.
		/// ListIntents bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot that contains the intent.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot that contains the intent.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the intents to list. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListIntentsResponse> ListIntentsAsync(string botId, string botVersion, string localeId, string maxResults, string nextToken, ListIntentsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/intents/&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListIntentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new resource policy with the specified policy statements.
		/// CreateResourcePolicy policy/{resourceArn}/
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateResourcePolicyResponse> CreateResourcePolicyAsync(string resourceArn, CreateResourcePolicyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateResourcePolicyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an existing policy from a bot or bot alias. If the resource doesn't have a policy attached, Amazon Lex returns an exception.
		/// DeleteResourcePolicy policy/{resourceArn}/
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the bot or bot alias that has the resource policy attached.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <param name="expectedRevisionId"><p>The identifier of the revision to edit. If this ID doesn't match the current revision number, Amazon Lex returns an exception</p> <p>If you don't specify a revision ID, Amazon Lex will delete the current policy.</p>
		/// Min length: 1
		/// Max length: 5
		// </param>
		public async Task DeleteResourcePolicyAsync(string resourceArn, string expectedRevisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"/&expectedRevisionId=" + (expectedRevisionId==null? "" : System.Uri.EscapeDataString(expectedRevisionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the resource policy and policy revision for a bot or bot alias.
		/// DescribeResourcePolicy policy/{resourceArn}/
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeResourcePolicyResponse> DescribeResourcePolicyAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeResourcePolicyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces the existing resource policy for a bot or bot alias with a new one. If the policy doesn't exist, Amazon Lex returns an exception.
		/// UpdateResourcePolicy policy/{resourceArn}/
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <param name="expectedRevisionId"><p>The identifier of the revision of the policy to update. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p> <p>If you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.</p>
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateResourcePolicyResponse> UpdateResourcePolicyAsync(string resourceArn, string expectedRevisionId, UpdateResourcePolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"/&expectedRevisionId=" + (expectedRevisionId==null? "" : System.Uri.EscapeDataString(expectedRevisionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateResourcePolicyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds a new resource policy statement to a bot or bot alias. If a resource policy exists, the statement is added to the current resource policy. If a policy doesn't exist, a new policy is created.</p> <p>You can't create a resource policy statement that allows cross-account access.</p>
		/// CreateResourcePolicyStatement policy/{resourceArn}/statements/
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <param name="expectedRevisionId"><p>The identifier of the revision of the policy to edit. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p> <p>If you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.</p>
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateResourcePolicyStatementResponse> CreateResourcePolicyStatementAsync(string resourceArn, string expectedRevisionId, CreateResourcePolicyStatementPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"/statements/&expectedRevisionId=" + (expectedRevisionId==null? "" : System.Uri.EscapeDataString(expectedRevisionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateResourcePolicyStatementResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a slot in an intent. A slot is a variable needed to fulfill an intent. For example, an <code>OrderPizza</code> intent might need slots for size, crust, and number of pizzas. For each slot, you define one or more utterances that Amazon Lex uses to elicit a response from the user.
		/// CreateSlot bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/
		/// </summary>
		/// <param name="botId">The identifier of the bot associated with the slot.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot associated with the slot.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale that the slot will be used in. The string must match one of the supported locales. All of the bots, intents, slot types used by the slot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="intentId">The identifier of the intent that contains the slot.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateSlotResponse> CreateSlotAsync(string botId, string botVersion, string localeId, string intentId, CreateSlotPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/intents/"+ (intentId==null? "" : System.Uri.EscapeDataString(intentId))+"/slots/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateSlotResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of slots that match the specified criteria.
		/// ListSlots bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/
		/// </summary>
		/// <param name="botId">The identifier of the bot that contains the slot.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot that contains the slot.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the slots to list. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="intentId">The unique identifier of the intent that contains the slot.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSlotsResponse> ListSlotsAsync(string botId, string botVersion, string localeId, string intentId, string maxResults, string nextToken, ListSlotsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/intents/"+ (intentId==null? "" : System.Uri.EscapeDataString(intentId))+"/slots/&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSlotsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a custom slot type</p> <p> To create a custom slot type, specify a name for the slot type and a set of enumeration values, the values that a slot of this type can assume. </p>
		/// CreateSlotType bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/
		/// </summary>
		/// <param name="botId">The identifier of the bot associated with this slot type.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The identifier of the bot version associated with this slot type.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale that the slot type will be used in. The string must match one of the supported locales. All of the bots, intents, and slots used by the slot type must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <returns>Success</returns>
		public async Task<CreateSlotTypeResponse> CreateSlotTypeAsync(string botId, string botVersion, string localeId, CreateSlotTypePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/slottypes/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateSlotTypeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of slot types that match the specified criteria.
		/// ListSlotTypes bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot that contains the slot types.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot that contains the slot type.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the slot types to list. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSlotTypesResponse> ListSlotTypesAsync(string botId, string botVersion, string localeId, string maxResults, string nextToken, ListSlotTypesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/slottypes/&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSlotTypesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a report that describes the differences between the bot and the test set.
		/// CreateTestSetDiscrepancyReport testsets/{testSetId}/testsetdiscrepancy
		/// </summary>
		/// <param name="testSetId">The test set Id for the test set discrepancy report.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task CreateTestSetDiscrepancyReportAsync(string testSetId, CreateTestSetDiscrepancyReportPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testsets/"+ (testSetId==null? "" : System.Uri.EscapeDataString(testSetId))+"/testsetdiscrepancy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a pre-signed S3 write URL that you use to upload the zip archive when importing a bot or a bot locale.
		/// CreateUploadUrl createuploadurl/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUploadUrlResponse> CreateUploadUrlAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createuploadurl/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateUploadUrlResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes all versions of a bot, including the <code>Draft</code> version. To delete a specific version, use the <code>DeleteBotVersion</code> operation.</p> <p>When you delete a bot, all of the resources contained in the bot are also deleted. Deleting a bot removes all locales, intents, slot, and slot types defined for the bot.</p> <p>If a bot has an alias, the <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code> exception. If you want to delete the bot and the alias, set the <code>skipResourceInUseCheck</code> parameter to <code>true</code>.</p>
		/// DeleteBot bots/{botId}/
		/// </summary>
		/// <param name="botId">The identifier of the bot to delete. 
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="skipResourceInUseCheck">By default, Amazon Lex checks if any other resource, such as an alias or bot network, is using the bot version before it is deleted and throws a <code>ResourceInUseException</code> exception if the bot is being used by another resource. Set this parameter to <code>true</code> to skip this check and remove the bot even if it is being used by another resource.</param>
		public async Task DeleteBotAsync(string botId, bool skipResourceInUseCheck, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/&skipResourceInUseCheck="+skipResourceInUseCheck;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides metadata information about a bot.
		/// DescribeBot bots/{botId}/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot to describe.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeBotResponse> DescribeBotAsync(string botId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeBotResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of an existing bot.
		/// UpdateBot bots/{botId}/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot to update. This identifier is returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html">CreateBot</a> operation.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task UpdateBotAsync(string botId, UpdateBotPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified bot alias.
		/// DeleteBotAlias bots/{botId}/botaliases/{botAliasId}/
		/// </summary>
		/// <param name="botAliasId">The unique identifier of the bot alias to delete.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The unique identifier of the bot associated with the alias to delete.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="skipResourceInUseCheck">By default, Amazon Lex checks if any other resource, such as a bot network, is using the bot alias before it is deleted and throws a <code>ResourceInUseException</code> exception if the alias is being used by another resource. Set this parameter to <code>true</code> to skip this check and remove the alias even if it is being used by another resource.</param>
		public async Task DeleteBotAliasAsync(string botAliasId, string botId, bool skipResourceInUseCheck, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botaliases/"+ (botAliasId==null? "" : System.Uri.EscapeDataString(botAliasId))+"/&skipResourceInUseCheck="+skipResourceInUseCheck;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a specific bot alias.
		/// DescribeBotAlias bots/{botId}/botaliases/{botAliasId}/
		/// </summary>
		/// <param name="botAliasId">The identifier of the bot alias to describe.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The identifier of the bot associated with the bot alias to describe.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeBotAliasResponse> DescribeBotAliasAsync(string botAliasId, string botId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botaliases/"+ (botAliasId==null? "" : System.Uri.EscapeDataString(botAliasId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeBotAliasResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of an existing bot alias.
		/// UpdateBotAlias bots/{botId}/botaliases/{botAliasId}/
		/// </summary>
		/// <param name="botAliasId">The unique identifier of the bot alias.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The identifier of the bot with the updated alias.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task UpdateBotAliasAsync(string botAliasId, string botId, UpdateBotAliasPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botaliases/"+ (botAliasId==null? "" : System.Uri.EscapeDataString(botAliasId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a specific version of a bot. To delete all versions of a bot, use the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DeleteBot.html">DeleteBot</a> operation.
		/// DeleteBotVersion bots/{botId}/botversions/{botVersion}/
		/// </summary>
		/// <param name="botId">The identifier of the bot that contains the version.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot to delete.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="skipResourceInUseCheck">By default, Amazon Lex checks if any other resource, such as an alias or bot network, is using the bot version before it is deleted and throws a <code>ResourceInUseException</code> exception if the version is being used by another resource. Set this parameter to <code>true</code> to skip this check and remove the version even if it is being used by another resource.</param>
		public async Task DeleteBotVersionAsync(string botId, string botVersion, bool skipResourceInUseCheck, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/&skipResourceInUseCheck="+skipResourceInUseCheck;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides metadata about a version of a bot.
		/// DescribeBotVersion bots/{botId}/botversions/{botVersion}/
		/// </summary>
		/// <param name="botId">The identifier of the bot containing the version to return metadata for.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot to return metadata for.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeBotVersionResponse> DescribeBotVersionAsync(string botId, string botVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeBotVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a custom vocabulary from the specified locale in the specified bot.
		/// DeleteCustomVocabulary bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary
		/// </summary>
		/// <param name="botId">The unique identifier of the bot to remove the custom vocabulary from.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot to remove the custom vocabulary from.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The locale identifier for the locale that contains the custom vocabulary to remove.</param>
		public async Task DeleteCustomVocabularyAsync(string botId, string botVersion, string localeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/customvocabulary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a previous export and the associated files stored in an S3 bucket.
		/// DeleteExport exports/{exportId}/
		/// </summary>
		/// <param name="exportId">The unique identifier of the export to delete.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task DeleteExportAsync(string exportId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "exports/"+ (exportId==null? "" : System.Uri.EscapeDataString(exportId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specific export.
		/// DescribeExport exports/{exportId}/
		/// </summary>
		/// <param name="exportId">The unique identifier of the export to describe.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeExportResponse> DescribeExportAsync(string exportId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "exports/"+ (exportId==null? "" : System.Uri.EscapeDataString(exportId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeExportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the password used to protect an export zip archive.</p> <p>The password is not required. If you don't supply a password, Amazon Lex generates a zip file that is not protected by a password. This is the archive that is available at the pre-signed S3 URL provided by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeExport.html">DescribeExport</a> operation.</p>
		/// UpdateExport exports/{exportId}/
		/// </summary>
		/// <param name="exportId">The unique identifier Amazon Lex assigned to the export.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task UpdateExportAsync(string exportId, UpdateExportPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "exports/"+ (exportId==null? "" : System.Uri.EscapeDataString(exportId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a previous import and the associated file stored in an S3 bucket.
		/// DeleteImport imports/{importId}/
		/// </summary>
		/// <param name="importId">The unique identifier of the import to delete.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task DeleteImportAsync(string importId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "imports/"+ (importId==null? "" : System.Uri.EscapeDataString(importId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specific import.
		/// DescribeImport imports/{importId}/
		/// </summary>
		/// <param name="importId">The unique identifier of the import to describe.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeImportResponse> DescribeImportAsync(string importId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "imports/"+ (importId==null? "" : System.Uri.EscapeDataString(importId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeImportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified intent.</p> <p>Deleting an intent also deletes the slots associated with the intent.</p>
		/// DeleteIntent bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/
		/// </summary>
		/// <param name="intentId">The unique identifier of the intent to delete.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The identifier of the bot associated with the intent.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot associated with the intent.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale where the bot will be deleted. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		public async Task DeleteIntentAsync(string intentId, string botId, string botVersion, string localeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/intents/"+ (intentId==null? "" : System.Uri.EscapeDataString(intentId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata about an intent.
		/// DescribeIntent bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/
		/// </summary>
		/// <param name="intentId">The identifier of the intent to describe.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The identifier of the bot associated with the intent.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot associated with the intent.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the intent to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <returns>Success</returns>
		public async Task<DescribeIntentResponse> DescribeIntentAsync(string intentId, string botId, string botVersion, string localeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/intents/"+ (intentId==null? "" : System.Uri.EscapeDataString(intentId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeIntentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings for an intent.
		/// UpdateIntent bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/
		/// </summary>
		/// <param name="intentId">The unique identifier of the intent to update.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The identifier of the bot that contains the intent.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot that contains the intent. Must be <code>DRAFT</code>.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale where this intent is used. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <returns>Success</returns>
		public async Task<UpdateIntentResponse> UpdateIntentAsync(string intentId, string botId, string botVersion, string localeId, UpdateIntentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/intents/"+ (intentId==null? "" : System.Uri.EscapeDataString(intentId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateIntentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a policy statement from a resource policy. If you delete the last statement from a policy, the policy is deleted. If you specify a statement ID that doesn't exist in the policy, or if the bot or bot alias doesn't have a policy attached, Amazon Lex returns an exception.
		/// DeleteResourcePolicyStatement policy/{resourceArn}/statements/{statementId}/
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <param name="statementId">The name of the statement (SID) to delete from the policy.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="expectedRevisionId"><p>The identifier of the revision of the policy to delete the statement from. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p> <p>If you don't specify a revision, Amazon Lex removes the current contents of the statement. </p>
		/// Min length: 1
		/// Max length: 5
		// </param>
		public async Task DeleteResourcePolicyStatementAsync(string resourceArn, string statementId, string expectedRevisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"/statements/"+ (statementId==null? "" : System.Uri.EscapeDataString(statementId))+"/&expectedRevisionId=" + (expectedRevisionId==null? "" : System.Uri.EscapeDataString(expectedRevisionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified slot from an intent.
		/// DeleteSlot bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/
		/// </summary>
		/// <param name="slotId">The identifier of the slot to delete. 
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The identifier of the bot associated with the slot to delete.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot associated with the slot to delete.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale that the slot will be deleted from. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="intentId">The identifier of the intent associated with the slot.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task DeleteSlotAsync(string slotId, string botId, string botVersion, string localeId, string intentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/intents/"+ (intentId==null? "" : System.Uri.EscapeDataString(intentId))+"/slots/"+ (slotId==null? "" : System.Uri.EscapeDataString(slotId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets metadata information about a slot.
		/// DescribeSlot bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/
		/// </summary>
		/// <param name="slotId">The unique identifier for the slot.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The identifier of the bot associated with the slot.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot associated with the slot.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the slot to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="intentId">The identifier of the intent that contains the slot.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeSlotResponse> DescribeSlotAsync(string slotId, string botId, string botVersion, string localeId, string intentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/intents/"+ (intentId==null? "" : System.Uri.EscapeDataString(intentId))+"/slots/"+ (slotId==null? "" : System.Uri.EscapeDataString(slotId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeSlotResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings for a slot.
		/// UpdateSlot bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/
		/// </summary>
		/// <param name="slotId">The unique identifier for the slot to update.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The unique identifier of the bot that contains the slot.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot that contains the slot. Must always be <code>DRAFT</code>.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale that contains the slot. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="intentId">The identifier of the intent that contains the slot.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateSlotResponse> UpdateSlotAsync(string slotId, string botId, string botVersion, string localeId, string intentId, UpdateSlotPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/intents/"+ (intentId==null? "" : System.Uri.EscapeDataString(intentId))+"/slots/"+ (slotId==null? "" : System.Uri.EscapeDataString(slotId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateSlotResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a slot type from a bot locale.</p> <p>If a slot is using the slot type, Amazon Lex throws a <code>ResourceInUseException</code> exception. To avoid the exception, set the <code>skipResourceInUseCheck</code> parameter to <code>true</code>.</p>
		/// DeleteSlotType bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/
		/// </summary>
		/// <param name="slotTypeId">The identifier of the slot type to delete.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The identifier of the bot associated with the slot type.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot associated with the slot type.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale that the slot type will be deleted from. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="skipResourceInUseCheck">By default, the <code>DeleteSlotType</code> operations throws a <code>ResourceInUseException</code> exception if you try to delete a slot type used by a slot. Set the <code>skipResourceInUseCheck</code> parameter to <code>true</code> to skip this check and remove the slot type even if a slot uses it.</param>
		public async Task DeleteSlotTypeAsync(string slotTypeId, string botId, string botVersion, string localeId, bool skipResourceInUseCheck, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/slottypes/"+ (slotTypeId==null? "" : System.Uri.EscapeDataString(slotTypeId))+"/&skipResourceInUseCheck="+skipResourceInUseCheck;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets metadata information about a slot type.
		/// DescribeSlotType bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/
		/// </summary>
		/// <param name="slotTypeId">The identifier of the slot type.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The identifier of the bot associated with the slot type.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot associated with the slot type.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the slot type to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <returns>Success</returns>
		public async Task<DescribeSlotTypeResponse> DescribeSlotTypeAsync(string slotTypeId, string botId, string botVersion, string localeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/slottypes/"+ (slotTypeId==null? "" : System.Uri.EscapeDataString(slotTypeId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeSlotTypeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of an existing slot type.
		/// UpdateSlotType bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/
		/// </summary>
		/// <param name="slotTypeId">The unique identifier of the slot type to update.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botId">The identifier of the bot that contains the slot type.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot that contains the slot type. Must be <code>DRAFT</code>.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale that contains the slot type. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		public async Task UpdateSlotTypeAsync(string slotTypeId, string botId, string botVersion, string localeId, UpdateSlotTypePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/slottypes/"+ (slotTypeId==null? "" : System.Uri.EscapeDataString(slotTypeId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The action to delete the selected test set.
		/// DeleteTestSet testsets/{testSetId}
		/// </summary>
		/// <param name="testSetId">The test set Id of the test set to be deleted.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task DeleteTestSetAsync(string testSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testsets/"+ (testSetId==null? "" : System.Uri.EscapeDataString(testSetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets metadata information about the test set.
		/// DescribeTestSet testsets/{testSetId}
		/// </summary>
		/// <param name="testSetId">The test set Id for the test set request.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeTestSetResponse> DescribeTestSetAsync(string testSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testsets/"+ (testSetId==null? "" : System.Uri.EscapeDataString(testSetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeTestSetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The action to update the test set.
		/// UpdateTestSet testsets/{testSetId}
		/// </summary>
		/// <param name="testSetId">The test set Id for which update test operation to be performed.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateTestSetResponse> UpdateTestSetAsync(string testSetId, UpdateTestSetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testsets/"+ (testSetId==null? "" : System.Uri.EscapeDataString(testSetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateTestSetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes stored utterances.</p> <p>Amazon Lex stores the utterances that users send to your bot. Utterances are stored for 15 days for use with the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html">ListAggregatedUtterances</a> operation, and then stored indefinitely for use in improving the ability of your bot to respond to user input..</p> <p>Use the <code>DeleteUtterances</code> operation to manually delete utterances for a specific session. When you use the <code>DeleteUtterances</code> operation, utterances stored for improving your bot's ability to respond to user input are deleted immediately. Utterances stored for use with the <code>ListAggregatedUtterances</code> operation are deleted after 15 days.</p>
		/// DeleteUtterances bots/{botId}/utterances/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot that contains the utterances.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="localeId">The identifier of the language and locale where the utterances were collected. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="sessionId">The unique identifier of the session with the user. The ID is returned in the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_RecognizeText.html">RecognizeText</a> and <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_RecognizeUtterance.html">RecognizeUtterance</a> operations.
		/// Min length: 2
		/// Max length: 100
		// </param>
		public async Task DeleteUtterancesAsync(string botId, string localeId, string sessionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/utterances/&localeId=" + (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"&sessionId=" + (sessionId==null? "" : System.Uri.EscapeDataString(sessionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides metadata information about a bot recommendation. This information will enable you to get a description on the request inputs, to download associated transcripts after processing is complete, and to download intents and slot-types generated by the bot recommendation.
		/// DescribeBotRecommendation bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot associated with the bot recommendation.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot associated with the bot recommendation.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the bot recommendation to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="botRecommendationId">The identifier of the bot recommendation to describe.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeBotRecommendationResponse> DescribeBotRecommendationAsync(string botId, string botVersion, string localeId, string botRecommendationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/botrecommendations/"+ (botRecommendationId==null? "" : System.Uri.EscapeDataString(botRecommendationId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeBotRecommendationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing bot recommendation request.
		/// UpdateBotRecommendation bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot containing the bot recommendation to be updated.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot containing the bot recommendation to be updated.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the bot recommendation to update. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </param>
		/// <param name="botRecommendationId">The unique identifier of the bot recommendation to be updated.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task UpdateBotRecommendationAsync(string botId, string botVersion, string localeId, string botRecommendationId, UpdateBotRecommendationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/botrecommendations/"+ (botRecommendationId==null? "" : System.Uri.EscapeDataString(botRecommendationId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides metadata information about a custom vocabulary.
		/// DescribeCustomVocabularyMetadata bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/metadata
		/// </summary>
		/// <param name="botId">The unique identifier of the bot that contains the custom vocabulary.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The bot version of the bot to return metadata for.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The locale to return the custom vocabulary information for. The locale must be <code>en_GB</code>.</param>
		/// <returns>Success</returns>
		public async Task<DescribeCustomVocabularyMetadataResponse> DescribeCustomVocabularyMetadataAsync(string botId, string botVersion, string localeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/customvocabulary/DEFAULT/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeCustomVocabularyMetadataResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets metadata information about the test execution.
		/// DescribeTestExecution testexecutions/{testExecutionId}
		/// </summary>
		/// <param name="testExecutionId">The execution Id of the test set execution.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeTestExecutionResponse> DescribeTestExecutionAsync(string testExecutionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testexecutions/"+ (testExecutionId==null? "" : System.Uri.EscapeDataString(testExecutionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeTestExecutionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets metadata information about the test set discrepancy report.
		/// DescribeTestSetDiscrepancyReport testsetdiscrepancy/{testSetDiscrepancyReportId}
		/// </summary>
		/// <param name="testSetDiscrepancyReportId">The unique identifier of the test set discrepancy report.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeTestSetDiscrepancyReportResponse> DescribeTestSetDiscrepancyReportAsync(string testSetDiscrepancyReportId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testsetdiscrepancy/"+ (testSetDiscrepancyReportId==null? "" : System.Uri.EscapeDataString(testSetDiscrepancyReportId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeTestSetDiscrepancyReportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets metadata information about the test set generation.
		/// DescribeTestSetGeneration testsetgenerations/{testSetGenerationId}
		/// </summary>
		/// <param name="testSetGenerationId">The unique identifier of the test set generation.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeTestSetGenerationResponse> DescribeTestSetGenerationAsync(string testSetGenerationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testsetgenerations/"+ (testSetGenerationId==null? "" : System.Uri.EscapeDataString(testSetGenerationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeTestSetGenerationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The pre-signed Amazon S3 URL to download the test execution result artifacts.
		/// GetTestExecutionArtifactsUrl testexecutions/{testExecutionId}/artifacturl
		/// </summary>
		/// <param name="testExecutionId">The unique identifier of the completed test execution.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<GetTestExecutionArtifactsUrlResponse> GetTestExecutionArtifactsUrlAsync(string testExecutionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testexecutions/"+ (testExecutionId==null? "" : System.Uri.EscapeDataString(testExecutionId))+"/artifacturl";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetTestExecutionArtifactsUrlResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Provides a list of utterances that users have sent to the bot.</p> <p>Utterances are aggregated by the text of the utterance. For example, all instances where customers used the phrase "I want to order pizza" are aggregated into the same line in the response.</p> <p>You can see both detected utterances and missed utterances. A detected utterance is where the bot properly recognized the utterance and activated the associated intent. A missed utterance was not recognized by the bot and didn't activate an intent.</p> <p>Utterances can be aggregated for a bot alias or for a bot version, but not both at the same time.</p> <p>Utterances statistics are not generated under the following conditions:</p> <ul> <li> <p>The <code>childDirected</code> field was set to true when the bot was created.</p> </li> <li> <p>You are using slot obfuscation with one or more slots.</p> </li> <li> <p>You opted out of participating in improving Amazon Lex.</p> </li> </ul>
		/// ListAggregatedUtterances bots/{botId}/aggregatedutterances/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot associated with this request.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAggregatedUtterancesResponse> ListAggregatedUtterancesAsync(string botId, string maxResults, string nextToken, ListAggregatedUtterancesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/aggregatedutterances/&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAggregatedUtterancesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of bot recommendations that meet the specified criteria.
		/// ListBotRecommendations bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot that contains the bot recommendation list.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot that contains the bot recommendation list.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the bot recommendation list.</param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBotRecommendationsResponse> ListBotRecommendationsAsync(string botId, string botVersion, string localeId, string maxResults, string nextToken, ListBotRecommendationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/botrecommendations/&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBotRecommendationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this to provide your transcript data, and to start the bot recommendation process.
		/// StartBotRecommendation bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/
		/// </summary>
		/// <param name="botId">The unique identifier of the bot containing the bot recommendation.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot containing the bot recommendation.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the bot recommendation to start. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </param>
		public async Task StartBotRecommendationAsync(string botId, string botVersion, string localeId, StartBotRecommendationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/botrecommendations/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of built-in intents provided by Amazon Lex that you can use in your bot. </p> <p>To use a built-in intent as a the base for your own intent, include the built-in intent signature in the <code>parentIntentSignature</code> parameter when you call the <code>CreateIntent</code> operation. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateIntent.html">CreateIntent</a>.</p>
		/// ListBuiltInIntents builtins/locales/{localeId}/intents/
		/// </summary>
		/// <param name="localeId">The identifier of the language and locale of the intents to list. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBuiltInIntentsResponse> ListBuiltInIntentsAsync(string localeId, string maxResults, string nextToken, ListBuiltInIntentsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "builtins/locales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/intents/&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBuiltInIntentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of built-in slot types that meet the specified criteria.
		/// ListBuiltInSlotTypes builtins/locales/{localeId}/slottypes/
		/// </summary>
		/// <param name="localeId">The identifier of the language and locale of the slot types to list. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBuiltInSlotTypesResponse> ListBuiltInSlotTypesAsync(string localeId, string maxResults, string nextToken, ListBuiltInSlotTypesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "builtins/locales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/slottypes/&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBuiltInSlotTypesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Paginated list of custom vocabulary items for a given bot locale's custom vocabulary.
		/// ListCustomVocabularyItems bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/list
		/// </summary>
		/// <param name="botId">The identifier of the version of the bot associated with this custom vocabulary.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The bot version of the bot to the list custom vocabulary request.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).</param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCustomVocabularyItemsResponse> ListCustomVocabularyItemsAsync(string botId, string botVersion, string localeId, string maxResults, string nextToken, ListCustomVocabularyItemsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/customvocabulary/DEFAULT/list&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCustomVocabularyItemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the imports for a bot, bot locale, or custom vocabulary. Imports are kept in the list for 7 days.
		/// ListImports imports/
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImportsResponse> ListImportsAsync(string maxResults, string nextToken, ListImportsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "imports/?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListImportsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts importing a bot, bot locale, or custom vocabulary from a zip archive that you uploaded to an S3 bucket.
		/// StartImport imports/
		/// </summary>
		public async Task StartImportAsync(StartImportPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "imports/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves summary metrics for the intents in your bot. The following fields are required:</p> <ul> <li> <p> <code>metrics</code> – A list of <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsIntentMetric.html">AnalyticsIntentMetric</a> objects. In each object, use the <code>name</code> field to specify the metric to calculate, the <code>statistic</code> field to specify whether to calculate the <code>Sum</code>, <code>Average</code>, or <code>Max</code> number, and the <code>order</code> field to specify whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results, the <code>groupBy</code> field to specify categories by which to group the results, and the <code>binBy</code> field to specify time intervals by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul> <p>Note that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>. You can specify only one <code>order</code> in a given request.</p>
		/// ListIntentMetrics bots/{botId}/analytics/intentmetrics
		/// </summary>
		/// <param name="botId">The identifier for the bot for which you want to retrieve intent metrics.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListIntentMetricsResponse> ListIntentMetricsAsync(string botId, string maxResults, string nextToken, ListIntentMetricsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/analytics/intentmetrics&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListIntentMetricsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves summary statistics for a path of intents that users take over sessions with your bot. The following fields are required:</p> <ul> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> <li> <p> <code>intentPath</code> – Define an order of intents for which you want to retrieve metrics. Separate intents in the path with a forward slash. For example, populate the <code>intentPath</code> field with <code>/BookCar/BookHotel</code> to see details about how many times users invoked the <code>BookCar</code> and <code>BookHotel</code> intents in that order.</p> </li> </ul> <p>Use the optional <code>filters</code> field to filter the results.</p>
		/// ListIntentPaths bots/{botId}/analytics/intentpaths
		/// </summary>
		/// <param name="botId">The identifier for the bot for which you want to retrieve intent path metrics.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<ListIntentPathsResponse> ListIntentPathsAsync(string botId, ListIntentPathsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/analytics/intentpaths";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListIntentPathsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves summary metrics for the stages within intents in your bot. The following fields are required:</p> <ul> <li> <p> <code>metrics</code> – A list of <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsIntentStageMetric.html">AnalyticsIntentStageMetric</a> objects. In each object, use the <code>name</code> field to specify the metric to calculate, the <code>statistic</code> field to specify whether to calculate the <code>Sum</code>, <code>Average</code>, or <code>Max</code> number, and the <code>order</code> field to specify whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results, the <code>groupBy</code> field to specify categories by which to group the results, and the <code>binBy</code> field to specify time intervals by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul> <p>Note that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>. You can only specify one <code>order</code> in a given request.</p>
		/// ListIntentStageMetrics bots/{botId}/analytics/intentstagemetrics
		/// </summary>
		/// <param name="botId">The identifier for the bot for which you want to retrieve intent stage metrics.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListIntentStageMetricsResponse> ListIntentStageMetricsAsync(string botId, string maxResults, string nextToken, ListIntentStageMetricsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/analytics/intentstagemetrics&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListIntentStageMetricsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of recommended intents provided by the bot recommendation that you can use in your bot. Intents in the response are ordered by relevance.
		/// ListRecommendedIntents bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/intents
		/// </summary>
		/// <param name="botId">The unique identifier of the bot associated with the recommended intents.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot that contains the recommended intents.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the recommended intents.</param>
		/// <param name="botRecommendationId">The identifier of the bot recommendation that contains the recommended intents.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRecommendedIntentsResponse> ListRecommendedIntentsAsync(string botId, string botVersion, string localeId, string botRecommendationId, string maxResults, string nextToken, ListRecommendedIntentsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/botrecommendations/"+ (botRecommendationId==null? "" : System.Uri.EscapeDataString(botRecommendationId))+"/intents&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRecommendedIntentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves a list of metadata for individual user sessions with your bot. The <code>startDateTime</code> and <code>endDateTime</code> fields are required. These fields define a time range for which you want to retrieve results. Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results and the <code>sortBy</code> field to specify the values by which to sort the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul>
		/// ListSessionAnalyticsData bots/{botId}/analytics/sessions
		/// </summary>
		/// <param name="botId">The identifier for the bot for which you want to retrieve session analytics.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSessionAnalyticsDataResponse> ListSessionAnalyticsDataAsync(string botId, string maxResults, string nextToken, ListSessionAnalyticsDataPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/analytics/sessions&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSessionAnalyticsDataResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves summary metrics for the user sessions with your bot. The following fields are required:</p> <ul> <li> <p> <code>metrics</code> – A list of <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsSessionMetric.html">AnalyticsSessionMetric</a> objects. In each object, use the <code>name</code> field to specify the metric to calculate, the <code>statistic</code> field to specify whether to calculate the <code>Sum</code>, <code>Average</code>, or <code>Max</code> number, and the <code>order</code> field to specify whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results, the <code>groupBy</code> field to specify categories by which to group the results, and the <code>binBy</code> field to specify time intervals by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul> <p>Note that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>. Currently, you can specify it in either field, but not in both.</p>
		/// ListSessionMetrics bots/{botId}/analytics/sessionmetrics
		/// </summary>
		/// <param name="botId">The identifier for the bot for which you want to retrieve session metrics.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSessionMetricsResponse> ListSessionMetricsAsync(string botId, string maxResults, string nextToken, ListSessionMetricsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/analytics/sessionmetrics&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSessionMetricsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of tags associated with a resource. Only bots, bot aliases, and bot channels can have tags associated with them.
		/// ListTagsForResource tags/{resourceARN}
		/// </summary>
		/// <param name="resourceARN">The Amazon Resource Name (ARN) of the resource to get a list of tags for.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceARN, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceARN==null? "" : System.Uri.EscapeDataString(resourceARN));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds the specified tags to the specified resource. If a tag key already exists, the existing value is replaced with the new value.
		/// TagResource tags/{resourceARN}
		/// </summary>
		/// <param name="resourceARN">The Amazon Resource Name (ARN) of the bot, bot alias, or bot channel to tag.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceARN, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceARN==null? "" : System.Uri.EscapeDataString(resourceARN));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of test execution result items.
		/// ListTestExecutionResultItems testexecutions/{testExecutionId}/results
		/// </summary>
		/// <param name="testExecutionId">The unique identifier of the test execution to list the result items.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestExecutionResultItemsResponse> ListTestExecutionResultItemsAsync(string testExecutionId, string maxResults, string nextToken, ListTestExecutionResultItemsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testexecutions/"+ (testExecutionId==null? "" : System.Uri.EscapeDataString(testExecutionId))+"/results&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTestExecutionResultItemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The list of test set executions.
		/// ListTestExecutions testexecutions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestExecutionsResponse> ListTestExecutionsAsync(string maxResults, string nextToken, ListTestExecutionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testexecutions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTestExecutionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The list of test set records.
		/// ListTestSetRecords testsets/{testSetId}/records
		/// </summary>
		/// <param name="testSetId">The identifier of the test set to list its test set records.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestSetRecordsResponse> ListTestSetRecordsAsync(string testSetId, string maxResults, string nextToken, ListTestSetRecordsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testsets/"+ (testSetId==null? "" : System.Uri.EscapeDataString(testSetId))+"/records&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTestSetRecordsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The list of the test sets
		/// ListTestSets testsets
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestSetsResponse> ListTestSetsAsync(string maxResults, string nextToken, ListTestSetsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testsets?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTestSetsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <note> <p>To use this API operation, your IAM role must have permissions to perform the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html">ListAggregatedUtterances</a> operation, which provides access to utterance-related analytics. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/monitoring-utterances.html">Viewing utterance statistics</a> for the IAM policy to apply to the IAM role.</p> </note> <p>Retrieves a list of metadata for individual user utterances to your bot. The following fields are required:</p> <ul> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results and the <code>sortBy</code> field to specify the values by which to sort the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul>
		/// ListUtteranceAnalyticsData bots/{botId}/analytics/utterances
		/// </summary>
		/// <param name="botId">The identifier for the bot for which you want to retrieve utterance analytics.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUtteranceAnalyticsDataResponse> ListUtteranceAnalyticsDataAsync(string botId, string maxResults, string nextToken, ListUtteranceAnalyticsDataPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/analytics/utterances&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListUtteranceAnalyticsDataResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <note> <p>To use this API operation, your IAM role must have permissions to perform the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html">ListAggregatedUtterances</a> operation, which provides access to utterance-related analytics. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/monitoring-utterances.html">Viewing utterance statistics</a> for the IAM policy to apply to the IAM role.</p> </note> <p>Retrieves summary metrics for the utterances in your bot. The following fields are required:</p> <ul> <li> <p> <code>metrics</code> – A list of <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsUtteranceMetric.html">AnalyticsUtteranceMetric</a> objects. In each object, use the <code>name</code> field to specify the metric to calculate, the <code>statistic</code> field to specify whether to calculate the <code>Sum</code>, <code>Average</code>, or <code>Max</code> number, and the <code>order</code> field to specify whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results, the <code>groupBy</code> field to specify categories by which to group the results, and the <code>binBy</code> field to specify time intervals by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul> <p>Note that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>. Currently, you can specify it in either field, but not in both.</p>
		/// ListUtteranceMetrics bots/{botId}/analytics/utterancemetrics
		/// </summary>
		/// <param name="botId">The identifier for the bot for which you want to retrieve utterance metrics.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUtteranceMetricsResponse> ListUtteranceMetricsAsync(string botId, string maxResults, string nextToken, ListUtteranceMetricsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/analytics/utterancemetrics&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListUtteranceMetricsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for associated transcripts that meet the specified criteria.
		/// SearchAssociatedTranscripts bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/associatedtranscripts
		/// </summary>
		/// <param name="botId">The unique identifier of the bot associated with the transcripts that you are searching.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot containing the transcripts that you are searching.
		/// Min length: 1
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </param>
		/// <param name="botRecommendationId">The unique identifier of the bot recommendation associated with the transcripts to search.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<SearchAssociatedTranscriptsResponse> SearchAssociatedTranscriptsAsync(string botId, string botVersion, string localeId, string botRecommendationId, SearchAssociatedTranscriptsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/botrecommendations/"+ (botRecommendationId==null? "" : System.Uri.EscapeDataString(botRecommendationId))+"/associatedtranscripts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchAssociatedTranscriptsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The action to start test set execution.
		/// StartTestExecution testsets/{testSetId}/testexecutions
		/// </summary>
		/// <param name="testSetId">The test set Id for the test set execution.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task StartTestExecutionAsync(string testSetId, StartTestExecutionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testsets/"+ (testSetId==null? "" : System.Uri.EscapeDataString(testSetId))+"/testexecutions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The action to start the generation of test set.
		/// StartTestSetGeneration testsetgenerations
		/// </summary>
		public async Task StartTestSetGenerationAsync(StartTestSetGenerationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "testsetgenerations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop an already running Bot Recommendation request.
		/// StopBotRecommendation bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/stopbotrecommendation
		/// </summary>
		/// <param name="botId">The unique identifier of the bot containing the bot recommendation to be stopped.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <param name="botVersion">The version of the bot containing the bot recommendation.
		/// Min length: 5
		/// Max length: 5
		// </param>
		/// <param name="localeId">The identifier of the language and locale of the bot recommendation to stop. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </param>
		/// <param name="botRecommendationId">The unique identifier of the bot recommendation to be stopped.
		/// Min length: 10
		/// Max length: 10
		// </param>
		public async Task StopBotRecommendationAsync(string botId, string botVersion, string localeId, string botRecommendationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botversions/"+ (botVersion==null? "" : System.Uri.EscapeDataString(botVersion))+"/botlocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/botrecommendations/"+ (botRecommendationId==null? "" : System.Uri.EscapeDataString(botRecommendationId))+"/stopbotrecommendation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes tags from a bot, bot alias, or bot channel.
		/// UntagResource tags/{resourceARN}#tagKeys
		/// </summary>
		/// <param name="resourceARN">The Amazon Resource Name (ARN) of the resource to remove the tags from.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <param name="tagKeys">A list of tag keys to remove from the resource. If a tag key does not exist on the resource, it is ignored.
		/// Minimum items: 0
		/// Maximum items: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceARN, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceARN==null? "" : System.Uri.EscapeDataString(resourceARN))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class BatchCreateCustomVocabularyItemPutBody
	{
		
		/// <summary>
		/// A list of new custom vocabulary items. Each entry must contain a phrase and can optionally contain a displayAs and/or a weight.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customVocabularyItemList")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public NewCustomVocabularyItem[] CustomVocabularyItemList { get; set; }
	}
	
	public class BatchDeleteCustomVocabularyItemPostBody
	{
		
		/// <summary>
		/// A list of custom vocabulary items requested to be deleted. Each entry must contain the unique custom vocabulary entry identifier.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customVocabularyItemList")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public CustomVocabularyEntryId[] CustomVocabularyItemList { get; set; }
	}
	
	public class BatchUpdateCustomVocabularyItemPutBody
	{
		
		/// <summary>
		/// A list of custom vocabulary items with updated fields. Each entry must contain a phrase and can optionally contain a displayAs and/or a weight.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customVocabularyItemList")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public CustomVocabularyItem[] CustomVocabularyItemList { get; set; }
	}
	
	public class UpdateBotLocalePutBody
	{
		
		/// <summary>
		/// The new description of the locale.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The new confidence threshold where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> intents in the list of possible intents for an utterance.
		/// Required
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public double NluIntentConfidenceThreshold { get; set; }
		
		/// <summary>
		/// Defines settings for using an Amazon Polly voice to communicate with a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voiceSettings")]
		public UpdateBotLocalePutBodyVoiceSettings VoiceSettings { get; set; }
	}
	
	public class UpdateBotLocalePutBodyVoiceSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="voiceId")]
		public string VoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engine")]
		public VoiceEngine Engine { get; set; }
	}
	
	public class CreateBotPutBody
	{
		
		/// <summary>
		/// The name of the bot. The bot name must be unique in the account that creates the bot.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string BotName { get; set; }
		
		/// <summary>
		/// A description of the bot. It appears in lists to help you identify a particular bot.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.
		/// Required
		/// Min length: 32
		/// Max length: 2048
		/// Pattern: ^arn:aws:iam::[0-9]{12}:role/.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:iam::[0-9]{12}:role/.*$")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataPrivacy")]
		public CreateBotPutBodyDataPrivacy DataPrivacy { get; set; }
		
		/// <summary>
		/// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. </p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
		/// Required
		/// Minimum: 60
		/// Maximum: 86400
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		[System.ComponentModel.DataAnnotations.Range(60, 86400)]
		public int IdleSessionTTLInSeconds { get; set; }
		
		/// <summary>
		/// A list of tags to add to the bot. You can only add tags when you create a bot. You can't use the <code>UpdateBot</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botTags")]
		public System.Collections.Generic.Dictionary<string, string> BotTags { get; set; }
		
		/// <summary>
		/// A list of tags to add to the test alias for a bot. You can only add tags when you create a bot. You can't use the <code>UpdateAlias</code> operation to update tags. To update tags on the test alias, use the <code>TagResource</code> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testBotAliasTags")]
		public System.Collections.Generic.Dictionary<string, string> TestBotAliasTags { get; set; }
		
		/// <summary>
		/// The type of a bot to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botType")]
		public BotType BotType { get; set; }
		
		/// <summary>
		/// The list of bot members in a network to be created.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botMembers")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public BotMember[] BotMembers { get; set; }
	}
	
	public class CreateBotPutBodyDataPrivacy
	{
		
		[System.Runtime.Serialization.DataMember(Name="childDirected")]
		public System.Nullable<System.Boolean> ChildDirected { get; set; }
	}
	
	public class ListBotsPostBody
	{
		
		/// <summary>
		/// Specifies attributes for sorting a list of bots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListBotsPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public BotFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of bots to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>If the response from the <code>ListBots</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. </p> <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListBots</code> request to return the next page of results. For a complete set of results, call the <code>ListBots</code> operation until the <code>nextToken</code> returned in the response is null.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListBotsPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public BotSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class CreateBotAliasPutBody
	{
		
		/// <summary>
		/// The alias to create. The name must be unique for the bot.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botAliasName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string BotAliasName { get; set; }
		
		/// <summary>
		/// A description of the alias. Use this description to help identify the alias.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The version of the bot that this alias points to. You can use the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_UpdateBotAlias.html">UpdateBotAlias</a> operation to change the bot version associated with the alias.
		/// Min length: 1
		/// Max length: 5
		/// Pattern: ^[0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]+$")]
		public string BotVersion { get; set; }
		
		/// <summary>
		/// Maps configuration information to a specific locale. You can use this parameter to specify a specific Lambda function to run different functions in different locales.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botAliasLocaleSettings")]
		public System.Collections.Generic.Dictionary<string, BotAliasLocaleSettings> BotAliasLocaleSettings { get; set; }
		
		/// <summary>
		/// Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversationLogSettings")]
		public CreateBotAliasPutBodyConversationLogSettings ConversationLogSettings { get; set; }
		
		/// <summary>
		/// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentimentAnalysisSettings")]
		public CreateBotAliasPutBodySentimentAnalysisSettings SentimentAnalysisSettings { get; set; }
		
		/// <summary>
		/// A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the <code>UpdateBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateBotAliasPutBodyConversationLogSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="textLogSettings")]
		public TextLogSetting[] TextLogSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="audioLogSettings")]
		public AudioLogSetting[] AudioLogSettings { get; set; }
	}
	
	public class CreateBotAliasPutBodySentimentAnalysisSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="detectSentiment")]
		public System.Nullable<System.Boolean> DetectSentiment { get; set; }
	}
	
	public class ListBotAliasesPostBody
	{
		
		/// <summary>
		/// The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the <code>ListBotAliases</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class CreateBotLocalePutBody
	{
		
		/// <summary>
		/// The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		/// <summary>
		/// A description of the bot locale. Use this to help identify the bot locale in lists.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot.</p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>RecognizeText</code> operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p> </li> </ul>
		/// Required
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public double NluIntentConfidenceThreshold { get; set; }
		
		/// <summary>
		/// Defines settings for using an Amazon Polly voice to communicate with a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voiceSettings")]
		public CreateBotLocalePutBodyVoiceSettings VoiceSettings { get; set; }
	}
	
	public class CreateBotLocalePutBodyVoiceSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="voiceId")]
		public string VoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engine")]
		public VoiceEngine Engine { get; set; }
	}
	
	public class ListBotLocalesPostBody
	{
		
		/// <summary>
		/// Specifies attributes for sorting a list of bot locales.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListBotLocalesPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// Provides the specification for a filter used to limit the response to only those locales that match the filter specification. You can only specify one filter and one value to filter on.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public BotLocaleFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the <code>ListBotLocales</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token as the <code>nextToken</code> parameter to return the next page of results. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListBotLocalesPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public BotLocaleSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class CreateBotVersionPutBody
	{
		
		/// <summary>
		/// A description of the version. Use the description to help identify the version in lists.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the locales that Amazon Lex adds to this version. You can choose the <code>Draft</code> version or any other previously published version for each locale. When you specify a source version, the locale data is copied from the source version to the new version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botVersionLocaleSpecification")]
		public System.Collections.Generic.Dictionary<string, BotVersionLocaleDetails> BotVersionLocaleSpecification { get; set; }
	}
	
	public class ListBotVersionsPostBody
	{
		
		/// <summary>
		/// Specifies attributes for sorting a list of bot versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListBotVersionsPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// The maximum number of versions to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response to the <code>ListBotVersion</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListBotVersionsPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public BotVersionSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class CreateExportPutBody
	{
		
		/// <summary>
		/// Provides information about the bot or bot locale that you want to export. You can specify the <code>botExportSpecification</code> or the <code>botLocaleExportSpecification</code>, but not both.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceSpecification")]
		public CreateExportPutBodyResourceSpecification ResourceSpecification { get; set; }
		
		/// <summary>
		/// The file format of the bot or bot locale definition files.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileFormat")]
		public ImportExportFileFormat FileFormat { get; set; }
		
		/// <summary>
		/// An password to use to encrypt the exported archive. Using a password is optional, but you should encrypt the archive to protect the data in transit between Amazon Lex and your local computer.
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePassword")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string FilePassword { get; set; }
	}
	
	public class CreateExportPutBodyResourceSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="botExportSpecification")]
		public BotExportSpecification BotExportSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleExportSpecification")]
		public BotLocaleExportSpecification BotLocaleExportSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customVocabularyExportSpecification")]
		public CustomVocabularyExportSpecification CustomVocabularyExportSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetExportSpecification")]
		public TestSetExportSpecification TestSetExportSpecification { get; set; }
	}
	
	public class ListExportsPostBody
	{
		
		/// <summary>
		/// The unique identifier that Amazon Lex assigned to the bot.
		/// Min length: 10
		/// Max length: 10
		/// Pattern: ^[0-9a-zA-Z]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botId")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9a-zA-Z]+$")]
		public string BotId { get; set; }
		
		/// <summary>
		/// The version of the bot to list exports for. 
		/// Min length: 1
		/// Max length: 5
		/// Pattern: ^(DRAFT|[0-9]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(DRAFT|[0-9]+)$")]
		public string BotVersion { get; set; }
		
		/// <summary>
		/// Provides information about sorting a list of exports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListExportsPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// Provides the specification of a filter used to limit the exports in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public ExportFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of exports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>If the response from the <code>ListExports</code> operation contains more results that specified in the <code>maxResults</code> parameter, a token is returned in the response. </p> <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListExports</code> request to return the next page of results. For a complete set of results, call the <code>ListExports</code> operation until the <code>nextToken</code> returned in the response is null.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Specifies the resources that should be exported. If you don't specify a resource type in the <code>filters</code> parameter, both bot locales and custom vocabularies are exported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	public class ListExportsPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public ExportSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class CreateIntentPutBody
	{
		
		/// <summary>
		/// The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string IntentName { get; set; }
		
		/// <summary>
		/// A description of the intent. Use the description to help identify the intent in lists.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// A unique identifier for the built-in intent to base this intent on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		/// <summary>
		/// <p>An array of strings that a user might say to signal the intent. For example, "I want a pizza", or "I want a {PizzaSize} pizza". </p> <p>In an utterance, slot names are enclosed in curly braces ("{", "}") to indicate where they should be displayed in the utterance shown to the user.. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public SampleUtterance[] SampleUtterances { get; set; }
		
		/// <summary>
		/// Settings that determine the Lambda function that Amazon Lex uses for processing user responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public CreateIntentPutBodyDialogCodeHook DialogCodeHook { get; set; }
		
		/// <summary>
		/// Determines if a Lambda function should be invoked for a specific intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfillmentCodeHook")]
		public CreateIntentPutBodyFulfillmentCodeHook FulfillmentCodeHook { get; set; }
		
		/// <summary>
		/// Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intentConfirmationSetting")]
		public CreateIntentPutBodyIntentConfirmationSetting IntentConfirmationSetting { get; set; }
		
		/// <summary>
		/// Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intentClosingSetting")]
		public CreateIntentPutBodyIntentClosingSetting IntentClosingSetting { get; set; }
		
		/// <summary>
		/// <p>A list of contexts that must be active for this intent to be considered by Amazon Lex.</p> <p>When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent.</p> <p>A context can be automatically activated using the <code>outputContexts</code> property or it can be set at runtime.</p> <p> For example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond.</p> <p>An intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent.</p>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public InputContext[] InputContexts { get; set; }
		
		/// <summary>
		/// <p>A lists of contexts that the intent activates when it is fulfilled.</p> <p>You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. </p> <p>When you use the <code>outputContextsList</code> property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active.</p>
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public OutputContext[] OutputContexts { get; set; }
		
		/// <summary>
		/// Provides configuration information for the <code>AMAZON.KendraSearchIntent</code> intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public CreateIntentPutBodyKendraConfiguration KendraConfiguration { get; set; }
		
		/// <summary>
		/// Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialResponseSetting")]
		public CreateIntentPutBodyInitialResponseSetting InitialResponseSetting { get; set; }
	}
	
	public class CreateIntentPutBodyDialogCodeHook
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	public class CreateIntentPutBodyFulfillmentCodeHook
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postFulfillmentStatusSpecification")]
		public PostFulfillmentStatusSpecification PostFulfillmentStatusSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentUpdatesSpecification")]
		public FulfillmentUpdatesSpecification FulfillmentUpdatesSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
	}
	
	public class CreateIntentPutBodyIntentConfirmationSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="promptSpecification")]
		public PromptSpecification PromptSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="declinationResponse")]
		public ResponseSpecification DeclinationResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmationResponse")]
		public ResponseSpecification ConfirmationResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationNextStep")]
		public DialogState ConfirmationNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationConditional")]
		public ConditionalSpecification ConfirmationConditional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="declinationNextStep")]
		public DialogState DeclinationNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="declinationConditional")]
		public ConditionalSpecification DeclinationConditional { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureResponse")]
		public ResponseSpecification FailureResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureNextStep")]
		public DialogState FailureNextStep { get; set; }
		
		/// <summary>
		/// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureConditional")]
		public ConditionalSpecification FailureConditional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeHook")]
		public DialogCodeHookInvocationSetting CodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elicitationCodeHook")]
		public ElicitationCodeHookInvocationSetting ElicitationCodeHook { get; set; }
	}
	
	public class CreateIntentPutBodyIntentClosingSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="closingResponse")]
		public ResponseSpecification ClosingResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextStep")]
		public DialogState NextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conditional")]
		public ConditionalSpecification Conditional { get; set; }
	}
	
	public class CreateIntentPutBodyKendraConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="kendraIndex")]
		public string KendraIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryFilterStringEnabled")]
		public System.Nullable<System.Boolean> QueryFilterStringEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryFilterString")]
		public string QueryFilterString { get; set; }
	}
	
	public class CreateIntentPutBodyInitialResponseSetting
	{
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialResponse")]
		public ResponseSpecification InitialResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextStep")]
		public DialogState NextStep { get; set; }
		
		/// <summary>
		/// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditional")]
		public ConditionalSpecification Conditional { get; set; }
		
		/// <summary>
		/// Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeHook")]
		public DialogCodeHookInvocationSetting CodeHook { get; set; }
	}
	
	public class ListIntentsPostBody
	{
		
		/// <summary>
		/// Specifies attributes for sorting a list of intents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListIntentsPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// Provides the specification of a filter used to limit the intents in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public IntentFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of intents to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>If the response from the <code>ListIntents</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response.</p> <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListIntents</code> request to return the next page of results. For a complete set of results, call the <code>ListIntents</code> operation until the <code>nextToken</code> returned in the response is null.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListIntentsPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public IntentSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class CreateResourcePolicyPostBody
	{
		
		/// <summary>
		/// <p>A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html"> IAM JSON policy reference </a>. </p> <p>If the policy isn't valid, Amazon Lex returns a validation exception.</p>
		/// Required
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		public string Policy { get; set; }
	}
	
	public class UpdateResourcePolicyPutBody
	{
		
		/// <summary>
		/// <p>A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html"> IAM JSON policy reference </a>. </p> <p>If the policy isn't valid, Amazon Lex returns a validation exception.</p>
		/// Required
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		public string Policy { get; set; }
	}
	
	public class CreateResourcePolicyStatementPostBody
	{
		
		/// <summary>
		/// The name of the statement. The ID is the same as the <code>Sid</code> IAM property. The statement name must be unique within the policy. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html">IAM JSON policy elements: Sid</a>. 
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statementId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string StatementId { get; set; }
		
		/// <summary>
		/// Determines whether the statement allows or denies access to the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effect")]
		public Effect Effect { get; set; }
		
		/// <summary>
		/// An IAM principal, such as an IAM user, IAM role, or Amazon Web Services services that is allowed or denied access to a resource. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html">Amazon Web Services JSON policy elements: Principal</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public Principal[] Principal { get; set; }
		
		/// <summary>
		/// The Amazon Lex action that this policy either allows or denies. The action must apply to the resource type of the specified ARN. For more information, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html"> Actions, resources, and condition keys for Amazon Lex V2</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string[] Action { get; set; }
		
		/// <summary>
		/// <p>Specifies a condition when the policy is in effect. If the principal of the policy is a service principal, you must provide two condition blocks, one with a SourceAccount global condition key and one with a SourceArn global condition key.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html">IAM JSON policy elements: Condition </a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public System.Collections.Generic.Dictionary<string, ConditionKeyValueMap> Condition { get; set; }
	}
	
	public class CreateSlotPutBody
	{
		
		/// <summary>
		/// The name of the slot. Slot names must be unique within the bot that contains the slot.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string SlotName { get; set; }
		
		/// <summary>
		/// A description of the slot. Use this to help identify the slot in lists.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The unique identifier for the slot type associated with this slot. The slot type determines the values that can be entered into the slot.
		/// Min length: 1
		/// Max length: 25
		/// Pattern: ^((AMAZON\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^((AMAZON\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$")]
		public string SlotTypeId { get; set; }
		
		/// <summary>
		/// Specifies the elicitation setting details eliciting a slot.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valueElicitationSetting")]
		public CreateSlotPutBodyValueElicitationSetting ValueElicitationSetting { get; set; }
		
		/// <summary>
		/// Determines whether Amazon Lex obscures slot values in conversation logs. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscationSetting")]
		public CreateSlotPutBodyObfuscationSetting ObfuscationSetting { get; set; }
		
		/// <summary>
		/// Indicates whether a slot can return multiple values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleValuesSetting")]
		public CreateSlotPutBodyMultipleValuesSetting MultipleValuesSetting { get; set; }
		
		/// <summary>
		/// Specifications for the constituent sub slots and the expression for the composite slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subSlotSetting")]
		public CreateSlotPutBodySubSlotSetting SubSlotSetting { get; set; }
	}
	
	public class CreateSlotPutBodyValueElicitationSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultValueSpecification")]
		public SlotDefaultValueSpecification DefaultValueSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotConstraint")]
		public SlotConstraint SlotConstraint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="promptSpecification")]
		public PromptSpecification PromptSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public SampleUtterance[] SampleUtterances { get; set; }
		
		/// <summary>
		/// Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitAndContinueSpecification")]
		public WaitAndContinueSpecification WaitAndContinueSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotCaptureSetting")]
		public SlotCaptureSetting SlotCaptureSetting { get; set; }
	}
	
	public class CreateSlotPutBodyObfuscationSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="obfuscationSettingType")]
		public ObfuscationSettingType ObfuscationSettingType { get; set; }
	}
	
	public class CreateSlotPutBodyMultipleValuesSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowMultipleValues")]
		public System.Nullable<System.Boolean> AllowMultipleValues { get; set; }
	}
	
	public class CreateSlotPutBodySubSlotSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotSpecifications")]
		public SubSlotSpecificationMap SlotSpecifications { get; set; }
	}
	
	public class ListSlotsPostBody
	{
		
		/// <summary>
		/// Specifies attributes for sorting a list of bots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListSlotsPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// Provides the specification of a filter used to limit the slots in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public SlotFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of slots to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the <code>ListSlots</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListSlotsPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public SlotSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class CreateSlotTypePutBody
	{
		
		/// <summary>
		/// The name for the slot. A slot type name must be unique within the intent.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotTypeName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string SlotTypeName { get; set; }
		
		/// <summary>
		/// A description of the slot type. Use the description to help identify the slot type in lists.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of <code>SlotTypeValue</code> objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.
		/// Minimum items: 1
		/// Maximum items: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotTypeValues")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public SlotTypeValue[] SlotTypeValues { get; set; }
		
		/// <summary>
		/// Contains settings used by Amazon Lex to select a slot value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueSelectionSetting")]
		public CreateSlotTypePutBodyValueSelectionSetting ValueSelectionSetting { get; set; }
		
		/// <summary>
		/// <p>The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type.</p> <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		/// <summary>
		/// Provides information about the external source of the slot type's definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalSourceSetting")]
		public CreateSlotTypePutBodyExternalSourceSetting ExternalSourceSetting { get; set; }
		
		/// <summary>
		/// A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compositeSlotTypeSetting")]
		public CreateSlotTypePutBodyCompositeSlotTypeSetting CompositeSlotTypeSetting { get; set; }
	}
	
	public class CreateSlotTypePutBodyValueSelectionSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="resolutionStrategy")]
		public SlotValueResolutionStrategy ResolutionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regexFilter")]
		public SlotValueRegexFilter RegexFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="advancedRecognitionSetting")]
		public AdvancedRecognitionSetting AdvancedRecognitionSetting { get; set; }
	}
	
	public class CreateSlotTypePutBodyExternalSourceSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="grammarSlotTypeSetting")]
		public GrammarSlotTypeSetting GrammarSlotTypeSetting { get; set; }
	}
	
	public class CreateSlotTypePutBodyCompositeSlotTypeSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="subSlots")]
		public SubSlotTypeComposition[] SubSlots { get; set; }
	}
	
	public class ListSlotTypesPostBody
	{
		
		/// <summary>
		/// Specifies attributes for sorting a list of slot types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListSlotTypesPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// Provides the specification of a filter used to limit the slot types in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public SlotTypeFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of slot types to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the <code>ListSlotTypes</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListSlotTypesPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public SlotTypeSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class CreateTestSetDiscrepancyReportPostBody
	{
		
		/// <summary>
		/// Contains information about the resource used for the test set discrepancy report.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public CreateTestSetDiscrepancyReportPostBodyTarget Target { get; set; }
	}
	
	public class CreateTestSetDiscrepancyReportPostBodyTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasTarget")]
		public TestSetDiscrepancyReportBotAliasTarget BotAliasTarget { get; set; }
	}
	
	public class UpdateBotPutBody
	{
		
		/// <summary>
		/// The new name of the bot. The name must be unique in the account that creates the bot.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string BotName { get; set; }
		
		/// <summary>
		/// A description of the bot.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.
		/// Required
		/// Min length: 32
		/// Max length: 2048
		/// Pattern: ^arn:aws:iam::[0-9]{12}:role/.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:iam::[0-9]{12}:role/.*$")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataPrivacy")]
		public UpdateBotPutBodyDataPrivacy DataPrivacy { get; set; }
		
		/// <summary>
		/// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
		/// Required
		/// Minimum: 60
		/// Maximum: 86400
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		[System.ComponentModel.DataAnnotations.Range(60, 86400)]
		public int IdleSessionTTLInSeconds { get; set; }
		
		/// <summary>
		/// The type of the bot to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botType")]
		public BotType BotType { get; set; }
		
		/// <summary>
		/// The list of bot members in the network associated with the update action.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botMembers")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public BotMember[] BotMembers { get; set; }
	}
	
	public class UpdateBotPutBodyDataPrivacy
	{
		
		[System.Runtime.Serialization.DataMember(Name="childDirected")]
		public System.Nullable<System.Boolean> ChildDirected { get; set; }
	}
	
	public class UpdateBotAliasPutBody
	{
		
		/// <summary>
		/// The new name to assign to the bot alias.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botAliasName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string BotAliasName { get; set; }
		
		/// <summary>
		/// The new description to assign to the bot alias.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The new bot version to assign to the bot alias.
		/// Min length: 1
		/// Max length: 5
		/// Pattern: ^(DRAFT|[0-9]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(DRAFT|[0-9]+)$")]
		public string BotVersion { get; set; }
		
		/// <summary>
		/// The new Lambda functions to use in each locale for the bot alias.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botAliasLocaleSettings")]
		public System.Collections.Generic.Dictionary<string, BotAliasLocaleSettings> BotAliasLocaleSettings { get; set; }
		
		/// <summary>
		/// Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversationLogSettings")]
		public UpdateBotAliasPutBodyConversationLogSettings ConversationLogSettings { get; set; }
		
		/// <summary>
		/// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentimentAnalysisSettings")]
		public UpdateBotAliasPutBodySentimentAnalysisSettings SentimentAnalysisSettings { get; set; }
	}
	
	public class UpdateBotAliasPutBodyConversationLogSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="textLogSettings")]
		public TextLogSetting[] TextLogSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="audioLogSettings")]
		public AudioLogSetting[] AudioLogSettings { get; set; }
	}
	
	public class UpdateBotAliasPutBodySentimentAnalysisSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="detectSentiment")]
		public System.Nullable<System.Boolean> DetectSentiment { get; set; }
	}
	
	public class UpdateExportPutBody
	{
		
		/// <summary>
		/// The new password to use to encrypt the export zip archive.
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePassword")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string FilePassword { get; set; }
	}
	
	public class UpdateIntentPutBody
	{
		
		/// <summary>
		/// The new name for the intent.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string IntentName { get; set; }
		
		/// <summary>
		/// The new description of the intent.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The signature of the new built-in intent to use as the parent of this intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		/// <summary>
		/// New utterances used to invoke the intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public SampleUtterance[] SampleUtterances { get; set; }
		
		/// <summary>
		/// Settings that determine the Lambda function that Amazon Lex uses for processing user responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public UpdateIntentPutBodyDialogCodeHook DialogCodeHook { get; set; }
		
		/// <summary>
		/// Determines if a Lambda function should be invoked for a specific intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfillmentCodeHook")]
		public UpdateIntentPutBodyFulfillmentCodeHook FulfillmentCodeHook { get; set; }
		
		/// <summary>
		/// A new list of slots and their priorities that are contained by the intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotPriorities")]
		public SlotPriority[] SlotPriorities { get; set; }
		
		/// <summary>
		/// Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intentConfirmationSetting")]
		public UpdateIntentPutBodyIntentConfirmationSetting IntentConfirmationSetting { get; set; }
		
		/// <summary>
		/// Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intentClosingSetting")]
		public UpdateIntentPutBodyIntentClosingSetting IntentClosingSetting { get; set; }
		
		/// <summary>
		/// A new list of contexts that must be active in order for Amazon Lex to consider the intent.
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public InputContext[] InputContexts { get; set; }
		
		/// <summary>
		/// A new list of contexts that Amazon Lex activates when the intent is fulfilled.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public OutputContext[] OutputContexts { get; set; }
		
		/// <summary>
		/// Provides configuration information for the <code>AMAZON.KendraSearchIntent</code> intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public UpdateIntentPutBodyKendraConfiguration KendraConfiguration { get; set; }
		
		/// <summary>
		/// Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialResponseSetting")]
		public UpdateIntentPutBodyInitialResponseSetting InitialResponseSetting { get; set; }
	}
	
	public class UpdateIntentPutBodyDialogCodeHook
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	public class UpdateIntentPutBodyFulfillmentCodeHook
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postFulfillmentStatusSpecification")]
		public PostFulfillmentStatusSpecification PostFulfillmentStatusSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentUpdatesSpecification")]
		public FulfillmentUpdatesSpecification FulfillmentUpdatesSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
	}
	
	public class UpdateIntentPutBodyIntentConfirmationSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="promptSpecification")]
		public PromptSpecification PromptSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="declinationResponse")]
		public ResponseSpecification DeclinationResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmationResponse")]
		public ResponseSpecification ConfirmationResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationNextStep")]
		public DialogState ConfirmationNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationConditional")]
		public ConditionalSpecification ConfirmationConditional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="declinationNextStep")]
		public DialogState DeclinationNextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="declinationConditional")]
		public ConditionalSpecification DeclinationConditional { get; set; }
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureResponse")]
		public ResponseSpecification FailureResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureNextStep")]
		public DialogState FailureNextStep { get; set; }
		
		/// <summary>
		/// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureConditional")]
		public ConditionalSpecification FailureConditional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeHook")]
		public DialogCodeHookInvocationSetting CodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elicitationCodeHook")]
		public ElicitationCodeHookInvocationSetting ElicitationCodeHook { get; set; }
	}
	
	public class UpdateIntentPutBodyIntentClosingSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="closingResponse")]
		public ResponseSpecification ClosingResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextStep")]
		public DialogState NextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conditional")]
		public ConditionalSpecification Conditional { get; set; }
	}
	
	public class UpdateIntentPutBodyKendraConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="kendraIndex")]
		public string KendraIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryFilterStringEnabled")]
		public System.Nullable<System.Boolean> QueryFilterStringEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryFilterString")]
		public string QueryFilterString { get; set; }
	}
	
	public class UpdateIntentPutBodyInitialResponseSetting
	{
		
		/// <summary>
		/// Specifies a list of message groups that Amazon Lex uses to respond the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialResponse")]
		public ResponseSpecification InitialResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextStep")]
		public DialogState NextStep { get; set; }
		
		/// <summary>
		/// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditional")]
		public ConditionalSpecification Conditional { get; set; }
		
		/// <summary>
		/// Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeHook")]
		public DialogCodeHookInvocationSetting CodeHook { get; set; }
	}
	
	public class UpdateSlotPutBody
	{
		
		/// <summary>
		/// The new name for the slot.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string SlotName { get; set; }
		
		/// <summary>
		/// The new description for the slot.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The unique identifier of the new slot type to associate with this slot. 
		/// Min length: 1
		/// Max length: 25
		/// Pattern: ^((AMAZON\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^((AMAZON\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$")]
		public string SlotTypeId { get; set; }
		
		/// <summary>
		/// Specifies the elicitation setting details eliciting a slot.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valueElicitationSetting")]
		public UpdateSlotPutBodyValueElicitationSetting ValueElicitationSetting { get; set; }
		
		/// <summary>
		/// Determines whether Amazon Lex obscures slot values in conversation logs. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscationSetting")]
		public UpdateSlotPutBodyObfuscationSetting ObfuscationSetting { get; set; }
		
		/// <summary>
		/// Indicates whether a slot can return multiple values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleValuesSetting")]
		public UpdateSlotPutBodyMultipleValuesSetting MultipleValuesSetting { get; set; }
		
		/// <summary>
		/// Specifications for the constituent sub slots and the expression for the composite slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subSlotSetting")]
		public UpdateSlotPutBodySubSlotSetting SubSlotSetting { get; set; }
	}
	
	public class UpdateSlotPutBodyValueElicitationSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultValueSpecification")]
		public SlotDefaultValueSpecification DefaultValueSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotConstraint")]
		public SlotConstraint SlotConstraint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="promptSpecification")]
		public PromptSpecification PromptSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public SampleUtterance[] SampleUtterances { get; set; }
		
		/// <summary>
		/// Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitAndContinueSpecification")]
		public WaitAndContinueSpecification WaitAndContinueSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotCaptureSetting")]
		public SlotCaptureSetting SlotCaptureSetting { get; set; }
	}
	
	public class UpdateSlotPutBodyObfuscationSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="obfuscationSettingType")]
		public ObfuscationSettingType ObfuscationSettingType { get; set; }
	}
	
	public class UpdateSlotPutBodyMultipleValuesSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowMultipleValues")]
		public System.Nullable<System.Boolean> AllowMultipleValues { get; set; }
	}
	
	public class UpdateSlotPutBodySubSlotSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotSpecifications")]
		public SubSlotSpecificationMap SlotSpecifications { get; set; }
	}
	
	public class UpdateSlotTypePutBody
	{
		
		/// <summary>
		/// The new name of the slot type.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotTypeName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string SlotTypeName { get; set; }
		
		/// <summary>
		/// The new description of the slot type.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// A new list of values and their optional synonyms that define the values that the slot type can take.
		/// Minimum items: 1
		/// Maximum items: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotTypeValues")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public SlotTypeValue[] SlotTypeValues { get; set; }
		
		/// <summary>
		/// Contains settings used by Amazon Lex to select a slot value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueSelectionSetting")]
		public UpdateSlotTypePutBodyValueSelectionSetting ValueSelectionSetting { get; set; }
		
		/// <summary>
		/// The new built-in slot type that should be used as the parent of this slot type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		/// <summary>
		/// Provides information about the external source of the slot type's definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalSourceSetting")]
		public UpdateSlotTypePutBodyExternalSourceSetting ExternalSourceSetting { get; set; }
		
		/// <summary>
		/// A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compositeSlotTypeSetting")]
		public UpdateSlotTypePutBodyCompositeSlotTypeSetting CompositeSlotTypeSetting { get; set; }
	}
	
	public class UpdateSlotTypePutBodyValueSelectionSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="resolutionStrategy")]
		public SlotValueResolutionStrategy ResolutionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regexFilter")]
		public SlotValueRegexFilter RegexFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="advancedRecognitionSetting")]
		public AdvancedRecognitionSetting AdvancedRecognitionSetting { get; set; }
	}
	
	public class UpdateSlotTypePutBodyExternalSourceSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="grammarSlotTypeSetting")]
		public GrammarSlotTypeSetting GrammarSlotTypeSetting { get; set; }
	}
	
	public class UpdateSlotTypePutBodyCompositeSlotTypeSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="subSlots")]
		public SubSlotTypeComposition[] SubSlots { get; set; }
	}
	
	public class UpdateTestSetPutBody
	{
		
		/// <summary>
		/// The new test set name.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string TestSetName { get; set; }
		
		/// <summary>
		/// The new test set description.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
	}
	
	public class UpdateBotRecommendationPutBody
	{
		
		/// <summary>
		/// The object representing the passwords that were used to encrypt the data related to the bot recommendation, as well as the KMS key ARN used to encrypt the associated metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionSetting")]
		public UpdateBotRecommendationPutBodyEncryptionSetting EncryptionSetting { get; set; }
	}
	
	public class UpdateBotRecommendationPutBodyEncryptionSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleExportPassword")]
		public string BotLocaleExportPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedTranscriptsPassword")]
		public string AssociatedTranscriptsPassword { get; set; }
	}
	
	public class ListAggregatedUtterancesPostBody
	{
		
		/// <summary>
		/// The identifier of the bot alias associated with this request. If you specify the bot alias, you can't specify the bot version.
		/// Min length: 10
		/// Max length: 10
		/// Pattern: ^(\bTSTALIASID\b|[0-9a-zA-Z]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\bTSTALIASID\b|[0-9a-zA-Z]+)$")]
		public string BotAliasId { get; set; }
		
		/// <summary>
		/// The identifier of the bot version associated with this request. If you specify the bot version, you can't specify the bot alias.
		/// Min length: 1
		/// Max length: 5
		/// Pattern: ^(DRAFT|[0-9]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(DRAFT|[0-9]+)$")]
		public string BotVersion { get; set; }
		
		/// <summary>
		/// The identifier of the language and locale where the utterances were collected. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		/// <summary>
		/// Provides parameters for setting the time window and duration for aggregating utterance data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationDuration")]
		public ListAggregatedUtterancesPostBodyAggregationDuration AggregationDuration { get; set; }
		
		/// <summary>
		/// Specifies attributes for sorting a list of utterances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListAggregatedUtterancesPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// Provides the specification of a filter used to limit the utterances in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AggregatedUtterancesFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of utterances to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned. If you don't specify the <code>maxResults</code> parameter, 1,000 results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the <code>ListAggregatedUtterances</code> operation contains more results that specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListAggregatedUtterancesPostBodyAggregationDuration
	{
		
		[System.Runtime.Serialization.DataMember(Name="relativeAggregationDuration")]
		public RelativeAggregationDuration RelativeAggregationDuration { get; set; }
	}
	
	public class ListAggregatedUtterancesPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public AggregatedUtterancesSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class ListBotRecommendationsPostBody
	{
		
		/// <summary>
		/// The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the ListBotRecommendation operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class StartBotRecommendationPutBody
	{
		
		/// <summary>
		/// Indicates the setting of the location where the transcript is stored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transcriptSourceSetting")]
		public StartBotRecommendationPutBodyTranscriptSourceSetting TranscriptSourceSetting { get; set; }
		
		/// <summary>
		/// The object representing the passwords that were used to encrypt the data related to the bot recommendation, as well as the KMS key ARN used to encrypt the associated metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionSetting")]
		public StartBotRecommendationPutBodyEncryptionSetting EncryptionSetting { get; set; }
	}
	
	public class StartBotRecommendationPutBodyTranscriptSourceSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketTranscriptSource")]
		public S3BucketTranscriptSource S3BucketTranscriptSource { get; set; }
	}
	
	public class StartBotRecommendationPutBodyEncryptionSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleExportPassword")]
		public string BotLocaleExportPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedTranscriptsPassword")]
		public string AssociatedTranscriptsPassword { get; set; }
	}
	
	public class ListBuiltInIntentsPostBody
	{
		
		/// <summary>
		/// Specifies attributes for sorting a list of built-in intents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListBuiltInIntentsPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// The maximum number of built-in intents to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 20
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(20, 20)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the <code>ListBuiltInIntents</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListBuiltInIntentsPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public BuiltInIntentSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class ListBuiltInSlotTypesPostBody
	{
		
		/// <summary>
		/// Specifies attributes for sorting a list of built-in slot types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListBuiltInSlotTypesPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// The maximum number of built-in slot types to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 20
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(20, 20)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the <code>ListBuiltInSlotTypes</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListBuiltInSlotTypesPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public BuiltInSlotTypeSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class ListCustomVocabularyItemsPostBody
	{
		
		/// <summary>
		/// The maximum number of items returned by the list operation.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The nextToken identifier to the list custom vocabulary request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListImportsPostBody
	{
		
		/// <summary>
		/// The unique identifier that Amazon Lex assigned to the bot.
		/// Min length: 10
		/// Max length: 10
		/// Pattern: ^[0-9a-zA-Z]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botId")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9a-zA-Z]+$")]
		public string BotId { get; set; }
		
		/// <summary>
		/// The version of the bot to list imports for.
		/// Min length: 5
		/// Max length: 5
		/// Pattern: ^DRAFT$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^DRAFT$")]
		public string BotVersion { get; set; }
		
		/// <summary>
		/// Provides information for sorting a list of imports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListImportsPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public ImportFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of imports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>If the response from the <code>ListImports</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response.</p> <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListImports</code> request to return the next page of results. For a complete set of results, call the <code>ListImports</code> operation until the <code>nextToken</code> returned in the response is null.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Specifies the locale that should be present in the list. If you don't specify a resource type in the <code>filters</code> parameter, the list contains both bot locales and custom vocabularies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
	}
	
	public class ListImportsPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public ExportSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class StartImportPutBody
	{
		
		/// <summary>
		/// The unique identifier for the import. It is included in the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html">CreateUploadUrl</a> operation.
		/// Required
		/// Min length: 10
		/// Max length: 10
		/// Pattern: ^[0-9a-zA-Z]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="importId")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9a-zA-Z]+$")]
		public string ImportId { get; set; }
		
		/// <summary>
		/// Provides information about the bot or bot locale that you want to import. You can specify the <code>botImportSpecification</code> or the <code>botLocaleImportSpecification</code>, but not both.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceSpecification")]
		public StartImportPutBodyResourceSpecification ResourceSpecification { get; set; }
		
		/// <summary>
		/// The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mergeStrategy")]
		public MergeStrategy MergeStrategy { get; set; }
		
		/// <summary>
		/// The password used to encrypt the zip archive that contains the resource definition. You should always encrypt the zip archive to protect it during transit between your site and Amazon Lex.
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePassword")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string FilePassword { get; set; }
	}
	
	public class StartImportPutBodyResourceSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="botImportSpecification")]
		public BotImportSpecification BotImportSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botLocaleImportSpecification")]
		public BotLocaleImportSpecification BotLocaleImportSpecification { get; set; }
		
		/// <summary>
		/// Provides the parameters required for importing a custom vocabulary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customVocabularyImportSpecification")]
		public CustomVocabularyImportSpecification CustomVocabularyImportSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSetImportResourceSpecification")]
		public TestSetImportResourceSpecification TestSetImportResourceSpecification { get; set; }
	}
	
	public class ListIntentMetricsPostBody
	{
		
		/// <summary>
		/// The timestamp that marks the beginning of the range of time for which you want to see intent metrics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// The date and time that marks the end of the range of time for which you want to see intent metrics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the order by which to organize the results.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public AnalyticsIntentMetric[] Metrics { get; set; }
		
		/// <summary>
		/// A list of objects, each of which contains specifications for organizing the results by time.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binBy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AnalyticsBinBySpecification[] BinBy { get; set; }
		
		/// <summary>
		/// <p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p> <ul> <li> <p> <code>IntentName</code> – The name of the intent.</p> </li> <li> <p> <code>IntentEndState</code> – The final state of the intent. The possible end states are detailed in <a href="https://docs.aws.amazon.com/analytics-key-definitions-intents">Key definitions</a> in the user guide.</p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupBy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public AnalyticsIntentGroupBySpecification[] GroupBy { get; set; }
		
		/// <summary>
		/// A list of objects, each of which describes a condition by which you want to filter the results.
		/// Minimum items: 1
		/// Maximum items: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public AnalyticsIntentFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>If the response from the ListIntentMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p> <p>Use the returned token in the nextToken parameter of a ListIntentMetrics request to return the next page of results. For a complete set of results, call the ListIntentMetrics operation until the nextToken returned in the response is null.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListIntentPathsPostBody
	{
		
		/// <summary>
		/// The date and time that marks the beginning of the range of time for which you want to see intent path metrics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// The date and time that marks the end of the range of time for which you want to see intent path metrics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// <p>The intent path for which you want to retrieve metrics. Use a forward slash to separate intents in the path. For example:</p> <ul> <li> <p>/BookCar</p> </li> <li> <p>/BookCar/BookHotel</p> </li> <li> <p>/BookHotel/BookCar</p> </li> </ul>
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentPath")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string IntentPath { get; set; }
		
		/// <summary>
		/// A list of objects, each describes a condition by which you want to filter the results.
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public AnalyticsPathFilter[] Filters { get; set; }
	}
	
	public class ListIntentStageMetricsPostBody
	{
		
		/// <summary>
		/// The date and time that marks the beginning of the range of time for which you want to see intent stage metrics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// The date and time that marks the end of the range of time for which you want to see intent stage metrics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public AnalyticsIntentStageMetric[] Metrics { get; set; }
		
		/// <summary>
		/// A list of objects, each of which contains specifications for organizing the results by time.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binBy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AnalyticsBinBySpecification[] BinBy { get; set; }
		
		/// <summary>
		/// <p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p> <ul> <li> <p> <code>IntentStageName</code> – The name of the intent stage.</p> </li> <li> <p> <code>SwitchedToIntent</code> – The intent to which the conversation was switched (if any).</p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupBy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public AnalyticsIntentStageGroupBySpecification[] GroupBy { get; set; }
		
		/// <summary>
		/// A list of objects, each of which describes a condition by which you want to filter the results.
		/// Minimum items: 1
		/// Maximum items: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public AnalyticsIntentStageFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>If the response from the ListIntentStageMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p> <p>Use the returned token in the nextToken parameter of a ListIntentStageMetrics request to return the next page of results. For a complete set of results, call the ListIntentStageMetrics operation until the nextToken returned in the response is null.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListRecommendedIntentsPostBody
	{
		
		/// <summary>
		/// If the response from the ListRecommendedIntents operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListSessionAnalyticsDataPostBody
	{
		
		/// <summary>
		/// The date and time that marks the beginning of the range of time for which you want to see session analytics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// The date and time that marks the end of the range of time for which you want to see session analytics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// An object specifying the measure and method by which to sort the session analytics data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListSessionAnalyticsDataPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// A list of objects, each of which describes a condition by which you want to filter the results.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AnalyticsSessionFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>If the response from the ListSessionAnalyticsData operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p> <p>Use the returned token in the nextToken parameter of a ListSessionAnalyticsData request to return the next page of results. For a complete set of results, call the ListSessionAnalyticsData operation until the nextToken returned in the response is null.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListSessionAnalyticsDataPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsSessionSortByName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class ListSessionMetricsPostBody
	{
		
		/// <summary>
		/// The date and time that marks the beginning of the range of time for which you want to see session metrics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// The date and time that marks the end of the range of time for which you want to see session metrics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public AnalyticsSessionMetric[] Metrics { get; set; }
		
		/// <summary>
		/// A list of objects, each of which contains specifications for organizing the results by time.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binBy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AnalyticsBinBySpecification[] BinBy { get; set; }
		
		/// <summary>
		/// <p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p> <ul> <li> <p> <code>ConversationEndState</code> – The final state of the conversation. The possible end states are detailed in <a href="https://docs.aws.amazon.com/analytics-key-definitions-conversations">Key definitions</a> in the user guide.</p> </li> <li> <p> <code>LocaleId</code> – The unique identifier of the bot locale.</p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupBy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public AnalyticsSessionGroupBySpecification[] GroupBy { get; set; }
		
		/// <summary>
		/// A list of objects, each of which describes a condition by which you want to filter the results.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AnalyticsSessionFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>If the response from the ListSessionMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p> <p>Use the returned token in the nextToken parameter of a ListSessionMetrics request to return the next page of results. For a complete set of results, call the ListSessionMetrics operation until the nextToken returned in the response is null.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// A list of tag keys to add to the resource. If a tag key already exists, the existing value is replaced with the new value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ListTestExecutionResultItemsPostBody
	{
		
		/// <summary>
		/// Contains information about the method by which to filter the results of the test execution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resultFilterBy")]
		public ListTestExecutionResultItemsPostBodyResultFilterBy ResultFilterBy { get; set; }
		
		/// <summary>
		/// The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListTestExecutionResultItemsPostBodyResultFilterBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="resultTypeFilter")]
		public TestResultTypeFilter ResultTypeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLevelTestResultsFilterBy")]
		public ConversationLevelTestResultsFilterBy ConversationLevelTestResultsFilterBy { get; set; }
	}
	
	public class ListTestExecutionsPostBody
	{
		
		/// <summary>
		/// Contains information about the method by which to sort the instances of test executions you have carried out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListTestExecutionsPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// The maximum number of test executions to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the ListTestExecutions operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListTestExecutionsPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public TestExecutionSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class ListTestSetRecordsPostBody
	{
		
		/// <summary>
		/// The maximum number of test set records to return in each page. If there are fewer records than the max page size, only the actual number of records are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the ListTestSetRecords operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListTestSetsPostBody
	{
		
		/// <summary>
		/// Contains information about the methods by which to sort the test set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListTestSetsPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// The maximum number of test sets to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the ListTestSets operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListTestSetsPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public TestSetSortAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class ListUtteranceAnalyticsDataPostBody
	{
		
		/// <summary>
		/// The date and time that marks the beginning of the range of time for which you want to see utterance analytics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// The date and time that marks the end of the range of time for which you want to see utterance analytics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// An object specifying the measure and method by which to sort the utterance data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListUtteranceAnalyticsDataPostBodySortBy SortBy { get; set; }
		
		/// <summary>
		/// A list of objects, each of which describes a condition by which you want to filter the results.
		/// Minimum items: 1
		/// Maximum items: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public AnalyticsUtteranceFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>If the response from the ListUtteranceAnalyticsData operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p> <p>Use the returned token in the nextToken parameter of a ListUtteranceAnalyticsData request to return the next page of results. For a complete set of results, call the ListUtteranceAnalyticsData operation until the nextToken returned in the response is null.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListUtteranceAnalyticsDataPostBodySortBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AnalyticsUtteranceSortByName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public SortOrder Order { get; set; }
	}
	
	public class ListUtteranceMetricsPostBody
	{
		
		/// <summary>
		/// The date and time that marks the beginning of the range of time for which you want to see utterance metrics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// The date and time that marks the end of the range of time for which you want to see utterance metrics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public AnalyticsUtteranceMetric[] Metrics { get; set; }
		
		/// <summary>
		/// A list of objects, each of which contains specifications for organizing the results by time.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binBy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AnalyticsBinBySpecification[] BinBy { get; set; }
		
		/// <summary>
		/// <p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p> <ul> <li> <p> <code>UtteranceText</code> – The transcription of the utterance.</p> </li> <li> <p> <code>UtteranceState</code> – The state of the utterance. The possible states are detailed in <a href="https://docs.aws.amazon.com/analytics-key-definitions-utterances">Key definitions</a> in the user guide.</p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupBy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public AnalyticsUtteranceGroupBySpecification[] GroupBy { get; set; }
		
		/// <summary>
		/// <p>A list containing attributes related to the utterance that you want the response to return. The following attributes are possible:</p> <ul> <li> <p> <code>LastUsedIntent</code> – The last used intent at the time of the utterance.</p> </li> </ul>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AnalyticsUtteranceAttribute[] Attributes { get; set; }
		
		/// <summary>
		/// A list of objects, each of which describes a condition by which you want to filter the results.
		/// Minimum items: 1
		/// Maximum items: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public AnalyticsUtteranceFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>If the response from the ListUtteranceMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p> <p>Use the returned token in the nextToken parameter of a ListUtteranceMetrics request to return the next page of results. For a complete set of results, call the ListUtteranceMetrics operation until the nextToken returned in the response is null.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class SearchAssociatedTranscriptsPostBody
	{
		
		/// <summary>
		/// How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchOrder")]
		public SortOrder SearchOrder { get; set; }
		
		/// <summary>
		/// A list of filter objects.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AssociatedTranscriptFilter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If the response from the SearchAssociatedTranscriptsRequest operation contains more results than specified in the maxResults parameter, an index is returned in the response. Use that index in the nextIndex parameter to return the next page of results.
		/// Minimum: 0
		/// Maximum: 10000000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextIndex")]
		[System.ComponentModel.DataAnnotations.Range(0, 10000000)]
		public System.Nullable<System.Int32> NextIndex { get; set; }
	}
	
	public class StartTestExecutionPostBody
	{
		
		/// <summary>
		/// Contains information about the bot used for the test execution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public StartTestExecutionPostBodyTarget Target { get; set; }
		
		/// <summary>
		/// Indicates whether we use streaming or non-streaming APIs for the test set execution. For streaming, StartConversation Runtime API is used. Whereas, for non-streaming, RecognizeUtterance and RecognizeText Amazon Lex Runtime API are used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiMode")]
		public TestExecutionApiMode ApiMode { get; set; }
		
		/// <summary>
		/// Indicates whether audio or text is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testExecutionModality")]
		public TestSetModality TestExecutionModality { get; set; }
	}
	
	public class StartTestExecutionPostBodyTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="botAliasTarget")]
		public BotAliasTestExecutionTarget BotAliasTarget { get; set; }
	}
	
	public class StartTestSetGenerationPutBody
	{
		
		/// <summary>
		/// The test set name for the test set generation request.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?){1,100}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="testSetName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?){1,100}$")]
		public string TestSetName { get; set; }
		
		/// <summary>
		/// The test set description for the test set generation request.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// Contains information about the location in which the test set is stored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageLocation")]
		public StartTestSetGenerationPutBodyStorageLocation StorageLocation { get; set; }
		
		/// <summary>
		/// Contains information about the data source from which the test set is generated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="generationDataSource")]
		public StartTestSetGenerationPutBodyGenerationDataSource GenerationDataSource { get; set; }
		
		/// <summary>
		/// The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.
		/// Required
		/// Min length: 32
		/// Max length: 2048
		/// Pattern: ^arn:aws:iam::[0-9]{12}:role/.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:iam::[0-9]{12}:role/.*$")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can't use the <code>UpdateTestSet</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testSetTags")]
		public System.Collections.Generic.Dictionary<string, string> TestSetTags { get; set; }
	}
	
	public class StartTestSetGenerationPutBodyStorageLocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketName")]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Path")]
		public string S3Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
	}
	
	public class StartTestSetGenerationPutBodyGenerationDataSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="conversationLogsDataSource")]
		public ConversationLogsDataSource ConversationLogsDataSource { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
